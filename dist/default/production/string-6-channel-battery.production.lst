

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Tue Aug 29 11:02:01 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F15323
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	psect	text20,local,class=CODE,merge=1,delta=2
    31                           	psect	text21,local,class=CODE,merge=1,delta=2
    32                           	psect	text22,local,class=CODE,merge=1,delta=2
    33                           	psect	text23,local,class=CODE,merge=1,delta=2
    34                           	psect	text24,local,class=CODE,merge=1,delta=2
    35                           	psect	text25,local,class=CODE,merge=1,delta=2
    36                           	psect	text26,local,class=CODE,merge=1,delta=2
    37                           	psect	text27,local,class=CODE,merge=1,delta=2
    38                           	psect	text28,local,class=CODE,merge=1,delta=2
    39                           	psect	text29,local,class=CODE,merge=1,delta=2
    40                           	psect	text30,local,class=CODE,merge=1,delta=2
    41                           	psect	text31,local,class=CODE,merge=1,delta=2
    42                           	dabs	1,0x7E,2
    43  0000                     
    44                           ; Version 1.43
    45                           ; Generated 25/07/2017 GMT
    46                           ; 
    47                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC16F15323 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     	;# 
    79  0001                     	;# 
    80  0002                     	;# 
    81  0003                     	;# 
    82  0004                     	;# 
    83  0005                     	;# 
    84  0006                     	;# 
    85  0007                     	;# 
    86  0008                     	;# 
    87  0009                     	;# 
    88  000A                     	;# 
    89  000B                     	;# 
    90  000C                     	;# 
    91  000E                     	;# 
    92  0012                     	;# 
    93  0014                     	;# 
    94  0018                     	;# 
    95  001A                     	;# 
    96  009B                     	;# 
    97  009B                     	;# 
    98  009C                     	;# 
    99  009D                     	;# 
   100  009E                     	;# 
   101  009F                     	;# 
   102  0119                     	;# 
   103  0119                     	;# 
   104  0119                     	;# 
   105  011A                     	;# 
   106  011A                     	;# 
   107  011A                     	;# 
   108  011B                     	;# 
   109  011B                     	;# 
   110  011B                     	;# 
   111  011B                     	;# 
   112  011B                     	;# 
   113  011C                     	;# 
   114  011C                     	;# 
   115  011C                     	;# 
   116  011D                     	;# 
   117  011D                     	;# 
   118  011D                     	;# 
   119  011E                     	;# 
   120  011E                     	;# 
   121  011E                     	;# 
   122  011F                     	;# 
   123  011F                     	;# 
   124  011F                     	;# 
   125  011F                     	;# 
   126  011F                     	;# 
   127  018C                     	;# 
   128  018D                     	;# 
   129  018E                     	;# 
   130  018F                     	;# 
   131  0190                     	;# 
   132  0191                     	;# 
   133  0192                     	;# 
   134  020C                     	;# 
   135  020C                     	;# 
   136  020D                     	;# 
   137  020E                     	;# 
   138  020F                     	;# 
   139  020F                     	;# 
   140  0210                     	;# 
   141  0210                     	;# 
   142  0211                     	;# 
   143  0211                     	;# 
   144  028C                     	;# 
   145  028C                     	;# 
   146  028D                     	;# 
   147  028D                     	;# 
   148  028E                     	;# 
   149  028F                     	;# 
   150  0290                     	;# 
   151  0291                     	;# 
   152  030C                     	;# 
   153  030C                     	;# 
   154  030D                     	;# 
   155  030E                     	;# 
   156  030F                     	;# 
   157  0310                     	;# 
   158  0310                     	;# 
   159  0311                     	;# 
   160  0312                     	;# 
   161  0313                     	;# 
   162  0314                     	;# 
   163  0315                     	;# 
   164  0316                     	;# 
   165  0318                     	;# 
   166  0319                     	;# 
   167  031A                     	;# 
   168  031C                     	;# 
   169  031D                     	;# 
   170  031E                     	;# 
   171  038C                     	;# 
   172  038D                     	;# 
   173  038E                     	;# 
   174  058C                     	;# 
   175  058C                     	;# 
   176  058D                     	;# 
   177  058E                     	;# 
   178  058F                     	;# 
   179  058F                     	;# 
   180  0590                     	;# 
   181  0591                     	;# 
   182  0592                     	;# 
   183  0593                     	;# 
   184  059C                     	;# 
   185  059C                     	;# 
   186  059D                     	;# 
   187  059D                     	;# 
   188  059E                     	;# 
   189  059F                     	;# 
   190  060C                     	;# 
   191  060D                     	;# 
   192  060E                     	;# 
   193  060F                     	;# 
   194  0610                     	;# 
   195  0611                     	;# 
   196  0612                     	;# 
   197  0613                     	;# 
   198  0614                     	;# 
   199  070C                     	;# 
   200  070D                     	;# 
   201  070E                     	;# 
   202  070F                     	;# 
   203  0710                     	;# 
   204  0711                     	;# 
   205  0712                     	;# 
   206  0713                     	;# 
   207  0716                     	;# 
   208  0717                     	;# 
   209  0718                     	;# 
   210  0719                     	;# 
   211  071A                     	;# 
   212  071B                     	;# 
   213  071C                     	;# 
   214  071D                     	;# 
   215  0796                     	;# 
   216  0797                     	;# 
   217  0798                     	;# 
   218  0799                     	;# 
   219  079A                     	;# 
   220  079B                     	;# 
   221  080C                     	;# 
   222  080D                     	;# 
   223  080E                     	;# 
   224  080F                     	;# 
   225  0810                     	;# 
   226  0811                     	;# 
   227  0812                     	;# 
   228  0813                     	;# 
   229  0814                     	;# 
   230  081A                     	;# 
   231  081A                     	;# 
   232  081B                     	;# 
   233  081C                     	;# 
   234  081C                     	;# 
   235  081D                     	;# 
   236  081E                     	;# 
   237  081F                     	;# 
   238  088C                     	;# 
   239  088D                     	;# 
   240  088E                     	;# 
   241  088F                     	;# 
   242  0890                     	;# 
   243  0891                     	;# 
   244  0892                     	;# 
   245  0893                     	;# 
   246  0895                     	;# 
   247  0896                     	;# 
   248  090C                     	;# 
   249  090E                     	;# 
   250  090F                     	;# 
   251  091F                     	;# 
   252  098F                     	;# 
   253  098F                     	;# 
   254  0990                     	;# 
   255  0991                     	;# 
   256  0992                     	;# 
   257  0993                     	;# 
   258  0994                     	;# 
   259  0995                     	;# 
   260  0996                     	;# 
   261  0997                     	;# 
   262  1E0F                     	;# 
   263  1E10                     	;# 
   264  1E11                     	;# 
   265  1E12                     	;# 
   266  1E13                     	;# 
   267  1E14                     	;# 
   268  1E15                     	;# 
   269  1E16                     	;# 
   270  1E17                     	;# 
   271  1E18                     	;# 
   272  1E19                     	;# 
   273  1E1A                     	;# 
   274  1E1B                     	;# 
   275  1E1C                     	;# 
   276  1E1D                     	;# 
   277  1E1E                     	;# 
   278  1E1F                     	;# 
   279  1E20                     	;# 
   280  1E21                     	;# 
   281  1E22                     	;# 
   282  1E23                     	;# 
   283  1E24                     	;# 
   284  1E25                     	;# 
   285  1E26                     	;# 
   286  1E27                     	;# 
   287  1E28                     	;# 
   288  1E29                     	;# 
   289  1E2A                     	;# 
   290  1E2B                     	;# 
   291  1E2C                     	;# 
   292  1E2D                     	;# 
   293  1E2E                     	;# 
   294  1E2F                     	;# 
   295  1E30                     	;# 
   296  1E31                     	;# 
   297  1E32                     	;# 
   298  1E33                     	;# 
   299  1E34                     	;# 
   300  1E35                     	;# 
   301  1E36                     	;# 
   302  1E37                     	;# 
   303  1E8F                     	;# 
   304  1E90                     	;# 
   305  1E91                     	;# 
   306  1E92                     	;# 
   307  1E93                     	;# 
   308  1E9C                     	;# 
   309  1EA1                     	;# 
   310  1EA2                     	;# 
   311  1EB1                     	;# 
   312  1EBB                     	;# 
   313  1EBC                     	;# 
   314  1EBD                     	;# 
   315  1EBE                     	;# 
   316  1EC3                     	;# 
   317  1EC5                     	;# 
   318  1EC6                     	;# 
   319  1EC7                     	;# 
   320  1ECB                     	;# 
   321  1ECC                     	;# 
   322  1F10                     	;# 
   323  1F11                     	;# 
   324  1F12                     	;# 
   325  1F13                     	;# 
   326  1F14                     	;# 
   327  1F15                     	;# 
   328  1F20                     	;# 
   329  1F21                     	;# 
   330  1F22                     	;# 
   331  1F23                     	;# 
   332  1F24                     	;# 
   333  1F25                     	;# 
   334  1F38                     	;# 
   335  1F39                     	;# 
   336  1F3A                     	;# 
   337  1F3B                     	;# 
   338  1F3C                     	;# 
   339  1F3D                     	;# 
   340  1F3E                     	;# 
   341  1F3F                     	;# 
   342  1F4E                     	;# 
   343  1F4F                     	;# 
   344  1F50                     	;# 
   345  1F51                     	;# 
   346  1F52                     	;# 
   347  1F53                     	;# 
   348  1F54                     	;# 
   349  1F55                     	;# 
   350  1FE4                     	;# 
   351  1FE5                     	;# 
   352  1FE6                     	;# 
   353  1FE7                     	;# 
   354  1FE8                     	;# 
   355  1FE8                     	;# 
   356  1FE9                     	;# 
   357  1FEA                     	;# 
   358  1FEA                     	;# 
   359  1FEB                     	;# 
   360  1FED                     	;# 
   361  1FEE                     	;# 
   362  1FEF                     	;# 
   363  0000                     	;# 
   364  0001                     	;# 
   365  0002                     	;# 
   366  0003                     	;# 
   367  0004                     	;# 
   368  0005                     	;# 
   369  0006                     	;# 
   370  0007                     	;# 
   371  0008                     	;# 
   372  0009                     	;# 
   373  000A                     	;# 
   374  000B                     	;# 
   375  000C                     	;# 
   376  000E                     	;# 
   377  0012                     	;# 
   378  0014                     	;# 
   379  0018                     	;# 
   380  001A                     	;# 
   381  009B                     	;# 
   382  009B                     	;# 
   383  009C                     	;# 
   384  009D                     	;# 
   385  009E                     	;# 
   386  009F                     	;# 
   387  0119                     	;# 
   388  0119                     	;# 
   389  0119                     	;# 
   390  011A                     	;# 
   391  011A                     	;# 
   392  011A                     	;# 
   393  011B                     	;# 
   394  011B                     	;# 
   395  011B                     	;# 
   396  011B                     	;# 
   397  011B                     	;# 
   398  011C                     	;# 
   399  011C                     	;# 
   400  011C                     	;# 
   401  011D                     	;# 
   402  011D                     	;# 
   403  011D                     	;# 
   404  011E                     	;# 
   405  011E                     	;# 
   406  011E                     	;# 
   407  011F                     	;# 
   408  011F                     	;# 
   409  011F                     	;# 
   410  011F                     	;# 
   411  011F                     	;# 
   412  018C                     	;# 
   413  018D                     	;# 
   414  018E                     	;# 
   415  018F                     	;# 
   416  0190                     	;# 
   417  0191                     	;# 
   418  0192                     	;# 
   419  020C                     	;# 
   420  020C                     	;# 
   421  020D                     	;# 
   422  020E                     	;# 
   423  020F                     	;# 
   424  020F                     	;# 
   425  0210                     	;# 
   426  0210                     	;# 
   427  0211                     	;# 
   428  0211                     	;# 
   429  028C                     	;# 
   430  028C                     	;# 
   431  028D                     	;# 
   432  028D                     	;# 
   433  028E                     	;# 
   434  028F                     	;# 
   435  0290                     	;# 
   436  0291                     	;# 
   437  030C                     	;# 
   438  030C                     	;# 
   439  030D                     	;# 
   440  030E                     	;# 
   441  030F                     	;# 
   442  0310                     	;# 
   443  0310                     	;# 
   444  0311                     	;# 
   445  0312                     	;# 
   446  0313                     	;# 
   447  0314                     	;# 
   448  0315                     	;# 
   449  0316                     	;# 
   450  0318                     	;# 
   451  0319                     	;# 
   452  031A                     	;# 
   453  031C                     	;# 
   454  031D                     	;# 
   455  031E                     	;# 
   456  038C                     	;# 
   457  038D                     	;# 
   458  038E                     	;# 
   459  058C                     	;# 
   460  058C                     	;# 
   461  058D                     	;# 
   462  058E                     	;# 
   463  058F                     	;# 
   464  058F                     	;# 
   465  0590                     	;# 
   466  0591                     	;# 
   467  0592                     	;# 
   468  0593                     	;# 
   469  059C                     	;# 
   470  059C                     	;# 
   471  059D                     	;# 
   472  059D                     	;# 
   473  059E                     	;# 
   474  059F                     	;# 
   475  060C                     	;# 
   476  060D                     	;# 
   477  060E                     	;# 
   478  060F                     	;# 
   479  0610                     	;# 
   480  0611                     	;# 
   481  0612                     	;# 
   482  0613                     	;# 
   483  0614                     	;# 
   484  070C                     	;# 
   485  070D                     	;# 
   486  070E                     	;# 
   487  070F                     	;# 
   488  0710                     	;# 
   489  0711                     	;# 
   490  0712                     	;# 
   491  0713                     	;# 
   492  0716                     	;# 
   493  0717                     	;# 
   494  0718                     	;# 
   495  0719                     	;# 
   496  071A                     	;# 
   497  071B                     	;# 
   498  071C                     	;# 
   499  071D                     	;# 
   500  0796                     	;# 
   501  0797                     	;# 
   502  0798                     	;# 
   503  0799                     	;# 
   504  079A                     	;# 
   505  079B                     	;# 
   506  080C                     	;# 
   507  080D                     	;# 
   508  080E                     	;# 
   509  080F                     	;# 
   510  0810                     	;# 
   511  0811                     	;# 
   512  0812                     	;# 
   513  0813                     	;# 
   514  0814                     	;# 
   515  081A                     	;# 
   516  081A                     	;# 
   517  081B                     	;# 
   518  081C                     	;# 
   519  081C                     	;# 
   520  081D                     	;# 
   521  081E                     	;# 
   522  081F                     	;# 
   523  088C                     	;# 
   524  088D                     	;# 
   525  088E                     	;# 
   526  088F                     	;# 
   527  0890                     	;# 
   528  0891                     	;# 
   529  0892                     	;# 
   530  0893                     	;# 
   531  0895                     	;# 
   532  0896                     	;# 
   533  090C                     	;# 
   534  090E                     	;# 
   535  090F                     	;# 
   536  091F                     	;# 
   537  098F                     	;# 
   538  098F                     	;# 
   539  0990                     	;# 
   540  0991                     	;# 
   541  0992                     	;# 
   542  0993                     	;# 
   543  0994                     	;# 
   544  0995                     	;# 
   545  0996                     	;# 
   546  0997                     	;# 
   547  1E0F                     	;# 
   548  1E10                     	;# 
   549  1E11                     	;# 
   550  1E12                     	;# 
   551  1E13                     	;# 
   552  1E14                     	;# 
   553  1E15                     	;# 
   554  1E16                     	;# 
   555  1E17                     	;# 
   556  1E18                     	;# 
   557  1E19                     	;# 
   558  1E1A                     	;# 
   559  1E1B                     	;# 
   560  1E1C                     	;# 
   561  1E1D                     	;# 
   562  1E1E                     	;# 
   563  1E1F                     	;# 
   564  1E20                     	;# 
   565  1E21                     	;# 
   566  1E22                     	;# 
   567  1E23                     	;# 
   568  1E24                     	;# 
   569  1E25                     	;# 
   570  1E26                     	;# 
   571  1E27                     	;# 
   572  1E28                     	;# 
   573  1E29                     	;# 
   574  1E2A                     	;# 
   575  1E2B                     	;# 
   576  1E2C                     	;# 
   577  1E2D                     	;# 
   578  1E2E                     	;# 
   579  1E2F                     	;# 
   580  1E30                     	;# 
   581  1E31                     	;# 
   582  1E32                     	;# 
   583  1E33                     	;# 
   584  1E34                     	;# 
   585  1E35                     	;# 
   586  1E36                     	;# 
   587  1E37                     	;# 
   588  1E8F                     	;# 
   589  1E90                     	;# 
   590  1E91                     	;# 
   591  1E92                     	;# 
   592  1E93                     	;# 
   593  1E9C                     	;# 
   594  1EA1                     	;# 
   595  1EA2                     	;# 
   596  1EB1                     	;# 
   597  1EBB                     	;# 
   598  1EBC                     	;# 
   599  1EBD                     	;# 
   600  1EBE                     	;# 
   601  1EC3                     	;# 
   602  1EC5                     	;# 
   603  1EC6                     	;# 
   604  1EC7                     	;# 
   605  1ECB                     	;# 
   606  1ECC                     	;# 
   607  1F10                     	;# 
   608  1F11                     	;# 
   609  1F12                     	;# 
   610  1F13                     	;# 
   611  1F14                     	;# 
   612  1F15                     	;# 
   613  1F20                     	;# 
   614  1F21                     	;# 
   615  1F22                     	;# 
   616  1F23                     	;# 
   617  1F24                     	;# 
   618  1F25                     	;# 
   619  1F38                     	;# 
   620  1F39                     	;# 
   621  1F3A                     	;# 
   622  1F3B                     	;# 
   623  1F3C                     	;# 
   624  1F3D                     	;# 
   625  1F3E                     	;# 
   626  1F3F                     	;# 
   627  1F4E                     	;# 
   628  1F4F                     	;# 
   629  1F50                     	;# 
   630  1F51                     	;# 
   631  1F52                     	;# 
   632  1F53                     	;# 
   633  1F54                     	;# 
   634  1F55                     	;# 
   635  1FE4                     	;# 
   636  1FE5                     	;# 
   637  1FE6                     	;# 
   638  1FE7                     	;# 
   639  1FE8                     	;# 
   640  1FE8                     	;# 
   641  1FE9                     	;# 
   642  1FEA                     	;# 
   643  1FEA                     	;# 
   644  1FEB                     	;# 
   645  1FED                     	;# 
   646  1FEE                     	;# 
   647  1FEF                     	;# 
   648  0000                     	;# 
   649  0001                     	;# 
   650  0002                     	;# 
   651  0003                     	;# 
   652  0004                     	;# 
   653  0005                     	;# 
   654  0006                     	;# 
   655  0007                     	;# 
   656  0008                     	;# 
   657  0009                     	;# 
   658  000A                     	;# 
   659  000B                     	;# 
   660  000C                     	;# 
   661  000E                     	;# 
   662  0012                     	;# 
   663  0014                     	;# 
   664  0018                     	;# 
   665  001A                     	;# 
   666  009B                     	;# 
   667  009B                     	;# 
   668  009C                     	;# 
   669  009D                     	;# 
   670  009E                     	;# 
   671  009F                     	;# 
   672  0119                     	;# 
   673  0119                     	;# 
   674  0119                     	;# 
   675  011A                     	;# 
   676  011A                     	;# 
   677  011A                     	;# 
   678  011B                     	;# 
   679  011B                     	;# 
   680  011B                     	;# 
   681  011B                     	;# 
   682  011B                     	;# 
   683  011C                     	;# 
   684  011C                     	;# 
   685  011C                     	;# 
   686  011D                     	;# 
   687  011D                     	;# 
   688  011D                     	;# 
   689  011E                     	;# 
   690  011E                     	;# 
   691  011E                     	;# 
   692  011F                     	;# 
   693  011F                     	;# 
   694  011F                     	;# 
   695  011F                     	;# 
   696  011F                     	;# 
   697  018C                     	;# 
   698  018D                     	;# 
   699  018E                     	;# 
   700  018F                     	;# 
   701  0190                     	;# 
   702  0191                     	;# 
   703  0192                     	;# 
   704  020C                     	;# 
   705  020C                     	;# 
   706  020D                     	;# 
   707  020E                     	;# 
   708  020F                     	;# 
   709  020F                     	;# 
   710  0210                     	;# 
   711  0210                     	;# 
   712  0211                     	;# 
   713  0211                     	;# 
   714  028C                     	;# 
   715  028C                     	;# 
   716  028D                     	;# 
   717  028D                     	;# 
   718  028E                     	;# 
   719  028F                     	;# 
   720  0290                     	;# 
   721  0291                     	;# 
   722  030C                     	;# 
   723  030C                     	;# 
   724  030D                     	;# 
   725  030E                     	;# 
   726  030F                     	;# 
   727  0310                     	;# 
   728  0310                     	;# 
   729  0311                     	;# 
   730  0312                     	;# 
   731  0313                     	;# 
   732  0314                     	;# 
   733  0315                     	;# 
   734  0316                     	;# 
   735  0318                     	;# 
   736  0319                     	;# 
   737  031A                     	;# 
   738  031C                     	;# 
   739  031D                     	;# 
   740  031E                     	;# 
   741  038C                     	;# 
   742  038D                     	;# 
   743  038E                     	;# 
   744  058C                     	;# 
   745  058C                     	;# 
   746  058D                     	;# 
   747  058E                     	;# 
   748  058F                     	;# 
   749  058F                     	;# 
   750  0590                     	;# 
   751  0591                     	;# 
   752  0592                     	;# 
   753  0593                     	;# 
   754  059C                     	;# 
   755  059C                     	;# 
   756  059D                     	;# 
   757  059D                     	;# 
   758  059E                     	;# 
   759  059F                     	;# 
   760  060C                     	;# 
   761  060D                     	;# 
   762  060E                     	;# 
   763  060F                     	;# 
   764  0610                     	;# 
   765  0611                     	;# 
   766  0612                     	;# 
   767  0613                     	;# 
   768  0614                     	;# 
   769  070C                     	;# 
   770  070D                     	;# 
   771  070E                     	;# 
   772  070F                     	;# 
   773  0710                     	;# 
   774  0711                     	;# 
   775  0712                     	;# 
   776  0713                     	;# 
   777  0716                     	;# 
   778  0717                     	;# 
   779  0718                     	;# 
   780  0719                     	;# 
   781  071A                     	;# 
   782  071B                     	;# 
   783  071C                     	;# 
   784  071D                     	;# 
   785  0796                     	;# 
   786  0797                     	;# 
   787  0798                     	;# 
   788  0799                     	;# 
   789  079A                     	;# 
   790  079B                     	;# 
   791  080C                     	;# 
   792  080D                     	;# 
   793  080E                     	;# 
   794  080F                     	;# 
   795  0810                     	;# 
   796  0811                     	;# 
   797  0812                     	;# 
   798  0813                     	;# 
   799  0814                     	;# 
   800  081A                     	;# 
   801  081A                     	;# 
   802  081B                     	;# 
   803  081C                     	;# 
   804  081C                     	;# 
   805  081D                     	;# 
   806  081E                     	;# 
   807  081F                     	;# 
   808  088C                     	;# 
   809  088D                     	;# 
   810  088E                     	;# 
   811  088F                     	;# 
   812  0890                     	;# 
   813  0891                     	;# 
   814  0892                     	;# 
   815  0893                     	;# 
   816  0895                     	;# 
   817  0896                     	;# 
   818  090C                     	;# 
   819  090E                     	;# 
   820  090F                     	;# 
   821  091F                     	;# 
   822  098F                     	;# 
   823  098F                     	;# 
   824  0990                     	;# 
   825  0991                     	;# 
   826  0992                     	;# 
   827  0993                     	;# 
   828  0994                     	;# 
   829  0995                     	;# 
   830  0996                     	;# 
   831  0997                     	;# 
   832  1E0F                     	;# 
   833  1E10                     	;# 
   834  1E11                     	;# 
   835  1E12                     	;# 
   836  1E13                     	;# 
   837  1E14                     	;# 
   838  1E15                     	;# 
   839  1E16                     	;# 
   840  1E17                     	;# 
   841  1E18                     	;# 
   842  1E19                     	;# 
   843  1E1A                     	;# 
   844  1E1B                     	;# 
   845  1E1C                     	;# 
   846  1E1D                     	;# 
   847  1E1E                     	;# 
   848  1E1F                     	;# 
   849  1E20                     	;# 
   850  1E21                     	;# 
   851  1E22                     	;# 
   852  1E23                     	;# 
   853  1E24                     	;# 
   854  1E25                     	;# 
   855  1E26                     	;# 
   856  1E27                     	;# 
   857  1E28                     	;# 
   858  1E29                     	;# 
   859  1E2A                     	;# 
   860  1E2B                     	;# 
   861  1E2C                     	;# 
   862  1E2D                     	;# 
   863  1E2E                     	;# 
   864  1E2F                     	;# 
   865  1E30                     	;# 
   866  1E31                     	;# 
   867  1E32                     	;# 
   868  1E33                     	;# 
   869  1E34                     	;# 
   870  1E35                     	;# 
   871  1E36                     	;# 
   872  1E37                     	;# 
   873  1E8F                     	;# 
   874  1E90                     	;# 
   875  1E91                     	;# 
   876  1E92                     	;# 
   877  1E93                     	;# 
   878  1E9C                     	;# 
   879  1EA1                     	;# 
   880  1EA2                     	;# 
   881  1EB1                     	;# 
   882  1EBB                     	;# 
   883  1EBC                     	;# 
   884  1EBD                     	;# 
   885  1EBE                     	;# 
   886  1EC3                     	;# 
   887  1EC5                     	;# 
   888  1EC6                     	;# 
   889  1EC7                     	;# 
   890  1ECB                     	;# 
   891  1ECC                     	;# 
   892  1F10                     	;# 
   893  1F11                     	;# 
   894  1F12                     	;# 
   895  1F13                     	;# 
   896  1F14                     	;# 
   897  1F15                     	;# 
   898  1F20                     	;# 
   899  1F21                     	;# 
   900  1F22                     	;# 
   901  1F23                     	;# 
   902  1F24                     	;# 
   903  1F25                     	;# 
   904  1F38                     	;# 
   905  1F39                     	;# 
   906  1F3A                     	;# 
   907  1F3B                     	;# 
   908  1F3C                     	;# 
   909  1F3D                     	;# 
   910  1F3E                     	;# 
   911  1F3F                     	;# 
   912  1F4E                     	;# 
   913  1F4F                     	;# 
   914  1F50                     	;# 
   915  1F51                     	;# 
   916  1F52                     	;# 
   917  1F53                     	;# 
   918  1F54                     	;# 
   919  1F55                     	;# 
   920  1FE4                     	;# 
   921  1FE5                     	;# 
   922  1FE6                     	;# 
   923  1FE7                     	;# 
   924  1FE8                     	;# 
   925  1FE8                     	;# 
   926  1FE9                     	;# 
   927  1FEA                     	;# 
   928  1FEA                     	;# 
   929  1FEB                     	;# 
   930  1FED                     	;# 
   931  1FEE                     	;# 
   932  1FEF                     	;# 
   933  0000                     	;# 
   934  0001                     	;# 
   935  0002                     	;# 
   936  0003                     	;# 
   937  0004                     	;# 
   938  0005                     	;# 
   939  0006                     	;# 
   940  0007                     	;# 
   941  0008                     	;# 
   942  0009                     	;# 
   943  000A                     	;# 
   944  000B                     	;# 
   945  000C                     	;# 
   946  000E                     	;# 
   947  0012                     	;# 
   948  0014                     	;# 
   949  0018                     	;# 
   950  001A                     	;# 
   951  009B                     	;# 
   952  009B                     	;# 
   953  009C                     	;# 
   954  009D                     	;# 
   955  009E                     	;# 
   956  009F                     	;# 
   957  0119                     	;# 
   958  0119                     	;# 
   959  0119                     	;# 
   960  011A                     	;# 
   961  011A                     	;# 
   962  011A                     	;# 
   963  011B                     	;# 
   964  011B                     	;# 
   965  011B                     	;# 
   966  011B                     	;# 
   967  011B                     	;# 
   968  011C                     	;# 
   969  011C                     	;# 
   970  011C                     	;# 
   971  011D                     	;# 
   972  011D                     	;# 
   973  011D                     	;# 
   974  011E                     	;# 
   975  011E                     	;# 
   976  011E                     	;# 
   977  011F                     	;# 
   978  011F                     	;# 
   979  011F                     	;# 
   980  011F                     	;# 
   981  011F                     	;# 
   982  018C                     	;# 
   983  018D                     	;# 
   984  018E                     	;# 
   985  018F                     	;# 
   986  0190                     	;# 
   987  0191                     	;# 
   988  0192                     	;# 
   989  020C                     	;# 
   990  020C                     	;# 
   991  020D                     	;# 
   992  020E                     	;# 
   993  020F                     	;# 
   994  020F                     	;# 
   995  0210                     	;# 
   996  0210                     	;# 
   997  0211                     	;# 
   998  0211                     	;# 
   999  028C                     	;# 
  1000  028C                     	;# 
  1001  028D                     	;# 
  1002  028D                     	;# 
  1003  028E                     	;# 
  1004  028F                     	;# 
  1005  0290                     	;# 
  1006  0291                     	;# 
  1007  030C                     	;# 
  1008  030C                     	;# 
  1009  030D                     	;# 
  1010  030E                     	;# 
  1011  030F                     	;# 
  1012  0310                     	;# 
  1013  0310                     	;# 
  1014  0311                     	;# 
  1015  0312                     	;# 
  1016  0313                     	;# 
  1017  0314                     	;# 
  1018  0315                     	;# 
  1019  0316                     	;# 
  1020  0318                     	;# 
  1021  0319                     	;# 
  1022  031A                     	;# 
  1023  031C                     	;# 
  1024  031D                     	;# 
  1025  031E                     	;# 
  1026  038C                     	;# 
  1027  038D                     	;# 
  1028  038E                     	;# 
  1029  058C                     	;# 
  1030  058C                     	;# 
  1031  058D                     	;# 
  1032  058E                     	;# 
  1033  058F                     	;# 
  1034  058F                     	;# 
  1035  0590                     	;# 
  1036  0591                     	;# 
  1037  0592                     	;# 
  1038  0593                     	;# 
  1039  059C                     	;# 
  1040  059C                     	;# 
  1041  059D                     	;# 
  1042  059D                     	;# 
  1043  059E                     	;# 
  1044  059F                     	;# 
  1045  060C                     	;# 
  1046  060D                     	;# 
  1047  060E                     	;# 
  1048  060F                     	;# 
  1049  0610                     	;# 
  1050  0611                     	;# 
  1051  0612                     	;# 
  1052  0613                     	;# 
  1053  0614                     	;# 
  1054  070C                     	;# 
  1055  070D                     	;# 
  1056  070E                     	;# 
  1057  070F                     	;# 
  1058  0710                     	;# 
  1059  0711                     	;# 
  1060  0712                     	;# 
  1061  0713                     	;# 
  1062  0716                     	;# 
  1063  0717                     	;# 
  1064  0718                     	;# 
  1065  0719                     	;# 
  1066  071A                     	;# 
  1067  071B                     	;# 
  1068  071C                     	;# 
  1069  071D                     	;# 
  1070  0796                     	;# 
  1071  0797                     	;# 
  1072  0798                     	;# 
  1073  0799                     	;# 
  1074  079A                     	;# 
  1075  079B                     	;# 
  1076  080C                     	;# 
  1077  080D                     	;# 
  1078  080E                     	;# 
  1079  080F                     	;# 
  1080  0810                     	;# 
  1081  0811                     	;# 
  1082  0812                     	;# 
  1083  0813                     	;# 
  1084  0814                     	;# 
  1085  081A                     	;# 
  1086  081A                     	;# 
  1087  081B                     	;# 
  1088  081C                     	;# 
  1089  081C                     	;# 
  1090  081D                     	;# 
  1091  081E                     	;# 
  1092  081F                     	;# 
  1093  088C                     	;# 
  1094  088D                     	;# 
  1095  088E                     	;# 
  1096  088F                     	;# 
  1097  0890                     	;# 
  1098  0891                     	;# 
  1099  0892                     	;# 
  1100  0893                     	;# 
  1101  0895                     	;# 
  1102  0896                     	;# 
  1103  090C                     	;# 
  1104  090E                     	;# 
  1105  090F                     	;# 
  1106  091F                     	;# 
  1107  098F                     	;# 
  1108  098F                     	;# 
  1109  0990                     	;# 
  1110  0991                     	;# 
  1111  0992                     	;# 
  1112  0993                     	;# 
  1113  0994                     	;# 
  1114  0995                     	;# 
  1115  0996                     	;# 
  1116  0997                     	;# 
  1117  1E0F                     	;# 
  1118  1E10                     	;# 
  1119  1E11                     	;# 
  1120  1E12                     	;# 
  1121  1E13                     	;# 
  1122  1E14                     	;# 
  1123  1E15                     	;# 
  1124  1E16                     	;# 
  1125  1E17                     	;# 
  1126  1E18                     	;# 
  1127  1E19                     	;# 
  1128  1E1A                     	;# 
  1129  1E1B                     	;# 
  1130  1E1C                     	;# 
  1131  1E1D                     	;# 
  1132  1E1E                     	;# 
  1133  1E1F                     	;# 
  1134  1E20                     	;# 
  1135  1E21                     	;# 
  1136  1E22                     	;# 
  1137  1E23                     	;# 
  1138  1E24                     	;# 
  1139  1E25                     	;# 
  1140  1E26                     	;# 
  1141  1E27                     	;# 
  1142  1E28                     	;# 
  1143  1E29                     	;# 
  1144  1E2A                     	;# 
  1145  1E2B                     	;# 
  1146  1E2C                     	;# 
  1147  1E2D                     	;# 
  1148  1E2E                     	;# 
  1149  1E2F                     	;# 
  1150  1E30                     	;# 
  1151  1E31                     	;# 
  1152  1E32                     	;# 
  1153  1E33                     	;# 
  1154  1E34                     	;# 
  1155  1E35                     	;# 
  1156  1E36                     	;# 
  1157  1E37                     	;# 
  1158  1E8F                     	;# 
  1159  1E90                     	;# 
  1160  1E91                     	;# 
  1161  1E92                     	;# 
  1162  1E93                     	;# 
  1163  1E9C                     	;# 
  1164  1EA1                     	;# 
  1165  1EA2                     	;# 
  1166  1EB1                     	;# 
  1167  1EBB                     	;# 
  1168  1EBC                     	;# 
  1169  1EBD                     	;# 
  1170  1EBE                     	;# 
  1171  1EC3                     	;# 
  1172  1EC5                     	;# 
  1173  1EC6                     	;# 
  1174  1EC7                     	;# 
  1175  1ECB                     	;# 
  1176  1ECC                     	;# 
  1177  1F10                     	;# 
  1178  1F11                     	;# 
  1179  1F12                     	;# 
  1180  1F13                     	;# 
  1181  1F14                     	;# 
  1182  1F15                     	;# 
  1183  1F20                     	;# 
  1184  1F21                     	;# 
  1185  1F22                     	;# 
  1186  1F23                     	;# 
  1187  1F24                     	;# 
  1188  1F25                     	;# 
  1189  1F38                     	;# 
  1190  1F39                     	;# 
  1191  1F3A                     	;# 
  1192  1F3B                     	;# 
  1193  1F3C                     	;# 
  1194  1F3D                     	;# 
  1195  1F3E                     	;# 
  1196  1F3F                     	;# 
  1197  1F4E                     	;# 
  1198  1F4F                     	;# 
  1199  1F50                     	;# 
  1200  1F51                     	;# 
  1201  1F52                     	;# 
  1202  1F53                     	;# 
  1203  1F54                     	;# 
  1204  1F55                     	;# 
  1205  1FE4                     	;# 
  1206  1FE5                     	;# 
  1207  1FE6                     	;# 
  1208  1FE7                     	;# 
  1209  1FE8                     	;# 
  1210  1FE8                     	;# 
  1211  1FE9                     	;# 
  1212  1FEA                     	;# 
  1213  1FEA                     	;# 
  1214  1FEB                     	;# 
  1215  1FED                     	;# 
  1216  1FEE                     	;# 
  1217  1FEF                     	;# 
  1218  0000                     	;# 
  1219  0001                     	;# 
  1220  0002                     	;# 
  1221  0003                     	;# 
  1222  0004                     	;# 
  1223  0005                     	;# 
  1224  0006                     	;# 
  1225  0007                     	;# 
  1226  0008                     	;# 
  1227  0009                     	;# 
  1228  000A                     	;# 
  1229  000B                     	;# 
  1230  000C                     	;# 
  1231  000E                     	;# 
  1232  0012                     	;# 
  1233  0014                     	;# 
  1234  0018                     	;# 
  1235  001A                     	;# 
  1236  009B                     	;# 
  1237  009B                     	;# 
  1238  009C                     	;# 
  1239  009D                     	;# 
  1240  009E                     	;# 
  1241  009F                     	;# 
  1242  0119                     	;# 
  1243  0119                     	;# 
  1244  0119                     	;# 
  1245  011A                     	;# 
  1246  011A                     	;# 
  1247  011A                     	;# 
  1248  011B                     	;# 
  1249  011B                     	;# 
  1250  011B                     	;# 
  1251  011B                     	;# 
  1252  011B                     	;# 
  1253  011C                     	;# 
  1254  011C                     	;# 
  1255  011C                     	;# 
  1256  011D                     	;# 
  1257  011D                     	;# 
  1258  011D                     	;# 
  1259  011E                     	;# 
  1260  011E                     	;# 
  1261  011E                     	;# 
  1262  011F                     	;# 
  1263  011F                     	;# 
  1264  011F                     	;# 
  1265  011F                     	;# 
  1266  011F                     	;# 
  1267  018C                     	;# 
  1268  018D                     	;# 
  1269  018E                     	;# 
  1270  018F                     	;# 
  1271  0190                     	;# 
  1272  0191                     	;# 
  1273  0192                     	;# 
  1274  020C                     	;# 
  1275  020C                     	;# 
  1276  020D                     	;# 
  1277  020E                     	;# 
  1278  020F                     	;# 
  1279  020F                     	;# 
  1280  0210                     	;# 
  1281  0210                     	;# 
  1282  0211                     	;# 
  1283  0211                     	;# 
  1284  028C                     	;# 
  1285  028C                     	;# 
  1286  028D                     	;# 
  1287  028D                     	;# 
  1288  028E                     	;# 
  1289  028F                     	;# 
  1290  0290                     	;# 
  1291  0291                     	;# 
  1292  030C                     	;# 
  1293  030C                     	;# 
  1294  030D                     	;# 
  1295  030E                     	;# 
  1296  030F                     	;# 
  1297  0310                     	;# 
  1298  0310                     	;# 
  1299  0311                     	;# 
  1300  0312                     	;# 
  1301  0313                     	;# 
  1302  0314                     	;# 
  1303  0315                     	;# 
  1304  0316                     	;# 
  1305  0318                     	;# 
  1306  0319                     	;# 
  1307  031A                     	;# 
  1308  031C                     	;# 
  1309  031D                     	;# 
  1310  031E                     	;# 
  1311  038C                     	;# 
  1312  038D                     	;# 
  1313  038E                     	;# 
  1314  058C                     	;# 
  1315  058C                     	;# 
  1316  058D                     	;# 
  1317  058E                     	;# 
  1318  058F                     	;# 
  1319  058F                     	;# 
  1320  0590                     	;# 
  1321  0591                     	;# 
  1322  0592                     	;# 
  1323  0593                     	;# 
  1324  059C                     	;# 
  1325  059C                     	;# 
  1326  059D                     	;# 
  1327  059D                     	;# 
  1328  059E                     	;# 
  1329  059F                     	;# 
  1330  060C                     	;# 
  1331  060D                     	;# 
  1332  060E                     	;# 
  1333  060F                     	;# 
  1334  0610                     	;# 
  1335  0611                     	;# 
  1336  0612                     	;# 
  1337  0613                     	;# 
  1338  0614                     	;# 
  1339  070C                     	;# 
  1340  070D                     	;# 
  1341  070E                     	;# 
  1342  070F                     	;# 
  1343  0710                     	;# 
  1344  0711                     	;# 
  1345  0712                     	;# 
  1346  0713                     	;# 
  1347  0716                     	;# 
  1348  0717                     	;# 
  1349  0718                     	;# 
  1350  0719                     	;# 
  1351  071A                     	;# 
  1352  071B                     	;# 
  1353  071C                     	;# 
  1354  071D                     	;# 
  1355  0796                     	;# 
  1356  0797                     	;# 
  1357  0798                     	;# 
  1358  0799                     	;# 
  1359  079A                     	;# 
  1360  079B                     	;# 
  1361  080C                     	;# 
  1362  080D                     	;# 
  1363  080E                     	;# 
  1364  080F                     	;# 
  1365  0810                     	;# 
  1366  0811                     	;# 
  1367  0812                     	;# 
  1368  0813                     	;# 
  1369  0814                     	;# 
  1370  081A                     	;# 
  1371  081A                     	;# 
  1372  081B                     	;# 
  1373  081C                     	;# 
  1374  081C                     	;# 
  1375  081D                     	;# 
  1376  081E                     	;# 
  1377  081F                     	;# 
  1378  088C                     	;# 
  1379  088D                     	;# 
  1380  088E                     	;# 
  1381  088F                     	;# 
  1382  0890                     	;# 
  1383  0891                     	;# 
  1384  0892                     	;# 
  1385  0893                     	;# 
  1386  0895                     	;# 
  1387  0896                     	;# 
  1388  090C                     	;# 
  1389  090E                     	;# 
  1390  090F                     	;# 
  1391  091F                     	;# 
  1392  098F                     	;# 
  1393  098F                     	;# 
  1394  0990                     	;# 
  1395  0991                     	;# 
  1396  0992                     	;# 
  1397  0993                     	;# 
  1398  0994                     	;# 
  1399  0995                     	;# 
  1400  0996                     	;# 
  1401  0997                     	;# 
  1402  1E0F                     	;# 
  1403  1E10                     	;# 
  1404  1E11                     	;# 
  1405  1E12                     	;# 
  1406  1E13                     	;# 
  1407  1E14                     	;# 
  1408  1E15                     	;# 
  1409  1E16                     	;# 
  1410  1E17                     	;# 
  1411  1E18                     	;# 
  1412  1E19                     	;# 
  1413  1E1A                     	;# 
  1414  1E1B                     	;# 
  1415  1E1C                     	;# 
  1416  1E1D                     	;# 
  1417  1E1E                     	;# 
  1418  1E1F                     	;# 
  1419  1E20                     	;# 
  1420  1E21                     	;# 
  1421  1E22                     	;# 
  1422  1E23                     	;# 
  1423  1E24                     	;# 
  1424  1E25                     	;# 
  1425  1E26                     	;# 
  1426  1E27                     	;# 
  1427  1E28                     	;# 
  1428  1E29                     	;# 
  1429  1E2A                     	;# 
  1430  1E2B                     	;# 
  1431  1E2C                     	;# 
  1432  1E2D                     	;# 
  1433  1E2E                     	;# 
  1434  1E2F                     	;# 
  1435  1E30                     	;# 
  1436  1E31                     	;# 
  1437  1E32                     	;# 
  1438  1E33                     	;# 
  1439  1E34                     	;# 
  1440  1E35                     	;# 
  1441  1E36                     	;# 
  1442  1E37                     	;# 
  1443  1E8F                     	;# 
  1444  1E90                     	;# 
  1445  1E91                     	;# 
  1446  1E92                     	;# 
  1447  1E93                     	;# 
  1448  1E9C                     	;# 
  1449  1EA1                     	;# 
  1450  1EA2                     	;# 
  1451  1EB1                     	;# 
  1452  1EBB                     	;# 
  1453  1EBC                     	;# 
  1454  1EBD                     	;# 
  1455  1EBE                     	;# 
  1456  1EC3                     	;# 
  1457  1EC5                     	;# 
  1458  1EC6                     	;# 
  1459  1EC7                     	;# 
  1460  1ECB                     	;# 
  1461  1ECC                     	;# 
  1462  1F10                     	;# 
  1463  1F11                     	;# 
  1464  1F12                     	;# 
  1465  1F13                     	;# 
  1466  1F14                     	;# 
  1467  1F15                     	;# 
  1468  1F20                     	;# 
  1469  1F21                     	;# 
  1470  1F22                     	;# 
  1471  1F23                     	;# 
  1472  1F24                     	;# 
  1473  1F25                     	;# 
  1474  1F38                     	;# 
  1475  1F39                     	;# 
  1476  1F3A                     	;# 
  1477  1F3B                     	;# 
  1478  1F3C                     	;# 
  1479  1F3D                     	;# 
  1480  1F3E                     	;# 
  1481  1F3F                     	;# 
  1482  1F4E                     	;# 
  1483  1F4F                     	;# 
  1484  1F50                     	;# 
  1485  1F51                     	;# 
  1486  1F52                     	;# 
  1487  1F53                     	;# 
  1488  1F54                     	;# 
  1489  1F55                     	;# 
  1490  1FE4                     	;# 
  1491  1FE5                     	;# 
  1492  1FE6                     	;# 
  1493  1FE7                     	;# 
  1494  1FE8                     	;# 
  1495  1FE8                     	;# 
  1496  1FE9                     	;# 
  1497  1FEA                     	;# 
  1498  1FEA                     	;# 
  1499  1FEB                     	;# 
  1500  1FED                     	;# 
  1501  1FEE                     	;# 
  1502  1FEF                     	;# 
  1503                           
  1504                           	psect	stringtext1
  1505  03C2                     __pstringtext1:	
  1506  03C2                     cw_init@cw_bat_config_info:	
  1507  03C2  3414               	retlw	20
  1508  03C3  34A6               	retlw	166
  1509  03C4  3470               	retlw	112
  1510  03C5  346C               	retlw	108
  1511  03C6  346C               	retlw	108
  1512  03C7  3467               	retlw	103
  1513  03C8  3464               	retlw	100
  1514  03C9  3462               	retlw	98
  1515  03CA  3460               	retlw	96
  1516  03CB  345C               	retlw	92
  1517  03CC  3459               	retlw	89
  1518  03CD  344E               	retlw	78
  1519  03CE  3450               	retlw	80
  1520  03CF  3442               	retlw	66
  1521  03D0  342E               	retlw	46
  1522  03D1  3426               	retlw	38
  1523  03D2  3425               	retlw	37
  1524  03D3  3424               	retlw	36
  1525  03D4  3427               	retlw	39
  1526  03D5  342E               	retlw	46
  1527  03D6  3441               	retlw	65
  1528  03D7  345A               	retlw	90
  1529  03D8  346D               	retlw	109
  1530  03D9  344C               	retlw	76
  1531  03DA  3439               	retlw	57
  1532  03DB  34D7               	retlw	215
  1533  03DC  3406               	retlw	6
  1534  03DD  3466               	retlw	102
  1535  03DE  3400               	retlw	0
  1536  03DF  3401               	retlw	1
  1537  03E0  3405               	retlw	5
  1538  03E1  3434               	retlw	52
  1539  03E2  3461               	retlw	97
  1540  03E3  3476               	retlw	118
  1541  03E4  3479               	retlw	121
  1542  03E5  347D               	retlw	125
  1543  03E6  3442               	retlw	66
  1544  03E7  341E               	retlw	30
  1545  03E8  34A4               	retlw	164
  1546  03E9  3400               	retlw	0
  1547  03EA  3427               	retlw	39
  1548  03EB  345A               	retlw	90
  1549  03EC  3452               	retlw	82
  1550  03ED  3487               	retlw	135
  1551  03EE  348F               	retlw	143
  1552  03EF  3491               	retlw	145
  1553  03F0  3494               	retlw	148
  1554  03F1  3452               	retlw	82
  1555  03F2  3482               	retlw	130
  1556  03F3  348C               	retlw	140
  1557  03F4  3492               	retlw	146
  1558  03F5  3496               	retlw	150
  1559  03F6  342B               	retlw	43
  1560  03F7  3459               	retlw	89
  1561  03F8  346E               	retlw	110
  1562  03F9  34CB               	retlw	203
  1563  03FA  342F               	retlw	47
  1564  03FB  347D               	retlw	125
  1565  03FC  3472               	retlw	114
  1566  03FD  34A5               	retlw	165
  1567  03FE  34B5               	retlw	181
  1568  03FF  34C1               	retlw	193
  1569  0400  3494               	retlw	148
  1570  0401  3499               	retlw	153
  1571  0402                     __end_ofcw_init@cw_bat_config_info:	
  1572                           
  1573                           	psect	stringtext2
  1574  0382                     __pstringtext2:	
  1575  0382                     cw_update_config_info@cw_bat_config_info:	
  1576  0382  3414               	retlw	20
  1577  0383  34A6               	retlw	166
  1578  0384  3470               	retlw	112
  1579  0385  346C               	retlw	108
  1580  0386  346C               	retlw	108
  1581  0387  3467               	retlw	103
  1582  0388  3464               	retlw	100
  1583  0389  3462               	retlw	98
  1584  038A  3460               	retlw	96
  1585  038B  345C               	retlw	92
  1586  038C  3459               	retlw	89
  1587  038D  344E               	retlw	78
  1588  038E  3450               	retlw	80
  1589  038F  3442               	retlw	66
  1590  0390  342E               	retlw	46
  1591  0391  3426               	retlw	38
  1592  0392  3425               	retlw	37
  1593  0393  3424               	retlw	36
  1594  0394  3427               	retlw	39
  1595  0395  342E               	retlw	46
  1596  0396  3441               	retlw	65
  1597  0397  345A               	retlw	90
  1598  0398  346D               	retlw	109
  1599  0399  344C               	retlw	76
  1600  039A  3439               	retlw	57
  1601  039B  34D7               	retlw	215
  1602  039C  3406               	retlw	6
  1603  039D  3466               	retlw	102
  1604  039E  3400               	retlw	0
  1605  039F  3401               	retlw	1
  1606  03A0  3405               	retlw	5
  1607  03A1  3434               	retlw	52
  1608  03A2  3461               	retlw	97
  1609  03A3  3476               	retlw	118
  1610  03A4  3479               	retlw	121
  1611  03A5  347D               	retlw	125
  1612  03A6  3442               	retlw	66
  1613  03A7  341E               	retlw	30
  1614  03A8  34A4               	retlw	164
  1615  03A9  3400               	retlw	0
  1616  03AA  3427               	retlw	39
  1617  03AB  345A               	retlw	90
  1618  03AC  3452               	retlw	82
  1619  03AD  3487               	retlw	135
  1620  03AE  348F               	retlw	143
  1621  03AF  3491               	retlw	145
  1622  03B0  3494               	retlw	148
  1623  03B1  3452               	retlw	82
  1624  03B2  3482               	retlw	130
  1625  03B3  348C               	retlw	140
  1626  03B4  3492               	retlw	146
  1627  03B5  3496               	retlw	150
  1628  03B6  342B               	retlw	43
  1629  03B7  3459               	retlw	89
  1630  03B8  346E               	retlw	110
  1631  03B9  34CB               	retlw	203
  1632  03BA  342F               	retlw	47
  1633  03BB  347D               	retlw	125
  1634  03BC  3472               	retlw	114
  1635  03BD  34A5               	retlw	165
  1636  03BE  34B5               	retlw	181
  1637  03BF  34C1               	retlw	193
  1638  03C0  3494               	retlw	148
  1639  03C1  3499               	retlw	153
  1640  03C2                     __end_ofcw_update_config_info@cw_bat_config_info:	
  1641  000E                     _PORTCbits	set	14
  1642  0014                     _TRISCbits	set	20
  1643  0018                     _LATAbits	set	24
  1644  001A                     _LATCbits	set	26
  1645  0014                     _TRISC	set	20
  1646  0012                     _TRISA	set	18
  1647  001A                     _LATC	set	26
  1648  0018                     _LATA	set	24
  1649  005F                     _GIE	set	95
  1650  011A                     _TX1REG	set	282
  1651  0119                     _RC1REG	set	281
  1652  011D                     _RC1STAbits	set	285
  1653  011C                     _SP1BRGH	set	284
  1654  011B                     _SP1BRGL	set	283
  1655  011E                     _TX1STA	set	286
  1656  011D                     _RC1STA	set	285
  1657  011F                     _BAUD1CON	set	287
  1658  070F                     _PIR3bits	set	1807
  1659  0892                     _OSCTUNE	set	2194
  1660  0890                     _OSCSTAT	set	2192
  1661  0893                     _OSCFRQ	set	2195
  1662  0891                     _OSCEN	set	2193
  1663  088F                     _OSCCON3	set	2191
  1664  088D                     _OSCCON1	set	2189
  1665  4480                     _PLLR	set	17536
  1666  1ECB                     _RX1DTPPSbits	set	7883
  1667  1E8F                     _PPSLOCKbits	set	7823
  1668  1E8F                     _PPSLOCK	set	7823
  1669  1F24                     _RC4PPS	set	7972
  1670  1F50                     _ODCONC	set	8016
  1671  1F3A                     _ODCONA	set	7994
  1672  1F4F                     _WPUC	set	8015
  1673  1F39                     _WPUA	set	7993
  1674  1F38                     _ANSELA	set	7992
  1675  1F4E                     _ANSELC	set	8014
  1676                           
  1677                           ; #config settings
  1678  0000                     
  1679                           	psect	cinit
  1680  07F3                     start_initialization:	
  1681  07F3                     __initialization:	
  1682                           
  1683                           ; Clear objects allocated to BANK0
  1684  07F3  0140               	movlb	0	; select bank0
  1685  07F4  01C7               	clrf	__pbssBANK0& (0+127)
  1686  07F5  01C8               	clrf	(__pbssBANK0+1)& (0+127)
  1687  07F6  01C9               	clrf	(__pbssBANK0+2)& (0+127)
  1688  07F7  01CA               	clrf	(__pbssBANK0+3)& (0+127)
  1689  07F8  01CB               	clrf	(__pbssBANK0+4)& (0+127)
  1690  07F9  01CC               	clrf	(__pbssBANK0+5)& (0+127)
  1691  07FA  01CD               	clrf	(__pbssBANK0+6)& (0+127)
  1692  07FB  01CE               	clrf	(__pbssBANK0+7)& (0+127)
  1693  07FC  01CF               	clrf	(__pbssBANK0+8)& (0+127)
  1694  07FD  01D0               	clrf	(__pbssBANK0+9)& (0+127)
  1695  07FE                     end_of_initialization:	
  1696                           ;End of C runtime variable initialization code
  1697                           
  1698  07FE                     __end_of__initialization:	
  1699  07FE  0140               	movlb	0
  1700  07FF  2C8F               	ljmp	_main	;jump to C main() function
  1701                           
  1702                           	psect	bssBANK0
  1703  0047                     __pbssBANK0:	
  1704  0047                     _cw_bat:	
  1705  0047                     	ds	6
  1706  004D                     cw_get_vol@F80:	
  1707  004D                     	ds	2
  1708  004F                     _reset_loop:	
  1709  004F                     	ds	1
  1710  0050                     _CHARGE:	
  1711  0050                     	ds	1
  1712                           
  1713                           	psect	cstackCOMMON
  1714  0070                     __pcstackCOMMON:	
  1715  0070                     ?_PIN_MANAGER_Initialize:	
  1716  0070                     ??_PIN_MANAGER_Initialize:	
  1717                           ; 1 bytes @ 0x0
  1718                           
  1719  0070                     ?_OSCILLATOR_Initialize:	
  1720                           ; 1 bytes @ 0x0
  1721                           
  1722  0070                     ??_OSCILLATOR_Initialize:	
  1723                           ; 1 bytes @ 0x0
  1724                           
  1725  0070                     ?_cw_bat_init:	
  1726                           ; 1 bytes @ 0x0
  1727                           
  1728  0070                     ?_cw_bat_work:	
  1729                           ; 1 bytes @ 0x0
  1730                           
  1731  0070                     ?_CW_Delay10ms:	
  1732                           ; 1 bytes @ 0x0
  1733                           
  1734  0070                     ?_EUSART1_Initialize:	
  1735                           ; 1 bytes @ 0x0
  1736                           
  1737  0070                     ??_EUSART1_Initialize:	
  1738                           ; 1 bytes @ 0x0
  1739                           
  1740  0070                     ?_EUSART1_Write:	
  1741                           ; 1 bytes @ 0x0
  1742                           
  1743  0070                     ??_EUSART1_Write:	
  1744                           ; 1 bytes @ 0x0
  1745                           
  1746  0070                     ?_SYSTEM_Initialize:	
  1747                           ; 1 bytes @ 0x0
  1748                           
  1749  0070                     ?_main:	
  1750                           ; 1 bytes @ 0x0
  1751                           
  1752  0070                     ?_CW_Delay100us:	
  1753                           ; 1 bytes @ 0x0
  1754                           
  1755  0070                     ??_CW_Delay100us:	
  1756                           ; 1 bytes @ 0x0
  1757                           
  1758  0070                     ?_cw_update_config_info:	
  1759                           ; 1 bytes @ 0x0
  1760                           
  1761  0070                     ?_cw_init:	
  1762                           ; 1 bytes @ 0x0
  1763                           
  1764  0070                     ?_update_capacity:	
  1765                           ; 1 bytes @ 0x0
  1766                           
  1767  0070                     ?_update_vol:	
  1768                           ; 1 bytes @ 0x0
  1769                           
  1770  0070                     ?_update_usb_online:	
  1771                           ; 1 bytes @ 0x0
  1772                           
  1773  0070                     ??_update_usb_online:	
  1774                           ; 1 bytes @ 0x0
  1775                           
  1776  0070                     ?_Delay10us:	
  1777                           ; 1 bytes @ 0x0
  1778                           
  1779  0070                     ??_Delay10us:	
  1780                           ; 1 bytes @ 0x0
  1781                           
  1782  0070                     ?_start:	
  1783                           ; 1 bytes @ 0x0
  1784                           
  1785  0070                     ?_stop:	
  1786                           ; 1 bytes @ 0x0
  1787                           
  1788  0070                     ?_s_ack:	
  1789                           ; 1 bytes @ 0x0
  1790                           
  1791  0070                     ?_sn_ack:	
  1792                           ; 1 bytes @ 0x0
  1793                           
  1794  0070                     ?_write_byte:	
  1795                           ; 1 bytes @ 0x0
  1796                           
  1797  0070                     ?_read_byte:	
  1798                           ; 1 bytes @ 0x0
  1799                           
  1800  0070                     ?___lmul:	
  1801                           ; 1 bytes @ 0x0
  1802                           
  1803  0070                     EUSART1_Write@txData:	
  1804                           ; 4 bytes @ 0x0
  1805                           
  1806  0070                     PIN_MANAGER_Initialize@state:	
  1807                           ; 1 bytes @ 0x0
  1808                           
  1809  0070                     CW_Delay10ms@c:	
  1810                           ; 1 bytes @ 0x0
  1811                           
  1812  0070                     ___lmul@multiplier:	
  1813                           ; 2 bytes @ 0x0
  1814                           
  1815                           
  1816                           ; 4 bytes @ 0x0
  1817  0070                     	ds	1
  1818  0071                     ??_SYSTEM_Initialize:	
  1819  0071                     CW_Delay100us@a:	
  1820                           ; 1 bytes @ 0x1
  1821                           
  1822  0071                     Delay10us@a:	
  1823                           ; 1 bytes @ 0x1
  1824                           
  1825                           
  1826                           ; 1 bytes @ 0x1
  1827  0071                     	ds	1
  1828  0072                     ??_CW_Delay10ms:	
  1829  0072                     CW_Delay100us@b:	
  1830                           ; 1 bytes @ 0x2
  1831                           
  1832  0072                     Delay10us@b:	
  1833                           ; 1 bytes @ 0x2
  1834                           
  1835                           
  1836                           ; 1 bytes @ 0x2
  1837  0072                     	ds	1
  1838  0073                     CW_Delay10ms@a:	
  1839  0073                     CW_Delay100us@i:	
  1840                           ; 1 bytes @ 0x3
  1841                           
  1842  0073                     Delay10us@i:	
  1843                           ; 1 bytes @ 0x3
  1844                           
  1845                           
  1846                           ; 1 bytes @ 0x3
  1847  0073                     	ds	1
  1848  0074                     ??_start:	
  1849  0074                     ??_stop:	
  1850                           ; 1 bytes @ 0x4
  1851                           
  1852  0074                     ??_s_ack:	
  1853                           ; 1 bytes @ 0x4
  1854                           
  1855  0074                     ??_sn_ack:	
  1856                           ; 1 bytes @ 0x4
  1857                           
  1858  0074                     ??_write_byte:	
  1859                           ; 1 bytes @ 0x4
  1860                           
  1861  0074                     ??_read_byte:	
  1862                           ; 1 bytes @ 0x4
  1863                           
  1864  0074                     ?_r_ack:	
  1865                           ; 1 bytes @ 0x4
  1866                           
  1867  0074                     CW_Delay10ms@b:	
  1868                           ; 2 bytes @ 0x4
  1869                           
  1870  0074                     ___lmul@multiplicand:	
  1871                           ; 1 bytes @ 0x4
  1872                           
  1873                           
  1874                           ; 4 bytes @ 0x4
  1875  0074                     	ds	1
  1876  0075                     write_byte@w_data:	
  1877  0075                     read_byte@i:	
  1878                           ; 1 bytes @ 0x5
  1879                           
  1880                           
  1881                           ; 1 bytes @ 0x5
  1882  0075                     	ds	1
  1883  0076                     ??_r_ack:	
  1884  0076                     write_byte@i:	
  1885                           ; 1 bytes @ 0x6
  1886                           
  1887  0076                     read_byte@r_data:	
  1888                           ; 1 bytes @ 0x6
  1889                           
  1890                           
  1891                           ; 1 bytes @ 0x6
  1892  0076                     	ds	2
  1893  0078                     ??___lmul:	
  1894  0078                     r_ack@ack:	
  1895                           ; 1 bytes @ 0x8
  1896                           
  1897  0078                     ___lmul@product:	
  1898                           ; 2 bytes @ 0x8
  1899                           
  1900                           
  1901                           ; 4 bytes @ 0x8
  1902  0078                     	ds	2
  1903  007A                     ?_wait_r_ack:	
  1904                           
  1905                           ; 2 bytes @ 0xA
  1906  007A                     	ds	2
  1907  007C                     ??_cw_read:	
  1908  007C                     ??_cw_write:	
  1909                           ; 1 bytes @ 0xC
  1910                           
  1911  007C                     ??_cw_read_word:	
  1912                           ; 1 bytes @ 0xC
  1913                           
  1914  007C                     ??_wait_r_ack:	
  1915                           ; 1 bytes @ 0xC
  1916                           
  1917  007C                     ??___lldiv:	
  1918                           ; 1 bytes @ 0xC
  1919                           
  1920  007C                     cw_write@point_reg:	
  1921                           ; 1 bytes @ 0xC
  1922                           
  1923                           
  1924                           ; 1 bytes @ 0xC
  1925  007C                     	ds	1
  1926  007D                     cw_read@point_reg:	
  1927                           
  1928                           ; 1 bytes @ 0xD
  1929  007D                     	ds	1
  1930  007E                     ??_cw_bat_work:	
  1931  007E                     ??_update_vol:	
  1932                           ; 1 bytes @ 0xE
  1933                           
  1934                           
  1935                           	psect	cstackBANK0
  1936  0020                     __pcstackBANK0:	
  1937                           ; 1 bytes @ 0xE
  1938                           
  1939  0020                     ?___lldiv:	
  1940  0020                     wait_r_ack@ack:	
  1941                           ; 4 bytes @ 0x0
  1942                           
  1943  0020                     ___lldiv@divisor:	
  1944                           ; 2 bytes @ 0x0
  1945                           
  1946                           
  1947                           ; 4 bytes @ 0x0
  1948  0020                     	ds	2
  1949  0022                     wait_r_ack@i:	
  1950                           
  1951                           ; 2 bytes @ 0x2
  1952  0022                     	ds	2
  1953  0024                     ?_cw_read:	
  1954  0024                     ?_cw_write:	
  1955                           ; 2 bytes @ 0x4
  1956                           
  1957  0024                     ?_cw_read_word:	
  1958                           ; 2 bytes @ 0x4
  1959                           
  1960  0024                     cw_read@r_pdata:	
  1961                           ; 2 bytes @ 0x4
  1962                           
  1963  0024                     cw_read_word@r_pdata:	
  1964                           ; 1 bytes @ 0x4
  1965                           
  1966  0024                     cw_write@w_pdata:	
  1967                           ; 1 bytes @ 0x4
  1968                           
  1969  0024                     ___lldiv@dividend:	
  1970                           ; 1 bytes @ 0x4
  1971                           
  1972                           
  1973                           ; 4 bytes @ 0x4
  1974  0024                     	ds	1
  1975  0025                     cw_read_word@length:	
  1976                           
  1977                           ; 2 bytes @ 0x5
  1978  0025                     	ds	2
  1979  0027                     ??_cw_update_config_info:	
  1980  0027                     cw_read_word@point_reg:	
  1981                           ; 1 bytes @ 0x7
  1982                           
  1983                           
  1984                           ; 1 bytes @ 0x7
  1985  0027                     	ds	1
  1986  0028                     cw_update_config_info@reset_val:	
  1987  0028                     cw_read_word@count:	
  1988                           ; 1 bytes @ 0x8
  1989                           
  1990  0028                     ___lldiv@quotient:	
  1991                           ; 1 bytes @ 0x8
  1992                           
  1993                           
  1994                           ; 4 bytes @ 0x8
  1995  0028                     	ds	1
  1996  0029                     cw_update_config_info@ret:	
  1997                           
  1998                           ; 2 bytes @ 0x9
  1999  0029                     	ds	2
  2000  002B                     cw_update_config_info@i:	
  2001                           
  2002                           ; 1 bytes @ 0xB
  2003  002B                     	ds	1
  2004  002C                     cw_update_config_info@reg_val:	
  2005  002C                     ___lldiv@counter:	
  2006                           ; 1 bytes @ 0xC
  2007                           
  2008                           
  2009                           ; 1 bytes @ 0xC
  2010  002C                     	ds	1
  2011  002D                     ??_cw_init:	
  2012  002D                     ?_cw_get_vol:	
  2013                           ; 1 bytes @ 0xD
  2014                           
  2015                           
  2016                           ; 2 bytes @ 0xD
  2017  002D                     	ds	2
  2018  002F                     ??_cw_get_vol:	
  2019  002F                     cw_init@i:	
  2020                           ; 1 bytes @ 0xF
  2021                           
  2022                           
  2023                           ; 1 bytes @ 0xF
  2024  002F                     	ds	1
  2025  0030                     cw_init@ret:	
  2026                           
  2027                           ; 2 bytes @ 0x10
  2028  0030                     	ds	2
  2029  0032                     cw_init@reg_val:	
  2030                           
  2031                           ; 1 bytes @ 0x12
  2032  0032                     	ds	1
  2033  0033                     ??_cw_bat_init:	
  2034  0033                     ?_cw_por:	
  2035                           ; 1 bytes @ 0x13
  2036                           
  2037                           
  2038                           ; 2 bytes @ 0x13
  2039  0033                     	ds	1
  2040  0034                     cw_bat_init@loop:	
  2041  0034                     cw_get_vol@ret:	
  2042                           ; 1 bytes @ 0x14
  2043                           
  2044                           
  2045                           ; 2 bytes @ 0x14
  2046  0034                     	ds	1
  2047  0035                     ??_cw_por:	
  2048  0035                     cw_bat_init@ret:	
  2049                           ; 1 bytes @ 0x15
  2050                           
  2051                           
  2052                           ; 1 bytes @ 0x15
  2053  0035                     	ds	1
  2054  0036                     cw_get_vol@reg_val:	
  2055                           
  2056                           ; 2 bytes @ 0x16
  2057  0036                     	ds	1
  2058  0037                     cw_por@reset_val:	
  2059                           
  2060                           ; 1 bytes @ 0x17
  2061  0037                     	ds	1
  2062  0038                     cw_por@ret:	
  2063  0038                     cw_get_vol@ad_value_min:	
  2064                           ; 2 bytes @ 0x18
  2065                           
  2066                           
  2067                           ; 2 bytes @ 0x18
  2068  0038                     	ds	2
  2069  003A                     ?_cw_get_capacity:	
  2070  003A                     cw_get_vol@ad_value_max:	
  2071                           ; 2 bytes @ 0x1A
  2072                           
  2073                           
  2074                           ; 2 bytes @ 0x1A
  2075  003A                     	ds	2
  2076  003C                     ??_cw_get_capacity:	
  2077  003C                     cw_get_vol@ad_value:	
  2078                           ; 1 bytes @ 0x1C
  2079                           
  2080                           
  2081                           ; 4 bytes @ 0x1C
  2082  003C                     	ds	2
  2083  003E                     cw_get_capacity@cw_capacity:	
  2084                           
  2085                           ; 1 bytes @ 0x1E
  2086  003E                     	ds	1
  2087  003F                     cw_get_capacity@ret:	
  2088                           
  2089                           ; 2 bytes @ 0x1F
  2090  003F                     	ds	1
  2091  0040                     cw_get_vol@get_ad_times:	
  2092                           
  2093                           ; 1 bytes @ 0x20
  2094  0040                     	ds	1
  2095  0041                     cw_get_capacity@reg_val:	
  2096  0041                     cw_get_vol@ad_buff:	
  2097                           ; 1 bytes @ 0x21
  2098                           
  2099                           
  2100                           ; 2 bytes @ 0x21
  2101  0041                     	ds	1
  2102  0042                     ??_update_capacity:	
  2103                           
  2104                           ; 1 bytes @ 0x22
  2105  0042                     	ds	1
  2106  0043                     update_capacity@cw_capacity:	
  2107  0043                     update_vol@cw_voltage:	
  2108                           ; 2 bytes @ 0x23
  2109                           
  2110                           
  2111                           ; 2 bytes @ 0x23
  2112  0043                     	ds	2
  2113  0045                     ??_main:	
  2114                           
  2115                           ; 1 bytes @ 0x25
  2116  0045                     	ds	1
  2117  0046                     main@ret:	
  2118                           
  2119                           ; 1 bytes @ 0x26
  2120  0046                     	ds	1
  2121                           
  2122                           	psect	maintext
  2123  048F                     __pmaintext:	
  2124 ;;
  2125 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2126 ;;
  2127 ;; *************** function _main *****************
  2128 ;; Defined at:
  2129 ;;		line 53 in file "main.c"
  2130 ;; Parameters:    Size  Location     Type
  2131 ;;		None
  2132 ;; Auto vars:     Size  Location     Type
  2133 ;;  ret             1   38[BANK0 ] unsigned char 
  2134 ;;  send_char       1    0        unsigned char 
  2135 ;; Return value:  Size  Location     Type
  2136 ;;                  1    wreg      void 
  2137 ;; Registers used:
  2138 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2139 ;; Tracked objects:
  2140 ;;		On entry : B3F/0
  2141 ;;		On exit  : 0/0
  2142 ;;		Unchanged: 0/0
  2143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2144 ;;      Params:         0       0       0       0
  2145 ;;      Locals:         0       1       0       0
  2146 ;;      Temps:          0       1       0       0
  2147 ;;      Totals:         0       2       0       0
  2148 ;;Total ram usage:        2 bytes
  2149 ;; Hardware stack levels required when called:   10
  2150 ;; This function calls:
  2151 ;;		_CW_Delay10ms
  2152 ;;		_EUSART1_Write
  2153 ;;		_SYSTEM_Initialize
  2154 ;;		_cw_bat_init
  2155 ;;		_cw_bat_work
  2156 ;; This function is called by:
  2157 ;;		Startup code after reset
  2158 ;; This function uses a non-reentrant model
  2159 ;;
  2160                           
  2161                           
  2162                           ;psect for function _main
  2163  048F                     _main:	
  2164                           
  2165                           ;main.c: 56: unsigned char ret = 0;
  2166                           
  2167                           ;incstack = 0
  2168                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2169  048F  0140               	movlb	0	; select bank0
  2170  0490  01C6               	clrf	main@ret
  2171                           
  2172                           ;main.c: 57: uint8_t send_char;
  2173                           ;main.c: 58: SYSTEM_Initialize();
  2174  0491  211E               	fcall	_SYSTEM_Initialize
  2175                           
  2176                           ;main.c: 59: do { LATCbits.LATC2 = 1; } while(0);
  2177  0492  0140               	movlb	0	; select bank0
  2178  0493  151A               	bsf	26,2	;volatile
  2179                           
  2180                           ;main.c: 60: do { LATAbits.LATA2 = 1; } while(0);
  2181  0494  1518               	bsf	24,2	;volatile
  2182                           
  2183                           ;main.c: 61: do { LATAbits.LATA5 = 1; } while(0);
  2184  0495  1698               	bsf	24,5	;volatile
  2185                           
  2186                           ;main.c: 62: do { LATAbits.LATA4 = 1; } while(0);
  2187  0496  1618               	bsf	24,4	;volatile
  2188                           
  2189                           ;main.c: 63: ret = cw_bat_init();
  2190  0497  21AA               	fcall	_cw_bat_init
  2191  0498  0140               	movlb	0	; select bank0
  2192  0499  00C5               	movwf	??_main
  2193  049A  0845               	movf	??_main,w
  2194  049B  00C6               	movwf	main@ret
  2195  049C                     l2425:	
  2196                           ;main.c: 80: {
  2197                           ;main.c: 82: do { LATCbits.LATC3 = 1; } while(0);
  2198                           
  2199                           ;main.c: 79: while (1)
  2200                           
  2201  049C  0140               	movlb	0	; select bank0
  2202  049D  159A               	bsf	26,3	;volatile
  2203                           
  2204                           ;main.c: 83: cw_bat_work();
  2205  049E  2122               	fcall	_cw_bat_work
  2206                           
  2207                           ;main.c: 84: EUSART1_Write(cw_bat.voltage);
  2208  049F  0140               	movlb	0	; select bank0
  2209  04A0  084A               	movf	_cw_bat+3,w
  2210  04A1  2126               	fcall	_EUSART1_Write
  2211                           
  2212                           ;main.c: 85: EUSART1_Write(cw_bat.capacity);
  2213  04A2  0140               	movlb	0	; select bank0
  2214  04A3  0848               	movf	_cw_bat+1,w
  2215  04A4  2126               	fcall	_EUSART1_Write
  2216                           
  2217                           ;main.c: 86: CW_Delay10ms(1);
  2218  04A5  3001               	movlw	1
  2219  04A6  00F0               	movwf	CW_Delay10ms@c
  2220  04A7  3000               	movlw	0
  2221  04A8  00F1               	movwf	CW_Delay10ms@c+1
  2222  04A9  2224               	fcall	_CW_Delay10ms
  2223                           
  2224                           ;main.c: 87: do { LATCbits.LATC3 = 0; } while(0);
  2225  04AA  0140               	movlb	0	; select bank0
  2226  04AB  119A               	bcf	26,3	;volatile
  2227                           
  2228                           ;main.c: 88: if(cw_bat.capacity >= 80)
  2229  04AC  3000               	movlw	0
  2230  04AD  0249               	subwf	_cw_bat+2,w
  2231  04AE  3050               	movlw	80
  2232  04AF  1903               	skipnz
  2233  04B0  0248               	subwf	_cw_bat+1,w
  2234  04B1  1C03               	skipc
  2235  04B2  2CB5               	goto	l2439
  2236                           
  2237                           ;main.c: 89: {
  2238                           ;main.c: 90: do { LATCbits.LATC2 = 0; } while(0);
  2239  04B3  111A               	bcf	26,2	;volatile
  2240  04B4  2CBD               	goto	L1
  2241  04B5                     l2439:	
  2242                           ;main.c: 94: }
  2243                           
  2244                           ;main.c: 93: do { LATAbits.LATA4 = 0; } while(0);
  2245                           
  2246                           ;main.c: 92: do { LATAbits.LATA5 = 0; } while(0);
  2247                           
  2248                           ;main.c: 91: do { LATAbits.LATA2 = 0; } while(0);
  2249                           
  2250                           
  2251                           ;main.c: 95: else if(cw_bat.capacity >= 60)
  2252  04B5  3000               	movlw	0
  2253  04B6  0249               	subwf	_cw_bat+2,w
  2254  04B7  303C               	movlw	60
  2255  04B8  1903               	skipnz
  2256  04B9  0248               	subwf	_cw_bat+1,w
  2257  04BA  1C03               	skipc
  2258  04BB  2CBF               	goto	l2441
  2259                           
  2260                           ;main.c: 96: {
  2261                           ;main.c: 97: do { LATCbits.LATC2 = 1; } while(0);
  2262  04BC  151A               	bsf	26,2	;volatile
  2263  04BD                     L1:	
  2264                           
  2265                           ;main.c: 98: do { LATAbits.LATA2 = 0; } while(0);
  2266  04BD  1118               	bcf	24,2	;volatile
  2267  04BE  2CC8               	goto	L2
  2268  04BF                     l2441:	
  2269                           ;main.c: 101: }
  2270                           
  2271                           ;main.c: 100: do { LATAbits.LATA4 = 0; } while(0);
  2272                           
  2273                           ;main.c: 99: do { LATAbits.LATA5 = 0; } while(0);
  2274                           
  2275                           
  2276                           ;main.c: 102: else if(cw_bat.capacity >= 40)
  2277  04BF  3000               	movlw	0
  2278  04C0  0249               	subwf	_cw_bat+2,w
  2279  04C1  3028               	movlw	40
  2280  04C2  1903               	skipnz
  2281  04C3  0248               	subwf	_cw_bat+1,w
  2282  04C4  1C03               	skipc
  2283  04C5  2CCA               	goto	l2443
  2284                           
  2285                           ;main.c: 103: {
  2286                           ;main.c: 104: do { LATCbits.LATC2 = 1; } while(0);
  2287  04C6  151A               	bsf	26,2	;volatile
  2288                           
  2289                           ;main.c: 105: do { LATAbits.LATA2 = 1; } while(0);
  2290  04C7  1518               	bsf	24,2	;volatile
  2291  04C8                     L2:	
  2292                           
  2293                           ;main.c: 106: do { LATAbits.LATA5 = 0; } while(0);
  2294  04C8  1298               	bcf	24,5	;volatile
  2295                           
  2296                           ;main.c: 107: do { LATAbits.LATA4 = 0; } while(0);
  2297  04C9  2CD4               	goto	l170
  2298  04CA                     l2443:	
  2299                           ;main.c: 108: }
  2300                           
  2301                           
  2302                           ;main.c: 109: else if(cw_bat.capacity >= 20)
  2303  04CA  3000               	movlw	0
  2304  04CB  0249               	subwf	_cw_bat+2,w
  2305  04CC  3014               	movlw	20
  2306  04CD  1903               	skipnz
  2307  04CE  0248               	subwf	_cw_bat+1,w
  2308  04CF  1C03               	skipc
  2309  04D0  2CD6               	goto	l173
  2310                           
  2311                           ;main.c: 110: {
  2312                           ;main.c: 111: do { LATCbits.LATC2 = 1; } while(0);
  2313  04D1  151A               	bsf	26,2	;volatile
  2314                           
  2315                           ;main.c: 112: do { LATAbits.LATA2 = 1; } while(0);
  2316  04D2  1518               	bsf	24,2	;volatile
  2317                           
  2318                           ;main.c: 113: do { LATAbits.LATA5 = 1; } while(0);
  2319  04D3  1698               	bsf	24,5	;volatile
  2320  04D4                     l170:	
  2321                           ;main.c: 114: do { LATAbits.LATA4 = 0; } while(0);
  2322                           
  2323  04D4  1218               	bcf	24,4	;volatile
  2324                           
  2325                           ;main.c: 115: }
  2326  04D5  2CDA               	goto	l2445
  2327  04D6                     l173:	
  2328                           ;main.c: 116: else
  2329                           ;main.c: 117: {
  2330                           ;main.c: 118: do { LATCbits.LATC2 = 1; } while(0);
  2331                           
  2332  04D6  151A               	bsf	26,2	;volatile
  2333                           
  2334                           ;main.c: 119: do { LATAbits.LATA2 = 1; } while(0);
  2335  04D7  1518               	bsf	24,2	;volatile
  2336                           
  2337                           ;main.c: 120: do { LATAbits.LATA5 = 1; } while(0);
  2338  04D8  1698               	bsf	24,5	;volatile
  2339                           
  2340                           ;main.c: 121: do { LATAbits.LATA4 = 1; } while(0);
  2341  04D9  1618               	bsf	24,4	;volatile
  2342  04DA                     l2445:	
  2343                           
  2344                           ;main.c: 122: }
  2345                           ;main.c: 123: CW_Delay10ms(100);
  2346  04DA  3064               	movlw	100
  2347  04DB  00F0               	movwf	CW_Delay10ms@c
  2348  04DC  3000               	movlw	0
  2349  04DD  00F1               	movwf	CW_Delay10ms@c+1
  2350  04DE  2224               	fcall	_CW_Delay10ms
  2351  04DF  2C9C               	goto	l2425
  2352  04E0                     __end_of_main:	
  2353                           
  2354                           	psect	text1
  2355  0122                     __ptext1:	
  2356 ;; *************** function _cw_bat_work *****************
  2357 ;; Defined at:
  2358 ;;		line 555 in file "CW201x.c"
  2359 ;; Parameters:    Size  Location     Type
  2360 ;;		None
  2361 ;; Auto vars:     Size  Location     Type
  2362 ;;		None
  2363 ;; Return value:  Size  Location     Type
  2364 ;;                  1    wreg      void 
  2365 ;; Registers used:
  2366 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2367 ;; Tracked objects:
  2368 ;;		On entry : 0/0
  2369 ;;		On exit  : 0/0
  2370 ;;		Unchanged: 0/0
  2371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2372 ;;      Params:         0       0       0       0
  2373 ;;      Locals:         0       0       0       0
  2374 ;;      Temps:          0       0       0       0
  2375 ;;      Totals:         0       0       0       0
  2376 ;;Total ram usage:        0 bytes
  2377 ;; Hardware stack levels used:    1
  2378 ;; Hardware stack levels required when called:    9
  2379 ;; This function calls:
  2380 ;;		_update_capacity
  2381 ;;		_update_usb_online
  2382 ;;		_update_vol
  2383 ;; This function is called by:
  2384 ;;		_main
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387                           
  2388                           
  2389                           ;psect for function _cw_bat_work
  2390  0122                     _cw_bat_work:	
  2391                           
  2392                           ;CW201x.c: 557: update_usb_online();
  2393                           
  2394                           ;incstack = 0
  2395                           ; Regs used in _cw_bat_work: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2396  0122  212E               	fcall	_update_usb_online
  2397                           
  2398                           ;CW201x.c: 558: update_capacity();
  2399  0123  2245               	fcall	_update_capacity
  2400                           
  2401                           ;CW201x.c: 559: update_vol();
  2402  0124  2193               	fcall	_update_vol
  2403  0125  0008               	return
  2404  0126                     __end_of_cw_bat_work:	
  2405                           
  2406                           	psect	text2
  2407  0193                     __ptext2:	
  2408 ;; *************** function _update_vol *****************
  2409 ;; Defined at:
  2410 ;;		line 508 in file "CW201x.c"
  2411 ;; Parameters:    Size  Location     Type
  2412 ;;		None
  2413 ;; Auto vars:     Size  Location     Type
  2414 ;;  cw_voltage      2   35[BANK0 ] unsigned int 
  2415 ;; Return value:  Size  Location     Type
  2416 ;;                  1    wreg      void 
  2417 ;; Registers used:
  2418 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2419 ;; Tracked objects:
  2420 ;;		On entry : 0/0
  2421 ;;		On exit  : 0/0
  2422 ;;		Unchanged: 0/0
  2423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2424 ;;      Params:         0       0       0       0
  2425 ;;      Locals:         0       2       0       0
  2426 ;;      Temps:          0       0       0       0
  2427 ;;      Totals:         0       2       0       0
  2428 ;;Total ram usage:        2 bytes
  2429 ;; Hardware stack levels used:    1
  2430 ;; Hardware stack levels required when called:    5
  2431 ;; This function calls:
  2432 ;;		_cw_get_vol
  2433 ;; This function is called by:
  2434 ;;		_cw_bat_work
  2435 ;; This function uses a non-reentrant model
  2436 ;;
  2437                           
  2438                           
  2439                           ;psect for function _update_vol
  2440  0193                     _update_vol:	
  2441                           
  2442                           ;CW201x.c: 510: unsigned int cw_voltage;
  2443                           ;CW201x.c: 511: cw_voltage = cw_get_vol();
  2444                           
  2445                           ;incstack = 0
  2446                           ; Regs used in _update_vol: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2447  0193  2594               	fcall	_cw_get_vol
  2448  0194  0140               	movlb	0	; select bank0
  2449  0195  082E               	movf	?_cw_get_vol+1,w
  2450  0196  00C4               	movwf	update_vol@cw_voltage+1
  2451  0197  082D               	movf	?_cw_get_vol,w
  2452  0198  00C3               	movwf	update_vol@cw_voltage
  2453                           
  2454                           ;CW201x.c: 512: if(cw_voltage == 1){
  2455  0199  0343               	decf	update_vol@cw_voltage,w
  2456  019A  0444               	iorwf	update_vol@cw_voltage+1,w
  2457  019B  1903               	btfsc	3,2
  2458  019C  0008               	return
  2459                           
  2460                           ;CW201x.c: 515: }else if(cw_bat.voltage != cw_voltage)
  2461  019D  0844               	movf	update_vol@cw_voltage+1,w
  2462  019E  064B               	xorwf	_cw_bat+4,w
  2463  019F  1D03               	skipz
  2464  01A0  29A3               	goto	u2265
  2465  01A1  0843               	movf	update_vol@cw_voltage,w
  2466  01A2  064A               	xorwf	_cw_bat+3,w
  2467  01A3                     u2265:	
  2468  01A3  1903               	skipnz
  2469  01A4  0008               	return
  2470                           
  2471                           ;CW201x.c: 516: {
  2472                           ;CW201x.c: 517: cw_bat.voltage = cw_voltage;
  2473  01A5  0844               	movf	update_vol@cw_voltage+1,w
  2474  01A6  00CB               	movwf	_cw_bat+4
  2475  01A7  0843               	movf	update_vol@cw_voltage,w
  2476  01A8  00CA               	movwf	_cw_bat+3
  2477  01A9  0008               	return
  2478  01AA                     __end_of_update_vol:	
  2479                           
  2480                           	psect	text3
  2481  0594                     __ptext3:	
  2482 ;; *************** function _cw_get_vol *****************
  2483 ;; Defined at:
  2484 ;;		line 434 in file "CW201x.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;		None
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;  ad_value        4   28[BANK0 ] unsigned long 
  2489 ;;  ad_buff         2   33[BANK0 ] unsigned int 
  2490 ;;  reg_val         2   22[BANK0 ] unsigned char [2]
  2491 ;;  ad_value_max    2   26[BANK0 ] unsigned int 
  2492 ;;  ad_value_min    2   24[BANK0 ] unsigned int 
  2493 ;;  ret             2   20[BANK0 ] int 
  2494 ;;  get_ad_times    1   32[BANK0 ] unsigned char 
  2495 ;; Return value:  Size  Location     Type
  2496 ;;                  2   13[BANK0 ] unsigned int 
  2497 ;; Registers used:
  2498 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2499 ;; Tracked objects:
  2500 ;;		On entry : 0/0
  2501 ;;		On exit  : 0/0
  2502 ;;		Unchanged: 0/0
  2503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2504 ;;      Params:         0       2       0       0
  2505 ;;      Locals:         0      15       0       0
  2506 ;;      Temps:          0       5       0       0
  2507 ;;      Totals:         0      22       0       0
  2508 ;;Total ram usage:       22 bytes
  2509 ;; Hardware stack levels used:    1
  2510 ;; Hardware stack levels required when called:    4
  2511 ;; This function calls:
  2512 ;;		___lldiv
  2513 ;;		___lmul
  2514 ;;		_cw_read_word
  2515 ;; This function is called by:
  2516 ;;		_update_vol
  2517 ;; This function uses a non-reentrant model
  2518 ;;
  2519                           
  2520                           
  2521                           ;psect for function _cw_get_vol
  2522  0594                     _cw_get_vol:	
  2523                           
  2524                           ;CW201x.c: 436: int ret = 0;
  2525                           
  2526                           ;incstack = 0
  2527                           ; Regs used in _cw_get_vol: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2528  0594  0140               	movlb	0	; select bank0
  2529  0595  01B4               	clrf	cw_get_vol@ret
  2530  0596  01B5               	clrf	cw_get_vol@ret+1
  2531                           
  2532                           ;CW201x.c: 437: unsigned char get_ad_times = 0;
  2533  0597  01C0               	clrf	cw_get_vol@get_ad_times
  2534                           
  2535                           ;CW201x.c: 438: unsigned char reg_val[2] = {0 , 0};
  2536  0598  084E               	movf	cw_get_vol@F80+1,w
  2537  0599  00B7               	movwf	cw_get_vol@reg_val+1
  2538  059A  084D               	movf	cw_get_vol@F80,w
  2539  059B  00B6               	movwf	cw_get_vol@reg_val
  2540                           
  2541                           ;CW201x.c: 439: unsigned long ad_value = 0;
  2542  059C  3000               	movlw	0
  2543  059D  00BF               	movwf	cw_get_vol@ad_value+3
  2544  059E  3000               	movlw	0
  2545  059F  00BE               	movwf	cw_get_vol@ad_value+2
  2546  05A0  3000               	movlw	0
  2547  05A1  00BD               	movwf	cw_get_vol@ad_value+1
  2548  05A2  3000               	movlw	0
  2549  05A3  00BC               	movwf	cw_get_vol@ad_value
  2550                           
  2551                           ;CW201x.c: 440: unsigned int ad_buff = 0;
  2552  05A4  01C1               	clrf	cw_get_vol@ad_buff
  2553  05A5  01C2               	clrf	cw_get_vol@ad_buff+1
  2554                           
  2555                           ;CW201x.c: 441: unsigned int ad_value_min = 0;
  2556  05A6  01B8               	clrf	cw_get_vol@ad_value_min
  2557  05A7  01B9               	clrf	cw_get_vol@ad_value_min+1
  2558                           
  2559                           ;CW201x.c: 442: unsigned int ad_value_max = 0;
  2560  05A8  01BA               	clrf	cw_get_vol@ad_value_max
  2561  05A9  01BB               	clrf	cw_get_vol@ad_value_max+1
  2562                           
  2563                           ;CW201x.c: 444: for(get_ad_times = 0; get_ad_times < 3; get_ad_times++)
  2564  05AA  01C0               	clrf	cw_get_vol@get_ad_times
  2565  05AB  3003               	movlw	3
  2566  05AC  0240               	subwf	cw_get_vol@get_ad_times,w
  2567  05AD  1803               	btfsc	3,0
  2568  05AE  2E08               	goto	l2251
  2569  05AF                     l2231:	
  2570                           
  2571                           ;CW201x.c: 445: {
  2572                           ;CW201x.c: 446: ret = cw_read_word(0x2, &reg_val[0],2);
  2573  05AF  3036               	movlw	(low (cw_get_vol@reg_val| 0))& (0+255)
  2574  05B0  00AF               	movwf	??_cw_get_vol
  2575  05B1  082F               	movf	??_cw_get_vol,w
  2576  05B2  00A4               	movwf	cw_read_word@r_pdata
  2577  05B3  3002               	movlw	2
  2578  05B4  00A5               	movwf	cw_read_word@length
  2579  05B5  3000               	movlw	0
  2580  05B6  00A6               	movwf	cw_read_word@length+1
  2581  05B7  3002               	movlw	2
  2582  05B8  2533               	fcall	_cw_read_word
  2583  05B9  0140               	movlb	0	; select bank0
  2584  05BA  0825               	movf	?_cw_read_word+1,w
  2585  05BB  00B5               	movwf	cw_get_vol@ret+1
  2586  05BC  0824               	movf	?_cw_read_word,w
  2587  05BD  00B4               	movwf	cw_get_vol@ret
  2588                           
  2589                           ;CW201x.c: 447: if(ret)
  2590  05BE  0834               	movf	cw_get_vol@ret,w
  2591  05BF  0435               	iorwf	cw_get_vol@ret+1,w
  2592  05C0  1903               	btfsc	3,2
  2593  05C1  2DC7               	goto	l2239
  2594                           
  2595                           ;CW201x.c: 448: {
  2596                           ;CW201x.c: 449: return 1;
  2597  05C2  3001               	movlw	1
  2598  05C3  00AD               	movwf	?_cw_get_vol
  2599  05C4  3000               	movlw	0
  2600  05C5  00AE               	movwf	?_cw_get_vol+1
  2601  05C6  0008               	return
  2602  05C7                     l2239:	
  2603                           
  2604                           ;CW201x.c: 450: }
  2605                           ;CW201x.c: 451: ad_buff = (reg_val[0] << 8) + reg_val[1];
  2606  05C7  0837               	movf	cw_get_vol@reg_val+1,w
  2607  05C8  00AF               	movwf	??_cw_get_vol
  2608  05C9  01B0               	clrf	??_cw_get_vol+1
  2609  05CA  0836               	movf	cw_get_vol@reg_val,w
  2610  05CB  00B1               	movwf	??_cw_get_vol+2
  2611  05CC  01B2               	clrf	??_cw_get_vol+3
  2612  05CD  0831               	movf	??_cw_get_vol+2,w
  2613  05CE  00B2               	movwf	??_cw_get_vol+3
  2614  05CF  01B1               	clrf	??_cw_get_vol+2
  2615  05D0  082F               	movf	??_cw_get_vol,w
  2616  05D1  0731               	addwf	??_cw_get_vol+2,w
  2617  05D2  00C1               	movwf	cw_get_vol@ad_buff
  2618  05D3  0830               	movf	??_cw_get_vol+1,w
  2619  05D4  3D32               	addwfc	??_cw_get_vol+3,w
  2620  05D5  00C2               	movwf	cw_get_vol@ad_buff+1
  2621                           
  2622                           ;CW201x.c: 453: if(get_ad_times == 0)
  2623  05D6  0840               	movf	cw_get_vol@get_ad_times,w
  2624  05D7  1D03               	btfss	3,2
  2625  05D8  2DE1               	goto	l279
  2626                           
  2627                           ;CW201x.c: 454: {
  2628                           ;CW201x.c: 455: ad_value_min = ad_buff;
  2629  05D9  0842               	movf	cw_get_vol@ad_buff+1,w
  2630  05DA  00B9               	movwf	cw_get_vol@ad_value_min+1
  2631  05DB  0841               	movf	cw_get_vol@ad_buff,w
  2632  05DC  00B8               	movwf	cw_get_vol@ad_value_min
  2633                           
  2634                           ;CW201x.c: 456: ad_value_max = ad_buff;
  2635  05DD  0842               	movf	cw_get_vol@ad_buff+1,w
  2636  05DE  00BB               	movwf	cw_get_vol@ad_value_max+1
  2637  05DF  0841               	movf	cw_get_vol@ad_buff,w
  2638  05E0  00BA               	movwf	cw_get_vol@ad_value_max
  2639  05E1                     l279:	
  2640                           
  2641                           ;CW201x.c: 457: }
  2642                           ;CW201x.c: 458: if(ad_buff < ad_value_min)
  2643  05E1  0839               	movf	cw_get_vol@ad_value_min+1,w
  2644  05E2  0242               	subwf	cw_get_vol@ad_buff+1,w
  2645  05E3  1D03               	skipz
  2646  05E4  2DE7               	goto	u2065
  2647  05E5  0838               	movf	cw_get_vol@ad_value_min,w
  2648  05E6  0241               	subwf	cw_get_vol@ad_buff,w
  2649  05E7                     u2065:	
  2650  05E7  1803               	skipnc
  2651  05E8  2DED               	goto	l280
  2652                           
  2653                           ;CW201x.c: 459: {
  2654                           ;CW201x.c: 460: ad_value_min = ad_buff;
  2655  05E9  0842               	movf	cw_get_vol@ad_buff+1,w
  2656  05EA  00B9               	movwf	cw_get_vol@ad_value_min+1
  2657  05EB  0841               	movf	cw_get_vol@ad_buff,w
  2658  05EC  00B8               	movwf	cw_get_vol@ad_value_min
  2659  05ED                     l280:	
  2660                           
  2661                           ;CW201x.c: 461: }
  2662                           ;CW201x.c: 462: if(ad_buff > ad_value_max)
  2663  05ED  0842               	movf	cw_get_vol@ad_buff+1,w
  2664  05EE  023B               	subwf	cw_get_vol@ad_value_max+1,w
  2665  05EF  1D03               	skipz
  2666  05F0  2DF3               	goto	u2075
  2667  05F1  0841               	movf	cw_get_vol@ad_buff,w
  2668  05F2  023A               	subwf	cw_get_vol@ad_value_max,w
  2669  05F3                     u2075:	
  2670  05F3  1803               	skipnc
  2671  05F4  2DF9               	goto	l281
  2672                           
  2673                           ;CW201x.c: 463: {
  2674                           ;CW201x.c: 464: ad_value_max = ad_buff;
  2675  05F5  0842               	movf	cw_get_vol@ad_buff+1,w
  2676  05F6  00BB               	movwf	cw_get_vol@ad_value_max+1
  2677  05F7  0841               	movf	cw_get_vol@ad_buff,w
  2678  05F8  00BA               	movwf	cw_get_vol@ad_value_max
  2679  05F9                     l281:	
  2680                           
  2681                           ;CW201x.c: 465: }
  2682                           ;CW201x.c: 466: ad_value += ad_buff;
  2683  05F9  0841               	movf	cw_get_vol@ad_buff,w
  2684  05FA  07BC               	addwf	cw_get_vol@ad_value,f
  2685  05FB  0842               	movf	cw_get_vol@ad_buff+1,w
  2686  05FC  3DBD               	addwfc	cw_get_vol@ad_value+1,f
  2687  05FD  3000               	movlw	0
  2688  05FE  3DBE               	addwfc	cw_get_vol@ad_value+2,f
  2689  05FF  3DBF               	addwfc	cw_get_vol@ad_value+3,f
  2690  0600  3001               	movlw	1
  2691  0601  00AF               	movwf	??_cw_get_vol
  2692  0602  082F               	movf	??_cw_get_vol,w
  2693  0603  07C0               	addwf	cw_get_vol@get_ad_times,f
  2694  0604  3003               	movlw	3
  2695  0605  0240               	subwf	cw_get_vol@get_ad_times,w
  2696  0606  1C03               	skipc
  2697  0607  2DAF               	goto	l2231
  2698  0608                     l2251:	
  2699                           
  2700                           ;CW201x.c: 467: }
  2701                           ;CW201x.c: 468: ad_value -= ad_value_min;
  2702  0608  0838               	movf	cw_get_vol@ad_value_min,w
  2703  0609  00AF               	movwf	??_cw_get_vol
  2704  060A  0839               	movf	cw_get_vol@ad_value_min+1,w
  2705  060B  00B0               	movwf	??_cw_get_vol+1
  2706  060C  01B1               	clrf	??_cw_get_vol+2
  2707  060D  01B2               	clrf	??_cw_get_vol+3
  2708  060E  082F               	movf	??_cw_get_vol,w
  2709  060F  02BC               	subwf	cw_get_vol@ad_value,f
  2710  0610  0830               	movf	??_cw_get_vol+1,w
  2711  0611  3BBD               	subwfb	cw_get_vol@ad_value+1,f
  2712  0612  0831               	movf	??_cw_get_vol+2,w
  2713  0613  3BBE               	subwfb	cw_get_vol@ad_value+2,f
  2714  0614  0832               	movf	??_cw_get_vol+3,w
  2715  0615  3BBF               	subwfb	cw_get_vol@ad_value+3,f
  2716                           
  2717                           ;CW201x.c: 469: ad_value -= ad_value_max;
  2718  0616  083A               	movf	cw_get_vol@ad_value_max,w
  2719  0617  00AF               	movwf	??_cw_get_vol
  2720  0618  083B               	movf	cw_get_vol@ad_value_max+1,w
  2721  0619  00B0               	movwf	??_cw_get_vol+1
  2722  061A  01B1               	clrf	??_cw_get_vol+2
  2723  061B  01B2               	clrf	??_cw_get_vol+3
  2724  061C  082F               	movf	??_cw_get_vol,w
  2725  061D  02BC               	subwf	cw_get_vol@ad_value,f
  2726  061E  0830               	movf	??_cw_get_vol+1,w
  2727  061F  3BBD               	subwfb	cw_get_vol@ad_value+1,f
  2728  0620  0831               	movf	??_cw_get_vol+2,w
  2729  0621  3BBE               	subwfb	cw_get_vol@ad_value+2,f
  2730  0622  0832               	movf	??_cw_get_vol+3,w
  2731  0623  3BBF               	subwfb	cw_get_vol@ad_value+3,f
  2732                           
  2733                           ;CW201x.c: 470: ad_value = ad_value * 305 / 100000;
  2734  0624  3000               	movlw	0
  2735  0625  00A3               	movwf	___lldiv@divisor+3
  2736  0626  3001               	movlw	1
  2737  0627  00A2               	movwf	___lldiv@divisor+2
  2738  0628  3086               	movlw	134
  2739  0629  00A1               	movwf	___lldiv@divisor+1
  2740  062A  30A0               	movlw	160
  2741  062B  00A0               	movwf	___lldiv@divisor
  2742  062C  083F               	movf	cw_get_vol@ad_value+3,w
  2743  062D  00F3               	movwf	___lmul@multiplier+3
  2744  062E  083E               	movf	cw_get_vol@ad_value+2,w
  2745  062F  00F2               	movwf	___lmul@multiplier+2
  2746  0630  083D               	movf	cw_get_vol@ad_value+1,w
  2747  0631  00F1               	movwf	___lmul@multiplier+1
  2748  0632  083C               	movf	cw_get_vol@ad_value,w
  2749  0633  00F0               	movwf	___lmul@multiplier
  2750  0634  3000               	movlw	0
  2751  0635  00F7               	movwf	___lmul@multiplicand+3
  2752  0636  3000               	movlw	0
  2753  0637  00F6               	movwf	___lmul@multiplicand+2
  2754  0638  3001               	movlw	1
  2755  0639  00F5               	movwf	___lmul@multiplicand+1
  2756  063A  3031               	movlw	49
  2757  063B  00F4               	movwf	___lmul@multiplicand
  2758  063C  22B7               	fcall	___lmul
  2759  063D  0873               	movf	?___lmul+3,w
  2760  063E  0140               	movlb	0	; select bank0
  2761  063F  00A7               	movwf	___lldiv@dividend+3
  2762  0640  0872               	movf	?___lmul+2,w
  2763  0641  00A6               	movwf	___lldiv@dividend+2
  2764  0642  0871               	movf	?___lmul+1,w
  2765  0643  00A5               	movwf	___lldiv@dividend+1
  2766  0644  0870               	movf	?___lmul,w
  2767  0645  00A4               	movwf	___lldiv@dividend
  2768  0646  24E0               	fcall	___lldiv
  2769  0647  0140               	movlb	0	; select bank0
  2770  0648  0823               	movf	?___lldiv+3,w
  2771  0649  00BF               	movwf	cw_get_vol@ad_value+3
  2772  064A  0822               	movf	?___lldiv+2,w
  2773  064B  00BE               	movwf	cw_get_vol@ad_value+2
  2774  064C  0821               	movf	?___lldiv+1,w
  2775  064D  00BD               	movwf	cw_get_vol@ad_value+1
  2776  064E  0820               	movf	?___lldiv,w
  2777  064F  00BC               	movwf	cw_get_vol@ad_value
  2778                           
  2779                           ;CW201x.c: 471: return(ad_value);
  2780  0650  083D               	movf	cw_get_vol@ad_value+1,w
  2781  0651  00AE               	movwf	?_cw_get_vol+1
  2782  0652  083C               	movf	cw_get_vol@ad_value,w
  2783  0653  00AD               	movwf	?_cw_get_vol
  2784  0654  0008               	return
  2785  0655                     __end_of_cw_get_vol:	
  2786                           
  2787                           	psect	text4
  2788  0533                     __ptext4:	
  2789 ;; *************** function _cw_read_word *****************
  2790 ;; Defined at:
  2791 ;;		line 189 in file "iic.c"
  2792 ;; Parameters:    Size  Location     Type
  2793 ;;  point_reg       1    wreg     unsigned char 
  2794 ;;  r_pdata         1    4[BANK0 ] PTR unsigned char 
  2795 ;;		 -> cw_get_vol@reg_val(2), 
  2796 ;;  length          2    5[BANK0 ] unsigned int 
  2797 ;; Auto vars:     Size  Location     Type
  2798 ;;  point_reg       1    7[BANK0 ] unsigned char 
  2799 ;;  count           1    8[BANK0 ] unsigned char 
  2800 ;; Return value:  Size  Location     Type
  2801 ;;                  2    4[BANK0 ] int 
  2802 ;; Registers used:
  2803 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2804 ;; Tracked objects:
  2805 ;;		On entry : 0/0
  2806 ;;		On exit  : 0/0
  2807 ;;		Unchanged: 0/0
  2808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2809 ;;      Params:         0       3       0       0
  2810 ;;      Locals:         0       2       0       0
  2811 ;;      Temps:          2       0       0       0
  2812 ;;      Totals:         2       5       0       0
  2813 ;;Total ram usage:        7 bytes
  2814 ;; Hardware stack levels used:    1
  2815 ;; Hardware stack levels required when called:    3
  2816 ;; This function calls:
  2817 ;;		_read_byte
  2818 ;;		_s_ack
  2819 ;;		_sn_ack
  2820 ;;		_start
  2821 ;;		_stop
  2822 ;;		_wait_r_ack
  2823 ;;		_write_byte
  2824 ;; This function is called by:
  2825 ;;		_cw_get_vol
  2826 ;; This function uses a non-reentrant model
  2827 ;;
  2828                           
  2829                           
  2830                           ;psect for function _cw_read_word
  2831  0533                     _cw_read_word:	
  2832                           
  2833                           ;incstack = 0
  2834                           ; Regs used in _cw_read_word: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2835                           ;cw_read_word@point_reg stored from wreg
  2836  0533  0140               	movlb	0	; select bank0
  2837  0534  00A7               	movwf	cw_read_word@point_reg
  2838                           
  2839                           ;iic.c: 191: unsigned char count;
  2840                           ;iic.c: 193: start();
  2841  0535  2142               	fcall	_start
  2842                           
  2843                           ;iic.c: 194: write_byte(0xc4);
  2844  0536  30C4               	movlw	196
  2845  0537  21C5               	fcall	_write_byte
  2846                           
  2847                           ;iic.c: 195: if(wait_r_ack())
  2848  0538  22E6               	fcall	_wait_r_ack
  2849  0539  087A               	movf	?_wait_r_ack,w
  2850  053A  047B               	iorwf	?_wait_r_ack+1,w
  2851  053B  1903               	btfsc	3,2
  2852  053C  2D43               	goto	l2113
  2853                           
  2854                           ;iic.c: 196: {
  2855                           ;iic.c: 197: return 1;
  2856  053D  3001               	movlw	1
  2857  053E  0140               	movlb	0	; select bank0
  2858  053F  00A4               	movwf	?_cw_read_word
  2859  0540  3000               	movlw	0
  2860  0541  00A5               	movwf	?_cw_read_word+1
  2861  0542  0008               	return
  2862  0543                     l2113:	
  2863                           
  2864                           ;iic.c: 198: }
  2865                           ;iic.c: 199: write_byte(point_reg);
  2866  0543  0140               	movlb	0	; select bank0
  2867  0544  0827               	movf	cw_read_word@point_reg,w
  2868  0545  21C5               	fcall	_write_byte
  2869                           
  2870                           ;iic.c: 200: if(wait_r_ack())
  2871  0546  22E6               	fcall	_wait_r_ack
  2872  0547  087A               	movf	?_wait_r_ack,w
  2873  0548  047B               	iorwf	?_wait_r_ack+1,w
  2874  0549  1903               	btfsc	3,2
  2875  054A  2D51               	goto	l2119
  2876                           
  2877                           ;iic.c: 201: {
  2878                           ;iic.c: 202: return 1;
  2879  054B  3001               	movlw	1
  2880  054C  0140               	movlb	0	; select bank0
  2881  054D  00A4               	movwf	?_cw_read_word
  2882  054E  3000               	movlw	0
  2883  054F  00A5               	movwf	?_cw_read_word+1
  2884  0550  0008               	return
  2885  0551                     l2119:	
  2886                           
  2887                           ;iic.c: 203: }
  2888                           ;iic.c: 204: start();
  2889  0551  2142               	fcall	_start
  2890                           
  2891                           ;iic.c: 205: write_byte(0xc5);
  2892  0552  30C5               	movlw	197
  2893  0553  21C5               	fcall	_write_byte
  2894                           
  2895                           ;iic.c: 206: if(wait_r_ack())
  2896  0554  22E6               	fcall	_wait_r_ack
  2897  0555  087A               	movf	?_wait_r_ack,w
  2898  0556  047B               	iorwf	?_wait_r_ack+1,w
  2899  0557  1903               	btfsc	3,2
  2900  0558  2D5F               	goto	l2125
  2901                           
  2902                           ;iic.c: 207: {
  2903                           ;iic.c: 208: return 1;
  2904  0559  3001               	movlw	1
  2905  055A  0140               	movlb	0	; select bank0
  2906  055B  00A4               	movwf	?_cw_read_word
  2907  055C  3000               	movlw	0
  2908  055D  00A5               	movwf	?_cw_read_word+1
  2909  055E  0008               	return
  2910  055F                     l2125:	
  2911                           
  2912                           ;iic.c: 209: }
  2913                           ;iic.c: 210: for(count = 0; count < length; count++ ){
  2914  055F  0140               	movlb	0	; select bank0
  2915  0560  01A8               	clrf	cw_read_word@count
  2916  0561                     l2137:	
  2917  0561  0828               	movf	cw_read_word@count,w
  2918  0562  00FC               	movwf	??_cw_read_word
  2919  0563  01FD               	clrf	??_cw_read_word+1
  2920  0564  0826               	movf	cw_read_word@length+1,w
  2921  0565  027D               	subwf	??_cw_read_word+1,w
  2922  0566  1D03               	skipz
  2923  0567  2D6A               	goto	u1875
  2924  0568  0825               	movf	cw_read_word@length,w
  2925  0569  027C               	subwf	??_cw_read_word,w
  2926  056A                     u1875:	
  2927  056A  1803               	btfsc	3,0
  2928  056B  2D8E               	goto	l2139
  2929                           
  2930                           ;iic.c: 211: *r_pdata = read_byte();
  2931  056C  2266               	fcall	_read_byte
  2932  056D  00FC               	movwf	??_cw_read_word
  2933  056E  0140               	movlb	0	; select bank0
  2934  056F  0824               	movf	cw_read_word@r_pdata,w
  2935  0570  0086               	movwf	6
  2936  0571  0187               	clrf	7
  2937  0572  087C               	movf	??_cw_read_word,w
  2938  0573  0081               	movwf	1
  2939                           
  2940                           ;iic.c: 212: if(count + 1 < length){
  2941  0574  0828               	movf	cw_read_word@count,w
  2942  0575  3E01               	addlw	1
  2943  0576  00FC               	movwf	??_cw_read_word
  2944  0577  3000               	movlw	0
  2945  0578  1803               	skipnc
  2946  0579  3001               	movlw	1
  2947  057A  00FD               	movwf	??_cw_read_word+1
  2948  057B  0826               	movf	cw_read_word@length+1,w
  2949  057C  027D               	subwf	??_cw_read_word+1,w
  2950  057D  1D03               	skipz
  2951  057E  2D81               	goto	u1865
  2952  057F  0825               	movf	cw_read_word@length,w
  2953  0580  027C               	subwf	??_cw_read_word,w
  2954  0581                     u1865:	
  2955  0581  1803               	skipnc
  2956  0582  2D88               	goto	l2135
  2957                           
  2958                           ;iic.c: 213: r_pdata++;
  2959  0583  3001               	movlw	1
  2960  0584  00FC               	movwf	??_cw_read_word
  2961  0585  087C               	movf	??_cw_read_word,w
  2962  0586  07A4               	addwf	cw_read_word@r_pdata,f
  2963                           
  2964                           ;iic.c: 214: sn_ack();
  2965  0587  2171               	fcall	_sn_ack
  2966  0588                     l2135:	
  2967  0588  3001               	movlw	1
  2968  0589  00FC               	movwf	??_cw_read_word
  2969  058A  087C               	movf	??_cw_read_word,w
  2970  058B  0140               	movlb	0	; select bank0
  2971  058C  07A8               	addwf	cw_read_word@count,f
  2972  058D  2D61               	goto	l2137
  2973  058E                     l2139:	
  2974                           
  2975                           ;iic.c: 215: }
  2976                           ;iic.c: 216: }
  2977                           ;iic.c: 217: s_ack();
  2978  058E  2137               	fcall	_s_ack
  2979                           
  2980                           ;iic.c: 218: stop();
  2981  058F  2165               	fcall	_stop
  2982                           
  2983                           ;iic.c: 219: return 0;
  2984  0590  0140               	movlb	0	; select bank0
  2985  0591  01A4               	clrf	?_cw_read_word
  2986  0592  01A5               	clrf	?_cw_read_word+1
  2987  0593  0008               	return
  2988  0594                     __end_of_cw_read_word:	
  2989                           
  2990                           	psect	text5
  2991  0171                     __ptext5:	
  2992 ;; *************** function _sn_ack *****************
  2993 ;; Defined at:
  2994 ;;		line 113 in file "iic.c"
  2995 ;; Parameters:    Size  Location     Type
  2996 ;;		None
  2997 ;; Auto vars:     Size  Location     Type
  2998 ;;		None
  2999 ;; Return value:  Size  Location     Type
  3000 ;;                  1    wreg      void 
  3001 ;; Registers used:
  3002 ;;		wreg, status,2, status,0, pclath, cstack
  3003 ;; Tracked objects:
  3004 ;;		On entry : 0/0
  3005 ;;		On exit  : 0/0
  3006 ;;		Unchanged: 0/0
  3007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3008 ;;      Params:         0       0       0       0
  3009 ;;      Locals:         0       0       0       0
  3010 ;;      Temps:          0       0       0       0
  3011 ;;      Totals:         0       0       0       0
  3012 ;;Total ram usage:        0 bytes
  3013 ;; Hardware stack levels used:    1
  3014 ;; Hardware stack levels required when called:    1
  3015 ;; This function calls:
  3016 ;;		_Delay10us
  3017 ;; This function is called by:
  3018 ;;		_cw_read_word
  3019 ;; This function uses a non-reentrant model
  3020 ;;
  3021                           
  3022                           
  3023                           ;psect for function _sn_ack
  3024  0171                     _sn_ack:	
  3025                           
  3026                           ;incstack = 0
  3027                           ; Regs used in _sn_ack: [wreg+status,2+status,0+pclath+cstack]
  3028                           ;iic.c: 115: do { TRISCbits.TRISC1 = 0; } while(0);
  3029  0171  0140               	movlb	0	; select bank0
  3030  0172  1094               	bcf	20,1	;volatile
  3031                           
  3032                           ;iic.c: 116: do { LATCbits.LATC1 = 0; } while(0);
  3033  0173  109A               	bcf	26,1	;volatile
  3034                           
  3035                           ;iic.c: 117: Delay10us();
  3036  0174  2204               	fcall	_Delay10us
  3037                           
  3038                           ;iic.c: 118: do { LATCbits.LATC0 = 1; } while(0);
  3039  0175  0140               	movlb	0	; select bank0
  3040  0176  141A               	bsf	26,0	;volatile
  3041                           
  3042                           ;iic.c: 119: Delay10us();
  3043  0177  2204               	fcall	_Delay10us
  3044                           
  3045                           ;iic.c: 120: do { LATCbits.LATC0 = 0; } while(0);
  3046  0178  0140               	movlb	0	; select bank0
  3047  0179  101A               	bcf	26,0	;volatile
  3048                           
  3049                           ;iic.c: 121: do { LATCbits.LATC1 = 1; } while(0);
  3050  017A  149A               	bsf	26,1	;volatile
  3051                           
  3052                           ;iic.c: 122: Delay10us();
  3053  017B  2204               	fcall	_Delay10us
  3054  017C  0008               	return
  3055  017D                     __end_of_sn_ack:	
  3056                           
  3057                           	psect	text6
  3058  02B7                     __ptext6:	
  3059 ;; *************** function ___lmul *****************
  3060 ;; Defined at:
  3061 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul32.c"
  3062 ;; Parameters:    Size  Location     Type
  3063 ;;  multiplier      4    0[COMMON] unsigned long 
  3064 ;;  multiplicand    4    4[COMMON] unsigned long 
  3065 ;; Auto vars:     Size  Location     Type
  3066 ;;  product         4    8[COMMON] unsigned long 
  3067 ;; Return value:  Size  Location     Type
  3068 ;;                  4    0[COMMON] unsigned long 
  3069 ;; Registers used:
  3070 ;;		wreg, status,2, status,0
  3071 ;; Tracked objects:
  3072 ;;		On entry : 0/0
  3073 ;;		On exit  : 0/0
  3074 ;;		Unchanged: 0/0
  3075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3076 ;;      Params:         8       0       0       0
  3077 ;;      Locals:         4       0       0       0
  3078 ;;      Temps:          0       0       0       0
  3079 ;;      Totals:        12       0       0       0
  3080 ;;Total ram usage:       12 bytes
  3081 ;; Hardware stack levels used:    1
  3082 ;; This function calls:
  3083 ;;		Nothing
  3084 ;; This function is called by:
  3085 ;;		_cw_get_vol
  3086 ;; This function uses a non-reentrant model
  3087 ;;
  3088                           
  3089                           
  3090                           ;psect for function ___lmul
  3091  02B7                     ___lmul:	
  3092                           
  3093                           ;incstack = 0
  3094                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3095  02B7  3000               	movlw	0
  3096  02B8  00FB               	movwf	___lmul@product+3
  3097  02B9  3000               	movlw	0
  3098  02BA  00FA               	movwf	___lmul@product+2
  3099  02BB  3000               	movlw	0
  3100  02BC  00F9               	movwf	___lmul@product+1
  3101  02BD  3000               	movlw	0
  3102  02BE  00F8               	movwf	___lmul@product
  3103  02BF                     l2147:	
  3104  02BF  1C70               	btfss	___lmul@multiplier,0
  3105  02C0  2AC9               	goto	l2151
  3106  02C1  0874               	movf	___lmul@multiplicand,w
  3107  02C2  07F8               	addwf	___lmul@product,f
  3108  02C3  0875               	movf	___lmul@multiplicand+1,w
  3109  02C4  3DF9               	addwfc	___lmul@product+1,f
  3110  02C5  0876               	movf	___lmul@multiplicand+2,w
  3111  02C6  3DFA               	addwfc	___lmul@product+2,f
  3112  02C7  0877               	movf	___lmul@multiplicand+3,w
  3113  02C8  3DFB               	addwfc	___lmul@product+3,f
  3114  02C9                     l2151:	
  3115  02C9  3001               	movlw	1
  3116  02CA                     u1895:	
  3117  02CA  35F4               	lslf	___lmul@multiplicand,f
  3118  02CB  0DF5               	rlf	___lmul@multiplicand+1,f
  3119  02CC  0DF6               	rlf	___lmul@multiplicand+2,f
  3120  02CD  0DF7               	rlf	___lmul@multiplicand+3,f
  3121  02CE  0B89               	decfsz	9,f
  3122  02CF  2ACA               	goto	u1895
  3123  02D0  3001               	movlw	1
  3124  02D1                     u1905:	
  3125  02D1  36F3               	lsrf	___lmul@multiplier+3,f
  3126  02D2  0CF2               	rrf	___lmul@multiplier+2,f
  3127  02D3  0CF1               	rrf	___lmul@multiplier+1,f
  3128  02D4  0CF0               	rrf	___lmul@multiplier,f
  3129  02D5  0B89               	decfsz	9,f
  3130  02D6  2AD1               	goto	u1905
  3131  02D7  0873               	movf	___lmul@multiplier+3,w
  3132  02D8  0472               	iorwf	___lmul@multiplier+2,w
  3133  02D9  0471               	iorwf	___lmul@multiplier+1,w
  3134  02DA  0470               	iorwf	___lmul@multiplier,w
  3135  02DB  1D03               	skipz
  3136  02DC  2ABF               	goto	l2147
  3137  02DD  087B               	movf	___lmul@product+3,w
  3138  02DE  00F3               	movwf	?___lmul+3
  3139  02DF  087A               	movf	___lmul@product+2,w
  3140  02E0  00F2               	movwf	?___lmul+2
  3141  02E1  0879               	movf	___lmul@product+1,w
  3142  02E2  00F1               	movwf	?___lmul+1
  3143  02E3  0878               	movf	___lmul@product,w
  3144  02E4  00F0               	movwf	?___lmul
  3145  02E5  0008               	return
  3146  02E6                     __end_of___lmul:	
  3147                           
  3148                           	psect	text7
  3149  04E0                     __ptext7:	
  3150 ;; *************** function ___lldiv *****************
  3151 ;; Defined at:
  3152 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
  3153 ;; Parameters:    Size  Location     Type
  3154 ;;  divisor         4    0[BANK0 ] unsigned long 
  3155 ;;  dividend        4    4[BANK0 ] unsigned long 
  3156 ;; Auto vars:     Size  Location     Type
  3157 ;;  quotient        4    8[BANK0 ] unsigned long 
  3158 ;;  counter         1   12[BANK0 ] unsigned char 
  3159 ;; Return value:  Size  Location     Type
  3160 ;;                  4    0[BANK0 ] unsigned long 
  3161 ;; Registers used:
  3162 ;;		wreg, status,2, status,0
  3163 ;; Tracked objects:
  3164 ;;		On entry : 0/0
  3165 ;;		On exit  : 0/0
  3166 ;;		Unchanged: 0/0
  3167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3168 ;;      Params:         0       8       0       0
  3169 ;;      Locals:         0       5       0       0
  3170 ;;      Temps:          1       0       0       0
  3171 ;;      Totals:         1      13       0       0
  3172 ;;Total ram usage:       14 bytes
  3173 ;; Hardware stack levels used:    1
  3174 ;; This function calls:
  3175 ;;		Nothing
  3176 ;; This function is called by:
  3177 ;;		_cw_get_vol
  3178 ;; This function uses a non-reentrant model
  3179 ;;
  3180                           
  3181                           
  3182                           ;psect for function ___lldiv
  3183  04E0                     ___lldiv:	
  3184                           
  3185                           ;incstack = 0
  3186                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3187  04E0  3000               	movlw	0
  3188  04E1  0140               	movlb	0	; select bank0
  3189  04E2  00AB               	movwf	___lldiv@quotient+3
  3190  04E3  3000               	movlw	0
  3191  04E4  00AA               	movwf	___lldiv@quotient+2
  3192  04E5  3000               	movlw	0
  3193  04E6  00A9               	movwf	___lldiv@quotient+1
  3194  04E7  3000               	movlw	0
  3195  04E8  00A8               	movwf	___lldiv@quotient
  3196  04E9  0823               	movf	___lldiv@divisor+3,w
  3197  04EA  0422               	iorwf	___lldiv@divisor+2,w
  3198  04EB  0421               	iorwf	___lldiv@divisor+1,w
  3199  04EC  0420               	iorwf	___lldiv@divisor,w
  3200  04ED  1903               	skipnz
  3201  04EE  2D2A               	goto	l2179
  3202  04EF  01AC               	clrf	___lldiv@counter
  3203  04F0  0AAC               	incf	___lldiv@counter,f
  3204  04F1                     l2165:	
  3205  04F1  1BA3               	btfsc	___lldiv@divisor+3,7
  3206  04F2  2CFF               	goto	l2167
  3207  04F3  3001               	movlw	1
  3208  04F4                     u1935:	
  3209  04F4  35A0               	lslf	___lldiv@divisor,f
  3210  04F5  0DA1               	rlf	___lldiv@divisor+1,f
  3211  04F6  0DA2               	rlf	___lldiv@divisor+2,f
  3212  04F7  0DA3               	rlf	___lldiv@divisor+3,f
  3213  04F8  0B89               	decfsz	9,f
  3214  04F9  2CF4               	goto	u1935
  3215  04FA  3001               	movlw	1
  3216  04FB  00FC               	movwf	??___lldiv
  3217  04FC  087C               	movf	??___lldiv,w
  3218  04FD  07AC               	addwf	___lldiv@counter,f
  3219  04FE  2CF1               	goto	l2165
  3220  04FF                     l2167:	
  3221  04FF  3001               	movlw	1
  3222  0500                     u1955:	
  3223  0500  35A8               	lslf	___lldiv@quotient,f
  3224  0501  0DA9               	rlf	___lldiv@quotient+1,f
  3225  0502  0DAA               	rlf	___lldiv@quotient+2,f
  3226  0503  0DAB               	rlf	___lldiv@quotient+3,f
  3227  0504  0B89               	decfsz	9,f
  3228  0505  2D00               	goto	u1955
  3229  0506  0823               	movf	___lldiv@divisor+3,w
  3230  0507  0227               	subwf	___lldiv@dividend+3,w
  3231  0508  1D03               	skipz
  3232  0509  2D14               	goto	u1965
  3233  050A  0822               	movf	___lldiv@divisor+2,w
  3234  050B  0226               	subwf	___lldiv@dividend+2,w
  3235  050C  1D03               	skipz
  3236  050D  2D14               	goto	u1965
  3237  050E  0821               	movf	___lldiv@divisor+1,w
  3238  050F  0225               	subwf	___lldiv@dividend+1,w
  3239  0510  1D03               	skipz
  3240  0511  2D14               	goto	u1965
  3241  0512  0820               	movf	___lldiv@divisor,w
  3242  0513  0224               	subwf	___lldiv@dividend,w
  3243  0514                     u1965:	
  3244  0514  1C03               	skipc
  3245  0515  2D1F               	goto	l2175
  3246  0516  0820               	movf	___lldiv@divisor,w
  3247  0517  02A4               	subwf	___lldiv@dividend,f
  3248  0518  0821               	movf	___lldiv@divisor+1,w
  3249  0519  3BA5               	subwfb	___lldiv@dividend+1,f
  3250  051A  0822               	movf	___lldiv@divisor+2,w
  3251  051B  3BA6               	subwfb	___lldiv@dividend+2,f
  3252  051C  0823               	movf	___lldiv@divisor+3,w
  3253  051D  3BA7               	subwfb	___lldiv@dividend+3,f
  3254  051E  1428               	bsf	___lldiv@quotient,0
  3255  051F                     l2175:	
  3256  051F  3001               	movlw	1
  3257  0520                     u1975:	
  3258  0520  36A3               	lsrf	___lldiv@divisor+3,f
  3259  0521  0CA2               	rrf	___lldiv@divisor+2,f
  3260  0522  0CA1               	rrf	___lldiv@divisor+1,f
  3261  0523  0CA0               	rrf	___lldiv@divisor,f
  3262  0524  0B89               	decfsz	9,f
  3263  0525  2D20               	goto	u1975
  3264  0526  3001               	movlw	1
  3265  0527  02AC               	subwf	___lldiv@counter,f
  3266  0528  1D03               	btfss	3,2
  3267  0529  2CFF               	goto	l2167
  3268  052A                     l2179:	
  3269  052A  082B               	movf	___lldiv@quotient+3,w
  3270  052B  00A3               	movwf	?___lldiv+3
  3271  052C  082A               	movf	___lldiv@quotient+2,w
  3272  052D  00A2               	movwf	?___lldiv+2
  3273  052E  0829               	movf	___lldiv@quotient+1,w
  3274  052F  00A1               	movwf	?___lldiv+1
  3275  0530  0828               	movf	___lldiv@quotient,w
  3276  0531  00A0               	movwf	?___lldiv
  3277  0532  0008               	return
  3278  0533                     __end_of___lldiv:	
  3279                           
  3280                           	psect	text8
  3281  012E                     __ptext8:	
  3282 ;; *************** function _update_usb_online *****************
  3283 ;; Defined at:
  3284 ;;		line 544 in file "CW201x.c"
  3285 ;; Parameters:    Size  Location     Type
  3286 ;;		None
  3287 ;; Auto vars:     Size  Location     Type
  3288 ;;		None
  3289 ;; Return value:  Size  Location     Type
  3290 ;;                  1    wreg      void 
  3291 ;; Registers used:
  3292 ;;		wreg, status,2, status,0
  3293 ;; Tracked objects:
  3294 ;;		On entry : 0/0
  3295 ;;		On exit  : 0/0
  3296 ;;		Unchanged: 0/0
  3297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3298 ;;      Params:         0       0       0       0
  3299 ;;      Locals:         0       0       0       0
  3300 ;;      Temps:          0       0       0       0
  3301 ;;      Totals:         0       0       0       0
  3302 ;;Total ram usage:        0 bytes
  3303 ;; Hardware stack levels used:    1
  3304 ;; This function calls:
  3305 ;;		Nothing
  3306 ;; This function is called by:
  3307 ;;		_cw_bat_work
  3308 ;; This function uses a non-reentrant model
  3309 ;;
  3310                           
  3311                           
  3312                           ;psect for function _update_usb_online
  3313  012E                     _update_usb_online:	
  3314                           
  3315                           ;CW201x.c: 546: if(CHARGE == 1)
  3316                           
  3317                           ;incstack = 0
  3318                           ; Regs used in _update_usb_online: [wreg+status,2+status,0]
  3319  012E  0140               	movlb	0	; select bank0
  3320  012F  0350               	decf	_CHARGE,w
  3321  0130  1D03               	btfss	3,2
  3322  0131  2935               	goto	l2323
  3323                           
  3324                           ;CW201x.c: 547: {
  3325                           ;CW201x.c: 548: cw_bat.usb_online = 1;
  3326  0132  01C7               	clrf	_cw_bat
  3327  0133  0AC7               	incf	_cw_bat,f
  3328                           
  3329                           ;CW201x.c: 549: }else{
  3330  0134  0008               	return
  3331  0135                     l2323:	
  3332                           
  3333                           ;CW201x.c: 550: cw_bat.usb_online = 0;
  3334  0135  01C7               	clrf	_cw_bat
  3335  0136  0008               	return
  3336  0137                     __end_of_update_usb_online:	
  3337                           
  3338                           	psect	text9
  3339  0245                     __ptext9:	
  3340 ;; *************** function _update_capacity *****************
  3341 ;; Defined at:
  3342 ;;		line 497 in file "CW201x.c"
  3343 ;; Parameters:    Size  Location     Type
  3344 ;;		None
  3345 ;; Auto vars:     Size  Location     Type
  3346 ;;  cw_capacity     2   35[BANK0 ] int 
  3347 ;; Return value:  Size  Location     Type
  3348 ;;                  1    wreg      void 
  3349 ;; Registers used:
  3350 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3351 ;; Tracked objects:
  3352 ;;		On entry : 0/0
  3353 ;;		On exit  : 0/0
  3354 ;;		Unchanged: 0/0
  3355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3356 ;;      Params:         0       0       0       0
  3357 ;;      Locals:         0       2       0       0
  3358 ;;      Temps:          0       1       0       0
  3359 ;;      Totals:         0       3       0       0
  3360 ;;Total ram usage:        3 bytes
  3361 ;; Hardware stack levels used:    1
  3362 ;; Hardware stack levels required when called:    8
  3363 ;; This function calls:
  3364 ;;		_cw_get_capacity
  3365 ;; This function is called by:
  3366 ;;		_cw_bat_work
  3367 ;; This function uses a non-reentrant model
  3368 ;;
  3369                           
  3370                           
  3371                           ;psect for function _update_capacity
  3372  0245                     _update_capacity:	
  3373                           
  3374                           ;CW201x.c: 499: int cw_capacity;
  3375                           ;CW201x.c: 500: cw_capacity = cw_get_capacity();
  3376                           
  3377                           ;incstack = 0
  3378                           ; Regs used in _update_capacity: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3379  0245  2402               	fcall	_cw_get_capacity
  3380  0246  0140               	movlb	0	; select bank0
  3381  0247  083B               	movf	?_cw_get_capacity+1,w
  3382  0248  00C4               	movwf	update_capacity@cw_capacity+1
  3383  0249  083A               	movf	?_cw_get_capacity,w
  3384  024A  00C3               	movwf	update_capacity@cw_capacity
  3385                           
  3386                           ;CW201x.c: 501: if((cw_capacity >= 0) && (cw_capacity <= 100) && (cw_bat.capacity != cw_
      +                          capacity))
  3387  024B  1BC4               	btfsc	update_capacity@cw_capacity+1,7
  3388  024C  0008               	return
  3389  024D  0844               	movf	update_capacity@cw_capacity+1,w
  3390  024E  3A80               	xorlw	128
  3391  024F  00C2               	movwf	??_update_capacity
  3392  0250  3080               	movlw	128
  3393  0251  0242               	subwf	??_update_capacity,w
  3394  0252  1D03               	skipz
  3395  0253  2A56               	goto	u2135
  3396  0254  3065               	movlw	101
  3397  0255  0243               	subwf	update_capacity@cw_capacity,w
  3398  0256                     u2135:	
  3399  0256  1803               	skipnc
  3400  0257  0008               	return
  3401  0258  0140               	movlb	0	; select bank0
  3402  0259  0844               	movf	update_capacity@cw_capacity+1,w
  3403  025A  0649               	xorwf	_cw_bat+2,w
  3404  025B  1D03               	skipz
  3405  025C  2A5F               	goto	u2145
  3406  025D  0843               	movf	update_capacity@cw_capacity,w
  3407  025E  0648               	xorwf	_cw_bat+1,w
  3408  025F                     u2145:	
  3409  025F  1903               	skipnz
  3410  0260  0008               	return
  3411                           
  3412                           ;CW201x.c: 502: {
  3413                           ;CW201x.c: 503: cw_bat.capacity = cw_capacity;
  3414  0261  0844               	movf	update_capacity@cw_capacity+1,w
  3415  0262  00C9               	movwf	_cw_bat+2
  3416  0263  0843               	movf	update_capacity@cw_capacity,w
  3417  0264  00C8               	movwf	_cw_bat+1
  3418  0265  0008               	return
  3419  0266                     __end_of_update_capacity:	
  3420                           
  3421                           	psect	text10
  3422  0402                     __ptext10:	
  3423 ;; *************** function _cw_get_capacity *****************
  3424 ;; Defined at:
  3425 ;;		line 325 in file "CW201x.c"
  3426 ;; Parameters:    Size  Location     Type
  3427 ;;		None
  3428 ;; Auto vars:     Size  Location     Type
  3429 ;;  ret             2   31[BANK0 ] int 
  3430 ;;  reg_val         1   33[BANK0 ] unsigned char 
  3431 ;;  cw_capacity     1   30[BANK0 ] unsigned char 
  3432 ;;  allow_capaci    1    0        unsigned char 
  3433 ;; Return value:  Size  Location     Type
  3434 ;;                  2   26[BANK0 ] int 
  3435 ;; Registers used:
  3436 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3437 ;; Tracked objects:
  3438 ;;		On entry : 0/0
  3439 ;;		On exit  : 0/0
  3440 ;;		Unchanged: 0/0
  3441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3442 ;;      Params:         0       2       0       0
  3443 ;;      Locals:         0       4       0       0
  3444 ;;      Temps:          0       2       0       0
  3445 ;;      Totals:         0       8       0       0
  3446 ;;Total ram usage:        8 bytes
  3447 ;; Hardware stack levels used:    1
  3448 ;; Hardware stack levels required when called:    7
  3449 ;; This function calls:
  3450 ;;		_cw_por
  3451 ;;		_cw_read
  3452 ;; This function is called by:
  3453 ;;		_update_capacity
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457                           
  3458                           ;psect for function _cw_get_capacity
  3459  0402                     _cw_get_capacity:	
  3460                           
  3461                           ;CW201x.c: 327: int ret = 0;
  3462                           
  3463                           ;incstack = 0
  3464                           ; Regs used in _cw_get_capacity: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3465  0402  0140               	movlb	0	; select bank0
  3466  0403  01BF               	clrf	cw_get_capacity@ret
  3467  0404  01C0               	clrf	cw_get_capacity@ret+1
  3468                           
  3469                           ;CW201x.c: 328: unsigned char allow_capacity;
  3470                           ;CW201x.c: 329: unsigned char reg_val;
  3471                           ;CW201x.c: 331: unsigned char cw_capacity;
  3472                           ;CW201x.c: 334: ret = cw_read(0x4, &reg_val);
  3473  0405  3041               	movlw	(low (cw_get_capacity@reg_val| 0))& (0+255)
  3474  0406  00BC               	movwf	??_cw_get_capacity
  3475  0407  083C               	movf	??_cw_get_capacity,w
  3476  0408  00A4               	movwf	cw_read@r_pdata
  3477  0409  3004               	movlw	4
  3478  040A  234A               	fcall	_cw_read
  3479  040B  0140               	movlb	0	; select bank0
  3480  040C  0825               	movf	?_cw_read+1,w
  3481  040D  00C0               	movwf	cw_get_capacity@ret+1
  3482  040E  0824               	movf	?_cw_read,w
  3483  040F  00BF               	movwf	cw_get_capacity@ret
  3484                           
  3485                           ;CW201x.c: 335: if(ret)
  3486  0410  083F               	movf	cw_get_capacity@ret,w
  3487  0411  0440               	iorwf	cw_get_capacity@ret+1,w
  3488  0412  1903               	btfsc	3,2
  3489  0413  2C19               	goto	l2193
  3490                           
  3491                           ;CW201x.c: 336: {
  3492                           ;CW201x.c: 337: return -1;
  3493  0414  30FF               	movlw	255
  3494  0415  00BA               	movwf	?_cw_get_capacity
  3495  0416  30FF               	movlw	255
  3496  0417  00BB               	movwf	?_cw_get_capacity+1
  3497  0418  0008               	return
  3498  0419                     l2193:	
  3499                           
  3500                           ;CW201x.c: 338: }
  3501                           ;CW201x.c: 340: cw_capacity = reg_val;
  3502  0419  0841               	movf	cw_get_capacity@reg_val,w
  3503  041A  00BC               	movwf	??_cw_get_capacity
  3504  041B  083C               	movf	??_cw_get_capacity,w
  3505  041C  00BE               	movwf	cw_get_capacity@cw_capacity
  3506                           
  3507                           ;CW201x.c: 342: if ((cw_capacity < 0) || (cw_capacity > 100)) {
  3508  041D  3065               	movlw	101
  3509  041E  023E               	subwf	cw_get_capacity@cw_capacity,w
  3510  041F  1C03               	skipc
  3511  0420  2C3E               	goto	l2215
  3512                           
  3513                           ;CW201x.c: 344: reset_loop++;
  3514  0421  3001               	movlw	1
  3515  0422  00BC               	movwf	??_cw_get_capacity
  3516  0423  083C               	movf	??_cw_get_capacity,w
  3517  0424  07CF               	addwf	_reset_loop,f
  3518                           
  3519                           ;CW201x.c: 345: if (reset_loop >5) {
  3520  0425  3006               	movlw	6
  3521  0426  024F               	subwf	_reset_loop,w
  3522  0427  1C03               	skipc
  3523  0428  2C39               	goto	l2209
  3524                           
  3525                           ;CW201x.c: 346: ret = cw_por();
  3526  0429  2447               	fcall	_cw_por
  3527  042A  0140               	movlb	0	; select bank0
  3528  042B  0834               	movf	?_cw_por+1,w
  3529  042C  00C0               	movwf	cw_get_capacity@ret+1
  3530  042D  0833               	movf	?_cw_por,w
  3531  042E  00BF               	movwf	cw_get_capacity@ret
  3532                           
  3533                           ;CW201x.c: 347: if(ret)
  3534  042F  083F               	movf	cw_get_capacity@ret,w
  3535  0430  0440               	iorwf	cw_get_capacity@ret+1,w
  3536  0431  1903               	btfsc	3,2
  3537  0432  2C38               	goto	l2207
  3538                           
  3539                           ;CW201x.c: 348: return -1;
  3540  0433  30FF               	movlw	255
  3541  0434  00BA               	movwf	?_cw_get_capacity
  3542  0435  30FF               	movlw	255
  3543  0436  00BB               	movwf	?_cw_get_capacity+1
  3544  0437  0008               	return
  3545  0438                     l2207:	
  3546                           
  3547                           ;CW201x.c: 349: reset_loop =0;
  3548  0438  01CF               	clrf	_reset_loop
  3549  0439                     l2209:	
  3550                           
  3551                           ;CW201x.c: 350: }
  3552                           ;CW201x.c: 351: return cw_bat.capacity;
  3553  0439  0849               	movf	_cw_bat+2,w
  3554  043A  00BB               	movwf	?_cw_get_capacity+1
  3555  043B  0848               	movf	_cw_bat+1,w
  3556  043C  00BA               	movwf	?_cw_get_capacity
  3557  043D  0008               	return
  3558  043E                     l2215:	
  3559                           ;CW201x.c: 352: }else {
  3560                           
  3561                           
  3562                           ;CW201x.c: 353: reset_loop =0;
  3563  043E  01CF               	clrf	_reset_loop
  3564                           
  3565                           ;CW201x.c: 354: }
  3566                           ;CW201x.c: 431: return(cw_capacity);
  3567  043F  083E               	movf	cw_get_capacity@cw_capacity,w
  3568  0440  00BC               	movwf	??_cw_get_capacity
  3569  0441  01BD               	clrf	??_cw_get_capacity+1
  3570  0442  083C               	movf	??_cw_get_capacity,w
  3571  0443  00BA               	movwf	?_cw_get_capacity
  3572  0444  083D               	movf	??_cw_get_capacity+1,w
  3573  0445  00BB               	movwf	?_cw_get_capacity+1
  3574  0446  0008               	return
  3575  0447                     __end_of_cw_get_capacity:	
  3576                           
  3577                           	psect	text11
  3578  0447                     __ptext11:	
  3579 ;; *************** function _cw_por *****************
  3580 ;; Defined at:
  3581 ;;		line 303 in file "CW201x.c"
  3582 ;; Parameters:    Size  Location     Type
  3583 ;;		None
  3584 ;; Auto vars:     Size  Location     Type
  3585 ;;  ret             2   24[BANK0 ] int 
  3586 ;;  reset_val       1   23[BANK0 ] unsigned char 
  3587 ;; Return value:  Size  Location     Type
  3588 ;;                  2   19[BANK0 ] int 
  3589 ;; Registers used:
  3590 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3591 ;; Tracked objects:
  3592 ;;		On entry : 0/0
  3593 ;;		On exit  : 0/0
  3594 ;;		Unchanged: 0/0
  3595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3596 ;;      Params:         0       2       0       0
  3597 ;;      Locals:         0       3       0       0
  3598 ;;      Temps:          0       2       0       0
  3599 ;;      Totals:         0       7       0       0
  3600 ;;Total ram usage:        7 bytes
  3601 ;; Hardware stack levels used:    1
  3602 ;; Hardware stack levels required when called:    6
  3603 ;; This function calls:
  3604 ;;		_CW_Delay100us
  3605 ;;		_cw_init
  3606 ;;		_cw_write
  3607 ;; This function is called by:
  3608 ;;		_cw_get_capacity
  3609 ;; This function uses a non-reentrant model
  3610 ;;
  3611                           
  3612                           
  3613                           ;psect for function _cw_por
  3614  0447                     _cw_por:	
  3615                           
  3616                           ;CW201x.c: 305: int ret = 0;
  3617                           
  3618                           ;incstack = 0
  3619                           ; Regs used in _cw_por: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3620  0447  0140               	movlb	0	; select bank0
  3621  0448  01B8               	clrf	cw_por@ret
  3622  0449  01B9               	clrf	cw_por@ret+1
  3623                           
  3624                           ;CW201x.c: 306: unsigned char reset_val = 0;
  3625  044A  01B7               	clrf	cw_por@reset_val
  3626                           
  3627                           ;CW201x.c: 307: reset_val = (0x3<<6);
  3628  044B  30C0               	movlw	192
  3629  044C  00B5               	movwf	??_cw_por
  3630  044D  0835               	movf	??_cw_por,w
  3631  044E  00B7               	movwf	cw_por@reset_val
  3632                           
  3633                           ;CW201x.c: 308: ret = cw_write(0xA, &reset_val);
  3634  044F  3037               	movlw	(low (cw_por@reset_val| 0))& (0+255)
  3635  0450  00B5               	movwf	??_cw_por
  3636  0451  0835               	movf	??_cw_por,w
  3637  0452  00A4               	movwf	cw_write@w_pdata
  3638  0453  300A               	movlw	10
  3639  0454  2318               	fcall	_cw_write
  3640  0455  0140               	movlb	0	; select bank0
  3641  0456  0825               	movf	?_cw_write+1,w
  3642  0457  00B9               	movwf	cw_por@ret+1
  3643  0458  0824               	movf	?_cw_write,w
  3644  0459  00B8               	movwf	cw_por@ret
  3645                           
  3646                           ;CW201x.c: 309: if (ret)
  3647  045A  0838               	movf	cw_por@ret,w
  3648  045B  0439               	iorwf	cw_por@ret+1,w
  3649  045C  1903               	btfsc	3,2
  3650  045D  2C63               	goto	l2081
  3651                           
  3652                           ;CW201x.c: 310: return -1;
  3653  045E  30FF               	movlw	255
  3654  045F  00B3               	movwf	?_cw_por
  3655  0460  30FF               	movlw	255
  3656  0461  00B4               	movwf	?_cw_por+1
  3657  0462  0008               	return
  3658  0463                     l2081:	
  3659                           
  3660                           ;CW201x.c: 311: CW_Delay100us();
  3661  0463  21E4               	fcall	_CW_Delay100us
  3662                           
  3663                           ;CW201x.c: 313: reset_val = (0x0<<6);
  3664  0464  0140               	movlb	0	; select bank0
  3665  0465  01B7               	clrf	cw_por@reset_val
  3666                           
  3667                           ;CW201x.c: 314: ret = cw_write(0xA, &reset_val);
  3668  0466  3037               	movlw	(low (cw_por@reset_val| 0))& (0+255)
  3669  0467  00B5               	movwf	??_cw_por
  3670  0468  0835               	movf	??_cw_por,w
  3671  0469  00A4               	movwf	cw_write@w_pdata
  3672  046A  300A               	movlw	10
  3673  046B  2318               	fcall	_cw_write
  3674  046C  0140               	movlb	0	; select bank0
  3675  046D  0825               	movf	?_cw_write+1,w
  3676  046E  00B9               	movwf	cw_por@ret+1
  3677  046F  0824               	movf	?_cw_write,w
  3678  0470  00B8               	movwf	cw_por@ret
  3679                           
  3680                           ;CW201x.c: 315: if (ret)
  3681  0471  0838               	movf	cw_por@ret,w
  3682  0472  0439               	iorwf	cw_por@ret+1,w
  3683  0473  1903               	btfsc	3,2
  3684  0474  2C7A               	goto	l2093
  3685                           
  3686                           ;CW201x.c: 316: return -1;
  3687  0475  30FF               	movlw	255
  3688  0476  00B3               	movwf	?_cw_por
  3689  0477  30FF               	movlw	255
  3690  0478  00B4               	movwf	?_cw_por+1
  3691  0479  0008               	return
  3692  047A                     l2093:	
  3693                           
  3694                           ;CW201x.c: 317: CW_Delay100us();
  3695  047A  21E4               	fcall	_CW_Delay100us
  3696                           
  3697                           ;CW201x.c: 319: ret = cw_init();
  3698  047B  271A               	fcall	_cw_init
  3699  047C  0140               	movlb	0	; select bank0
  3700  047D  00B5               	movwf	??_cw_por
  3701  047E  01B6               	clrf	??_cw_por+1
  3702  047F  0835               	movf	??_cw_por,w
  3703  0480  00B8               	movwf	cw_por@ret
  3704  0481  0836               	movf	??_cw_por+1,w
  3705  0482  00B9               	movwf	cw_por@ret+1
  3706                           
  3707                           ;CW201x.c: 320: if (ret)
  3708  0483  0838               	movf	cw_por@ret,w
  3709  0484  0439               	iorwf	cw_por@ret+1,w
  3710  0485  1903               	btfsc	3,2
  3711  0486  2C8C               	goto	l2103
  3712                           
  3713                           ;CW201x.c: 321: return ret;
  3714  0487  0839               	movf	cw_por@ret+1,w
  3715  0488  00B4               	movwf	?_cw_por+1
  3716  0489  0838               	movf	cw_por@ret,w
  3717  048A  00B3               	movwf	?_cw_por
  3718  048B  0008               	return
  3719  048C                     l2103:	
  3720                           
  3721                           ;CW201x.c: 322: return 0;
  3722  048C  01B3               	clrf	?_cw_por
  3723  048D  01B4               	clrf	?_cw_por+1
  3724  048E  0008               	return
  3725  048F                     __end_of_cw_por:	
  3726                           
  3727                           	psect	text12
  3728  01AA                     __ptext12:	
  3729 ;; *************** function _cw_bat_init *****************
  3730 ;; Defined at:
  3731 ;;		line 577 in file "CW201x.c"
  3732 ;; Parameters:    Size  Location     Type
  3733 ;;		None
  3734 ;; Auto vars:     Size  Location     Type
  3735 ;;  ret             1   21[BANK0 ] unsigned char 
  3736 ;;  loop            1   20[BANK0 ] unsigned char 
  3737 ;; Return value:  Size  Location     Type
  3738 ;;                  1    wreg      unsigned char 
  3739 ;; Registers used:
  3740 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3741 ;; Tracked objects:
  3742 ;;		On entry : 0/0
  3743 ;;		On exit  : 0/0
  3744 ;;		Unchanged: 0/0
  3745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3746 ;;      Params:         0       0       0       0
  3747 ;;      Locals:         0       2       0       0
  3748 ;;      Temps:          0       1       0       0
  3749 ;;      Totals:         0       3       0       0
  3750 ;;Total ram usage:        3 bytes
  3751 ;; Hardware stack levels used:    1
  3752 ;; Hardware stack levels required when called:    6
  3753 ;; This function calls:
  3754 ;;		_cw_init
  3755 ;; This function is called by:
  3756 ;;		_main
  3757 ;; This function uses a non-reentrant model
  3758 ;;
  3759                           
  3760                           
  3761                           ;psect for function _cw_bat_init
  3762  01AA                     _cw_bat_init:	
  3763                           
  3764                           ;CW201x.c: 579: unsigned char ret;
  3765                           ;CW201x.c: 580: unsigned char loop = 0;
  3766                           
  3767                           ;incstack = 0
  3768                           ; Regs used in _cw_bat_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3769  01AA  0140               	movlb	0	; select bank0
  3770  01AB  01B4               	clrf	cw_bat_init@loop
  3771  01AC                     l2335:	
  3772                           ;CW201x.c: 584: while((loop++ < 200) && (ret != 0))
  3773                           
  3774                           ;CW201x.c: 583: ret = cw_init();
  3775                           
  3776                           
  3777                           ;CW201x.c: 585: {
  3778                           ;CW201x.c: 586: ret = cw_init();
  3779  01AC  271A               	fcall	_cw_init
  3780  01AD  0140               	movlb	0	; select bank0
  3781  01AE  00B3               	movwf	??_cw_bat_init
  3782  01AF  0833               	movf	??_cw_bat_init,w
  3783  01B0  00B5               	movwf	cw_bat_init@ret
  3784  01B1  0834               	movf	cw_bat_init@loop,w
  3785  01B2  0AB4               	incf	cw_bat_init@loop,f
  3786  01B3  00B3               	movwf	??_cw_bat_init
  3787  01B4  30C8               	movlw	200
  3788  01B5  0233               	subwf	??_cw_bat_init,w
  3789  01B6  1803               	skipnc
  3790  01B7  29BB               	goto	l2341
  3791  01B8  0835               	movf	cw_bat_init@ret,w
  3792  01B9  1D03               	btfss	3,2
  3793  01BA  29AC               	goto	l2335
  3794  01BB                     l2341:	
  3795                           
  3796                           ;CW201x.c: 587: }
  3797                           ;CW201x.c: 589: cw_bat.usb_online = 0;
  3798  01BB  01C7               	clrf	_cw_bat
  3799                           
  3800                           ;CW201x.c: 590: cw_bat.capacity = 2;
  3801  01BC  3002               	movlw	2
  3802  01BD  00C8               	movwf	_cw_bat+1
  3803  01BE  3000               	movlw	0
  3804  01BF  00C9               	movwf	_cw_bat+2
  3805                           
  3806                           ;CW201x.c: 591: cw_bat.voltage = 0;
  3807  01C0  01CA               	clrf	_cw_bat+3
  3808  01C1  01CB               	clrf	_cw_bat+4
  3809                           
  3810                           ;CW201x.c: 595: cw_bat.alt = 0;
  3811  01C2  01CC               	clrf	_cw_bat+5
  3812                           
  3813                           ;CW201x.c: 597: return ret;
  3814  01C3  0835               	movf	cw_bat_init@ret,w
  3815  01C4  0008               	return
  3816  01C5                     __end_of_cw_bat_init:	
  3817                           
  3818                           	psect	text13
  3819  071A                     __ptext13:	
  3820 ;; *************** function _cw_init *****************
  3821 ;; Defined at:
  3822 ;;		line 139 in file "CW201x.c"
  3823 ;; Parameters:    Size  Location     Type
  3824 ;;		None
  3825 ;; Auto vars:     Size  Location     Type
  3826 ;;  ret             2   16[BANK0 ] unsigned int 
  3827 ;;  reg_val         1   18[BANK0 ] unsigned char 
  3828 ;;  i               1   15[BANK0 ] unsigned char 
  3829 ;; Return value:  Size  Location     Type
  3830 ;;                  1    wreg      unsigned char 
  3831 ;; Registers used:
  3832 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3833 ;; Tracked objects:
  3834 ;;		On entry : 0/0
  3835 ;;		On exit  : 0/0
  3836 ;;		Unchanged: 0/0
  3837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3838 ;;      Params:         0       0       0       0
  3839 ;;      Locals:         0       4       0       0
  3840 ;;      Temps:          0       2       0       0
  3841 ;;      Totals:         0       6       0       0
  3842 ;;Total ram usage:        6 bytes
  3843 ;; Hardware stack levels used:    1
  3844 ;; Hardware stack levels required when called:    5
  3845 ;; This function calls:
  3846 ;;		_CW_Delay10ms
  3847 ;;		_cw_read
  3848 ;;		_cw_update_config_info
  3849 ;;		_cw_write
  3850 ;; This function is called by:
  3851 ;;		_cw_por
  3852 ;;		_cw_bat_init
  3853 ;; This function uses a non-reentrant model
  3854 ;;
  3855                           
  3856                           
  3857                           ;psect for function _cw_init
  3858  071A                     _cw_init:	
  3859                           
  3860                           ;CW201x.c: 141: unsigned ret;
  3861                           ;CW201x.c: 142: unsigned char i;
  3862                           ;CW201x.c: 143: unsigned char reg_val = (0x0<<6);
  3863                           
  3864                           ;incstack = 0
  3865                           ; Regs used in _cw_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3866  071A  0140               	movlb	0	; select bank0
  3867  071B  01B2               	clrf	cw_init@reg_val
  3868                           
  3869                           ;CW201x.c: 144: const unsigned char cw_bat_config_info[64] = {
  3870                           ;CW201x.c: 145: 0x14,0xA6,0x70,0x6C,0x6C,0x67,0x64,
  3871                           ;CW201x.c: 146: 0x62,0x60,0x5C,0x59,0x4E,0x50,0x42,
  3872                           ;CW201x.c: 147: 0x2E,0x26,0x25,0x24,0x27,0x2E,0x41,
  3873                           ;CW201x.c: 148: 0x5A,0x6D,0x4C,0x39,0xD7,0x06,0x66,
  3874                           ;CW201x.c: 149: 0x00,0x01,0x05,0x34,0x61,0x76,0x79,
  3875                           ;CW201x.c: 150: 0x7D,0x42,0x1E,0xA4,0x00,0x27,0x5A,
  3876                           ;CW201x.c: 151: 0x52,0x87,0x8F,0x91,0x94,0x52,0x82,
  3877                           ;CW201x.c: 152: 0x8C,0x92,0x96,0x2B,0x59,0x6E,0xCB,
  3878                           ;CW201x.c: 153: 0x2F,0x7D,0x72,0xA5,0xB5,0xC1,0x94,
  3879  071C  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  3880  071D  00AD               	movwf	??_cw_init
  3881  071E  082D               	movf	??_cw_init,w
  3882  071F  00A4               	movwf	cw_write@w_pdata
  3883  0720  300A               	movlw	10
  3884  0721  2318               	fcall	_cw_write
  3885  0722  0140               	movlb	0	; select bank0
  3886  0723  0825               	movf	?_cw_write+1,w
  3887  0724  00B1               	movwf	cw_init@ret+1
  3888  0725  0824               	movf	?_cw_write,w
  3889  0726  00B0               	movwf	cw_init@ret
  3890                           
  3891                           ;CW201x.c: 159: if(ret)
  3892  0727  0830               	movf	cw_init@ret,w
  3893  0728  0431               	iorwf	cw_init@ret+1,w
  3894  0729  1903               	btfsc	3,2
  3895  072A  2F2D               	goto	l1953
  3896                           
  3897                           ;CW201x.c: 160: {
  3898                           ;CW201x.c: 161: return 1;
  3899  072B  3001               	movlw	1
  3900  072C  0008               	return
  3901  072D                     l1953:	
  3902                           
  3903                           ;CW201x.c: 162: }
  3904                           ;CW201x.c: 165: ret = cw_read(0x8, &reg_val);
  3905  072D  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  3906  072E  00AD               	movwf	??_cw_init
  3907  072F  082D               	movf	??_cw_init,w
  3908  0730  00A4               	movwf	cw_read@r_pdata
  3909  0731  3008               	movlw	8
  3910  0732  234A               	fcall	_cw_read
  3911  0733  0140               	movlb	0	; select bank0
  3912  0734  0825               	movf	?_cw_read+1,w
  3913  0735  00B1               	movwf	cw_init@ret+1
  3914  0736  0824               	movf	?_cw_read,w
  3915  0737  00B0               	movwf	cw_init@ret
  3916                           
  3917                           ;CW201x.c: 166: if(ret)
  3918  0738  0830               	movf	cw_init@ret,w
  3919  0739  0431               	iorwf	cw_init@ret+1,w
  3920  073A  1903               	btfsc	3,2
  3921  073B  2F3E               	goto	l1961
  3922                           
  3923                           ;CW201x.c: 167: {
  3924                           ;CW201x.c: 168: return 1;
  3925  073C  3001               	movlw	1
  3926  073D  0008               	return
  3927  073E                     l1961:	
  3928                           
  3929                           ;CW201x.c: 169: }
  3930                           ;CW201x.c: 170: if((reg_val & 0xf8) != (0x0<<3))
  3931  073E  0832               	movf	cw_init@reg_val,w
  3932  073F  39F8               	andlw	248
  3933  0740  1903               	btfsc	3,2
  3934  0741  2F57               	goto	l1973
  3935                           
  3936                           ;CW201x.c: 174: reg_val |= (0x0<<3);
  3937  0742  3007               	movlw	7
  3938  0743  00AD               	movwf	??_cw_init
  3939  0744  082D               	movf	??_cw_init,w
  3940  0745  05B2               	andwf	cw_init@reg_val,f
  3941                           
  3942                           ;CW201x.c: 175: ret = cw_write(0x8, &reg_val);
  3943  0746  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  3944  0747  00AD               	movwf	??_cw_init
  3945  0748  082D               	movf	??_cw_init,w
  3946  0749  00A4               	movwf	cw_write@w_pdata
  3947  074A  3008               	movlw	8
  3948  074B  2318               	fcall	_cw_write
  3949  074C  0140               	movlb	0	; select bank0
  3950  074D  0825               	movf	?_cw_write+1,w
  3951  074E  00B1               	movwf	cw_init@ret+1
  3952  074F  0824               	movf	?_cw_write,w
  3953  0750  00B0               	movwf	cw_init@ret
  3954                           
  3955                           ;CW201x.c: 176: if(ret)
  3956  0751  0830               	movf	cw_init@ret,w
  3957  0752  0431               	iorwf	cw_init@ret+1,w
  3958  0753  1903               	btfsc	3,2
  3959  0754  2F57               	goto	l1973
  3960                           
  3961                           ;CW201x.c: 177: {
  3962                           ;CW201x.c: 178: return 1;
  3963  0755  3001               	movlw	1
  3964  0756  0008               	return
  3965  0757                     l1973:	
  3966                           
  3967                           ;CW201x.c: 179: }
  3968                           ;CW201x.c: 180: }
  3969                           ;CW201x.c: 183: ret = cw_read(0x8, &reg_val);
  3970  0757  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  3971  0758  00AD               	movwf	??_cw_init
  3972  0759  082D               	movf	??_cw_init,w
  3973  075A  00A4               	movwf	cw_read@r_pdata
  3974  075B  3008               	movlw	8
  3975  075C  234A               	fcall	_cw_read
  3976  075D  0140               	movlb	0	; select bank0
  3977  075E  0825               	movf	?_cw_read+1,w
  3978  075F  00B1               	movwf	cw_init@ret+1
  3979  0760  0824               	movf	?_cw_read,w
  3980  0761  00B0               	movwf	cw_init@ret
  3981                           
  3982                           ;CW201x.c: 184: if(ret)
  3983  0762  0830               	movf	cw_init@ret,w
  3984  0763  0431               	iorwf	cw_init@ret+1,w
  3985  0764  1903               	btfsc	3,2
  3986  0765  2F68               	goto	l241
  3987                           
  3988                           ;CW201x.c: 185: {
  3989                           ;CW201x.c: 186: return 1;
  3990  0766  3001               	movlw	1
  3991  0767  0008               	return
  3992  0768                     l241:	
  3993                           
  3994                           ;CW201x.c: 187: }
  3995                           ;CW201x.c: 188: if(!(reg_val & (0x1<<1)))
  3996  0768  18B2               	btfsc	cw_init@reg_val,1
  3997  0769  2F78               	goto	l1989
  3998                           
  3999                           ;CW201x.c: 189: {
  4000                           ;CW201x.c: 191: ret = cw_update_config_info();
  4001  076A  2655               	fcall	_cw_update_config_info
  4002  076B  0140               	movlb	0	; select bank0
  4003  076C  00AD               	movwf	??_cw_init
  4004  076D  01AE               	clrf	??_cw_init+1
  4005  076E  082D               	movf	??_cw_init,w
  4006  076F  00B0               	movwf	cw_init@ret
  4007  0770  082E               	movf	??_cw_init+1,w
  4008  0771  00B1               	movwf	cw_init@ret+1
  4009                           
  4010                           ;CW201x.c: 192: if(ret)
  4011  0772  0830               	movf	cw_init@ret,w
  4012  0773  0431               	iorwf	cw_init@ret+1,w
  4013  0774  1903               	btfsc	3,2
  4014  0775  2FB4               	goto	l2021
  4015                           
  4016                           ;CW201x.c: 193: {
  4017                           ;CW201x.c: 194: return ret;
  4018  0776  0830               	movf	cw_init@ret,w
  4019  0777  0008               	return
  4020  0778                     l1989:	
  4021                           ;CW201x.c: 195: }
  4022                           ;CW201x.c: 196: }
  4023                           
  4024                           
  4025                           ;CW201x.c: 197: else
  4026                           ;CW201x.c: 198: {
  4027                           ;CW201x.c: 199: for(i = 0; i < 64; i++)
  4028  0778  01AF               	clrf	cw_init@i
  4029  0779  3040               	movlw	64
  4030  077A  022F               	subwf	cw_init@i,w
  4031  077B  1803               	btfsc	3,0
  4032  077C  2FA2               	goto	l2011
  4033  077D                     l1995:	
  4034                           
  4035                           ;CW201x.c: 200: {
  4036                           ;CW201x.c: 201: ret = cw_read(0x10 +i, &reg_val);
  4037  077D  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4038  077E  00AD               	movwf	??_cw_init
  4039  077F  082D               	movf	??_cw_init,w
  4040  0780  00A4               	movwf	cw_read@r_pdata
  4041  0781  082F               	movf	cw_init@i,w
  4042  0782  3E10               	addlw	16
  4043  0783  234A               	fcall	_cw_read
  4044  0784  0140               	movlb	0	; select bank0
  4045  0785  0825               	movf	?_cw_read+1,w
  4046  0786  00B1               	movwf	cw_init@ret+1
  4047  0787  0824               	movf	?_cw_read,w
  4048  0788  00B0               	movwf	cw_init@ret
  4049                           
  4050                           ;CW201x.c: 202: if(ret)
  4051  0789  0830               	movf	cw_init@ret,w
  4052  078A  0431               	iorwf	cw_init@ret+1,w
  4053  078B  1903               	btfsc	3,2
  4054  078C  2F8F               	goto	l2003
  4055                           
  4056                           ;CW201x.c: 203: {
  4057                           ;CW201x.c: 204: return 1;
  4058  078D  3001               	movlw	1
  4059  078E  0008               	return
  4060  078F                     l2003:	
  4061                           
  4062                           ;CW201x.c: 205: }
  4063                           ;CW201x.c: 206: if(cw_bat_config_info[i] != reg_val)
  4064  078F  082F               	movf	cw_init@i,w
  4065  0790  3EC2               	addlw	low (cw_init@cw_bat_config_info| (0+32768))
  4066  0791  0084               	movwf	4
  4067  0792  3083               	movlw	high (cw_init@cw_bat_config_info| (0+32768))
  4068  0793  1803               	skipnc
  4069  0794  3E01               	addlw	1
  4070  0795  0085               	movwf	5
  4071  0796  0800               	movf	0,w	;code access
  4072  0797  0632               	xorwf	cw_init@reg_val,w
  4073  0798  1D03               	btfss	3,2
  4074  0799  2FA2               	goto	l2011
  4075                           
  4076                           ;CW201x.c: 207: {
  4077                           ;CW201x.c: 208: break;
  4078  079A  3001               	movlw	1
  4079  079B  00AD               	movwf	??_cw_init
  4080  079C  082D               	movf	??_cw_init,w
  4081  079D  07AF               	addwf	cw_init@i,f
  4082  079E  3040               	movlw	64
  4083  079F  022F               	subwf	cw_init@i,w
  4084  07A0  1C03               	skipc
  4085  07A1  2F7D               	goto	l1995
  4086  07A2                     l2011:	
  4087                           
  4088                           ;CW201x.c: 209: }
  4089                           ;CW201x.c: 210: }
  4090                           ;CW201x.c: 211: if(i != 64)
  4091  07A2  3040               	movlw	64
  4092  07A3  062F               	xorwf	cw_init@i,w
  4093  07A4  1903               	btfsc	3,2
  4094  07A5  2FB4               	goto	l2021
  4095                           
  4096                           ;CW201x.c: 212: {
  4097                           ;CW201x.c: 214: ret = cw_update_config_info();
  4098  07A6  2655               	fcall	_cw_update_config_info
  4099  07A7  0140               	movlb	0	; select bank0
  4100  07A8  00AD               	movwf	??_cw_init
  4101  07A9  01AE               	clrf	??_cw_init+1
  4102  07AA  082D               	movf	??_cw_init,w
  4103  07AB  00B0               	movwf	cw_init@ret
  4104  07AC  082E               	movf	??_cw_init+1,w
  4105  07AD  00B1               	movwf	cw_init@ret+1
  4106                           
  4107                           ;CW201x.c: 215: if(ret)
  4108  07AE  0830               	movf	cw_init@ret,w
  4109  07AF  0431               	iorwf	cw_init@ret+1,w
  4110  07B0  1903               	btfsc	3,2
  4111  07B1  2FB4               	goto	l2021
  4112                           
  4113                           ;CW201x.c: 216: {
  4114                           ;CW201x.c: 217: return ret;
  4115  07B2  0830               	movf	cw_init@ret,w
  4116  07B3  0008               	return
  4117  07B4                     l2021:	
  4118                           
  4119                           ;CW201x.c: 218: }
  4120                           ;CW201x.c: 219: }
  4121                           ;CW201x.c: 220: }
  4122                           ;CW201x.c: 222: for (i = 0; i < 30; i++) {
  4123  07B4  01AF               	clrf	cw_init@i
  4124  07B5  301E               	movlw	30
  4125  07B6  022F               	subwf	cw_init@i,w
  4126  07B7  1803               	btfsc	3,0
  4127  07B8  2FDC               	goto	l2047
  4128  07B9                     l2027:	
  4129                           
  4130                           ;CW201x.c: 223: CW_Delay10ms(10);
  4131  07B9  300A               	movlw	10
  4132  07BA  00F0               	movwf	CW_Delay10ms@c
  4133  07BB  3000               	movlw	0
  4134  07BC  00F1               	movwf	CW_Delay10ms@c+1
  4135  07BD  2224               	fcall	_CW_Delay10ms
  4136                           
  4137                           ;CW201x.c: 224: ret = cw_read(0x4, &reg_val);
  4138  07BE  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4139  07BF  0140               	movlb	0	; select bank0
  4140  07C0  00AD               	movwf	??_cw_init
  4141  07C1  082D               	movf	??_cw_init,w
  4142  07C2  00A4               	movwf	cw_read@r_pdata
  4143  07C3  3004               	movlw	4
  4144  07C4  234A               	fcall	_cw_read
  4145  07C5  0140               	movlb	0	; select bank0
  4146  07C6  0825               	movf	?_cw_read+1,w
  4147  07C7  00B1               	movwf	cw_init@ret+1
  4148  07C8  0824               	movf	?_cw_read,w
  4149  07C9  00B0               	movwf	cw_init@ret
  4150                           
  4151                           ;CW201x.c: 225: if (ret)
  4152  07CA  0830               	movf	cw_init@ret,w
  4153  07CB  0431               	iorwf	cw_init@ret+1,w
  4154  07CC  1903               	btfsc	3,2
  4155  07CD  2FD0               	goto	l2039
  4156                           
  4157                           ;CW201x.c: 226: return 1;
  4158  07CE  3001               	movlw	1
  4159  07CF  0008               	return
  4160  07D0                     l2039:	
  4161                           
  4162                           ;CW201x.c: 227: else if (reg_val <= 100)
  4163  07D0  3065               	movlw	101
  4164  07D1  0232               	subwf	cw_init@reg_val,w
  4165  07D2  1C03               	btfss	3,0
  4166  07D3  2FDC               	goto	l2047
  4167                           
  4168                           ;CW201x.c: 228: break;
  4169  07D4  3001               	movlw	1
  4170  07D5  00AD               	movwf	??_cw_init
  4171  07D6  082D               	movf	??_cw_init,w
  4172  07D7  07AF               	addwf	cw_init@i,f
  4173  07D8  301E               	movlw	30
  4174  07D9  022F               	subwf	cw_init@i,w
  4175  07DA  1C03               	skipc
  4176  07DB  2FB9               	goto	l2027
  4177  07DC                     l2047:	
  4178                           
  4179                           ;CW201x.c: 229: }
  4180                           ;CW201x.c: 231: if (i >=30){
  4181  07DC  301E               	movlw	30
  4182  07DD  022F               	subwf	cw_init@i,w
  4183  07DE  1C03               	skipc
  4184  07DF  2FF1               	goto	l2057
  4185                           
  4186                           ;CW201x.c: 232: reg_val = (0x3<<6);
  4187  07E0  30C0               	movlw	192
  4188  07E1  00AD               	movwf	??_cw_init
  4189  07E2  082D               	movf	??_cw_init,w
  4190  07E3  00B2               	movwf	cw_init@reg_val
  4191                           
  4192                           ;CW201x.c: 233: ret = cw_write(0xA, &reg_val);
  4193  07E4  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4194  07E5  00AD               	movwf	??_cw_init
  4195  07E6  082D               	movf	??_cw_init,w
  4196  07E7  00A4               	movwf	cw_write@w_pdata
  4197  07E8  300A               	movlw	10
  4198  07E9  2318               	fcall	_cw_write
  4199  07EA  0140               	movlb	0	; select bank0
  4200  07EB  0825               	movf	?_cw_write+1,w
  4201  07EC  00B1               	movwf	cw_init@ret+1
  4202  07ED  0824               	movf	?_cw_write,w
  4203  07EE  00B0               	movwf	cw_init@ret
  4204                           
  4205                           ;CW201x.c: 235: return 4;
  4206  07EF  3004               	movlw	4
  4207  07F0  0008               	return
  4208  07F1                     l2057:	
  4209                           
  4210                           ;CW201x.c: 236: }
  4211                           ;CW201x.c: 237: return 0;
  4212  07F1  3000               	movlw	0
  4213  07F2  0008               	return
  4214  07F3                     __end_of_cw_init:	
  4215                           
  4216                           	psect	text14
  4217  0655                     __ptext14:	
  4218 ;; *************** function _cw_update_config_info *****************
  4219 ;; Defined at:
  4220 ;;		line 53 in file "CW201x.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;		None
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;  ret             2    9[BANK0 ] int 
  4225 ;;  reg_val         1   12[BANK0 ] unsigned char 
  4226 ;;  i               1   11[BANK0 ] unsigned char 
  4227 ;;  reset_val       1    8[BANK0 ] unsigned char 
  4228 ;; Return value:  Size  Location     Type
  4229 ;;                  1    wreg      unsigned char 
  4230 ;; Registers used:
  4231 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4232 ;; Tracked objects:
  4233 ;;		On entry : 0/0
  4234 ;;		On exit  : 0/0
  4235 ;;		Unchanged: 0/0
  4236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4237 ;;      Params:         0       0       0       0
  4238 ;;      Locals:         0       5       0       0
  4239 ;;      Temps:          0       1       0       0
  4240 ;;      Totals:         0       6       0       0
  4241 ;;Total ram usage:        6 bytes
  4242 ;; Hardware stack levels used:    1
  4243 ;; Hardware stack levels required when called:    4
  4244 ;; This function calls:
  4245 ;;		_CW_Delay100us
  4246 ;;		_cw_read
  4247 ;;		_cw_write
  4248 ;; This function is called by:
  4249 ;;		_cw_init
  4250 ;; This function uses a non-reentrant model
  4251 ;;
  4252                           
  4253                           
  4254                           ;psect for function _cw_update_config_info
  4255  0655                     _cw_update_config_info:	
  4256                           
  4257                           ;CW201x.c: 55: int ret = 0;
  4258                           
  4259                           ;incstack = 0
  4260                           ; Regs used in _cw_update_config_info: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4261  0655  0140               	movlb	0	; select bank0
  4262  0656  01A9               	clrf	cw_update_config_info@ret
  4263  0657  01AA               	clrf	cw_update_config_info@ret+1
  4264                           
  4265                           ;CW201x.c: 56: unsigned char i;
  4266                           ;CW201x.c: 57: unsigned char reset_val;
  4267                           ;CW201x.c: 58: unsigned char reg_val;
  4268                           ;CW201x.c: 59: const unsigned char cw_bat_config_info[64] = {
  4269                           ;CW201x.c: 60: 0x14,0xA6,0x70,0x6C,0x6C,0x67,0x64,
  4270                           ;CW201x.c: 61: 0x62,0x60,0x5C,0x59,0x4E,0x50,0x42,
  4271                           ;CW201x.c: 62: 0x2E,0x26,0x25,0x24,0x27,0x2E,0x41,
  4272                           ;CW201x.c: 63: 0x5A,0x6D,0x4C,0x39,0xD7,0x06,0x66,
  4273                           ;CW201x.c: 64: 0x00,0x01,0x05,0x34,0x61,0x76,0x79,
  4274                           ;CW201x.c: 65: 0x7D,0x42,0x1E,0xA4,0x00,0x27,0x5A,
  4275                           ;CW201x.c: 66: 0x52,0x87,0x8F,0x91,0x94,0x52,0x82,
  4276  0658  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4277  0659  00A7               	movwf	??_cw_update_config_info
  4278  065A  0827               	movf	??_cw_update_config_info,w
  4279  065B  00A4               	movwf	cw_read@r_pdata
  4280  065C  300A               	movlw	10
  4281  065D  234A               	fcall	_cw_read
  4282  065E  0140               	movlb	0	; select bank0
  4283  065F  0825               	movf	?_cw_read+1,w
  4284  0660  00AA               	movwf	cw_update_config_info@ret+1
  4285  0661  0824               	movf	?_cw_read,w
  4286  0662  00A9               	movwf	cw_update_config_info@ret
  4287                           
  4288                           ;CW201x.c: 74: if(ret)
  4289  0663  0829               	movf	cw_update_config_info@ret,w
  4290  0664  042A               	iorwf	cw_update_config_info@ret+1,w
  4291  0665  1903               	btfsc	3,2
  4292  0666  2E69               	goto	l1849
  4293                           
  4294                           ;CW201x.c: 75: {
  4295                           ;CW201x.c: 76: return 1;
  4296  0667  3001               	movlw	1
  4297  0668  0008               	return
  4298  0669                     l1849:	
  4299                           
  4300                           ;CW201x.c: 77: }
  4301                           ;CW201x.c: 78: if((reg_val & (0x3<<6)) == (0x3<<6))
  4302  0669  30C0               	movlw	192
  4303  066A  052C               	andwf	cw_update_config_info@reg_val,w
  4304  066B  00A7               	movwf	??_cw_update_config_info
  4305  066C  30C0               	movlw	192
  4306  066D  0627               	xorwf	??_cw_update_config_info,w
  4307  066E  1D03               	btfss	3,2
  4308  066F  2E72               	goto	l1855
  4309                           
  4310                           ;CW201x.c: 79: {
  4311                           ;CW201x.c: 80: return 2;
  4312  0670  3002               	movlw	2
  4313  0671  0008               	return
  4314  0672                     l1855:	
  4315                           
  4316                           ;CW201x.c: 81: }
  4317                           ;CW201x.c: 83: for(i = 0; i < 64; i++)
  4318  0672  01AB               	clrf	cw_update_config_info@i
  4319  0673  3040               	movlw	64
  4320  0674  022B               	subwf	cw_update_config_info@i,w
  4321  0675  1803               	btfsc	3,0
  4322  0676  2E9C               	goto	l1875
  4323  0677                     l1861:	
  4324                           
  4325                           ;CW201x.c: 84: {
  4326                           ;CW201x.c: 85: reg_val = cw_bat_config_info[i];
  4327  0677  082B               	movf	cw_update_config_info@i,w
  4328  0678  3E82               	addlw	low (cw_update_config_info@cw_bat_config_info| (0+32768))
  4329  0679  0084               	movwf	4
  4330  067A  3083               	movlw	high (cw_update_config_info@cw_bat_config_info| (0+32768))
  4331  067B  1803               	skipnc
  4332  067C  3E01               	addlw	1
  4333  067D  0085               	movwf	5
  4334  067E  0800               	movf	0,w	;code access
  4335  067F  00A7               	movwf	??_cw_update_config_info
  4336  0680  0827               	movf	??_cw_update_config_info,w
  4337  0681  00AC               	movwf	cw_update_config_info@reg_val
  4338                           
  4339                           ;CW201x.c: 86: ret = cw_write(0x10+i, &reg_val);
  4340  0682  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4341  0683  00A7               	movwf	??_cw_update_config_info
  4342  0684  0827               	movf	??_cw_update_config_info,w
  4343  0685  00A4               	movwf	cw_write@w_pdata
  4344  0686  082B               	movf	cw_update_config_info@i,w
  4345  0687  3E10               	addlw	16
  4346  0688  2318               	fcall	_cw_write
  4347  0689  0140               	movlb	0	; select bank0
  4348  068A  0825               	movf	?_cw_write+1,w
  4349  068B  00AA               	movwf	cw_update_config_info@ret+1
  4350  068C  0824               	movf	?_cw_write,w
  4351  068D  00A9               	movwf	cw_update_config_info@ret
  4352                           
  4353                           ;CW201x.c: 87: if(ret)
  4354  068E  0829               	movf	cw_update_config_info@ret,w
  4355  068F  042A               	iorwf	cw_update_config_info@ret+1,w
  4356  0690  1903               	btfsc	3,2
  4357  0691  2E94               	goto	l1871
  4358                           
  4359                           ;CW201x.c: 88: {
  4360                           ;CW201x.c: 89: return 1;
  4361  0692  3001               	movlw	1
  4362  0693  0008               	return
  4363  0694                     l1871:	
  4364  0694  3001               	movlw	1
  4365  0695  00A7               	movwf	??_cw_update_config_info
  4366  0696  0827               	movf	??_cw_update_config_info,w
  4367  0697  07AB               	addwf	cw_update_config_info@i,f
  4368  0698  3040               	movlw	64
  4369  0699  022B               	subwf	cw_update_config_info@i,w
  4370  069A  1C03               	skipc
  4371  069B  2E77               	goto	l1861
  4372  069C                     l1875:	
  4373                           
  4374                           ;CW201x.c: 90: }
  4375                           ;CW201x.c: 91: }
  4376                           ;CW201x.c: 94: for(i = 0; i < 64; i++)
  4377  069C  01AB               	clrf	cw_update_config_info@i
  4378  069D  3040               	movlw	64
  4379  069E  022B               	subwf	cw_update_config_info@i,w
  4380  069F  1803               	btfsc	3,0
  4381  06A0  2EC8               	goto	l1899
  4382  06A1                     l1881:	
  4383                           
  4384                           ;CW201x.c: 95: {
  4385                           ;CW201x.c: 96: ret = cw_read(0x10+i, &reg_val);
  4386  06A1  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4387  06A2  00A7               	movwf	??_cw_update_config_info
  4388  06A3  0827               	movf	??_cw_update_config_info,w
  4389  06A4  00A4               	movwf	cw_read@r_pdata
  4390  06A5  082B               	movf	cw_update_config_info@i,w
  4391  06A6  3E10               	addlw	16
  4392  06A7  234A               	fcall	_cw_read
  4393  06A8  0140               	movlb	0	; select bank0
  4394  06A9  0825               	movf	?_cw_read+1,w
  4395  06AA  00AA               	movwf	cw_update_config_info@ret+1
  4396  06AB  0824               	movf	?_cw_read,w
  4397  06AC  00A9               	movwf	cw_update_config_info@ret
  4398                           
  4399                           ;CW201x.c: 97: if(ret)
  4400  06AD  0829               	movf	cw_update_config_info@ret,w
  4401  06AE  042A               	iorwf	cw_update_config_info@ret+1,w
  4402  06AF  1903               	btfsc	3,2
  4403  06B0  2EB3               	goto	l1889
  4404                           
  4405                           ;CW201x.c: 98: {
  4406                           ;CW201x.c: 99: return 1;
  4407  06B1  3001               	movlw	1
  4408  06B2  0008               	return
  4409  06B3                     l1889:	
  4410                           
  4411                           ;CW201x.c: 100: }
  4412                           ;CW201x.c: 101: if(reg_val != cw_bat_config_info[i])
  4413  06B3  082B               	movf	cw_update_config_info@i,w
  4414  06B4  3E82               	addlw	low (cw_update_config_info@cw_bat_config_info| (0+32768))
  4415  06B5  0084               	movwf	4
  4416  06B6  3083               	movlw	high (cw_update_config_info@cw_bat_config_info| (0+32768))
  4417  06B7  1803               	skipnc
  4418  06B8  3E01               	addlw	1
  4419  06B9  0085               	movwf	5
  4420  06BA  0800               	movf	0,w	;code access
  4421  06BB  062C               	xorwf	cw_update_config_info@reg_val,w
  4422  06BC  1903               	skipnz
  4423  06BD  2EC0               	goto	l1895
  4424                           
  4425                           ;CW201x.c: 102: {
  4426                           ;CW201x.c: 103: return 3;
  4427  06BE  3003               	movlw	3
  4428  06BF  0008               	return
  4429  06C0                     l1895:	
  4430  06C0  3001               	movlw	1
  4431  06C1  00A7               	movwf	??_cw_update_config_info
  4432  06C2  0827               	movf	??_cw_update_config_info,w
  4433  06C3  07AB               	addwf	cw_update_config_info@i,f
  4434  06C4  3040               	movlw	64
  4435  06C5  022B               	subwf	cw_update_config_info@i,w
  4436  06C6  1C03               	skipc
  4437  06C7  2EA1               	goto	l1881
  4438  06C8                     l1899:	
  4439                           
  4440                           ;CW201x.c: 104: }
  4441                           ;CW201x.c: 105: }
  4442                           ;CW201x.c: 107: ret = cw_read(0x8, &reg_val);
  4443  06C8  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4444  06C9  00A7               	movwf	??_cw_update_config_info
  4445  06CA  0827               	movf	??_cw_update_config_info,w
  4446  06CB  00A4               	movwf	cw_read@r_pdata
  4447  06CC  3008               	movlw	8
  4448  06CD  234A               	fcall	_cw_read
  4449  06CE  0140               	movlb	0	; select bank0
  4450  06CF  0825               	movf	?_cw_read+1,w
  4451  06D0  00AA               	movwf	cw_update_config_info@ret+1
  4452  06D1  0824               	movf	?_cw_read,w
  4453  06D2  00A9               	movwf	cw_update_config_info@ret
  4454                           
  4455                           ;CW201x.c: 108: if(ret)
  4456  06D3  0829               	movf	cw_update_config_info@ret,w
  4457  06D4  042A               	iorwf	cw_update_config_info@ret+1,w
  4458  06D5  1903               	btfsc	3,2
  4459  06D6  2ED9               	goto	l228
  4460                           
  4461                           ;CW201x.c: 109: {
  4462                           ;CW201x.c: 110: return 1;
  4463  06D7  3001               	movlw	1
  4464  06D8  0008               	return
  4465  06D9                     l228:	
  4466                           
  4467                           ;CW201x.c: 111: }
  4468                           ;CW201x.c: 112: reg_val |= (0x1<<1);
  4469  06D9  14AC               	bsf	cw_update_config_info@reg_val,1
  4470                           
  4471                           ;CW201x.c: 114: reg_val |= (0x0<<3);
  4472  06DA  3007               	movlw	7
  4473  06DB  00A7               	movwf	??_cw_update_config_info
  4474  06DC  0827               	movf	??_cw_update_config_info,w
  4475  06DD  05AC               	andwf	cw_update_config_info@reg_val,f
  4476                           
  4477                           ;CW201x.c: 115: ret = cw_write(0x8, &reg_val);
  4478  06DE  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4479  06DF  00A7               	movwf	??_cw_update_config_info
  4480  06E0  0827               	movf	??_cw_update_config_info,w
  4481  06E1  00A4               	movwf	cw_write@w_pdata
  4482  06E2  3008               	movlw	8
  4483  06E3  2318               	fcall	_cw_write
  4484  06E4  0140               	movlb	0	; select bank0
  4485  06E5  0825               	movf	?_cw_write+1,w
  4486  06E6  00AA               	movwf	cw_update_config_info@ret+1
  4487  06E7  0824               	movf	?_cw_write,w
  4488  06E8  00A9               	movwf	cw_update_config_info@ret
  4489                           
  4490                           ;CW201x.c: 116: if(ret)
  4491  06E9  0829               	movf	cw_update_config_info@ret,w
  4492  06EA  042A               	iorwf	cw_update_config_info@ret+1,w
  4493  06EB  1903               	btfsc	3,2
  4494  06EC  2EEF               	goto	l1917
  4495                           
  4496                           ;CW201x.c: 117: {
  4497                           ;CW201x.c: 118: return 1;
  4498  06ED  3001               	movlw	1
  4499  06EE  0008               	return
  4500  06EF                     l1917:	
  4501                           
  4502                           ;CW201x.c: 119: }
  4503                           ;CW201x.c: 121: reset_val = (0x0<<6);
  4504  06EF  01A8               	clrf	cw_update_config_info@reset_val
  4505                           
  4506                           ;CW201x.c: 122: reg_val = (0xf<<0);
  4507  06F0  300F               	movlw	15
  4508  06F1  00A7               	movwf	??_cw_update_config_info
  4509  06F2  0827               	movf	??_cw_update_config_info,w
  4510  06F3  00AC               	movwf	cw_update_config_info@reg_val
  4511                           
  4512                           ;CW201x.c: 123: ret = cw_write(0xA, &reg_val);
  4513  06F4  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4514  06F5  00A7               	movwf	??_cw_update_config_info
  4515  06F6  0827               	movf	??_cw_update_config_info,w
  4516  06F7  00A4               	movwf	cw_write@w_pdata
  4517  06F8  300A               	movlw	10
  4518  06F9  2318               	fcall	_cw_write
  4519  06FA  0140               	movlb	0	; select bank0
  4520  06FB  0825               	movf	?_cw_write+1,w
  4521  06FC  00AA               	movwf	cw_update_config_info@ret+1
  4522  06FD  0824               	movf	?_cw_write,w
  4523  06FE  00A9               	movwf	cw_update_config_info@ret
  4524                           
  4525                           ;CW201x.c: 124: if(ret)
  4526  06FF  0829               	movf	cw_update_config_info@ret,w
  4527  0700  042A               	iorwf	cw_update_config_info@ret+1,w
  4528  0701  1903               	btfsc	3,2
  4529  0702  2F05               	goto	l1929
  4530                           
  4531                           ;CW201x.c: 125: {
  4532                           ;CW201x.c: 126: return 1;
  4533  0703  3001               	movlw	1
  4534  0704  0008               	return
  4535  0705                     l1929:	
  4536                           
  4537                           ;CW201x.c: 127: }
  4538                           ;CW201x.c: 128: CW_Delay100us();
  4539  0705  21E4               	fcall	_CW_Delay100us
  4540                           
  4541                           ;CW201x.c: 129: ret = cw_write(0xA, &reset_val);
  4542  0706  3028               	movlw	(low (cw_update_config_info@reset_val| 0))& (0+255)
  4543  0707  0140               	movlb	0	; select bank0
  4544  0708  00A7               	movwf	??_cw_update_config_info
  4545  0709  0827               	movf	??_cw_update_config_info,w
  4546  070A  00A4               	movwf	cw_write@w_pdata
  4547  070B  300A               	movlw	10
  4548  070C  2318               	fcall	_cw_write
  4549  070D  0140               	movlb	0	; select bank0
  4550  070E  0825               	movf	?_cw_write+1,w
  4551  070F  00AA               	movwf	cw_update_config_info@ret+1
  4552  0710  0824               	movf	?_cw_write,w
  4553  0711  00A9               	movwf	cw_update_config_info@ret
  4554                           
  4555                           ;CW201x.c: 130: if(ret)
  4556  0712  0829               	movf	cw_update_config_info@ret,w
  4557  0713  042A               	iorwf	cw_update_config_info@ret+1,w
  4558  0714  1903               	btfsc	3,2
  4559  0715  2F18               	goto	l1939
  4560                           
  4561                           ;CW201x.c: 131: {
  4562                           ;CW201x.c: 132: return 1;
  4563  0716  3001               	movlw	1
  4564  0717  0008               	return
  4565  0718                     l1939:	
  4566                           
  4567                           ;CW201x.c: 133: }
  4568                           ;CW201x.c: 134: return 0;
  4569  0718  3000               	movlw	0
  4570  0719  0008               	return
  4571  071A                     __end_of_cw_update_config_info:	
  4572                           
  4573                           	psect	text15
  4574  0318                     __ptext15:	
  4575 ;; *************** function _cw_write *****************
  4576 ;; Defined at:
  4577 ;;		line 222 in file "iic.c"
  4578 ;; Parameters:    Size  Location     Type
  4579 ;;  point_reg       1    wreg     unsigned char 
  4580 ;;  w_pdata         1    4[BANK0 ] PTR unsigned char 
  4581 ;;		 -> cw_por@reset_val(1), cw_init@reg_val(1), cw_update_config_info@reset_val(1), cw_update_config_info@reg_val(1), 
  4582 ;; Auto vars:     Size  Location     Type
  4583 ;;  point_reg       1   12[COMMON] unsigned char 
  4584 ;; Return value:  Size  Location     Type
  4585 ;;                  2    4[BANK0 ] int 
  4586 ;; Registers used:
  4587 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4588 ;; Tracked objects:
  4589 ;;		On entry : 0/0
  4590 ;;		On exit  : 0/0
  4591 ;;		Unchanged: 0/0
  4592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4593 ;;      Params:         0       3       0       0
  4594 ;;      Locals:         1       0       0       0
  4595 ;;      Temps:          0       0       0       0
  4596 ;;      Totals:         1       3       0       0
  4597 ;;Total ram usage:        4 bytes
  4598 ;; Hardware stack levels used:    1
  4599 ;; Hardware stack levels required when called:    3
  4600 ;; This function calls:
  4601 ;;		_start
  4602 ;;		_stop
  4603 ;;		_wait_r_ack
  4604 ;;		_write_byte
  4605 ;; This function is called by:
  4606 ;;		_cw_update_config_info
  4607 ;;		_cw_init
  4608 ;;		_cw_por
  4609 ;; This function uses a non-reentrant model
  4610 ;;
  4611                           
  4612                           
  4613                           ;psect for function _cw_write
  4614  0318                     _cw_write:	
  4615                           
  4616                           ;incstack = 0
  4617                           ; Regs used in _cw_write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4618                           ;cw_write@point_reg stored from wreg
  4619  0318  00FC               	movwf	cw_write@point_reg
  4620                           
  4621                           ;iic.c: 224: start();
  4622  0319  2142               	fcall	_start
  4623                           
  4624                           ;iic.c: 225: write_byte(0xc4);
  4625  031A  30C4               	movlw	196
  4626  031B  21C5               	fcall	_write_byte
  4627                           
  4628                           ;iic.c: 226: if(wait_r_ack())
  4629  031C  22E6               	fcall	_wait_r_ack
  4630  031D  087A               	movf	?_wait_r_ack,w
  4631  031E  047B               	iorwf	?_wait_r_ack+1,w
  4632  031F  1903               	btfsc	3,2
  4633  0320  2B27               	goto	l1795
  4634                           
  4635                           ;iic.c: 227: {
  4636                           ;iic.c: 228: return 1;
  4637  0321  3001               	movlw	1
  4638  0322  0140               	movlb	0	; select bank0
  4639  0323  00A4               	movwf	?_cw_write
  4640  0324  3000               	movlw	0
  4641  0325  00A5               	movwf	?_cw_write+1
  4642  0326  0008               	return
  4643  0327                     l1795:	
  4644                           
  4645                           ;iic.c: 229: }
  4646                           ;iic.c: 230: write_byte(point_reg);
  4647  0327  087C               	movf	cw_write@point_reg,w
  4648  0328  21C5               	fcall	_write_byte
  4649                           
  4650                           ;iic.c: 231: if(wait_r_ack())
  4651  0329  22E6               	fcall	_wait_r_ack
  4652  032A  087A               	movf	?_wait_r_ack,w
  4653  032B  047B               	iorwf	?_wait_r_ack+1,w
  4654  032C  1903               	btfsc	3,2
  4655  032D  2B34               	goto	l1801
  4656                           
  4657                           ;iic.c: 232: {
  4658                           ;iic.c: 233: return 1;
  4659  032E  3001               	movlw	1
  4660  032F  0140               	movlb	0	; select bank0
  4661  0330  00A4               	movwf	?_cw_write
  4662  0331  3000               	movlw	0
  4663  0332  00A5               	movwf	?_cw_write+1
  4664  0333  0008               	return
  4665  0334                     l1801:	
  4666                           
  4667                           ;iic.c: 234: }
  4668                           ;iic.c: 235: write_byte(*w_pdata);
  4669  0334  0140               	movlb	0	; select bank0
  4670  0335  0824               	movf	cw_write@w_pdata,w
  4671  0336  0086               	movwf	6
  4672  0337  0187               	clrf	7
  4673  0338  0801               	movf	1,w
  4674  0339  21C5               	fcall	_write_byte
  4675                           
  4676                           ;iic.c: 236: if(wait_r_ack())
  4677  033A  22E6               	fcall	_wait_r_ack
  4678  033B  087A               	movf	?_wait_r_ack,w
  4679  033C  047B               	iorwf	?_wait_r_ack+1,w
  4680  033D  1903               	btfsc	3,2
  4681  033E  2B45               	goto	l1809
  4682                           
  4683                           ;iic.c: 237: {
  4684                           ;iic.c: 238: return 1;
  4685  033F  3001               	movlw	1
  4686  0340  0140               	movlb	0	; select bank0
  4687  0341  00A4               	movwf	?_cw_write
  4688  0342  3000               	movlw	0
  4689  0343  00A5               	movwf	?_cw_write+1
  4690  0344  0008               	return
  4691  0345                     l1809:	
  4692                           
  4693                           ;iic.c: 239: }
  4694                           ;iic.c: 240: stop();
  4695  0345  2165               	fcall	_stop
  4696                           
  4697                           ;iic.c: 241: return 0;
  4698  0346  0140               	movlb	0	; select bank0
  4699  0347  01A4               	clrf	?_cw_write
  4700  0348  01A5               	clrf	?_cw_write+1
  4701  0349  0008               	return
  4702  034A                     __end_of_cw_write:	
  4703                           
  4704                           	psect	text16
  4705  034A                     __ptext16:	
  4706 ;; *************** function _cw_read *****************
  4707 ;; Defined at:
  4708 ;;		line 164 in file "iic.c"
  4709 ;; Parameters:    Size  Location     Type
  4710 ;;  point_reg       1    wreg     unsigned char 
  4711 ;;  r_pdata         1    4[BANK0 ] PTR unsigned char 
  4712 ;;		 -> cw_get_capacity@reg_val(1), cw_init@reg_val(1), cw_update_config_info@reg_val(1), 
  4713 ;; Auto vars:     Size  Location     Type
  4714 ;;  point_reg       1   13[COMMON] unsigned char 
  4715 ;; Return value:  Size  Location     Type
  4716 ;;                  2    4[BANK0 ] int 
  4717 ;; Registers used:
  4718 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4719 ;; Tracked objects:
  4720 ;;		On entry : 0/0
  4721 ;;		On exit  : 0/0
  4722 ;;		Unchanged: 0/0
  4723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4724 ;;      Params:         0       2       0       0
  4725 ;;      Locals:         1       0       0       0
  4726 ;;      Temps:          1       0       0       0
  4727 ;;      Totals:         2       2       0       0
  4728 ;;Total ram usage:        4 bytes
  4729 ;; Hardware stack levels used:    1
  4730 ;; Hardware stack levels required when called:    3
  4731 ;; This function calls:
  4732 ;;		_read_byte
  4733 ;;		_s_ack
  4734 ;;		_start
  4735 ;;		_stop
  4736 ;;		_wait_r_ack
  4737 ;;		_write_byte
  4738 ;; This function is called by:
  4739 ;;		_cw_update_config_info
  4740 ;;		_cw_init
  4741 ;;		_cw_get_capacity
  4742 ;; This function uses a non-reentrant model
  4743 ;;
  4744                           
  4745                           
  4746                           ;psect for function _cw_read
  4747  034A                     _cw_read:	
  4748                           
  4749                           ;incstack = 0
  4750                           ; Regs used in _cw_read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4751                           ;cw_read@point_reg stored from wreg
  4752  034A  00FD               	movwf	cw_read@point_reg
  4753                           
  4754                           ;iic.c: 166: start();
  4755  034B  2142               	fcall	_start
  4756                           
  4757                           ;iic.c: 167: write_byte(0xc4);
  4758  034C  30C4               	movlw	196
  4759  034D  21C5               	fcall	_write_byte
  4760                           
  4761                           ;iic.c: 168: if(wait_r_ack())
  4762  034E  22E6               	fcall	_wait_r_ack
  4763  034F  087A               	movf	?_wait_r_ack,w
  4764  0350  047B               	iorwf	?_wait_r_ack+1,w
  4765  0351  1903               	btfsc	3,2
  4766  0352  2B59               	goto	l1767
  4767                           
  4768                           ;iic.c: 169: {
  4769                           ;iic.c: 170: return 1;
  4770  0353  3001               	movlw	1
  4771  0354  0140               	movlb	0	; select bank0
  4772  0355  00A4               	movwf	?_cw_read
  4773  0356  3000               	movlw	0
  4774  0357  00A5               	movwf	?_cw_read+1
  4775  0358  0008               	return
  4776  0359                     l1767:	
  4777                           
  4778                           ;iic.c: 171: }
  4779                           ;iic.c: 172: write_byte(point_reg);
  4780  0359  087D               	movf	cw_read@point_reg,w
  4781  035A  21C5               	fcall	_write_byte
  4782                           
  4783                           ;iic.c: 173: if(wait_r_ack())
  4784  035B  22E6               	fcall	_wait_r_ack
  4785  035C  087A               	movf	?_wait_r_ack,w
  4786  035D  047B               	iorwf	?_wait_r_ack+1,w
  4787  035E  1903               	btfsc	3,2
  4788  035F  2B66               	goto	l1773
  4789                           
  4790                           ;iic.c: 174: {
  4791                           ;iic.c: 175: return 1;
  4792  0360  3001               	movlw	1
  4793  0361  0140               	movlb	0	; select bank0
  4794  0362  00A4               	movwf	?_cw_read
  4795  0363  3000               	movlw	0
  4796  0364  00A5               	movwf	?_cw_read+1
  4797  0365  0008               	return
  4798  0366                     l1773:	
  4799                           
  4800                           ;iic.c: 176: }
  4801                           ;iic.c: 177: start();
  4802  0366  2142               	fcall	_start
  4803                           
  4804                           ;iic.c: 178: write_byte(0xc5);
  4805  0367  30C5               	movlw	197
  4806  0368  21C5               	fcall	_write_byte
  4807                           
  4808                           ;iic.c: 179: if(wait_r_ack())
  4809  0369  22E6               	fcall	_wait_r_ack
  4810  036A  087A               	movf	?_wait_r_ack,w
  4811  036B  047B               	iorwf	?_wait_r_ack+1,w
  4812  036C  1903               	btfsc	3,2
  4813  036D  2B74               	goto	l1779
  4814                           
  4815                           ;iic.c: 180: {
  4816                           ;iic.c: 181: return 1;
  4817  036E  3001               	movlw	1
  4818  036F  0140               	movlb	0	; select bank0
  4819  0370  00A4               	movwf	?_cw_read
  4820  0371  3000               	movlw	0
  4821  0372  00A5               	movwf	?_cw_read+1
  4822  0373  0008               	return
  4823  0374                     l1779:	
  4824                           
  4825                           ;iic.c: 182: }
  4826                           ;iic.c: 183: *r_pdata = read_byte();
  4827  0374  2266               	fcall	_read_byte
  4828  0375  00FC               	movwf	??_cw_read
  4829  0376  0140               	movlb	0	; select bank0
  4830  0377  0824               	movf	cw_read@r_pdata,w
  4831  0378  0086               	movwf	6
  4832  0379  0187               	clrf	7
  4833  037A  087C               	movf	??_cw_read,w
  4834  037B  0081               	movwf	1
  4835                           
  4836                           ;iic.c: 184: s_ack();
  4837  037C  2137               	fcall	_s_ack
  4838                           
  4839                           ;iic.c: 185: stop();
  4840  037D  2165               	fcall	_stop
  4841                           
  4842                           ;iic.c: 186: return 0;
  4843  037E  0140               	movlb	0	; select bank0
  4844  037F  01A4               	clrf	?_cw_read
  4845  0380  01A5               	clrf	?_cw_read+1
  4846  0381  0008               	return
  4847  0382                     __end_of_cw_read:	
  4848                           
  4849                           	psect	text17
  4850  01C5                     __ptext17:	
  4851 ;; *************** function _write_byte *****************
  4852 ;; Defined at:
  4853 ;;		line 126 in file "iic.c"
  4854 ;; Parameters:    Size  Location     Type
  4855 ;;  w_data          1    wreg     unsigned char 
  4856 ;; Auto vars:     Size  Location     Type
  4857 ;;  w_data          1    5[COMMON] unsigned char 
  4858 ;;  i               1    6[COMMON] unsigned char 
  4859 ;; Return value:  Size  Location     Type
  4860 ;;                  1    wreg      void 
  4861 ;; Registers used:
  4862 ;;		wreg, status,2, status,0, pclath, cstack
  4863 ;; Tracked objects:
  4864 ;;		On entry : 0/0
  4865 ;;		On exit  : 0/0
  4866 ;;		Unchanged: 0/0
  4867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4868 ;;      Params:         0       0       0       0
  4869 ;;      Locals:         2       0       0       0
  4870 ;;      Temps:          1       0       0       0
  4871 ;;      Totals:         3       0       0       0
  4872 ;;Total ram usage:        3 bytes
  4873 ;; Hardware stack levels used:    1
  4874 ;; Hardware stack levels required when called:    1
  4875 ;; This function calls:
  4876 ;;		_Delay10us
  4877 ;; This function is called by:
  4878 ;;		_cw_read
  4879 ;;		_cw_read_word
  4880 ;;		_cw_write
  4881 ;; This function uses a non-reentrant model
  4882 ;;
  4883                           
  4884                           
  4885                           ;psect for function _write_byte
  4886  01C5                     _write_byte:	
  4887                           
  4888                           ;incstack = 0
  4889                           ; Regs used in _write_byte: [wreg+status,2+status,0+pclath+cstack]
  4890                           ;write_byte@w_data stored from wreg
  4891  01C5  00F5               	movwf	write_byte@w_data
  4892                           
  4893                           ;iic.c: 128: unsigned char i;
  4894                           ;iic.c: 129: do { TRISCbits.TRISC1 = 0; } while(0);
  4895  01C6  0140               	movlb	0	; select bank0
  4896  01C7  1094               	bcf	20,1	;volatile
  4897                           
  4898                           ;iic.c: 130: for(i = 0; i < 8; i++)
  4899  01C8  01F6               	clrf	write_byte@i
  4900  01C9                     L4:	
  4901  01C9  3008               	movlw	8
  4902  01CA  0276               	subwf	write_byte@i,w
  4903  01CB  1803               	btfsc	3,0
  4904  01CC  0008               	return
  4905                           
  4906                           ;iic.c: 131: {
  4907                           ;iic.c: 132: LATCbits.LATC1 = (w_data & 0x80)?1:0;
  4908  01CD  1FF5               	btfss	write_byte@w_data,7
  4909  01CE  29D2               	goto	u1250
  4910  01CF  0140               	movlb	0	; select bank0
  4911  01D0  149A               	bsf	26,1	;volatile
  4912  01D1  29D4               	goto	l1697
  4913  01D2                     u1250:	
  4914  01D2  0140               	movlb	0	; select bank0
  4915  01D3  109A               	bcf	26,1	;volatile
  4916  01D4                     l1697:	
  4917                           
  4918                           ;iic.c: 133: Delay10us();
  4919  01D4  2204               	fcall	_Delay10us
  4920                           
  4921                           ;iic.c: 134: do { LATCbits.LATC0 = 1; } while(0);
  4922  01D5  0140               	movlb	0	; select bank0
  4923  01D6  141A               	bsf	26,0	;volatile
  4924                           
  4925                           ;iic.c: 135: Delay10us();
  4926  01D7  2204               	fcall	_Delay10us
  4927                           
  4928                           ;iic.c: 136: do { LATCbits.LATC0 = 0; } while(0);
  4929  01D8  0140               	movlb	0	; select bank0
  4930  01D9  101A               	bcf	26,0	;volatile
  4931                           
  4932                           ;iic.c: 137: Delay10us();
  4933  01DA  2204               	fcall	_Delay10us
  4934                           
  4935                           ;iic.c: 138: w_data = w_data << 1;
  4936  01DB  3575               	lslf	write_byte@w_data,w
  4937  01DC  00F4               	movwf	??_write_byte
  4938  01DD  0874               	movf	??_write_byte,w
  4939  01DE  00F5               	movwf	write_byte@w_data
  4940  01DF  3001               	movlw	1
  4941  01E0  00F4               	movwf	??_write_byte
  4942  01E1  0874               	movf	??_write_byte,w
  4943  01E2  07F6               	addwf	write_byte@i,f
  4944  01E3  29C9               	goto	L4
  4945  01E4                     __end_of_write_byte:	
  4946                           
  4947                           	psect	text18
  4948  02E6                     __ptext18:	
  4949 ;; *************** function _wait_r_ack *****************
  4950 ;; Defined at:
  4951 ;;		line 80 in file "iic.c"
  4952 ;; Parameters:    Size  Location     Type
  4953 ;;		None
  4954 ;; Auto vars:     Size  Location     Type
  4955 ;;  i               2    2[BANK0 ] unsigned int 
  4956 ;;  ack             2    0[BANK0 ] int 
  4957 ;; Return value:  Size  Location     Type
  4958 ;;                  2   10[COMMON] int 
  4959 ;; Registers used:
  4960 ;;		wreg, status,2, status,0, pclath, cstack
  4961 ;; Tracked objects:
  4962 ;;		On entry : 0/0
  4963 ;;		On exit  : 0/0
  4964 ;;		Unchanged: 0/0
  4965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4966 ;;      Params:         2       0       0       0
  4967 ;;      Locals:         0       4       0       0
  4968 ;;      Temps:          0       0       0       0
  4969 ;;      Totals:         2       4       0       0
  4970 ;;Total ram usage:        6 bytes
  4971 ;; Hardware stack levels used:    1
  4972 ;; Hardware stack levels required when called:    2
  4973 ;; This function calls:
  4974 ;;		_r_ack
  4975 ;;		_stop
  4976 ;; This function is called by:
  4977 ;;		_cw_read
  4978 ;;		_cw_read_word
  4979 ;;		_cw_write
  4980 ;; This function uses a non-reentrant model
  4981 ;;
  4982                           
  4983                           
  4984                           ;psect for function _wait_r_ack
  4985  02E6                     _wait_r_ack:	
  4986                           
  4987                           ;iic.c: 82: int ack;
  4988                           ;iic.c: 83: unsigned int i;
  4989                           ;iic.c: 84: ack = 1;
  4990                           
  4991                           ;incstack = 0
  4992                           ; Regs used in _wait_r_ack: [wreg+status,2+status,0+pclath+cstack]
  4993  02E6  3001               	movlw	1
  4994  02E7  0140               	movlb	0	; select bank0
  4995  02E8  00A0               	movwf	wait_r_ack@ack
  4996  02E9  3000               	movlw	0
  4997  02EA  00A1               	movwf	wait_r_ack@ack+1
  4998                           
  4999                           ;iic.c: 85: for(i = 0; i < 100; i++)
  5000  02EB  01A2               	clrf	wait_r_ack@i
  5001  02EC  01A3               	clrf	wait_r_ack@i+1
  5002  02ED  3000               	movlw	0
  5003  02EE  0223               	subwf	wait_r_ack@i+1,w
  5004  02EF  3064               	movlw	100
  5005  02F0  1903               	skipnz
  5006  02F1  0222               	subwf	wait_r_ack@i,w
  5007  02F2  1803               	btfsc	3,0
  5008  02F3  2B15               	goto	l1681
  5009  02F4                     l1665:	
  5010                           
  5011                           ;iic.c: 86: {
  5012                           ;iic.c: 87: ack = r_ack();
  5013  02F4  217D               	fcall	_r_ack
  5014  02F5  0875               	movf	?_r_ack+1,w
  5015  02F6  0140               	movlb	0	; select bank0
  5016  02F7  00A1               	movwf	wait_r_ack@ack+1
  5017  02F8  0874               	movf	?_r_ack,w
  5018  02F9  00A0               	movwf	wait_r_ack@ack
  5019                           
  5020                           ;iic.c: 88: if(!ack)
  5021  02FA  0820               	movf	wait_r_ack@ack,w
  5022  02FB  0421               	iorwf	wait_r_ack@ack+1,w
  5023  02FC  1903               	btfsc	3,2
  5024  02FD  2B15               	goto	l1681
  5025                           
  5026                           ;iic.c: 91: }
  5027                           ;iic.c: 92: if(i == 99)
  5028                           
  5029                           ;iic.c: 89: {
  5030                           ;iic.c: 90: break;
  5031  02FE  3063               	movlw	99
  5032  02FF  0622               	xorwf	wait_r_ack@i,w
  5033  0300  0423               	iorwf	wait_r_ack@i+1,w
  5034  0301  1D03               	btfss	3,2
  5035  0302  2B09               	goto	l1679
  5036                           
  5037                           ;iic.c: 93: {
  5038                           ;iic.c: 94: stop();
  5039  0303  2165               	fcall	_stop
  5040                           
  5041                           ;iic.c: 95: return 1;
  5042  0304  3001               	movlw	1
  5043  0305  00FA               	movwf	?_wait_r_ack
  5044  0306  3000               	movlw	0
  5045  0307  00FB               	movwf	?_wait_r_ack+1
  5046  0308  0008               	return
  5047  0309                     l1679:	
  5048  0309  3001               	movlw	1
  5049  030A  0140               	movlb	0	; select bank0
  5050  030B  07A2               	addwf	wait_r_ack@i,f
  5051  030C  3000               	movlw	0
  5052  030D  3DA3               	addwfc	wait_r_ack@i+1,f
  5053  030E  3000               	movlw	0
  5054  030F  0223               	subwf	wait_r_ack@i+1,w
  5055  0310  3064               	movlw	100
  5056  0311  1903               	skipnz
  5057  0312  0222               	subwf	wait_r_ack@i,w
  5058  0313  1C03               	skipc
  5059  0314  2AF4               	goto	l1665
  5060  0315                     l1681:	
  5061                           
  5062                           ;iic.c: 96: }
  5063                           ;iic.c: 97: }
  5064                           ;iic.c: 98: return 0;
  5065  0315  01FA               	clrf	?_wait_r_ack
  5066  0316  01FB               	clrf	?_wait_r_ack+1
  5067  0317  0008               	return
  5068  0318                     __end_of_wait_r_ack:	
  5069                           
  5070                           	psect	text19
  5071  0165                     __ptext19:	
  5072 ;; *************** function _stop *****************
  5073 ;; Defined at:
  5074 ;;		line 54 in file "iic.c"
  5075 ;; Parameters:    Size  Location     Type
  5076 ;;		None
  5077 ;; Auto vars:     Size  Location     Type
  5078 ;;		None
  5079 ;; Return value:  Size  Location     Type
  5080 ;;                  1    wreg      void 
  5081 ;; Registers used:
  5082 ;;		wreg, status,2, status,0, pclath, cstack
  5083 ;; Tracked objects:
  5084 ;;		On entry : 0/0
  5085 ;;		On exit  : 0/0
  5086 ;;		Unchanged: 0/0
  5087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5088 ;;      Params:         0       0       0       0
  5089 ;;      Locals:         0       0       0       0
  5090 ;;      Temps:          0       0       0       0
  5091 ;;      Totals:         0       0       0       0
  5092 ;;Total ram usage:        0 bytes
  5093 ;; Hardware stack levels used:    1
  5094 ;; Hardware stack levels required when called:    1
  5095 ;; This function calls:
  5096 ;;		_Delay10us
  5097 ;; This function is called by:
  5098 ;;		_wait_r_ack
  5099 ;;		_cw_read
  5100 ;;		_cw_read_word
  5101 ;;		_cw_write
  5102 ;; This function uses a non-reentrant model
  5103 ;;
  5104                           
  5105                           
  5106                           ;psect for function _stop
  5107  0165                     _stop:	
  5108                           
  5109                           ;incstack = 0
  5110                           ; Regs used in _stop: [wreg+status,2+status,0+pclath+cstack]
  5111                           ;iic.c: 56: do { TRISCbits.TRISC1 = 0; } while(0);
  5112  0165  0140               	movlb	0	; select bank0
  5113  0166  1094               	bcf	20,1	;volatile
  5114                           
  5115                           ;iic.c: 57: do { LATCbits.LATC1 = 0; } while(0);
  5116  0167  109A               	bcf	26,1	;volatile
  5117                           
  5118                           ;iic.c: 58: Delay10us();
  5119  0168  2204               	fcall	_Delay10us
  5120                           
  5121                           ;iic.c: 59: do { LATCbits.LATC0 = 1; } while(0);
  5122  0169  0140               	movlb	0	; select bank0
  5123  016A  141A               	bsf	26,0	;volatile
  5124                           
  5125                           ;iic.c: 60: Delay10us();
  5126  016B  2204               	fcall	_Delay10us
  5127                           
  5128                           ;iic.c: 61: do { LATCbits.LATC1 = 1; } while(0);
  5129  016C  0140               	movlb	0	; select bank0
  5130  016D  149A               	bsf	26,1	;volatile
  5131                           
  5132                           ;iic.c: 62: Delay10us();
  5133  016E  2204               	fcall	_Delay10us
  5134                           
  5135                           ;iic.c: 64: Delay10us();
  5136  016F  2204               	fcall	_Delay10us
  5137  0170  0008               	return
  5138  0171                     __end_of_stop:	
  5139                           
  5140                           	psect	text20
  5141  017D                     __ptext20:	
  5142 ;; *************** function _r_ack *****************
  5143 ;; Defined at:
  5144 ;;		line 67 in file "iic.c"
  5145 ;; Parameters:    Size  Location     Type
  5146 ;;		None
  5147 ;; Auto vars:     Size  Location     Type
  5148 ;;  ack             2    8[COMMON] int 
  5149 ;; Return value:  Size  Location     Type
  5150 ;;                  2    4[COMMON] int 
  5151 ;; Registers used:
  5152 ;;		wreg, status,2, status,0, pclath, cstack
  5153 ;; Tracked objects:
  5154 ;;		On entry : 0/0
  5155 ;;		On exit  : 0/0
  5156 ;;		Unchanged: 0/0
  5157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5158 ;;      Params:         2       0       0       0
  5159 ;;      Locals:         2       0       0       0
  5160 ;;      Temps:          2       0       0       0
  5161 ;;      Totals:         6       0       0       0
  5162 ;;Total ram usage:        6 bytes
  5163 ;; Hardware stack levels used:    1
  5164 ;; Hardware stack levels required when called:    1
  5165 ;; This function calls:
  5166 ;;		_Delay10us
  5167 ;; This function is called by:
  5168 ;;		_wait_r_ack
  5169 ;; This function uses a non-reentrant model
  5170 ;;
  5171                           
  5172                           
  5173                           ;psect for function _r_ack
  5174  017D                     _r_ack:	
  5175                           
  5176                           ;incstack = 0
  5177                           ; Regs used in _r_ack: [wreg+status,2+status,0+pclath+cstack]
  5178                           ;iic.c: 69: int ack;
  5179                           ;iic.c: 70: do { TRISCbits.TRISC1 = 1; } while(0);
  5180  017D  0140               	movlb	0	; select bank0
  5181  017E  1494               	bsf	20,1	;volatile
  5182                           
  5183                           ;iic.c: 71: do { LATCbits.LATC0 = 1; } while(0);
  5184  017F  141A               	bsf	26,0	;volatile
  5185                           
  5186                           ;iic.c: 72: Delay10us();
  5187  0180  2204               	fcall	_Delay10us
  5188                           
  5189                           ;iic.c: 73: ack = PORTCbits.RC1;
  5190  0181  0140               	movlb	0	; select bank0
  5191  0182  0C0E               	rrf	14,w	;volatile
  5192  0183  3901               	andlw	1
  5193  0184  00F6               	movwf	??_r_ack
  5194  0185  01F7               	clrf	??_r_ack+1
  5195  0186  0876               	movf	??_r_ack,w
  5196  0187  00F8               	movwf	r_ack@ack
  5197  0188  0877               	movf	??_r_ack+1,w
  5198  0189  00F9               	movwf	r_ack@ack+1
  5199                           
  5200                           ;iic.c: 74: Delay10us();
  5201  018A  2204               	fcall	_Delay10us
  5202                           
  5203                           ;iic.c: 75: do { LATCbits.LATC0 = 0; } while(0);
  5204  018B  0140               	movlb	0	; select bank0
  5205  018C  101A               	bcf	26,0	;volatile
  5206                           
  5207                           ;iic.c: 76: Delay10us();
  5208  018D  2204               	fcall	_Delay10us
  5209                           
  5210                           ;iic.c: 77: return ack;
  5211  018E  0879               	movf	r_ack@ack+1,w
  5212  018F  00F5               	movwf	?_r_ack+1
  5213  0190  0878               	movf	r_ack@ack,w
  5214  0191  00F4               	movwf	?_r_ack
  5215  0192  0008               	return
  5216  0193                     __end_of_r_ack:	
  5217                           
  5218                           	psect	text21
  5219  0142                     __ptext21:	
  5220 ;; *************** function _start *****************
  5221 ;; Defined at:
  5222 ;;		line 43 in file "iic.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;		None
  5225 ;; Auto vars:     Size  Location     Type
  5226 ;;		None
  5227 ;; Return value:  Size  Location     Type
  5228 ;;                  1    wreg      void 
  5229 ;; Registers used:
  5230 ;;		wreg, status,2, status,0, pclath, cstack
  5231 ;; Tracked objects:
  5232 ;;		On entry : 0/0
  5233 ;;		On exit  : 0/0
  5234 ;;		Unchanged: 0/0
  5235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5236 ;;      Params:         0       0       0       0
  5237 ;;      Locals:         0       0       0       0
  5238 ;;      Temps:          0       0       0       0
  5239 ;;      Totals:         0       0       0       0
  5240 ;;Total ram usage:        0 bytes
  5241 ;; Hardware stack levels used:    1
  5242 ;; Hardware stack levels required when called:    1
  5243 ;; This function calls:
  5244 ;;		_Delay10us
  5245 ;; This function is called by:
  5246 ;;		_cw_read
  5247 ;;		_cw_read_word
  5248 ;;		_cw_write
  5249 ;; This function uses a non-reentrant model
  5250 ;;
  5251                           
  5252                           
  5253                           ;psect for function _start
  5254  0142                     _start:	
  5255                           
  5256                           ;incstack = 0
  5257                           ; Regs used in _start: [wreg+status,2+status,0+pclath+cstack]
  5258                           ;iic.c: 45: do { TRISCbits.TRISC1 = 0; } while(0);
  5259  0142  0140               	movlb	0	; select bank0
  5260  0143  1094               	bcf	20,1	;volatile
  5261                           
  5262                           ;iic.c: 46: do { LATCbits.LATC1 = 1; } while(0);
  5263  0144  149A               	bsf	26,1	;volatile
  5264                           
  5265                           ;iic.c: 47: do { LATCbits.LATC0 = 1; } while(0);
  5266  0145  141A               	bsf	26,0	;volatile
  5267                           
  5268                           ;iic.c: 48: Delay10us();
  5269  0146  2204               	fcall	_Delay10us
  5270                           
  5271                           ;iic.c: 49: do { LATCbits.LATC1 = 0; } while(0);
  5272  0147  0140               	movlb	0	; select bank0
  5273  0148  109A               	bcf	26,1	;volatile
  5274                           
  5275                           ;iic.c: 50: Delay10us();
  5276  0149  2204               	fcall	_Delay10us
  5277                           
  5278                           ;iic.c: 51: do { LATCbits.LATC0 = 0; } while(0);
  5279  014A  0140               	movlb	0	; select bank0
  5280  014B  101A               	bcf	26,0	;volatile
  5281  014C  0008               	return
  5282  014D                     __end_of_start:	
  5283                           
  5284                           	psect	text22
  5285  0137                     __ptext22:	
  5286 ;; *************** function _s_ack *****************
  5287 ;; Defined at:
  5288 ;;		line 101 in file "iic.c"
  5289 ;; Parameters:    Size  Location     Type
  5290 ;;		None
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;		None
  5293 ;; Return value:  Size  Location     Type
  5294 ;;                  1    wreg      void 
  5295 ;; Registers used:
  5296 ;;		wreg, status,2, status,0, pclath, cstack
  5297 ;; Tracked objects:
  5298 ;;		On entry : 0/0
  5299 ;;		On exit  : 0/0
  5300 ;;		Unchanged: 0/0
  5301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5302 ;;      Params:         0       0       0       0
  5303 ;;      Locals:         0       0       0       0
  5304 ;;      Temps:          0       0       0       0
  5305 ;;      Totals:         0       0       0       0
  5306 ;;Total ram usage:        0 bytes
  5307 ;; Hardware stack levels used:    1
  5308 ;; Hardware stack levels required when called:    1
  5309 ;; This function calls:
  5310 ;;		_Delay10us
  5311 ;; This function is called by:
  5312 ;;		_cw_read
  5313 ;;		_cw_read_word
  5314 ;; This function uses a non-reentrant model
  5315 ;;
  5316                           
  5317                           
  5318                           ;psect for function _s_ack
  5319  0137                     _s_ack:	
  5320                           
  5321                           ;incstack = 0
  5322                           ; Regs used in _s_ack: [wreg+status,2+status,0+pclath+cstack]
  5323                           ;iic.c: 103: do { TRISCbits.TRISC1 = 0; } while(0);
  5324  0137  0140               	movlb	0	; select bank0
  5325  0138  1094               	bcf	20,1	;volatile
  5326                           
  5327                           ;iic.c: 104: do { LATCbits.LATC1 = 1; } while(0);
  5328  0139  149A               	bsf	26,1	;volatile
  5329                           
  5330                           ;iic.c: 105: Delay10us();
  5331  013A  2204               	fcall	_Delay10us
  5332                           
  5333                           ;iic.c: 106: do { LATCbits.LATC0 = 1; } while(0);
  5334  013B  0140               	movlb	0	; select bank0
  5335  013C  141A               	bsf	26,0	;volatile
  5336                           
  5337                           ;iic.c: 107: Delay10us();
  5338  013D  2204               	fcall	_Delay10us
  5339                           
  5340                           ;iic.c: 108: do { LATCbits.LATC0 = 0; } while(0);
  5341  013E  0140               	movlb	0	; select bank0
  5342  013F  101A               	bcf	26,0	;volatile
  5343                           
  5344                           ;iic.c: 109: Delay10us();
  5345  0140  2204               	fcall	_Delay10us
  5346  0141  0008               	return
  5347  0142                     __end_of_s_ack:	
  5348                           
  5349                           	psect	text23
  5350  0266                     __ptext23:	
  5351 ;; *************** function _read_byte *****************
  5352 ;; Defined at:
  5353 ;;		line 142 in file "iic.c"
  5354 ;; Parameters:    Size  Location     Type
  5355 ;;		None
  5356 ;; Auto vars:     Size  Location     Type
  5357 ;;  r_data          1    6[COMMON] unsigned char 
  5358 ;;  i               1    5[COMMON] unsigned char 
  5359 ;; Return value:  Size  Location     Type
  5360 ;;                  1    wreg      unsigned char 
  5361 ;; Registers used:
  5362 ;;		wreg, status,2, status,0, pclath, cstack
  5363 ;; Tracked objects:
  5364 ;;		On entry : 0/0
  5365 ;;		On exit  : 0/0
  5366 ;;		Unchanged: 0/0
  5367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5368 ;;      Params:         0       0       0       0
  5369 ;;      Locals:         2       0       0       0
  5370 ;;      Temps:          1       0       0       0
  5371 ;;      Totals:         3       0       0       0
  5372 ;;Total ram usage:        3 bytes
  5373 ;; Hardware stack levels used:    1
  5374 ;; Hardware stack levels required when called:    1
  5375 ;; This function calls:
  5376 ;;		_Delay10us
  5377 ;; This function is called by:
  5378 ;;		_cw_read
  5379 ;;		_cw_read_word
  5380 ;; This function uses a non-reentrant model
  5381 ;;
  5382                           
  5383                           
  5384                           ;psect for function _read_byte
  5385  0266                     _read_byte:	
  5386                           
  5387                           ;incstack = 0
  5388                           ; Regs used in _read_byte: [wreg+status,2+status,0+pclath+cstack]
  5389                           ;iic.c: 144: unsigned char i;
  5390                           ;iic.c: 145: unsigned char r_data;
  5391                           ;iic.c: 146: do { TRISCbits.TRISC1 = 1; } while(0);
  5392  0266  0140               	movlb	0	; select bank0
  5393  0267  1494               	bsf	20,1	;volatile
  5394                           
  5395                           ;iic.c: 147: for(i = 0; i < 8; i++)
  5396  0268  01F5               	clrf	read_byte@i
  5397  0269  3008               	movlw	8
  5398  026A  0275               	subwf	read_byte@i,w
  5399  026B  1803               	btfsc	3,0
  5400  026C  2A87               	goto	l1733
  5401  026D                     l404:	
  5402                           ;iic.c: 148: {
  5403                           ;iic.c: 149: do { LATCbits.LATC0 = 1; } while(0);
  5404                           
  5405  026D  0140               	movlb	0	; select bank0
  5406  026E  141A               	bsf	26,0	;volatile
  5407                           
  5408                           ;iic.c: 150: Delay10us();
  5409  026F  2204               	fcall	_Delay10us
  5410                           
  5411                           ;iic.c: 151: r_data = r_data << 1;
  5412  0270  3576               	lslf	read_byte@r_data,w
  5413  0271  00F4               	movwf	??_read_byte
  5414  0272  0874               	movf	??_read_byte,w
  5415  0273  00F6               	movwf	read_byte@r_data
  5416                           
  5417                           ;iic.c: 152: Delay10us();
  5418  0274  2204               	fcall	_Delay10us
  5419                           
  5420                           ;iic.c: 153: if(PORTCbits.RC1)
  5421  0275  0140               	movlb	0	; select bank0
  5422  0276  1C8E               	btfss	14,1	;volatile
  5423  0277  2A7D               	goto	l1725
  5424                           
  5425                           ;iic.c: 154: {
  5426                           ;iic.c: 155: r_data = r_data | 0x1;
  5427  0278  0876               	movf	read_byte@r_data,w
  5428  0279  3801               	iorlw	1
  5429  027A  00F4               	movwf	??_read_byte
  5430  027B  0874               	movf	??_read_byte,w
  5431  027C  00F6               	movwf	read_byte@r_data
  5432  027D                     l1725:	
  5433                           ;iic.c: 156: }
  5434                           ;iic.c: 157: do { LATCbits.LATC0 = 0; } while(0);
  5435                           
  5436  027D  101A               	bcf	26,0	;volatile
  5437                           
  5438                           ;iic.c: 158: Delay10us();
  5439  027E  2204               	fcall	_Delay10us
  5440  027F  3001               	movlw	1
  5441  0280  00F4               	movwf	??_read_byte
  5442  0281  0874               	movf	??_read_byte,w
  5443  0282  07F5               	addwf	read_byte@i,f
  5444  0283  3008               	movlw	8
  5445  0284  0275               	subwf	read_byte@i,w
  5446  0285  1C03               	skipc
  5447  0286  2A6D               	goto	l404
  5448  0287                     l1733:	
  5449                           
  5450                           ;iic.c: 159: }
  5451                           ;iic.c: 160: return r_data;
  5452  0287  0876               	movf	read_byte@r_data,w
  5453  0288  0008               	return
  5454  0289                     __end_of_read_byte:	
  5455                           
  5456                           	psect	text24
  5457  0204                     __ptext24:	
  5458 ;; *************** function _Delay10us *****************
  5459 ;; Defined at:
  5460 ;;		line 22 in file "iic.c"
  5461 ;; Parameters:    Size  Location     Type
  5462 ;;		None
  5463 ;; Auto vars:     Size  Location     Type
  5464 ;;  i               1    3[COMMON] unsigned char 
  5465 ;;  b               1    2[COMMON] unsigned char 
  5466 ;;  a               1    1[COMMON] unsigned char 
  5467 ;; Return value:  Size  Location     Type
  5468 ;;                  1    wreg      void 
  5469 ;; Registers used:
  5470 ;;		wreg, status,2, status,0
  5471 ;; Tracked objects:
  5472 ;;		On entry : 0/0
  5473 ;;		On exit  : 0/0
  5474 ;;		Unchanged: 0/0
  5475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5476 ;;      Params:         0       0       0       0
  5477 ;;      Locals:         3       0       0       0
  5478 ;;      Temps:          1       0       0       0
  5479 ;;      Totals:         4       0       0       0
  5480 ;;Total ram usage:        4 bytes
  5481 ;; Hardware stack levels used:    1
  5482 ;; This function calls:
  5483 ;;		Nothing
  5484 ;; This function is called by:
  5485 ;;		_start
  5486 ;;		_stop
  5487 ;;		_r_ack
  5488 ;;		_s_ack
  5489 ;;		_sn_ack
  5490 ;;		_write_byte
  5491 ;;		_read_byte
  5492 ;; This function uses a non-reentrant model
  5493 ;;
  5494                           
  5495                           
  5496                           ;psect for function _Delay10us
  5497  0204                     _Delay10us:	
  5498                           
  5499                           ;iic.c: 24: unsigned char a, b;
  5500                           ;iic.c: 25: unsigned char i;
  5501                           ;iic.c: 26: for(i = 0; i < 2; i++)
  5502                           
  5503                           ;incstack = 0
  5504                           ; Regs used in _Delay10us: [wreg+status,2+status,0]
  5505  0204  01F3               	clrf	Delay10us@i
  5506  0205                     L5:	
  5507  0205  3002               	movlw	2
  5508  0206  0273               	subwf	Delay10us@i,w
  5509  0207  1803               	btfsc	3,0
  5510  0208  0008               	return
  5511                           
  5512                           ;iic.c: 27: {
  5513                           ;iic.c: 28: for(b = 1;b > 0;b --)
  5514  0209  01F2               	clrf	Delay10us@b
  5515  020A  0AF2               	incf	Delay10us@b,f
  5516  020B  0872               	movf	Delay10us@b,w
  5517  020C  1903               	btfsc	3,2
  5518  020D  2A1F               	goto	l1627
  5519  020E                     l1617:	
  5520                           
  5521                           ;iic.c: 29: {
  5522                           ;iic.c: 30: for(a = 7;a > 0;a --) ;
  5523  020E  3007               	movlw	7
  5524  020F  00F0               	movwf	??_Delay10us
  5525  0210  0870               	movf	??_Delay10us,w
  5526  0211  00F1               	movwf	Delay10us@a
  5527  0212  0871               	movf	Delay10us@a,w
  5528  0213  1903               	btfsc	3,2
  5529  0214  2A1A               	goto	l1625
  5530  0215                     l1623:	
  5531  0215  3001               	movlw	1
  5532  0216  02F1               	subwf	Delay10us@a,f
  5533  0217  0871               	movf	Delay10us@a,w
  5534  0218  1D03               	btfss	3,2
  5535  0219  2A15               	goto	l1623
  5536  021A                     l1625:	
  5537  021A  3001               	movlw	1
  5538  021B  02F2               	subwf	Delay10us@b,f
  5539  021C  0872               	movf	Delay10us@b,w
  5540  021D  1D03               	btfss	3,2
  5541  021E  2A0E               	goto	l1617
  5542  021F                     l1627:	
  5543  021F  3001               	movlw	1
  5544  0220  00F0               	movwf	??_Delay10us
  5545  0221  0870               	movf	??_Delay10us,w
  5546  0222  07F3               	addwf	Delay10us@i,f
  5547  0223  2A05               	goto	L5
  5548  0224                     __end_of_Delay10us:	
  5549                           
  5550                           	psect	text25
  5551  01E4                     __ptext25:	
  5552 ;; *************** function _CW_Delay100us *****************
  5553 ;; Defined at:
  5554 ;;		line 38 in file "CW201x.c"
  5555 ;; Parameters:    Size  Location     Type
  5556 ;;		None
  5557 ;; Auto vars:     Size  Location     Type
  5558 ;;  i               1    3[COMMON] unsigned char 
  5559 ;;  b               1    2[COMMON] unsigned char 
  5560 ;;  a               1    1[COMMON] unsigned char 
  5561 ;; Return value:  Size  Location     Type
  5562 ;;                  1    wreg      void 
  5563 ;; Registers used:
  5564 ;;		wreg, status,2, status,0
  5565 ;; Tracked objects:
  5566 ;;		On entry : 0/0
  5567 ;;		On exit  : 0/0
  5568 ;;		Unchanged: 0/0
  5569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5570 ;;      Params:         0       0       0       0
  5571 ;;      Locals:         3       0       0       0
  5572 ;;      Temps:          1       0       0       0
  5573 ;;      Totals:         4       0       0       0
  5574 ;;Total ram usage:        4 bytes
  5575 ;; Hardware stack levels used:    1
  5576 ;; This function calls:
  5577 ;;		Nothing
  5578 ;; This function is called by:
  5579 ;;		_cw_update_config_info
  5580 ;;		_cw_por
  5581 ;; This function uses a non-reentrant model
  5582 ;;
  5583                           
  5584                           
  5585                           ;psect for function _CW_Delay100us
  5586  01E4                     _CW_Delay100us:	
  5587                           
  5588                           ;CW201x.c: 40: unsigned char a, b;
  5589                           ;CW201x.c: 41: unsigned char i;
  5590                           ;CW201x.c: 42: for(i = 0; i < 10; i++)
  5591                           
  5592                           ;incstack = 0
  5593                           ; Regs used in _CW_Delay100us: [wreg+status,2+status,0]
  5594  01E4  01F3               	clrf	CW_Delay100us@i
  5595  01E5                     L6:	
  5596  01E5  300A               	movlw	10
  5597  01E6  0273               	subwf	CW_Delay100us@i,w
  5598  01E7  1803               	btfsc	3,0
  5599  01E8  0008               	return
  5600                           
  5601                           ;CW201x.c: 43: {
  5602                           ;CW201x.c: 44: for(b = 1;b > 0;b --)
  5603  01E9  01F2               	clrf	CW_Delay100us@b
  5604  01EA  0AF2               	incf	CW_Delay100us@b,f
  5605  01EB  0872               	movf	CW_Delay100us@b,w
  5606  01EC  1903               	btfsc	3,2
  5607  01ED  29FF               	goto	l1757
  5608  01EE                     l1747:	
  5609                           
  5610                           ;CW201x.c: 45: {
  5611                           ;CW201x.c: 46: for(a = 7;a > 0;a --);
  5612  01EE  3007               	movlw	7
  5613  01EF  00F0               	movwf	??_CW_Delay100us
  5614  01F0  0870               	movf	??_CW_Delay100us,w
  5615  01F1  00F1               	movwf	CW_Delay100us@a
  5616  01F2  0871               	movf	CW_Delay100us@a,w
  5617  01F3  1903               	btfsc	3,2
  5618  01F4  29FA               	goto	l1755
  5619  01F5                     l1753:	
  5620  01F5  3001               	movlw	1
  5621  01F6  02F1               	subwf	CW_Delay100us@a,f
  5622  01F7  0871               	movf	CW_Delay100us@a,w
  5623  01F8  1D03               	btfss	3,2
  5624  01F9  29F5               	goto	l1753
  5625  01FA                     l1755:	
  5626  01FA  3001               	movlw	1
  5627  01FB  02F2               	subwf	CW_Delay100us@b,f
  5628  01FC  0872               	movf	CW_Delay100us@b,w
  5629  01FD  1D03               	btfss	3,2
  5630  01FE  29EE               	goto	l1747
  5631  01FF                     l1757:	
  5632  01FF  3001               	movlw	1
  5633  0200  00F0               	movwf	??_CW_Delay100us
  5634  0201  0870               	movf	??_CW_Delay100us,w
  5635  0202  07F3               	addwf	CW_Delay100us@i,f
  5636  0203  29E5               	goto	L6
  5637  0204                     __end_of_CW_Delay100us:	
  5638                           
  5639                           	psect	text26
  5640  0224                     __ptext26:	
  5641 ;; *************** function _CW_Delay10ms *****************
  5642 ;; Defined at:
  5643 ;;		line 26 in file "CW201x.c"
  5644 ;; Parameters:    Size  Location     Type
  5645 ;;  c               2    0[COMMON] unsigned int 
  5646 ;; Auto vars:     Size  Location     Type
  5647 ;;  b               1    4[COMMON] unsigned char 
  5648 ;;  a               1    3[COMMON] unsigned char 
  5649 ;;  d               1    0        unsigned char 
  5650 ;; Return value:  Size  Location     Type
  5651 ;;                  1    wreg      void 
  5652 ;; Registers used:
  5653 ;;		wreg, status,2, status,0
  5654 ;; Tracked objects:
  5655 ;;		On entry : 0/0
  5656 ;;		On exit  : 0/0
  5657 ;;		Unchanged: 0/0
  5658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5659 ;;      Params:         2       0       0       0
  5660 ;;      Locals:         2       0       0       0
  5661 ;;      Temps:          1       0       0       0
  5662 ;;      Totals:         5       0       0       0
  5663 ;;Total ram usage:        5 bytes
  5664 ;; Hardware stack levels used:    1
  5665 ;; This function calls:
  5666 ;;		Nothing
  5667 ;; This function is called by:
  5668 ;;		_main
  5669 ;;		_cw_init
  5670 ;; This function uses a non-reentrant model
  5671 ;;
  5672                           
  5673                           
  5674                           ;psect for function _CW_Delay10ms
  5675  0224                     _CW_Delay10ms:	
  5676                           
  5677                           ;CW201x.c: 28: unsigned char a, b, d;
  5678                           ;CW201x.c: 29: for (;c>0;c--)
  5679                           
  5680                           ;incstack = 0
  5681                           ; Regs used in _CW_Delay10ms: [wreg+status,2+status,0]
  5682  0224  0870               	movf	CW_Delay10ms@c,w
  5683  0225  0471               	iorwf	CW_Delay10ms@c+1,w
  5684  0226  1903               	btfsc	3,2
  5685  0227  0008               	return
  5686                           
  5687                           ;CW201x.c: 30: {
  5688                           ;CW201x.c: 31: for(b=95;b>0;b--)
  5689  0228  305F               	movlw	95
  5690  0229  00F2               	movwf	??_CW_Delay10ms
  5691  022A  0872               	movf	??_CW_Delay10ms,w
  5692  022B  00F4               	movwf	CW_Delay10ms@b
  5693  022C  0874               	movf	CW_Delay10ms@b,w
  5694  022D  1903               	btfsc	3,2
  5695  022E  2A40               	goto	l1835
  5696  022F                     l1825:	
  5697                           
  5698                           ;CW201x.c: 32: {
  5699                           ;CW201x.c: 33: for(a=209;a>0;a--) ;
  5700  022F  30D1               	movlw	209
  5701  0230  00F2               	movwf	??_CW_Delay10ms
  5702  0231  0872               	movf	??_CW_Delay10ms,w
  5703  0232  00F3               	movwf	CW_Delay10ms@a
  5704  0233  0873               	movf	CW_Delay10ms@a,w
  5705  0234  1903               	btfsc	3,2
  5706  0235  2A3B               	goto	l1833
  5707  0236                     l1831:	
  5708  0236  3001               	movlw	1
  5709  0237  02F3               	subwf	CW_Delay10ms@a,f
  5710  0238  0873               	movf	CW_Delay10ms@a,w
  5711  0239  1D03               	btfss	3,2
  5712  023A  2A36               	goto	l1831
  5713  023B                     l1833:	
  5714  023B  3001               	movlw	1
  5715  023C  02F4               	subwf	CW_Delay10ms@b,f
  5716  023D  0874               	movf	CW_Delay10ms@b,w
  5717  023E  1D03               	btfss	3,2
  5718  023F  2A2F               	goto	l1825
  5719  0240                     l1835:	
  5720  0240  3001               	movlw	1
  5721  0241  02F0               	subwf	CW_Delay10ms@c,f
  5722  0242  3000               	movlw	0
  5723  0243  3BF1               	subwfb	CW_Delay10ms@c+1,f
  5724  0244  2A24               	goto	_CW_Delay10ms
  5725  0245                     __end_of_CW_Delay10ms:	
  5726                           
  5727                           	psect	text27
  5728  011E                     __ptext27:	
  5729 ;; *************** function _SYSTEM_Initialize *****************
  5730 ;; Defined at:
  5731 ;;		line 86 in file "mcc_generated_files/mcc.c"
  5732 ;; Parameters:    Size  Location     Type
  5733 ;;		None
  5734 ;; Auto vars:     Size  Location     Type
  5735 ;;		None
  5736 ;; Return value:  Size  Location     Type
  5737 ;;                  1    wreg      void 
  5738 ;; Registers used:
  5739 ;;		wreg, status,2, status,0, pclath, cstack
  5740 ;; Tracked objects:
  5741 ;;		On entry : 0/0
  5742 ;;		On exit  : 0/0
  5743 ;;		Unchanged: 0/0
  5744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5745 ;;      Params:         0       0       0       0
  5746 ;;      Locals:         0       0       0       0
  5747 ;;      Temps:          0       0       0       0
  5748 ;;      Totals:         0       0       0       0
  5749 ;;Total ram usage:        0 bytes
  5750 ;; Hardware stack levels used:    1
  5751 ;; Hardware stack levels required when called:    1
  5752 ;; This function calls:
  5753 ;;		_EUSART1_Initialize
  5754 ;;		_OSCILLATOR_Initialize
  5755 ;;		_PIN_MANAGER_Initialize
  5756 ;; This function is called by:
  5757 ;;		_main
  5758 ;; This function uses a non-reentrant model
  5759 ;;
  5760                           
  5761                           
  5762                           ;psect for function _SYSTEM_Initialize
  5763  011E                     _SYSTEM_Initialize:	
  5764                           
  5765                           ;mcc.c: 89: PIN_MANAGER_Initialize();
  5766                           
  5767                           ;incstack = 0
  5768                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5769  011E  2289               	fcall	_PIN_MANAGER_Initialize
  5770                           
  5771                           ;mcc.c: 90: OSCILLATOR_Initialize();
  5772  011F  2159               	fcall	_OSCILLATOR_Initialize
  5773                           
  5774                           ;mcc.c: 91: EUSART1_Initialize();
  5775  0120  214D               	fcall	_EUSART1_Initialize
  5776  0121  0008               	return
  5777  0122                     __end_of_SYSTEM_Initialize:	
  5778                           
  5779                           	psect	text28
  5780  0289                     __ptext28:	
  5781 ;; *************** function _PIN_MANAGER_Initialize *****************
  5782 ;; Defined at:
  5783 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  5784 ;; Parameters:    Size  Location     Type
  5785 ;;		None
  5786 ;; Auto vars:     Size  Location     Type
  5787 ;;  state           1    0[COMMON] unsigned char 
  5788 ;; Return value:  Size  Location     Type
  5789 ;;                  1    wreg      void 
  5790 ;; Registers used:
  5791 ;;		wreg, status,2, status,0
  5792 ;; Tracked objects:
  5793 ;;		On entry : 0/0
  5794 ;;		On exit  : 0/0
  5795 ;;		Unchanged: 0/0
  5796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5797 ;;      Params:         0       0       0       0
  5798 ;;      Locals:         1       0       0       0
  5799 ;;      Temps:          0       0       0       0
  5800 ;;      Totals:         1       0       0       0
  5801 ;;Total ram usage:        1 bytes
  5802 ;; Hardware stack levels used:    1
  5803 ;; This function calls:
  5804 ;;		Nothing
  5805 ;; This function is called by:
  5806 ;;		_SYSTEM_Initialize
  5807 ;; This function uses a non-reentrant model
  5808 ;;
  5809                           
  5810                           
  5811                           ;psect for function _PIN_MANAGER_Initialize
  5812  0289                     _PIN_MANAGER_Initialize:	
  5813                           
  5814                           ;pin_manager.c: 56: LATA = 0x00;
  5815                           
  5816                           ;incstack = 0
  5817                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  5818  0289  0140               	movlb	0	; select bank0
  5819  028A  0198               	clrf	24	;volatile
  5820                           
  5821                           ;pin_manager.c: 57: LATC = 0x00;
  5822  028B  019A               	clrf	26	;volatile
  5823                           
  5824                           ;pin_manager.c: 62: TRISA = 0x03;
  5825  028C  3003               	movlw	3
  5826  028D  0092               	movwf	18	;volatile
  5827                           
  5828                           ;pin_manager.c: 63: TRISC = 0x22;
  5829  028E  3022               	movlw	34
  5830  028F  0094               	movwf	20	;volatile
  5831                           
  5832                           ;pin_manager.c: 68: ANSELC = 0x1D;
  5833  0290  301D               	movlw	29
  5834  0291  017E               	movlb	62	; select bank62
  5835  0292  00CE               	movwf	78	;volatile
  5836                           
  5837                           ;pin_manager.c: 69: ANSELA = 0x37;
  5838  0293  3037               	movlw	55
  5839  0294  00B8               	movwf	56	;volatile
  5840                           
  5841                           ;pin_manager.c: 74: WPUA = 0x00;
  5842  0295  01B9               	clrf	57	;volatile
  5843                           
  5844                           ;pin_manager.c: 75: WPUC = 0x00;
  5845  0296  01CF               	clrf	79	;volatile
  5846                           
  5847                           ;pin_manager.c: 80: ODCONA = 0x00;
  5848  0297  01BA               	clrf	58	;volatile
  5849                           
  5850                           ;pin_manager.c: 81: ODCONC = 0x00;
  5851  0298  01D0               	clrf	80	;volatile
  5852                           
  5853                           ;pin_manager.c: 88: bool state = GIE;
  5854  0299  3000               	movlw	0
  5855  029A  1B8B               	btfsc	11,7	;volatile
  5856  029B  3001               	movlw	1
  5857  029C  00F0               	movwf	PIN_MANAGER_Initialize@state
  5858                           
  5859                           ;pin_manager.c: 89: GIE = 0;
  5860  029D  138B               	bcf	11,7	;volatile
  5861                           
  5862                           ;pin_manager.c: 90: PPSLOCK = 0x55;
  5863  029E  3055               	movlw	85
  5864  029F  017D               	movlb	61	; select bank61
  5865  02A0  008F               	movwf	15	;volatile
  5866                           
  5867                           ;pin_manager.c: 91: PPSLOCK = 0xAA;
  5868  02A1  30AA               	movlw	170
  5869  02A2  008F               	movwf	15	;volatile
  5870                           
  5871                           ;pin_manager.c: 92: PPSLOCKbits.PPSLOCKED = 0x00;
  5872  02A3  100F               	bcf	15,0	;volatile
  5873                           
  5874                           ;pin_manager.c: 94: RX1DTPPSbits.RX1DTPPS = 0x15;
  5875  02A4  084B               	movf	75,w	;volatile
  5876  02A5  39C0               	andlw	-64
  5877  02A6  3815               	iorlw	21
  5878  02A7  00CB               	movwf	75	;volatile
  5879                           
  5880                           ;pin_manager.c: 95: RC4PPS = 0x0F;
  5881  02A8  300F               	movlw	15
  5882  02A9  017E               	movlb	62	; select bank62
  5883  02AA  00A4               	movwf	36	;volatile
  5884                           
  5885                           ;pin_manager.c: 97: PPSLOCK = 0x55;
  5886  02AB  3055               	movlw	85
  5887  02AC  017D               	movlb	61	; select bank61
  5888  02AD  008F               	movwf	15	;volatile
  5889                           
  5890                           ;pin_manager.c: 98: PPSLOCK = 0xAA;
  5891  02AE  30AA               	movlw	170
  5892  02AF  008F               	movwf	15	;volatile
  5893                           
  5894                           ;pin_manager.c: 99: PPSLOCKbits.PPSLOCKED = 0x01;
  5895  02B0  140F               	bsf	15,0	;volatile
  5896                           
  5897                           ;pin_manager.c: 101: GIE = state;
  5898  02B1  1C70               	btfss	PIN_MANAGER_Initialize@state,0
  5899  02B2  2AB5               	goto	u2090
  5900  02B3  178B               	bsf	11,7	;volatile
  5901  02B4  0008               	return
  5902  02B5                     u2090:	
  5903  02B5  138B               	bcf	11,7	;volatile
  5904  02B6  0008               	return
  5905  02B7                     __end_of_PIN_MANAGER_Initialize:	
  5906                           
  5907                           	psect	text29
  5908  0159                     __ptext29:	
  5909 ;; *************** function _OSCILLATOR_Initialize *****************
  5910 ;; Defined at:
  5911 ;;		line 94 in file "mcc_generated_files/mcc.c"
  5912 ;; Parameters:    Size  Location     Type
  5913 ;;		None
  5914 ;; Auto vars:     Size  Location     Type
  5915 ;;		None
  5916 ;; Return value:  Size  Location     Type
  5917 ;;                  1    wreg      void 
  5918 ;; Registers used:
  5919 ;;		wreg, status,2
  5920 ;; Tracked objects:
  5921 ;;		On entry : 0/0
  5922 ;;		On exit  : 0/0
  5923 ;;		Unchanged: 0/0
  5924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5925 ;;      Params:         0       0       0       0
  5926 ;;      Locals:         0       0       0       0
  5927 ;;      Temps:          0       0       0       0
  5928 ;;      Totals:         0       0       0       0
  5929 ;;Total ram usage:        0 bytes
  5930 ;; Hardware stack levels used:    1
  5931 ;; This function calls:
  5932 ;;		Nothing
  5933 ;; This function is called by:
  5934 ;;		_SYSTEM_Initialize
  5935 ;; This function uses a non-reentrant model
  5936 ;;
  5937                           
  5938                           
  5939                           ;psect for function _OSCILLATOR_Initialize
  5940  0159                     _OSCILLATOR_Initialize:	
  5941                           
  5942                           ;mcc.c: 97: OSCCON1 = 0x10;
  5943                           
  5944                           ;incstack = 0
  5945                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5946  0159  3010               	movlw	16
  5947  015A  0151               	movlb	17	; select bank17
  5948  015B  008D               	movwf	13	;volatile
  5949                           
  5950                           ;mcc.c: 99: OSCCON3 = 0x00;
  5951  015C  018F               	clrf	15	;volatile
  5952                           
  5953                           ;mcc.c: 101: OSCEN = 0x00;
  5954  015D  0191               	clrf	17	;volatile
  5955                           
  5956                           ;mcc.c: 103: OSCFRQ = 0x05;
  5957  015E  3005               	movlw	5
  5958  015F  0093               	movwf	19	;volatile
  5959                           
  5960                           ;mcc.c: 105: OSCSTAT = 0x00;
  5961  0160  0190               	clrf	16	;volatile
  5962                           
  5963                           ;mcc.c: 107: OSCTUNE = 0x00;
  5964  0161  0192               	clrf	18	;volatile
  5965  0162                     l60:	
  5966                           ;mcc.c: 110: {
  5967                           
  5968                           ;mcc.c: 109: while(PLLR == 0)
  5969                           
  5970  0162  1810               	btfsc	16,0	;volatile
  5971  0163  0008               	return
  5972  0164  2962               	goto	l60
  5973  0165                     __end_of_OSCILLATOR_Initialize:	
  5974                           
  5975                           	psect	text30
  5976  014D                     __ptext30:	
  5977 ;; *************** function _EUSART1_Initialize *****************
  5978 ;; Defined at:
  5979 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  5980 ;; Parameters:    Size  Location     Type
  5981 ;;		None
  5982 ;; Auto vars:     Size  Location     Type
  5983 ;;		None
  5984 ;; Return value:  Size  Location     Type
  5985 ;;                  1    wreg      void 
  5986 ;; Registers used:
  5987 ;;		wreg
  5988 ;; Tracked objects:
  5989 ;;		On entry : 0/0
  5990 ;;		On exit  : 0/0
  5991 ;;		Unchanged: 0/0
  5992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5993 ;;      Params:         0       0       0       0
  5994 ;;      Locals:         0       0       0       0
  5995 ;;      Temps:          0       0       0       0
  5996 ;;      Totals:         0       0       0       0
  5997 ;;Total ram usage:        0 bytes
  5998 ;; Hardware stack levels used:    1
  5999 ;; This function calls:
  6000 ;;		Nothing
  6001 ;; This function is called by:
  6002 ;;		_SYSTEM_Initialize
  6003 ;; This function uses a non-reentrant model
  6004 ;;
  6005                           
  6006                           
  6007                           ;psect for function _EUSART1_Initialize
  6008  014D                     _EUSART1_Initialize:	
  6009                           
  6010                           ;eusart1.c: 60: BAUD1CON = 0x08;
  6011                           
  6012                           ;incstack = 0
  6013                           ; Regs used in _EUSART1_Initialize: [wreg]
  6014  014D  3008               	movlw	8
  6015  014E  0142               	movlb	2	; select bank2
  6016  014F  009F               	movwf	31	;volatile
  6017                           
  6018                           ;eusart1.c: 63: RC1STA = 0x90;
  6019  0150  3090               	movlw	144
  6020  0151  009D               	movwf	29	;volatile
  6021                           
  6022                           ;eusart1.c: 66: TX1STA = 0x24;
  6023  0152  3024               	movlw	36
  6024  0153  009E               	movwf	30	;volatile
  6025                           
  6026                           ;eusart1.c: 69: SP1BRGL = 0x40;
  6027  0154  3040               	movlw	64
  6028  0155  009B               	movwf	27	;volatile
  6029                           
  6030                           ;eusart1.c: 72: SP1BRGH = 0x03;
  6031  0156  3003               	movlw	3
  6032  0157  009C               	movwf	28	;volatile
  6033  0158  0008               	return
  6034  0159                     __end_of_EUSART1_Initialize:	
  6035                           
  6036                           	psect	text31
  6037  0126                     __ptext31:	
  6038 ;; *************** function _EUSART1_Write *****************
  6039 ;; Defined at:
  6040 ;;		line 96 in file "mcc_generated_files/eusart1.c"
  6041 ;; Parameters:    Size  Location     Type
  6042 ;;  txData          1    wreg     unsigned char 
  6043 ;; Auto vars:     Size  Location     Type
  6044 ;;  txData          1    0[COMMON] unsigned char 
  6045 ;; Return value:  Size  Location     Type
  6046 ;;                  1    wreg      void 
  6047 ;; Registers used:
  6048 ;;		wreg
  6049 ;; Tracked objects:
  6050 ;;		On entry : 0/0
  6051 ;;		On exit  : 0/0
  6052 ;;		Unchanged: 0/0
  6053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6054 ;;      Params:         0       0       0       0
  6055 ;;      Locals:         1       0       0       0
  6056 ;;      Temps:          0       0       0       0
  6057 ;;      Totals:         1       0       0       0
  6058 ;;Total ram usage:        1 bytes
  6059 ;; Hardware stack levels used:    1
  6060 ;; This function calls:
  6061 ;;		Nothing
  6062 ;; This function is called by:
  6063 ;;		_main
  6064 ;; This function uses a non-reentrant model
  6065 ;;
  6066                           
  6067                           
  6068                           ;psect for function _EUSART1_Write
  6069  0126                     _EUSART1_Write:	
  6070                           
  6071                           ;incstack = 0
  6072                           ; Regs used in _EUSART1_Write: [wreg]
  6073                           ;EUSART1_Write@txData stored from wreg
  6074  0126  00F0               	movwf	EUSART1_Write@txData
  6075  0127                     l31:	
  6076                           ;eusart1.c: 99: {
  6077                           
  6078                           ;eusart1.c: 98: while(0 == PIR3bits.TX1IF)
  6079                           
  6080  0127  014E               	movlb	14	; select bank14
  6081  0128  1E0F               	btfss	15,4	;volatile
  6082  0129  2927               	goto	l31
  6083                           
  6084                           ;eusart1.c: 100: }
  6085                           ;eusart1.c: 102: TX1REG = txData;
  6086  012A  0870               	movf	EUSART1_Write@txData,w
  6087  012B  0142               	movlb	2	; select bank2
  6088  012C  009A               	movwf	26	;volatile
  6089  012D  0008               	return
  6090  012E                     __end_of_EUSART1_Write:	
  6091  007E                     btemp	set	126	;btemp
  6092  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    128
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     39      49
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    cw_write@w_pdata	PTR unsigned char  size(1) Largest target is 1
		 -> cw_por@reset_val(BANK0[1]), cw_init@reg_val(BANK0[1]), cw_update_config_info@reset_val(BANK0[1]), cw_update_config_info@reg_val(BANK0[1]), 

    cw_read_word@r_pdata	PTR unsigned char  size(1) Largest target is 2
		 -> cw_get_vol@reg_val(BANK0[2]), 

    cw_read@r_pdata	PTR unsigned char  size(1) Largest target is 1
		 -> cw_get_capacity@reg_val(BANK0[1]), cw_init@reg_val(BANK0[1]), cw_update_config_info@reg_val(BANK0[1]), 


Critical Paths under _main in COMMON

    _cw_get_vol->_cw_read_word
    _cw_read_word->_wait_r_ack
    _sn_ack->_Delay10us
    ___lldiv->___lmul
    _cw_get_capacity->_cw_read
    _cw_init->_cw_read
    _cw_update_config_info->_cw_read
    _cw_write->_wait_r_ack
    _cw_read->_wait_r_ack
    _write_byte->_Delay10us
    _wait_r_ack->_r_ack
    _stop->_Delay10us
    _r_ack->_Delay10us
    _start->_Delay10us
    _s_ack->_Delay10us
    _read_byte->_Delay10us
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize

Critical Paths under _main in BANK0

    _cw_bat_work->_update_capacity
    _cw_bat_work->_update_vol
    _update_vol->_cw_get_vol
    _cw_get_vol->___lldiv
    _cw_read_word->_wait_r_ack
    _update_capacity->_cw_get_capacity
    _cw_get_capacity->_cw_por
    _cw_por->_cw_init
    _cw_bat_init->_cw_init
    _cw_init->_cw_update_config_info
    _cw_update_config_info->_cw_write
    _cw_write->_wait_r_ack
    _cw_read->_wait_r_ack

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   23845
                                             37 BANK0      2     2      0
                       _CW_Delay10ms
                      _EUSART1_Write
                  _SYSTEM_Initialize
                        _cw_bat_init
                        _cw_bat_work
 ---------------------------------------------------------------------------------
 (1) _cw_bat_work                                          0     0      0   15007
                    _update_capacity
                  _update_usb_online
                         _update_vol
 ---------------------------------------------------------------------------------
 (2) _update_vol                                           2     2      0    2755
                                             35 BANK0      2     2      0
                         _cw_get_vol
 ---------------------------------------------------------------------------------
 (3) _cw_get_vol                                          22    20      2    2659
                                             13 BANK0     22    20      2
                            ___lldiv
                             ___lmul
                       _cw_read_word
 ---------------------------------------------------------------------------------
 (4) _cw_read_word                                         7     4      3    1687
                                             12 COMMON     2     2      0
                                              4 BANK0      5     2      3
                          _read_byte
                              _s_ack
                             _sn_ack
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (5) _sn_ack                                               0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     220
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     290
                                             12 COMMON     1     1      0
                                              0 BANK0     13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _update_usb_online                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _update_capacity                                      3     3      0   12252
                                             34 BANK0      3     3      0
                    _cw_get_capacity
 ---------------------------------------------------------------------------------
 (3) _cw_get_capacity                                      9     7      2   12163
                                             26 BANK0      8     6      2
                             _cw_por
                            _cw_read
 ---------------------------------------------------------------------------------
 (4) _cw_por                                               7     5      2   10183
                                             19 BANK0      7     5      2
                      _CW_Delay100us
                            _cw_init
                           _cw_write
 ---------------------------------------------------------------------------------
 (1) _cw_bat_init                                          3     3      0    8458
                                             19 BANK0      3     3      0
                            _cw_init
 ---------------------------------------------------------------------------------
 (5) _cw_init                                              6     6      0    8389
                                             13 BANK0      6     6      0
                       _CW_Delay10ms
                            _cw_read
              _cw_update_config_info
                           _cw_write
 ---------------------------------------------------------------------------------
 (6) _cw_update_config_info                                6     6      0    4045
                                              7 BANK0      6     6      0
                      _CW_Delay100us
                            _cw_read
                           _cw_write
 ---------------------------------------------------------------------------------
 (5) _cw_write                                             4     1      3    1516
                                             12 COMMON     1     1      0
                                              4 BANK0      3     0      3
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (4) _cw_read                                              4     2      2    1842
                                             12 COMMON     2     2      0
                                              4 BANK0      2     0      2
                          _read_byte
                              _s_ack
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (5) _write_byte                                           3     3      0     229
                                              4 COMMON     3     3      0
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _wait_r_ack                                           6     4      2     391
                                             10 COMMON     2     0      2
                                              0 BANK0      4     4      0
                              _r_ack
                               _stop
 ---------------------------------------------------------------------------------
 (6) _stop                                                 0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (6) _r_ack                                                6     4      2     161
                                              4 COMMON     6     4      2
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _start                                                0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _s_ack                                                0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _read_byte                                            3     3      0     252
                                              4 COMMON     3     3      0
                          _Delay10us
 ---------------------------------------------------------------------------------
 (6) _Delay10us                                            4     4      0     138
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (7) _CW_Delay100us                                        4     4      0     138
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (6) _CW_Delay10ms                                         6     4      2     329
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      23
                 _EUSART1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Write                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CW_Delay10ms
   _EUSART1_Write
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _cw_bat_init
     _cw_init
       _CW_Delay10ms
       _cw_read
         _read_byte
           _Delay10us
         _s_ack
           _Delay10us
         _start
           _Delay10us
         _stop
           _Delay10us
         _wait_r_ack
           _r_ack
             _Delay10us
           _stop
             _Delay10us
         _write_byte
           _Delay10us
       _cw_update_config_info
         _CW_Delay100us
         _cw_read
           _read_byte
             _Delay10us
           _s_ack
             _Delay10us
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us
         _cw_write
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us
       _cw_write
         _start
           _Delay10us
         _stop
           _Delay10us
         _wait_r_ack
           _r_ack
             _Delay10us
           _stop
             _Delay10us
         _write_byte
           _Delay10us
   _cw_bat_work
     _update_capacity
       _cw_get_capacity
         _cw_por
           _CW_Delay100us
           _cw_init
             _CW_Delay10ms
             _cw_read
               _read_byte
                 _Delay10us
               _s_ack
                 _Delay10us
               _start
                 _Delay10us
               _stop
                 _Delay10us
               _wait_r_ack
                 _r_ack
                   _Delay10us
                 _stop
                   _Delay10us
               _write_byte
                 _Delay10us
             _cw_update_config_info
               _CW_Delay100us
               _cw_read
                 _read_byte
                   _Delay10us
                 _s_ack
                   _Delay10us
                 _start
                   _Delay10us
                 _stop
                   _Delay10us
                 _wait_r_ack
                   _r_ack
                     _Delay10us
                   _stop
                     _Delay10us
                 _write_byte
                   _Delay10us
               _cw_write
                 _start
                   _Delay10us
                 _stop
                   _Delay10us
                 _wait_r_ack
                   _r_ack
                     _Delay10us
                   _stop
                     _Delay10us
                 _write_byte
                   _Delay10us
             _cw_write
               _start
                 _Delay10us
               _stop
                 _Delay10us
               _wait_r_ack
                 _r_ack
                   _Delay10us
                 _stop
                   _Delay10us
               _write_byte
                 _Delay10us
           _cw_write
             _start
               _Delay10us
             _stop
               _Delay10us
             _wait_r_ack
               _r_ack
                 _Delay10us
               _stop
                 _Delay10us
             _write_byte
               _Delay10us
         _cw_read
           _read_byte
             _Delay10us
           _s_ack
             _Delay10us
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us
     _update_usb_online
     _update_vol
       _cw_get_vol
         ___lldiv
           ___lmul (ARG)
         ___lmul
         _cw_read_word
           _read_byte
             _Delay10us
           _s_ack
             _Delay10us
           _sn_ack
             _Delay10us
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     27      31       5       61.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
ABS                  0      0      3F      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      3F      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Tue Aug 29 11:02:01 2017

                                    __CFG_CP$OFF 0000                                               l31 0127  
                                             l60 0162                                  _update_capacity 0245  
                                    __CFG_LVP$ON 0000                                              l241 0768  
                                            l170 04D4                                              l404 026D  
                                            l228 06D9                                              l173 04D6  
                                            l280 05ED                                              l281 05F9  
                                            l279 05E1                                              _GIE 005F  
                                   __CFG_BORV$LO 0000                                              wreg 0009  
                                  __CFG_BBEN$OFF 0000                                     __CFG_ZCD$OFF 0000  
                                  ?_cw_read_word 0024                                             l2003 078F  
                                           l2011 07A2                                    CW_Delay10ms@a 0073  
                                           l2021 07B4                                    CW_Delay10ms@b 0074  
                                  CW_Delay10ms@c 0070                                             l2103 048C  
                                           l2113 0543                                             l2027 07B9  
                                           l2125 055F                                             l2039 07D0  
                                           l2047 07DC                                             l2207 0438  
                                           l2215 043E                                             l2151 02C9  
                                           l2135 0588                                             l2119 0551  
                                           l2231 05AF                                             l2057 07F1  
                                           l2081 0463                                             l2209 0439  
                                           l2137 0561                                             l2323 0135  
                                           l2147 02BF                                             l2139 058E  
                                           l2251 0608                                             l2341 01BB  
                                           l2093 047A                                             l2165 04F1  
                                           l1623 0215                                             l2335 01AC  
                                           l2175 051F                                             l2167 04FF  
                                           l2239 05C7                                             l1625 021A  
                                           l1617 020E                                             l1801 0334  
                                           l2193 0419                                             l2441 04BF  
                                           l2425 049C                                             l1627 021F  
                                           l2179 052A                                             l2443 04CA  
                                           l1725 027D                                             l1733 0287  
                                           l2445 04DA                                             l1831 0236  
                                           l2439 04B5                                             l1833 023B  
                                           l1825 022F                                             l1753 01F5  
                                           l1681 0315                                             l1665 02F4  
                                           l1809 0345                                             l1835 0240  
                                           l1755 01FA                                             l1747 01EE  
                                           l1757 01FF                                             l1773 0366  
                                           l1917 06EF                                             l1861 0677  
                                           l1679 0309                                             l1767 0359  
                                           l1871 0694                                             l1855 0672  
                                           l1697 01D4                                             l1929 0705  
                                           l1881 06A1                                             l1849 0669  
                                           l1961 073E                                             l1953 072D  
                                           l1779 0374                                             l1795 0327  
                                           l1939 0718                                             l1875 069C  
                                           l1973 0757                                             l1895 06C0  
                                           l1889 06B3                                             l1899 06C8  
                                           l1995 077D                                             l1989 0778  
                                           u1250 01D2                                             _LATA 0018  
                                           u2135 0256                                             _LATC 001A  
                                           u2145 025F                                             u2065 05E7  
                                           u2090 02B5                                             u2075 05F3  
                                           u2265 01A3                                             u1905 02D1  
                                           u1935 04F4                                             u1865 0581  
                                           u1955 0500                                             u1875 056A  
                                           u1965 0514                                             u1975 0520  
                                           u1895 02CA                                             _PLLR 4480  
                                           _WPUA 1F39                                             _WPUC 1F4F  
                                  _EUSART1_Write 0126                                    __CFG_FCMEN$ON 0000  
                                           _main 048F                                             fsr0h 0005  
                                           fsr1h 0007                                             indf0 0000  
                                           fsr0l 0004                                             indf1 0001  
                                           fsr1l 0006                                             btemp 007E  
                                           _stop 0165                                    __CFG_BOREN$ON 0000  
                                           start 0001                                    __CFG_CSWEN$ON 0000  
                                 CW_Delay100us@a 0071                                   CW_Delay100us@b 0072  
                                 CW_Delay100us@i 0073                                 ?_cw_get_capacity 003A  
                     update_capacity@cw_capacity 0043                   __size_of_OSCILLATOR_Initialize 000C  
                  __end_of_OSCILLATOR_Initialize 0165                            _cw_update_config_info 0655  
                                          ?_main 0070                                    __CFG_WDTE$OFF 0000  
                                __end_of___lldiv 0533                                            ?_stop 0070  
                                          _OSCEN 0891                                            _TRISA 0012  
                                          _TRISC 0014                              ___lmul@multiplicand 0074  
                                  __CFG_WRTB$OFF 0000                                    __CFG_WRTC$OFF 0000  
                                __end_of_cw_init 07F3                                  __end_of_cw_read 0382  
                                 ??_cw_read_word 007C                                            _r_ack 017D  
                                          _s_ack 0137                                            _start 0142  
                                 ?_EUSART1_Write 0070                        cw_init@cw_bat_config_info 03C2  
                                          status 0003                                            wtemp0 007E  
                                 __CFG_MCLRE$OFF 0000                          __end_of_update_capacity 0266  
                                __initialization 07F3                       __end_of_EUSART1_Initialize 0159  
                                   __end_of_main 04E0                               __size_of_Delay10us 0020  
                                   __end_of_stop 0171                                   __CFG_SAFEN$OFF 0000  
                                 cw_bat_init@ret 0035                                           ??_main 0045  
                                         ??_stop 0074                                           ?_r_ack 0074  
                                         ?_s_ack 0070                                 cw_read@point_reg 007D  
                                         _CHARGE 0050                                           _ANSELA 1F38  
                                         _ANSELC 1F4E                                           ?_start 0070  
                                         _RC1REG 0119                                           _RC1STA 011D  
                                         _RC4PPS 1F24                                           _ODCONA 1F3A  
                                         _ODCONC 1F50                                   __CFG_WDTCCS$SC 0000  
                                         _OSCFRQ 0893                                           _TX1REG 011A  
                                         _TX1STA 011E                                  cw_write@w_pdata 0024  
                                 __CFG_PWRTE$OFF 0000                                    cw_get_vol@F80 004D  
                           __size_of_cw_bat_init 001B                             __size_of_cw_bat_work 0004  
                                         ___lmul 02B7                                    cw_get_vol@ret 0034  
                                 __CFG_STVREN$ON 0000                                        ??___lldiv 007C  
                               __end_of_cw_write 034A                                           _cw_bat 0047  
                                         _cw_por 0447                           ?_cw_update_config_info 0070  
                                         _sn_ack 0171                                        ??_cw_init 002D  
                                      ??_cw_read 007C                                    ?_CW_Delay10ms 0070  
                                ??_EUSART1_Write 0070                                __end_of_Delay10us 0224  
                              _SYSTEM_Initialize 011E                          __end_of__initialization 07FE  
                             ?_SYSTEM_Initialize 0070                                _update_usb_online 012E  
                               ?_update_capacity 0070                                cw_get_vol@ad_buff 0041  
                                 __pcstackCOMMON 0070                               ?_update_usb_online 0070  
                            ??_SYSTEM_Initialize 0071                             __end_of_cw_read_word 0594  
                                  __end_of_r_ack 0193                                    __end_of_s_ack 0142  
                                  __end_of_start 014D                           __size_of_CW_Delay100us 0020  
                                 ??_CW_Delay10ms 0072                              ??_update_usb_online 0070  
                              cw_get_vol@reg_val 0036                                  cw_bat_init@loop 0034  
                                        ??_r_ack 0076                                          ??_s_ack 0074  
                      __end_of_SYSTEM_Initialize 0122                                          ??_start 0074  
                                     __pbssBANK0 0047                        __end_of_update_usb_online 0137  
                             __size_of_read_byte 0023                                       __pmaintext 048F  
                                        ?___lmul 0070                                  __CFG_PPS1WAY$ON 0000  
                                        ?_cw_por 0033                                   ___lmul@product 0078  
                                        ?_sn_ack 0070                                          _SP1BRGH 011C  
                                        _SP1BRGL 011B                                          _OSCCON1 088D  
                                        _OSCCON3 088F                                          _OSCSTAT 0890  
                                        _OSCTUNE 0892                                          _PPSLOCK 1E8F  
                                     _cw_get_vol 0594                                        ?_cw_write 0024  
                                  _CW_Delay100us 01E4                             update_vol@cw_voltage 0043  
                                __size_of___lmul 002F                __end_ofcw_init@cw_bat_config_info 0402  
                                        ___lldiv 04E0                                  __size_of_cw_por 0048  
                                __size_of_sn_ack 000C                                          __ptext1 0122  
                                        __ptext2 0193                                          __ptext3 0594  
                                        __ptext4 0533                                          __ptext5 0171  
                                        __ptext6 02B7                                          __ptext7 04E0  
                                        __ptext8 012E                                          __ptext9 0245  
                                        _cw_init 071A                                          _cw_read 034A  
                                __CFG_WRTAPP$OFF 0000                            _OSCILLATOR_Initialize 0159  
                              __end_of_read_byte 0289                               _EUSART1_Initialize 014D  
                       __size_of_cw_get_capacity 0045                         ??_PIN_MANAGER_Initialize 0070  
                                __CFG_WRTSAF$OFF 0000                       __size_of_SYSTEM_Initialize 0004  
                                        main@ret 0046                             end_of_initialization 07FE  
                               write_byte@w_data 0075                                   ?_CW_Delay100us 0070  
                            ?_EUSART1_Initialize 0070                                       ??_cw_write 007C  
                     __size_of_update_usb_online 0009                             __end_of_CW_Delay10ms 0245  
                          __size_of_cw_read_word 0061                                  ___lldiv@divisor 0020  
                                cw_por@reset_val 0037                                  ___lldiv@counter 002C  
                                     _reset_loop 004F                     cw_update_config_info@reg_val 002C  
                        ??_cw_update_config_info 0027                                      wait_r_ack@i 0022  
                                     _wait_r_ack 02E6                             ??_EUSART1_Initialize 0070  
                          __CFG_WDTCPS$WDTCPS_31 0000                                        _PORTCbits 000E  
                       cw_update_config_info@ret 0029                                        _TRISCbits 0014  
                                     _update_vol 0193                                      ?_cw_get_vol 002D  
                            EUSART1_Write@txData 0070                                 __CFG_FEXTOSC$OFF 0000  
                                   _cw_read_word 0533                                        _Delay10us 0204  
                                 cw_init@reg_val 0032                                    ??_cw_bat_init 0033  
                                  ??_cw_bat_work 007E                                       cw_init@ret 0030  
                                 cw_read@r_pdata 0024                               cw_get_vol@ad_value 003C  
                                 __end_of___lmul 02E6                                       _write_byte 01C5  
                                 __end_of_cw_por 048F                           ?_OSCILLATOR_Initialize 0070  
                                 __end_of_sn_ack 017D                              start_initialization 07F3  
                __size_of_PIN_MANAGER_Initialize 002E                                  ??_CW_Delay100us 0070  
                          __end_of_EUSART1_Write 012E                       cw_get_capacity@cw_capacity 003E  
                              ??_cw_get_capacity 003C                                       ?_Delay10us 0070  
                               __CFG_LPBOREN$OFF 0000                                         ??___lmul 0078  
                            __end_of_cw_bat_init 01C5                              __size_of_cw_get_vol 00C1  
                                    ?_wait_r_ack 007A                              __end_of_cw_bat_work 0126  
                                       ??_cw_por 0035                                         ??_sn_ack 0074  
                                     read_byte@i 0075                         __size_of_update_capacity 0021  
                         cw_update_config_info@i 002B                           cw_get_capacity@reg_val 0041  
                                      ___latbits 0000                                    __pcstackBANK0 0020  
                                    ?_update_vol 0070                            __size_of_CW_Delay10ms 0021  
                              __size_of_cw_write 0032                           cw_get_vol@ad_value_max 003A  
                         cw_get_vol@ad_value_min 0038                              cw_read_word@r_pdata 0024  
                         _PIN_MANAGER_Initialize 0289                                         ?___lldiv 0020  
                                    ?_write_byte 0070                            cw_read_word@point_reg 0027  
                                       ?_cw_init 0070                                         ?_cw_read 0024  
                                       _BAUD1CON 011F                                     _CW_Delay10ms 0224  
                           __CFG_RSTOSC$HFINTPLL 0000                                   __size_of_r_ack 0016  
                                 __size_of_s_ack 000B                                        _read_byte 0266  
                                 __size_of_start 000B                              __size_of_wait_r_ack 0032  
                                    ??_Delay10us 0070                                         _LATAbits 0018  
                                       _LATCbits 001A                                      _cw_bat_init 01AA  
                                    _cw_bat_work 0122                                         _PIR3bits 070F  
                              __CFG_BBSIZE$BB512 0000                              __size_of_update_vol 0017  
                 __size_of_cw_update_config_info 00C5                    __end_of_cw_update_config_info 071A  
                                   _RX1DTPPSbits 1ECB                                      write_byte@i 0076  
                                   ??_cw_get_vol 002F                                ??_update_capacity 0042  
                                      cw_por@ret 0038                                ___lmul@multiplier 0070  
                                     ?_read_byte 0070                                cw_write@point_reg 007C  
                            __size_of_write_byte 001F                                  read_byte@r_data 0076  
                        ??_OSCILLATOR_Initialize 0070                               __end_of_cw_get_vol 0655  
                               __size_of___lldiv 0053                      __size_of_EUSART1_Initialize 000C  
                                _cw_get_capacity 0402                                 __size_of_cw_init 00D9  
                               __size_of_cw_read 0038                               cw_read_word@length 0025  
                                       __ptext10 0402                                         __ptext11 0447  
                                       __ptext20 017D                                         __ptext12 01AA  
                                       __ptext21 0142                                         __ptext13 071A  
                                       __ptext30 014D                                         __ptext22 0137  
                                       __ptext14 0655                                         __ptext31 0126  
                                       __ptext23 0266                                         __ptext15 0318  
                                       __ptext24 0204                                         __ptext16 034A  
                                       __ptext25 01E4                                         __ptext17 01C5  
                                       __ptext26 0224                                         __ptext18 02E6  
                                       __ptext27 011E                                         __ptext19 0165  
                                       __ptext28 0289                                         __ptext29 0159  
                                       _cw_write 0318                               cw_get_capacity@ret 003F  
                                  __size_of_main 0051                                    __size_of_stop 000C  
                           __CFG_WDTCWS$WDTCWS_7 0000                                       Delay10us@a 0071  
                                     Delay10us@b 0072                                       Delay10us@i 0073  
                                     _RC1STAbits 011D                                     ??_wait_r_ack 007C  
                                       cw_init@i 002F                   cw_update_config_info@reset_val 0028  
                    PIN_MANAGER_Initialize@state 0070                                         r_ack@ack 0078  
                                  wait_r_ack@ack 0020  __end_ofcw_update_config_info@cw_bat_config_info 03C2  
        cw_update_config_info@cw_bat_config_info 0382                                     ??_update_vol 007E  
                                    ??_read_byte 0074                            __end_of_CW_Delay100us 0204  
                              cw_read_word@count 0028                               __end_of_wait_r_ack 0318  
                               ___lldiv@dividend 0024                          ?_PIN_MANAGER_Initialize 0070  
                              __CFG_CLKOUTEN$OFF 0000                                      _PPSLOCKbits 1E8F  
                        __end_of_cw_get_capacity 0447                               __end_of_update_vol 01AA  
                         cw_get_vol@get_ad_times 0040                                     ??_write_byte 0074  
                         __size_of_EUSART1_Write 0008                                    __pstringtext1 03C2  
                                  __pstringtext2 0382                                 ___lldiv@quotient 0028  
                 __end_of_PIN_MANAGER_Initialize 02B7                               __end_of_write_byte 01E4  
                                   ?_cw_bat_init 0070                                     ?_cw_bat_work 0070  
