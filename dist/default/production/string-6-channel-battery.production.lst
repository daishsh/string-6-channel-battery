

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sat Sep 09 10:51:33 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F15323
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	psect	text20,local,class=CODE,merge=1,delta=2
    31                           	psect	text21,local,class=CODE,merge=1,delta=2
    32                           	psect	text22,local,class=CODE,merge=1,delta=2
    33                           	psect	text23,local,class=CODE,merge=1,delta=2
    34                           	psect	text24,local,class=CODE,merge=1,delta=2
    35                           	psect	text25,local,class=CODE,merge=1,delta=2
    36                           	psect	text26,local,class=CODE,merge=1,delta=2
    37                           	psect	text27,local,class=CODE,merge=1,delta=2
    38                           	psect	text28,local,class=CODE,merge=1,delta=2
    39                           	psect	text29,local,class=CODE,merge=1,delta=2
    40                           	psect	text30,local,class=CODE,merge=1,delta=2
    41                           	psect	text31,local,class=CODE,merge=1,delta=2
    42                           	dabs	1,0x7E,2
    43  0000                     
    44                           ; Version 1.43
    45                           ; Generated 25/07/2017 GMT
    46                           ; 
    47                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC16F15323 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     	;# 
    79  0001                     	;# 
    80  0002                     	;# 
    81  0003                     	;# 
    82  0004                     	;# 
    83  0005                     	;# 
    84  0006                     	;# 
    85  0007                     	;# 
    86  0008                     	;# 
    87  0009                     	;# 
    88  000A                     	;# 
    89  000B                     	;# 
    90  000C                     	;# 
    91  000E                     	;# 
    92  0012                     	;# 
    93  0014                     	;# 
    94  0018                     	;# 
    95  001A                     	;# 
    96  009B                     	;# 
    97  009B                     	;# 
    98  009C                     	;# 
    99  009D                     	;# 
   100  009E                     	;# 
   101  009F                     	;# 
   102  0119                     	;# 
   103  0119                     	;# 
   104  0119                     	;# 
   105  011A                     	;# 
   106  011A                     	;# 
   107  011A                     	;# 
   108  011B                     	;# 
   109  011B                     	;# 
   110  011B                     	;# 
   111  011B                     	;# 
   112  011B                     	;# 
   113  011C                     	;# 
   114  011C                     	;# 
   115  011C                     	;# 
   116  011D                     	;# 
   117  011D                     	;# 
   118  011D                     	;# 
   119  011E                     	;# 
   120  011E                     	;# 
   121  011E                     	;# 
   122  011F                     	;# 
   123  011F                     	;# 
   124  011F                     	;# 
   125  011F                     	;# 
   126  011F                     	;# 
   127  018C                     	;# 
   128  018D                     	;# 
   129  018E                     	;# 
   130  018F                     	;# 
   131  0190                     	;# 
   132  0191                     	;# 
   133  0192                     	;# 
   134  020C                     	;# 
   135  020C                     	;# 
   136  020D                     	;# 
   137  020E                     	;# 
   138  020F                     	;# 
   139  020F                     	;# 
   140  0210                     	;# 
   141  0210                     	;# 
   142  0211                     	;# 
   143  0211                     	;# 
   144  028C                     	;# 
   145  028C                     	;# 
   146  028D                     	;# 
   147  028D                     	;# 
   148  028E                     	;# 
   149  028F                     	;# 
   150  0290                     	;# 
   151  0291                     	;# 
   152  030C                     	;# 
   153  030C                     	;# 
   154  030D                     	;# 
   155  030E                     	;# 
   156  030F                     	;# 
   157  0310                     	;# 
   158  0310                     	;# 
   159  0311                     	;# 
   160  0312                     	;# 
   161  0313                     	;# 
   162  0314                     	;# 
   163  0315                     	;# 
   164  0316                     	;# 
   165  0318                     	;# 
   166  0319                     	;# 
   167  031A                     	;# 
   168  031C                     	;# 
   169  031D                     	;# 
   170  031E                     	;# 
   171  038C                     	;# 
   172  038D                     	;# 
   173  038E                     	;# 
   174  058C                     	;# 
   175  058C                     	;# 
   176  058D                     	;# 
   177  058E                     	;# 
   178  058F                     	;# 
   179  058F                     	;# 
   180  0590                     	;# 
   181  0591                     	;# 
   182  0592                     	;# 
   183  0593                     	;# 
   184  059C                     	;# 
   185  059C                     	;# 
   186  059D                     	;# 
   187  059D                     	;# 
   188  059E                     	;# 
   189  059F                     	;# 
   190  060C                     	;# 
   191  060D                     	;# 
   192  060E                     	;# 
   193  060F                     	;# 
   194  0610                     	;# 
   195  0611                     	;# 
   196  0612                     	;# 
   197  0613                     	;# 
   198  0614                     	;# 
   199  070C                     	;# 
   200  070D                     	;# 
   201  070E                     	;# 
   202  070F                     	;# 
   203  0710                     	;# 
   204  0711                     	;# 
   205  0712                     	;# 
   206  0713                     	;# 
   207  0716                     	;# 
   208  0717                     	;# 
   209  0718                     	;# 
   210  0719                     	;# 
   211  071A                     	;# 
   212  071B                     	;# 
   213  071C                     	;# 
   214  071D                     	;# 
   215  0796                     	;# 
   216  0797                     	;# 
   217  0798                     	;# 
   218  0799                     	;# 
   219  079A                     	;# 
   220  079B                     	;# 
   221  080C                     	;# 
   222  080D                     	;# 
   223  080E                     	;# 
   224  080F                     	;# 
   225  0810                     	;# 
   226  0811                     	;# 
   227  0812                     	;# 
   228  0813                     	;# 
   229  0814                     	;# 
   230  081A                     	;# 
   231  081A                     	;# 
   232  081B                     	;# 
   233  081C                     	;# 
   234  081C                     	;# 
   235  081D                     	;# 
   236  081E                     	;# 
   237  081F                     	;# 
   238  088C                     	;# 
   239  088D                     	;# 
   240  088E                     	;# 
   241  088F                     	;# 
   242  0890                     	;# 
   243  0891                     	;# 
   244  0892                     	;# 
   245  0893                     	;# 
   246  0895                     	;# 
   247  0896                     	;# 
   248  090C                     	;# 
   249  090E                     	;# 
   250  090F                     	;# 
   251  091F                     	;# 
   252  098F                     	;# 
   253  098F                     	;# 
   254  0990                     	;# 
   255  0991                     	;# 
   256  0992                     	;# 
   257  0993                     	;# 
   258  0994                     	;# 
   259  0995                     	;# 
   260  0996                     	;# 
   261  0997                     	;# 
   262  1E0F                     	;# 
   263  1E10                     	;# 
   264  1E11                     	;# 
   265  1E12                     	;# 
   266  1E13                     	;# 
   267  1E14                     	;# 
   268  1E15                     	;# 
   269  1E16                     	;# 
   270  1E17                     	;# 
   271  1E18                     	;# 
   272  1E19                     	;# 
   273  1E1A                     	;# 
   274  1E1B                     	;# 
   275  1E1C                     	;# 
   276  1E1D                     	;# 
   277  1E1E                     	;# 
   278  1E1F                     	;# 
   279  1E20                     	;# 
   280  1E21                     	;# 
   281  1E22                     	;# 
   282  1E23                     	;# 
   283  1E24                     	;# 
   284  1E25                     	;# 
   285  1E26                     	;# 
   286  1E27                     	;# 
   287  1E28                     	;# 
   288  1E29                     	;# 
   289  1E2A                     	;# 
   290  1E2B                     	;# 
   291  1E2C                     	;# 
   292  1E2D                     	;# 
   293  1E2E                     	;# 
   294  1E2F                     	;# 
   295  1E30                     	;# 
   296  1E31                     	;# 
   297  1E32                     	;# 
   298  1E33                     	;# 
   299  1E34                     	;# 
   300  1E35                     	;# 
   301  1E36                     	;# 
   302  1E37                     	;# 
   303  1E8F                     	;# 
   304  1E90                     	;# 
   305  1E91                     	;# 
   306  1E92                     	;# 
   307  1E93                     	;# 
   308  1E9C                     	;# 
   309  1EA1                     	;# 
   310  1EA2                     	;# 
   311  1EB1                     	;# 
   312  1EBB                     	;# 
   313  1EBC                     	;# 
   314  1EBD                     	;# 
   315  1EBE                     	;# 
   316  1EC3                     	;# 
   317  1EC5                     	;# 
   318  1EC6                     	;# 
   319  1EC7                     	;# 
   320  1ECB                     	;# 
   321  1ECC                     	;# 
   322  1F10                     	;# 
   323  1F11                     	;# 
   324  1F12                     	;# 
   325  1F13                     	;# 
   326  1F14                     	;# 
   327  1F15                     	;# 
   328  1F20                     	;# 
   329  1F21                     	;# 
   330  1F22                     	;# 
   331  1F23                     	;# 
   332  1F24                     	;# 
   333  1F25                     	;# 
   334  1F38                     	;# 
   335  1F39                     	;# 
   336  1F3A                     	;# 
   337  1F3B                     	;# 
   338  1F3C                     	;# 
   339  1F3D                     	;# 
   340  1F3E                     	;# 
   341  1F3F                     	;# 
   342  1F4E                     	;# 
   343  1F4F                     	;# 
   344  1F50                     	;# 
   345  1F51                     	;# 
   346  1F52                     	;# 
   347  1F53                     	;# 
   348  1F54                     	;# 
   349  1F55                     	;# 
   350  1FE4                     	;# 
   351  1FE5                     	;# 
   352  1FE6                     	;# 
   353  1FE7                     	;# 
   354  1FE8                     	;# 
   355  1FE8                     	;# 
   356  1FE9                     	;# 
   357  1FEA                     	;# 
   358  1FEA                     	;# 
   359  1FEB                     	;# 
   360  1FED                     	;# 
   361  1FEE                     	;# 
   362  1FEF                     	;# 
   363  0000                     	;# 
   364  0001                     	;# 
   365  0002                     	;# 
   366  0003                     	;# 
   367  0004                     	;# 
   368  0005                     	;# 
   369  0006                     	;# 
   370  0007                     	;# 
   371  0008                     	;# 
   372  0009                     	;# 
   373  000A                     	;# 
   374  000B                     	;# 
   375  000C                     	;# 
   376  000E                     	;# 
   377  0012                     	;# 
   378  0014                     	;# 
   379  0018                     	;# 
   380  001A                     	;# 
   381  009B                     	;# 
   382  009B                     	;# 
   383  009C                     	;# 
   384  009D                     	;# 
   385  009E                     	;# 
   386  009F                     	;# 
   387  0119                     	;# 
   388  0119                     	;# 
   389  0119                     	;# 
   390  011A                     	;# 
   391  011A                     	;# 
   392  011A                     	;# 
   393  011B                     	;# 
   394  011B                     	;# 
   395  011B                     	;# 
   396  011B                     	;# 
   397  011B                     	;# 
   398  011C                     	;# 
   399  011C                     	;# 
   400  011C                     	;# 
   401  011D                     	;# 
   402  011D                     	;# 
   403  011D                     	;# 
   404  011E                     	;# 
   405  011E                     	;# 
   406  011E                     	;# 
   407  011F                     	;# 
   408  011F                     	;# 
   409  011F                     	;# 
   410  011F                     	;# 
   411  011F                     	;# 
   412  018C                     	;# 
   413  018D                     	;# 
   414  018E                     	;# 
   415  018F                     	;# 
   416  0190                     	;# 
   417  0191                     	;# 
   418  0192                     	;# 
   419  020C                     	;# 
   420  020C                     	;# 
   421  020D                     	;# 
   422  020E                     	;# 
   423  020F                     	;# 
   424  020F                     	;# 
   425  0210                     	;# 
   426  0210                     	;# 
   427  0211                     	;# 
   428  0211                     	;# 
   429  028C                     	;# 
   430  028C                     	;# 
   431  028D                     	;# 
   432  028D                     	;# 
   433  028E                     	;# 
   434  028F                     	;# 
   435  0290                     	;# 
   436  0291                     	;# 
   437  030C                     	;# 
   438  030C                     	;# 
   439  030D                     	;# 
   440  030E                     	;# 
   441  030F                     	;# 
   442  0310                     	;# 
   443  0310                     	;# 
   444  0311                     	;# 
   445  0312                     	;# 
   446  0313                     	;# 
   447  0314                     	;# 
   448  0315                     	;# 
   449  0316                     	;# 
   450  0318                     	;# 
   451  0319                     	;# 
   452  031A                     	;# 
   453  031C                     	;# 
   454  031D                     	;# 
   455  031E                     	;# 
   456  038C                     	;# 
   457  038D                     	;# 
   458  038E                     	;# 
   459  058C                     	;# 
   460  058C                     	;# 
   461  058D                     	;# 
   462  058E                     	;# 
   463  058F                     	;# 
   464  058F                     	;# 
   465  0590                     	;# 
   466  0591                     	;# 
   467  0592                     	;# 
   468  0593                     	;# 
   469  059C                     	;# 
   470  059C                     	;# 
   471  059D                     	;# 
   472  059D                     	;# 
   473  059E                     	;# 
   474  059F                     	;# 
   475  060C                     	;# 
   476  060D                     	;# 
   477  060E                     	;# 
   478  060F                     	;# 
   479  0610                     	;# 
   480  0611                     	;# 
   481  0612                     	;# 
   482  0613                     	;# 
   483  0614                     	;# 
   484  070C                     	;# 
   485  070D                     	;# 
   486  070E                     	;# 
   487  070F                     	;# 
   488  0710                     	;# 
   489  0711                     	;# 
   490  0712                     	;# 
   491  0713                     	;# 
   492  0716                     	;# 
   493  0717                     	;# 
   494  0718                     	;# 
   495  0719                     	;# 
   496  071A                     	;# 
   497  071B                     	;# 
   498  071C                     	;# 
   499  071D                     	;# 
   500  0796                     	;# 
   501  0797                     	;# 
   502  0798                     	;# 
   503  0799                     	;# 
   504  079A                     	;# 
   505  079B                     	;# 
   506  080C                     	;# 
   507  080D                     	;# 
   508  080E                     	;# 
   509  080F                     	;# 
   510  0810                     	;# 
   511  0811                     	;# 
   512  0812                     	;# 
   513  0813                     	;# 
   514  0814                     	;# 
   515  081A                     	;# 
   516  081A                     	;# 
   517  081B                     	;# 
   518  081C                     	;# 
   519  081C                     	;# 
   520  081D                     	;# 
   521  081E                     	;# 
   522  081F                     	;# 
   523  088C                     	;# 
   524  088D                     	;# 
   525  088E                     	;# 
   526  088F                     	;# 
   527  0890                     	;# 
   528  0891                     	;# 
   529  0892                     	;# 
   530  0893                     	;# 
   531  0895                     	;# 
   532  0896                     	;# 
   533  090C                     	;# 
   534  090E                     	;# 
   535  090F                     	;# 
   536  091F                     	;# 
   537  098F                     	;# 
   538  098F                     	;# 
   539  0990                     	;# 
   540  0991                     	;# 
   541  0992                     	;# 
   542  0993                     	;# 
   543  0994                     	;# 
   544  0995                     	;# 
   545  0996                     	;# 
   546  0997                     	;# 
   547  1E0F                     	;# 
   548  1E10                     	;# 
   549  1E11                     	;# 
   550  1E12                     	;# 
   551  1E13                     	;# 
   552  1E14                     	;# 
   553  1E15                     	;# 
   554  1E16                     	;# 
   555  1E17                     	;# 
   556  1E18                     	;# 
   557  1E19                     	;# 
   558  1E1A                     	;# 
   559  1E1B                     	;# 
   560  1E1C                     	;# 
   561  1E1D                     	;# 
   562  1E1E                     	;# 
   563  1E1F                     	;# 
   564  1E20                     	;# 
   565  1E21                     	;# 
   566  1E22                     	;# 
   567  1E23                     	;# 
   568  1E24                     	;# 
   569  1E25                     	;# 
   570  1E26                     	;# 
   571  1E27                     	;# 
   572  1E28                     	;# 
   573  1E29                     	;# 
   574  1E2A                     	;# 
   575  1E2B                     	;# 
   576  1E2C                     	;# 
   577  1E2D                     	;# 
   578  1E2E                     	;# 
   579  1E2F                     	;# 
   580  1E30                     	;# 
   581  1E31                     	;# 
   582  1E32                     	;# 
   583  1E33                     	;# 
   584  1E34                     	;# 
   585  1E35                     	;# 
   586  1E36                     	;# 
   587  1E37                     	;# 
   588  1E8F                     	;# 
   589  1E90                     	;# 
   590  1E91                     	;# 
   591  1E92                     	;# 
   592  1E93                     	;# 
   593  1E9C                     	;# 
   594  1EA1                     	;# 
   595  1EA2                     	;# 
   596  1EB1                     	;# 
   597  1EBB                     	;# 
   598  1EBC                     	;# 
   599  1EBD                     	;# 
   600  1EBE                     	;# 
   601  1EC3                     	;# 
   602  1EC5                     	;# 
   603  1EC6                     	;# 
   604  1EC7                     	;# 
   605  1ECB                     	;# 
   606  1ECC                     	;# 
   607  1F10                     	;# 
   608  1F11                     	;# 
   609  1F12                     	;# 
   610  1F13                     	;# 
   611  1F14                     	;# 
   612  1F15                     	;# 
   613  1F20                     	;# 
   614  1F21                     	;# 
   615  1F22                     	;# 
   616  1F23                     	;# 
   617  1F24                     	;# 
   618  1F25                     	;# 
   619  1F38                     	;# 
   620  1F39                     	;# 
   621  1F3A                     	;# 
   622  1F3B                     	;# 
   623  1F3C                     	;# 
   624  1F3D                     	;# 
   625  1F3E                     	;# 
   626  1F3F                     	;# 
   627  1F4E                     	;# 
   628  1F4F                     	;# 
   629  1F50                     	;# 
   630  1F51                     	;# 
   631  1F52                     	;# 
   632  1F53                     	;# 
   633  1F54                     	;# 
   634  1F55                     	;# 
   635  1FE4                     	;# 
   636  1FE5                     	;# 
   637  1FE6                     	;# 
   638  1FE7                     	;# 
   639  1FE8                     	;# 
   640  1FE8                     	;# 
   641  1FE9                     	;# 
   642  1FEA                     	;# 
   643  1FEA                     	;# 
   644  1FEB                     	;# 
   645  1FED                     	;# 
   646  1FEE                     	;# 
   647  1FEF                     	;# 
   648  0000                     	;# 
   649  0001                     	;# 
   650  0002                     	;# 
   651  0003                     	;# 
   652  0004                     	;# 
   653  0005                     	;# 
   654  0006                     	;# 
   655  0007                     	;# 
   656  0008                     	;# 
   657  0009                     	;# 
   658  000A                     	;# 
   659  000B                     	;# 
   660  000C                     	;# 
   661  000E                     	;# 
   662  0012                     	;# 
   663  0014                     	;# 
   664  0018                     	;# 
   665  001A                     	;# 
   666  009B                     	;# 
   667  009B                     	;# 
   668  009C                     	;# 
   669  009D                     	;# 
   670  009E                     	;# 
   671  009F                     	;# 
   672  0119                     	;# 
   673  0119                     	;# 
   674  0119                     	;# 
   675  011A                     	;# 
   676  011A                     	;# 
   677  011A                     	;# 
   678  011B                     	;# 
   679  011B                     	;# 
   680  011B                     	;# 
   681  011B                     	;# 
   682  011B                     	;# 
   683  011C                     	;# 
   684  011C                     	;# 
   685  011C                     	;# 
   686  011D                     	;# 
   687  011D                     	;# 
   688  011D                     	;# 
   689  011E                     	;# 
   690  011E                     	;# 
   691  011E                     	;# 
   692  011F                     	;# 
   693  011F                     	;# 
   694  011F                     	;# 
   695  011F                     	;# 
   696  011F                     	;# 
   697  018C                     	;# 
   698  018D                     	;# 
   699  018E                     	;# 
   700  018F                     	;# 
   701  0190                     	;# 
   702  0191                     	;# 
   703  0192                     	;# 
   704  020C                     	;# 
   705  020C                     	;# 
   706  020D                     	;# 
   707  020E                     	;# 
   708  020F                     	;# 
   709  020F                     	;# 
   710  0210                     	;# 
   711  0210                     	;# 
   712  0211                     	;# 
   713  0211                     	;# 
   714  028C                     	;# 
   715  028C                     	;# 
   716  028D                     	;# 
   717  028D                     	;# 
   718  028E                     	;# 
   719  028F                     	;# 
   720  0290                     	;# 
   721  0291                     	;# 
   722  030C                     	;# 
   723  030C                     	;# 
   724  030D                     	;# 
   725  030E                     	;# 
   726  030F                     	;# 
   727  0310                     	;# 
   728  0310                     	;# 
   729  0311                     	;# 
   730  0312                     	;# 
   731  0313                     	;# 
   732  0314                     	;# 
   733  0315                     	;# 
   734  0316                     	;# 
   735  0318                     	;# 
   736  0319                     	;# 
   737  031A                     	;# 
   738  031C                     	;# 
   739  031D                     	;# 
   740  031E                     	;# 
   741  038C                     	;# 
   742  038D                     	;# 
   743  038E                     	;# 
   744  058C                     	;# 
   745  058C                     	;# 
   746  058D                     	;# 
   747  058E                     	;# 
   748  058F                     	;# 
   749  058F                     	;# 
   750  0590                     	;# 
   751  0591                     	;# 
   752  0592                     	;# 
   753  0593                     	;# 
   754  059C                     	;# 
   755  059C                     	;# 
   756  059D                     	;# 
   757  059D                     	;# 
   758  059E                     	;# 
   759  059F                     	;# 
   760  060C                     	;# 
   761  060D                     	;# 
   762  060E                     	;# 
   763  060F                     	;# 
   764  0610                     	;# 
   765  0611                     	;# 
   766  0612                     	;# 
   767  0613                     	;# 
   768  0614                     	;# 
   769  070C                     	;# 
   770  070D                     	;# 
   771  070E                     	;# 
   772  070F                     	;# 
   773  0710                     	;# 
   774  0711                     	;# 
   775  0712                     	;# 
   776  0713                     	;# 
   777  0716                     	;# 
   778  0717                     	;# 
   779  0718                     	;# 
   780  0719                     	;# 
   781  071A                     	;# 
   782  071B                     	;# 
   783  071C                     	;# 
   784  071D                     	;# 
   785  0796                     	;# 
   786  0797                     	;# 
   787  0798                     	;# 
   788  0799                     	;# 
   789  079A                     	;# 
   790  079B                     	;# 
   791  080C                     	;# 
   792  080D                     	;# 
   793  080E                     	;# 
   794  080F                     	;# 
   795  0810                     	;# 
   796  0811                     	;# 
   797  0812                     	;# 
   798  0813                     	;# 
   799  0814                     	;# 
   800  081A                     	;# 
   801  081A                     	;# 
   802  081B                     	;# 
   803  081C                     	;# 
   804  081C                     	;# 
   805  081D                     	;# 
   806  081E                     	;# 
   807  081F                     	;# 
   808  088C                     	;# 
   809  088D                     	;# 
   810  088E                     	;# 
   811  088F                     	;# 
   812  0890                     	;# 
   813  0891                     	;# 
   814  0892                     	;# 
   815  0893                     	;# 
   816  0895                     	;# 
   817  0896                     	;# 
   818  090C                     	;# 
   819  090E                     	;# 
   820  090F                     	;# 
   821  091F                     	;# 
   822  098F                     	;# 
   823  098F                     	;# 
   824  0990                     	;# 
   825  0991                     	;# 
   826  0992                     	;# 
   827  0993                     	;# 
   828  0994                     	;# 
   829  0995                     	;# 
   830  0996                     	;# 
   831  0997                     	;# 
   832  1E0F                     	;# 
   833  1E10                     	;# 
   834  1E11                     	;# 
   835  1E12                     	;# 
   836  1E13                     	;# 
   837  1E14                     	;# 
   838  1E15                     	;# 
   839  1E16                     	;# 
   840  1E17                     	;# 
   841  1E18                     	;# 
   842  1E19                     	;# 
   843  1E1A                     	;# 
   844  1E1B                     	;# 
   845  1E1C                     	;# 
   846  1E1D                     	;# 
   847  1E1E                     	;# 
   848  1E1F                     	;# 
   849  1E20                     	;# 
   850  1E21                     	;# 
   851  1E22                     	;# 
   852  1E23                     	;# 
   853  1E24                     	;# 
   854  1E25                     	;# 
   855  1E26                     	;# 
   856  1E27                     	;# 
   857  1E28                     	;# 
   858  1E29                     	;# 
   859  1E2A                     	;# 
   860  1E2B                     	;# 
   861  1E2C                     	;# 
   862  1E2D                     	;# 
   863  1E2E                     	;# 
   864  1E2F                     	;# 
   865  1E30                     	;# 
   866  1E31                     	;# 
   867  1E32                     	;# 
   868  1E33                     	;# 
   869  1E34                     	;# 
   870  1E35                     	;# 
   871  1E36                     	;# 
   872  1E37                     	;# 
   873  1E8F                     	;# 
   874  1E90                     	;# 
   875  1E91                     	;# 
   876  1E92                     	;# 
   877  1E93                     	;# 
   878  1E9C                     	;# 
   879  1EA1                     	;# 
   880  1EA2                     	;# 
   881  1EB1                     	;# 
   882  1EBB                     	;# 
   883  1EBC                     	;# 
   884  1EBD                     	;# 
   885  1EBE                     	;# 
   886  1EC3                     	;# 
   887  1EC5                     	;# 
   888  1EC6                     	;# 
   889  1EC7                     	;# 
   890  1ECB                     	;# 
   891  1ECC                     	;# 
   892  1F10                     	;# 
   893  1F11                     	;# 
   894  1F12                     	;# 
   895  1F13                     	;# 
   896  1F14                     	;# 
   897  1F15                     	;# 
   898  1F20                     	;# 
   899  1F21                     	;# 
   900  1F22                     	;# 
   901  1F23                     	;# 
   902  1F24                     	;# 
   903  1F25                     	;# 
   904  1F38                     	;# 
   905  1F39                     	;# 
   906  1F3A                     	;# 
   907  1F3B                     	;# 
   908  1F3C                     	;# 
   909  1F3D                     	;# 
   910  1F3E                     	;# 
   911  1F3F                     	;# 
   912  1F4E                     	;# 
   913  1F4F                     	;# 
   914  1F50                     	;# 
   915  1F51                     	;# 
   916  1F52                     	;# 
   917  1F53                     	;# 
   918  1F54                     	;# 
   919  1F55                     	;# 
   920  1FE4                     	;# 
   921  1FE5                     	;# 
   922  1FE6                     	;# 
   923  1FE7                     	;# 
   924  1FE8                     	;# 
   925  1FE8                     	;# 
   926  1FE9                     	;# 
   927  1FEA                     	;# 
   928  1FEA                     	;# 
   929  1FEB                     	;# 
   930  1FED                     	;# 
   931  1FEE                     	;# 
   932  1FEF                     	;# 
   933  0000                     	;# 
   934  0001                     	;# 
   935  0002                     	;# 
   936  0003                     	;# 
   937  0004                     	;# 
   938  0005                     	;# 
   939  0006                     	;# 
   940  0007                     	;# 
   941  0008                     	;# 
   942  0009                     	;# 
   943  000A                     	;# 
   944  000B                     	;# 
   945  000C                     	;# 
   946  000E                     	;# 
   947  0012                     	;# 
   948  0014                     	;# 
   949  0018                     	;# 
   950  001A                     	;# 
   951  009B                     	;# 
   952  009B                     	;# 
   953  009C                     	;# 
   954  009D                     	;# 
   955  009E                     	;# 
   956  009F                     	;# 
   957  0119                     	;# 
   958  0119                     	;# 
   959  0119                     	;# 
   960  011A                     	;# 
   961  011A                     	;# 
   962  011A                     	;# 
   963  011B                     	;# 
   964  011B                     	;# 
   965  011B                     	;# 
   966  011B                     	;# 
   967  011B                     	;# 
   968  011C                     	;# 
   969  011C                     	;# 
   970  011C                     	;# 
   971  011D                     	;# 
   972  011D                     	;# 
   973  011D                     	;# 
   974  011E                     	;# 
   975  011E                     	;# 
   976  011E                     	;# 
   977  011F                     	;# 
   978  011F                     	;# 
   979  011F                     	;# 
   980  011F                     	;# 
   981  011F                     	;# 
   982  018C                     	;# 
   983  018D                     	;# 
   984  018E                     	;# 
   985  018F                     	;# 
   986  0190                     	;# 
   987  0191                     	;# 
   988  0192                     	;# 
   989  020C                     	;# 
   990  020C                     	;# 
   991  020D                     	;# 
   992  020E                     	;# 
   993  020F                     	;# 
   994  020F                     	;# 
   995  0210                     	;# 
   996  0210                     	;# 
   997  0211                     	;# 
   998  0211                     	;# 
   999  028C                     	;# 
  1000  028C                     	;# 
  1001  028D                     	;# 
  1002  028D                     	;# 
  1003  028E                     	;# 
  1004  028F                     	;# 
  1005  0290                     	;# 
  1006  0291                     	;# 
  1007  030C                     	;# 
  1008  030C                     	;# 
  1009  030D                     	;# 
  1010  030E                     	;# 
  1011  030F                     	;# 
  1012  0310                     	;# 
  1013  0310                     	;# 
  1014  0311                     	;# 
  1015  0312                     	;# 
  1016  0313                     	;# 
  1017  0314                     	;# 
  1018  0315                     	;# 
  1019  0316                     	;# 
  1020  0318                     	;# 
  1021  0319                     	;# 
  1022  031A                     	;# 
  1023  031C                     	;# 
  1024  031D                     	;# 
  1025  031E                     	;# 
  1026  038C                     	;# 
  1027  038D                     	;# 
  1028  038E                     	;# 
  1029  058C                     	;# 
  1030  058C                     	;# 
  1031  058D                     	;# 
  1032  058E                     	;# 
  1033  058F                     	;# 
  1034  058F                     	;# 
  1035  0590                     	;# 
  1036  0591                     	;# 
  1037  0592                     	;# 
  1038  0593                     	;# 
  1039  059C                     	;# 
  1040  059C                     	;# 
  1041  059D                     	;# 
  1042  059D                     	;# 
  1043  059E                     	;# 
  1044  059F                     	;# 
  1045  060C                     	;# 
  1046  060D                     	;# 
  1047  060E                     	;# 
  1048  060F                     	;# 
  1049  0610                     	;# 
  1050  0611                     	;# 
  1051  0612                     	;# 
  1052  0613                     	;# 
  1053  0614                     	;# 
  1054  070C                     	;# 
  1055  070D                     	;# 
  1056  070E                     	;# 
  1057  070F                     	;# 
  1058  0710                     	;# 
  1059  0711                     	;# 
  1060  0712                     	;# 
  1061  0713                     	;# 
  1062  0716                     	;# 
  1063  0717                     	;# 
  1064  0718                     	;# 
  1065  0719                     	;# 
  1066  071A                     	;# 
  1067  071B                     	;# 
  1068  071C                     	;# 
  1069  071D                     	;# 
  1070  0796                     	;# 
  1071  0797                     	;# 
  1072  0798                     	;# 
  1073  0799                     	;# 
  1074  079A                     	;# 
  1075  079B                     	;# 
  1076  080C                     	;# 
  1077  080D                     	;# 
  1078  080E                     	;# 
  1079  080F                     	;# 
  1080  0810                     	;# 
  1081  0811                     	;# 
  1082  0812                     	;# 
  1083  0813                     	;# 
  1084  0814                     	;# 
  1085  081A                     	;# 
  1086  081A                     	;# 
  1087  081B                     	;# 
  1088  081C                     	;# 
  1089  081C                     	;# 
  1090  081D                     	;# 
  1091  081E                     	;# 
  1092  081F                     	;# 
  1093  088C                     	;# 
  1094  088D                     	;# 
  1095  088E                     	;# 
  1096  088F                     	;# 
  1097  0890                     	;# 
  1098  0891                     	;# 
  1099  0892                     	;# 
  1100  0893                     	;# 
  1101  0895                     	;# 
  1102  0896                     	;# 
  1103  090C                     	;# 
  1104  090E                     	;# 
  1105  090F                     	;# 
  1106  091F                     	;# 
  1107  098F                     	;# 
  1108  098F                     	;# 
  1109  0990                     	;# 
  1110  0991                     	;# 
  1111  0992                     	;# 
  1112  0993                     	;# 
  1113  0994                     	;# 
  1114  0995                     	;# 
  1115  0996                     	;# 
  1116  0997                     	;# 
  1117  1E0F                     	;# 
  1118  1E10                     	;# 
  1119  1E11                     	;# 
  1120  1E12                     	;# 
  1121  1E13                     	;# 
  1122  1E14                     	;# 
  1123  1E15                     	;# 
  1124  1E16                     	;# 
  1125  1E17                     	;# 
  1126  1E18                     	;# 
  1127  1E19                     	;# 
  1128  1E1A                     	;# 
  1129  1E1B                     	;# 
  1130  1E1C                     	;# 
  1131  1E1D                     	;# 
  1132  1E1E                     	;# 
  1133  1E1F                     	;# 
  1134  1E20                     	;# 
  1135  1E21                     	;# 
  1136  1E22                     	;# 
  1137  1E23                     	;# 
  1138  1E24                     	;# 
  1139  1E25                     	;# 
  1140  1E26                     	;# 
  1141  1E27                     	;# 
  1142  1E28                     	;# 
  1143  1E29                     	;# 
  1144  1E2A                     	;# 
  1145  1E2B                     	;# 
  1146  1E2C                     	;# 
  1147  1E2D                     	;# 
  1148  1E2E                     	;# 
  1149  1E2F                     	;# 
  1150  1E30                     	;# 
  1151  1E31                     	;# 
  1152  1E32                     	;# 
  1153  1E33                     	;# 
  1154  1E34                     	;# 
  1155  1E35                     	;# 
  1156  1E36                     	;# 
  1157  1E37                     	;# 
  1158  1E8F                     	;# 
  1159  1E90                     	;# 
  1160  1E91                     	;# 
  1161  1E92                     	;# 
  1162  1E93                     	;# 
  1163  1E9C                     	;# 
  1164  1EA1                     	;# 
  1165  1EA2                     	;# 
  1166  1EB1                     	;# 
  1167  1EBB                     	;# 
  1168  1EBC                     	;# 
  1169  1EBD                     	;# 
  1170  1EBE                     	;# 
  1171  1EC3                     	;# 
  1172  1EC5                     	;# 
  1173  1EC6                     	;# 
  1174  1EC7                     	;# 
  1175  1ECB                     	;# 
  1176  1ECC                     	;# 
  1177  1F10                     	;# 
  1178  1F11                     	;# 
  1179  1F12                     	;# 
  1180  1F13                     	;# 
  1181  1F14                     	;# 
  1182  1F15                     	;# 
  1183  1F20                     	;# 
  1184  1F21                     	;# 
  1185  1F22                     	;# 
  1186  1F23                     	;# 
  1187  1F24                     	;# 
  1188  1F25                     	;# 
  1189  1F38                     	;# 
  1190  1F39                     	;# 
  1191  1F3A                     	;# 
  1192  1F3B                     	;# 
  1193  1F3C                     	;# 
  1194  1F3D                     	;# 
  1195  1F3E                     	;# 
  1196  1F3F                     	;# 
  1197  1F4E                     	;# 
  1198  1F4F                     	;# 
  1199  1F50                     	;# 
  1200  1F51                     	;# 
  1201  1F52                     	;# 
  1202  1F53                     	;# 
  1203  1F54                     	;# 
  1204  1F55                     	;# 
  1205  1FE4                     	;# 
  1206  1FE5                     	;# 
  1207  1FE6                     	;# 
  1208  1FE7                     	;# 
  1209  1FE8                     	;# 
  1210  1FE8                     	;# 
  1211  1FE9                     	;# 
  1212  1FEA                     	;# 
  1213  1FEA                     	;# 
  1214  1FEB                     	;# 
  1215  1FED                     	;# 
  1216  1FEE                     	;# 
  1217  1FEF                     	;# 
  1218  0000                     	;# 
  1219  0001                     	;# 
  1220  0002                     	;# 
  1221  0003                     	;# 
  1222  0004                     	;# 
  1223  0005                     	;# 
  1224  0006                     	;# 
  1225  0007                     	;# 
  1226  0008                     	;# 
  1227  0009                     	;# 
  1228  000A                     	;# 
  1229  000B                     	;# 
  1230  000C                     	;# 
  1231  000E                     	;# 
  1232  0012                     	;# 
  1233  0014                     	;# 
  1234  0018                     	;# 
  1235  001A                     	;# 
  1236  009B                     	;# 
  1237  009B                     	;# 
  1238  009C                     	;# 
  1239  009D                     	;# 
  1240  009E                     	;# 
  1241  009F                     	;# 
  1242  0119                     	;# 
  1243  0119                     	;# 
  1244  0119                     	;# 
  1245  011A                     	;# 
  1246  011A                     	;# 
  1247  011A                     	;# 
  1248  011B                     	;# 
  1249  011B                     	;# 
  1250  011B                     	;# 
  1251  011B                     	;# 
  1252  011B                     	;# 
  1253  011C                     	;# 
  1254  011C                     	;# 
  1255  011C                     	;# 
  1256  011D                     	;# 
  1257  011D                     	;# 
  1258  011D                     	;# 
  1259  011E                     	;# 
  1260  011E                     	;# 
  1261  011E                     	;# 
  1262  011F                     	;# 
  1263  011F                     	;# 
  1264  011F                     	;# 
  1265  011F                     	;# 
  1266  011F                     	;# 
  1267  018C                     	;# 
  1268  018D                     	;# 
  1269  018E                     	;# 
  1270  018F                     	;# 
  1271  0190                     	;# 
  1272  0191                     	;# 
  1273  0192                     	;# 
  1274  020C                     	;# 
  1275  020C                     	;# 
  1276  020D                     	;# 
  1277  020E                     	;# 
  1278  020F                     	;# 
  1279  020F                     	;# 
  1280  0210                     	;# 
  1281  0210                     	;# 
  1282  0211                     	;# 
  1283  0211                     	;# 
  1284  028C                     	;# 
  1285  028C                     	;# 
  1286  028D                     	;# 
  1287  028D                     	;# 
  1288  028E                     	;# 
  1289  028F                     	;# 
  1290  0290                     	;# 
  1291  0291                     	;# 
  1292  030C                     	;# 
  1293  030C                     	;# 
  1294  030D                     	;# 
  1295  030E                     	;# 
  1296  030F                     	;# 
  1297  0310                     	;# 
  1298  0310                     	;# 
  1299  0311                     	;# 
  1300  0312                     	;# 
  1301  0313                     	;# 
  1302  0314                     	;# 
  1303  0315                     	;# 
  1304  0316                     	;# 
  1305  0318                     	;# 
  1306  0319                     	;# 
  1307  031A                     	;# 
  1308  031C                     	;# 
  1309  031D                     	;# 
  1310  031E                     	;# 
  1311  038C                     	;# 
  1312  038D                     	;# 
  1313  038E                     	;# 
  1314  058C                     	;# 
  1315  058C                     	;# 
  1316  058D                     	;# 
  1317  058E                     	;# 
  1318  058F                     	;# 
  1319  058F                     	;# 
  1320  0590                     	;# 
  1321  0591                     	;# 
  1322  0592                     	;# 
  1323  0593                     	;# 
  1324  059C                     	;# 
  1325  059C                     	;# 
  1326  059D                     	;# 
  1327  059D                     	;# 
  1328  059E                     	;# 
  1329  059F                     	;# 
  1330  060C                     	;# 
  1331  060D                     	;# 
  1332  060E                     	;# 
  1333  060F                     	;# 
  1334  0610                     	;# 
  1335  0611                     	;# 
  1336  0612                     	;# 
  1337  0613                     	;# 
  1338  0614                     	;# 
  1339  070C                     	;# 
  1340  070D                     	;# 
  1341  070E                     	;# 
  1342  070F                     	;# 
  1343  0710                     	;# 
  1344  0711                     	;# 
  1345  0712                     	;# 
  1346  0713                     	;# 
  1347  0716                     	;# 
  1348  0717                     	;# 
  1349  0718                     	;# 
  1350  0719                     	;# 
  1351  071A                     	;# 
  1352  071B                     	;# 
  1353  071C                     	;# 
  1354  071D                     	;# 
  1355  0796                     	;# 
  1356  0797                     	;# 
  1357  0798                     	;# 
  1358  0799                     	;# 
  1359  079A                     	;# 
  1360  079B                     	;# 
  1361  080C                     	;# 
  1362  080D                     	;# 
  1363  080E                     	;# 
  1364  080F                     	;# 
  1365  0810                     	;# 
  1366  0811                     	;# 
  1367  0812                     	;# 
  1368  0813                     	;# 
  1369  0814                     	;# 
  1370  081A                     	;# 
  1371  081A                     	;# 
  1372  081B                     	;# 
  1373  081C                     	;# 
  1374  081C                     	;# 
  1375  081D                     	;# 
  1376  081E                     	;# 
  1377  081F                     	;# 
  1378  088C                     	;# 
  1379  088D                     	;# 
  1380  088E                     	;# 
  1381  088F                     	;# 
  1382  0890                     	;# 
  1383  0891                     	;# 
  1384  0892                     	;# 
  1385  0893                     	;# 
  1386  0895                     	;# 
  1387  0896                     	;# 
  1388  090C                     	;# 
  1389  090E                     	;# 
  1390  090F                     	;# 
  1391  091F                     	;# 
  1392  098F                     	;# 
  1393  098F                     	;# 
  1394  0990                     	;# 
  1395  0991                     	;# 
  1396  0992                     	;# 
  1397  0993                     	;# 
  1398  0994                     	;# 
  1399  0995                     	;# 
  1400  0996                     	;# 
  1401  0997                     	;# 
  1402  1E0F                     	;# 
  1403  1E10                     	;# 
  1404  1E11                     	;# 
  1405  1E12                     	;# 
  1406  1E13                     	;# 
  1407  1E14                     	;# 
  1408  1E15                     	;# 
  1409  1E16                     	;# 
  1410  1E17                     	;# 
  1411  1E18                     	;# 
  1412  1E19                     	;# 
  1413  1E1A                     	;# 
  1414  1E1B                     	;# 
  1415  1E1C                     	;# 
  1416  1E1D                     	;# 
  1417  1E1E                     	;# 
  1418  1E1F                     	;# 
  1419  1E20                     	;# 
  1420  1E21                     	;# 
  1421  1E22                     	;# 
  1422  1E23                     	;# 
  1423  1E24                     	;# 
  1424  1E25                     	;# 
  1425  1E26                     	;# 
  1426  1E27                     	;# 
  1427  1E28                     	;# 
  1428  1E29                     	;# 
  1429  1E2A                     	;# 
  1430  1E2B                     	;# 
  1431  1E2C                     	;# 
  1432  1E2D                     	;# 
  1433  1E2E                     	;# 
  1434  1E2F                     	;# 
  1435  1E30                     	;# 
  1436  1E31                     	;# 
  1437  1E32                     	;# 
  1438  1E33                     	;# 
  1439  1E34                     	;# 
  1440  1E35                     	;# 
  1441  1E36                     	;# 
  1442  1E37                     	;# 
  1443  1E8F                     	;# 
  1444  1E90                     	;# 
  1445  1E91                     	;# 
  1446  1E92                     	;# 
  1447  1E93                     	;# 
  1448  1E9C                     	;# 
  1449  1EA1                     	;# 
  1450  1EA2                     	;# 
  1451  1EB1                     	;# 
  1452  1EBB                     	;# 
  1453  1EBC                     	;# 
  1454  1EBD                     	;# 
  1455  1EBE                     	;# 
  1456  1EC3                     	;# 
  1457  1EC5                     	;# 
  1458  1EC6                     	;# 
  1459  1EC7                     	;# 
  1460  1ECB                     	;# 
  1461  1ECC                     	;# 
  1462  1F10                     	;# 
  1463  1F11                     	;# 
  1464  1F12                     	;# 
  1465  1F13                     	;# 
  1466  1F14                     	;# 
  1467  1F15                     	;# 
  1468  1F20                     	;# 
  1469  1F21                     	;# 
  1470  1F22                     	;# 
  1471  1F23                     	;# 
  1472  1F24                     	;# 
  1473  1F25                     	;# 
  1474  1F38                     	;# 
  1475  1F39                     	;# 
  1476  1F3A                     	;# 
  1477  1F3B                     	;# 
  1478  1F3C                     	;# 
  1479  1F3D                     	;# 
  1480  1F3E                     	;# 
  1481  1F3F                     	;# 
  1482  1F4E                     	;# 
  1483  1F4F                     	;# 
  1484  1F50                     	;# 
  1485  1F51                     	;# 
  1486  1F52                     	;# 
  1487  1F53                     	;# 
  1488  1F54                     	;# 
  1489  1F55                     	;# 
  1490  1FE4                     	;# 
  1491  1FE5                     	;# 
  1492  1FE6                     	;# 
  1493  1FE7                     	;# 
  1494  1FE8                     	;# 
  1495  1FE8                     	;# 
  1496  1FE9                     	;# 
  1497  1FEA                     	;# 
  1498  1FEA                     	;# 
  1499  1FEB                     	;# 
  1500  1FED                     	;# 
  1501  1FEE                     	;# 
  1502  1FEF                     	;# 
  1503                           
  1504                           	psect	stringtext1
  1505  03B4                     __pstringtext1:	
  1506  03B4                     cw_init@cw_bat_config_info:	
  1507  03B4  3414               	retlw	20
  1508  03B5  34A6               	retlw	166
  1509  03B6  3470               	retlw	112
  1510  03B7  346C               	retlw	108
  1511  03B8  346C               	retlw	108
  1512  03B9  3467               	retlw	103
  1513  03BA  3464               	retlw	100
  1514  03BB  3462               	retlw	98
  1515  03BC  3460               	retlw	96
  1516  03BD  345C               	retlw	92
  1517  03BE  3459               	retlw	89
  1518  03BF  344E               	retlw	78
  1519  03C0  3450               	retlw	80
  1520  03C1  3442               	retlw	66
  1521  03C2  342E               	retlw	46
  1522  03C3  3426               	retlw	38
  1523  03C4  3425               	retlw	37
  1524  03C5  3424               	retlw	36
  1525  03C6  3427               	retlw	39
  1526  03C7  342E               	retlw	46
  1527  03C8  3441               	retlw	65
  1528  03C9  345A               	retlw	90
  1529  03CA  346D               	retlw	109
  1530  03CB  344C               	retlw	76
  1531  03CC  3439               	retlw	57
  1532  03CD  34D7               	retlw	215
  1533  03CE  3406               	retlw	6
  1534  03CF  3466               	retlw	102
  1535  03D0  3400               	retlw	0
  1536  03D1  3401               	retlw	1
  1537  03D2  3405               	retlw	5
  1538  03D3  3434               	retlw	52
  1539  03D4  3461               	retlw	97
  1540  03D5  3476               	retlw	118
  1541  03D6  3479               	retlw	121
  1542  03D7  347D               	retlw	125
  1543  03D8  3442               	retlw	66
  1544  03D9  341E               	retlw	30
  1545  03DA  34A4               	retlw	164
  1546  03DB  3400               	retlw	0
  1547  03DC  3427               	retlw	39
  1548  03DD  345A               	retlw	90
  1549  03DE  3452               	retlw	82
  1550  03DF  3487               	retlw	135
  1551  03E0  348F               	retlw	143
  1552  03E1  3491               	retlw	145
  1553  03E2  3494               	retlw	148
  1554  03E3  3452               	retlw	82
  1555  03E4  3482               	retlw	130
  1556  03E5  348C               	retlw	140
  1557  03E6  3492               	retlw	146
  1558  03E7  3496               	retlw	150
  1559  03E8  342B               	retlw	43
  1560  03E9  3459               	retlw	89
  1561  03EA  346E               	retlw	110
  1562  03EB  34CB               	retlw	203
  1563  03EC  342F               	retlw	47
  1564  03ED  347D               	retlw	125
  1565  03EE  3472               	retlw	114
  1566  03EF  34A5               	retlw	165
  1567  03F0  34B5               	retlw	181
  1568  03F1  34C1               	retlw	193
  1569  03F2  3494               	retlw	148
  1570  03F3  3499               	retlw	153
  1571  03F4                     __end_ofcw_init@cw_bat_config_info:	
  1572                           
  1573                           	psect	stringtext2
  1574  0374                     __pstringtext2:	
  1575  0374                     cw_update_config_info@cw_bat_config_info:	
  1576  0374  3414               	retlw	20
  1577  0375  34A6               	retlw	166
  1578  0376  3470               	retlw	112
  1579  0377  346C               	retlw	108
  1580  0378  346C               	retlw	108
  1581  0379  3467               	retlw	103
  1582  037A  3464               	retlw	100
  1583  037B  3462               	retlw	98
  1584  037C  3460               	retlw	96
  1585  037D  345C               	retlw	92
  1586  037E  3459               	retlw	89
  1587  037F  344E               	retlw	78
  1588  0380  3450               	retlw	80
  1589  0381  3442               	retlw	66
  1590  0382  342E               	retlw	46
  1591  0383  3426               	retlw	38
  1592  0384  3425               	retlw	37
  1593  0385  3424               	retlw	36
  1594  0386  3427               	retlw	39
  1595  0387  342E               	retlw	46
  1596  0388  3441               	retlw	65
  1597  0389  345A               	retlw	90
  1598  038A  346D               	retlw	109
  1599  038B  344C               	retlw	76
  1600  038C  3439               	retlw	57
  1601  038D  34D7               	retlw	215
  1602  038E  3406               	retlw	6
  1603  038F  3466               	retlw	102
  1604  0390  3400               	retlw	0
  1605  0391  3401               	retlw	1
  1606  0392  3405               	retlw	5
  1607  0393  3434               	retlw	52
  1608  0394  3461               	retlw	97
  1609  0395  3476               	retlw	118
  1610  0396  3479               	retlw	121
  1611  0397  347D               	retlw	125
  1612  0398  3442               	retlw	66
  1613  0399  341E               	retlw	30
  1614  039A  34A4               	retlw	164
  1615  039B  3400               	retlw	0
  1616  039C  3427               	retlw	39
  1617  039D  345A               	retlw	90
  1618  039E  3452               	retlw	82
  1619  039F  3487               	retlw	135
  1620  03A0  348F               	retlw	143
  1621  03A1  3491               	retlw	145
  1622  03A2  3494               	retlw	148
  1623  03A3  3452               	retlw	82
  1624  03A4  3482               	retlw	130
  1625  03A5  348C               	retlw	140
  1626  03A6  3492               	retlw	146
  1627  03A7  3496               	retlw	150
  1628  03A8  342B               	retlw	43
  1629  03A9  3459               	retlw	89
  1630  03AA  346E               	retlw	110
  1631  03AB  34CB               	retlw	203
  1632  03AC  342F               	retlw	47
  1633  03AD  347D               	retlw	125
  1634  03AE  3472               	retlw	114
  1635  03AF  34A5               	retlw	165
  1636  03B0  34B5               	retlw	181
  1637  03B1  34C1               	retlw	193
  1638  03B2  3494               	retlw	148
  1639  03B3  3499               	retlw	153
  1640  03B4                     __end_ofcw_update_config_info@cw_bat_config_info:	
  1641  000E                     _PORTCbits	set	14
  1642  0014                     _TRISCbits	set	20
  1643  0018                     _LATAbits	set	24
  1644  001A                     _LATCbits	set	26
  1645  0014                     _TRISC	set	20
  1646  0012                     _TRISA	set	18
  1647  001A                     _LATC	set	26
  1648  0018                     _LATA	set	24
  1649  005F                     _GIE	set	95
  1650  011A                     _TX1REG	set	282
  1651  0119                     _RC1REG	set	281
  1652  011D                     _RC1STAbits	set	285
  1653  011C                     _SP1BRGH	set	284
  1654  011B                     _SP1BRGL	set	283
  1655  011E                     _TX1STA	set	286
  1656  011D                     _RC1STA	set	285
  1657  011F                     _BAUD1CON	set	287
  1658  070F                     _PIR3bits	set	1807
  1659  0892                     _OSCTUNE	set	2194
  1660  0890                     _OSCSTAT	set	2192
  1661  0893                     _OSCFRQ	set	2195
  1662  0891                     _OSCEN	set	2193
  1663  088F                     _OSCCON3	set	2191
  1664  088D                     _OSCCON1	set	2189
  1665  4480                     _PLLR	set	17536
  1666  1ECB                     _RX1DTPPSbits	set	7883
  1667  1E8F                     _PPSLOCKbits	set	7823
  1668  1E8F                     _PPSLOCK	set	7823
  1669  1F24                     _RC4PPS	set	7972
  1670  1F50                     _ODCONC	set	8016
  1671  1F3A                     _ODCONA	set	7994
  1672  1F4F                     _WPUC	set	8015
  1673  1F39                     _WPUA	set	7993
  1674  1F38                     _ANSELA	set	7992
  1675  1F4E                     _ANSELC	set	8014
  1676                           
  1677                           ; #config settings
  1678  0000                     
  1679                           	psect	cinit
  1680  07F2                     start_initialization:	
  1681  07F2                     __initialization:	
  1682                           
  1683                           ; Clear objects allocated to BANK0
  1684  07F2  0140               	movlb	0	; select bank0
  1685  07F3  01C7               	clrf	__pbssBANK0& (0+127)
  1686  07F4  01C8               	clrf	(__pbssBANK0+1)& (0+127)
  1687  07F5  01C9               	clrf	(__pbssBANK0+2)& (0+127)
  1688  07F6  01CA               	clrf	(__pbssBANK0+3)& (0+127)
  1689  07F7  01CB               	clrf	(__pbssBANK0+4)& (0+127)
  1690  07F8  01CC               	clrf	(__pbssBANK0+5)& (0+127)
  1691  07F9  01CD               	clrf	(__pbssBANK0+6)& (0+127)
  1692  07FA  01CE               	clrf	(__pbssBANK0+7)& (0+127)
  1693  07FB  01CF               	clrf	(__pbssBANK0+8)& (0+127)
  1694  07FC  01D0               	clrf	(__pbssBANK0+9)& (0+127)
  1695  07FD  01D1               	clrf	(__pbssBANK0+10)& (0+127)
  1696  07FE                     end_of_initialization:	
  1697                           ;End of C runtime variable initialization code
  1698                           
  1699  07FE                     __end_of__initialization:	
  1700  07FE  0140               	movlb	0
  1701  07FF  2C81               	ljmp	_main	;jump to C main() function
  1702                           
  1703                           	psect	bssBANK0
  1704  0047                     __pbssBANK0:	
  1705  0047                     _cw_bat:	
  1706  0047                     	ds	6
  1707  004D                     cw_get_vol@F80:	
  1708  004D                     	ds	2
  1709  004F                     _reset_loop:	
  1710  004F                     	ds	1
  1711  0050                     _CHARGE:	
  1712  0050                     	ds	1
  1713  0051                     _count:	
  1714  0051                     	ds	1
  1715                           
  1716                           	psect	cstackCOMMON
  1717  0070                     __pcstackCOMMON:	
  1718  0070                     ?_PIN_MANAGER_Initialize:	
  1719  0070                     ??_PIN_MANAGER_Initialize:	
  1720                           ; 1 bytes @ 0x0
  1721                           
  1722  0070                     ?_OSCILLATOR_Initialize:	
  1723                           ; 1 bytes @ 0x0
  1724                           
  1725  0070                     ??_OSCILLATOR_Initialize:	
  1726                           ; 1 bytes @ 0x0
  1727                           
  1728  0070                     ?_cw_bat_init:	
  1729                           ; 1 bytes @ 0x0
  1730                           
  1731  0070                     ?_cw_bat_work:	
  1732                           ; 1 bytes @ 0x0
  1733                           
  1734  0070                     ?_CW_Delay10ms:	
  1735                           ; 1 bytes @ 0x0
  1736                           
  1737  0070                     ?_EUSART1_Initialize:	
  1738                           ; 1 bytes @ 0x0
  1739                           
  1740  0070                     ??_EUSART1_Initialize:	
  1741                           ; 1 bytes @ 0x0
  1742                           
  1743  0070                     ?_EUSART1_Write:	
  1744                           ; 1 bytes @ 0x0
  1745                           
  1746  0070                     ??_EUSART1_Write:	
  1747                           ; 1 bytes @ 0x0
  1748                           
  1749  0070                     ?_SYSTEM_Initialize:	
  1750                           ; 1 bytes @ 0x0
  1751                           
  1752  0070                     ?_main:	
  1753                           ; 1 bytes @ 0x0
  1754                           
  1755  0070                     ?_CW_Delay100us:	
  1756                           ; 1 bytes @ 0x0
  1757                           
  1758  0070                     ??_CW_Delay100us:	
  1759                           ; 1 bytes @ 0x0
  1760                           
  1761  0070                     ?_cw_update_config_info:	
  1762                           ; 1 bytes @ 0x0
  1763                           
  1764  0070                     ?_cw_init:	
  1765                           ; 1 bytes @ 0x0
  1766                           
  1767  0070                     ?_update_capacity:	
  1768                           ; 1 bytes @ 0x0
  1769                           
  1770  0070                     ?_update_vol:	
  1771                           ; 1 bytes @ 0x0
  1772                           
  1773  0070                     ?_update_usb_online:	
  1774                           ; 1 bytes @ 0x0
  1775                           
  1776  0070                     ??_update_usb_online:	
  1777                           ; 1 bytes @ 0x0
  1778                           
  1779  0070                     ?_Delay10us:	
  1780                           ; 1 bytes @ 0x0
  1781                           
  1782  0070                     ??_Delay10us:	
  1783                           ; 1 bytes @ 0x0
  1784                           
  1785  0070                     ?_start:	
  1786                           ; 1 bytes @ 0x0
  1787                           
  1788  0070                     ?_stop:	
  1789                           ; 1 bytes @ 0x0
  1790                           
  1791  0070                     ?_s_ack:	
  1792                           ; 1 bytes @ 0x0
  1793                           
  1794  0070                     ?_sn_ack:	
  1795                           ; 1 bytes @ 0x0
  1796                           
  1797  0070                     ?_write_byte:	
  1798                           ; 1 bytes @ 0x0
  1799                           
  1800  0070                     ?_read_byte:	
  1801                           ; 1 bytes @ 0x0
  1802                           
  1803  0070                     ?___lmul:	
  1804                           ; 1 bytes @ 0x0
  1805                           
  1806  0070                     EUSART1_Write@txData:	
  1807                           ; 4 bytes @ 0x0
  1808                           
  1809  0070                     PIN_MANAGER_Initialize@state:	
  1810                           ; 1 bytes @ 0x0
  1811                           
  1812  0070                     CW_Delay10ms@c:	
  1813                           ; 1 bytes @ 0x0
  1814                           
  1815  0070                     ___lmul@multiplier:	
  1816                           ; 2 bytes @ 0x0
  1817                           
  1818                           
  1819                           ; 4 bytes @ 0x0
  1820  0070                     	ds	1
  1821  0071                     ??_SYSTEM_Initialize:	
  1822  0071                     CW_Delay100us@a:	
  1823                           ; 1 bytes @ 0x1
  1824                           
  1825  0071                     Delay10us@a:	
  1826                           ; 1 bytes @ 0x1
  1827                           
  1828                           
  1829                           ; 1 bytes @ 0x1
  1830  0071                     	ds	1
  1831  0072                     ??_CW_Delay10ms:	
  1832  0072                     CW_Delay100us@b:	
  1833                           ; 1 bytes @ 0x2
  1834                           
  1835  0072                     Delay10us@b:	
  1836                           ; 1 bytes @ 0x2
  1837                           
  1838                           
  1839                           ; 1 bytes @ 0x2
  1840  0072                     	ds	1
  1841  0073                     CW_Delay10ms@a:	
  1842  0073                     CW_Delay100us@i:	
  1843                           ; 1 bytes @ 0x3
  1844                           
  1845  0073                     Delay10us@i:	
  1846                           ; 1 bytes @ 0x3
  1847                           
  1848                           
  1849                           ; 1 bytes @ 0x3
  1850  0073                     	ds	1
  1851  0074                     ??_start:	
  1852  0074                     ??_stop:	
  1853                           ; 1 bytes @ 0x4
  1854                           
  1855  0074                     ??_s_ack:	
  1856                           ; 1 bytes @ 0x4
  1857                           
  1858  0074                     ??_sn_ack:	
  1859                           ; 1 bytes @ 0x4
  1860                           
  1861  0074                     ??_write_byte:	
  1862                           ; 1 bytes @ 0x4
  1863                           
  1864  0074                     ??_read_byte:	
  1865                           ; 1 bytes @ 0x4
  1866                           
  1867  0074                     ?_r_ack:	
  1868                           ; 1 bytes @ 0x4
  1869                           
  1870  0074                     CW_Delay10ms@b:	
  1871                           ; 2 bytes @ 0x4
  1872                           
  1873  0074                     ___lmul@multiplicand:	
  1874                           ; 1 bytes @ 0x4
  1875                           
  1876                           
  1877                           ; 4 bytes @ 0x4
  1878  0074                     	ds	1
  1879  0075                     write_byte@w_data:	
  1880  0075                     read_byte@i:	
  1881                           ; 1 bytes @ 0x5
  1882                           
  1883                           
  1884                           ; 1 bytes @ 0x5
  1885  0075                     	ds	1
  1886  0076                     ??_r_ack:	
  1887  0076                     write_byte@i:	
  1888                           ; 1 bytes @ 0x6
  1889                           
  1890  0076                     read_byte@r_data:	
  1891                           ; 1 bytes @ 0x6
  1892                           
  1893                           
  1894                           ; 1 bytes @ 0x6
  1895  0076                     	ds	2
  1896  0078                     ??___lmul:	
  1897  0078                     r_ack@ack:	
  1898                           ; 1 bytes @ 0x8
  1899                           
  1900  0078                     ___lmul@product:	
  1901                           ; 2 bytes @ 0x8
  1902                           
  1903                           
  1904                           ; 4 bytes @ 0x8
  1905  0078                     	ds	2
  1906  007A                     ?_wait_r_ack:	
  1907                           
  1908                           ; 2 bytes @ 0xA
  1909  007A                     	ds	2
  1910  007C                     ??_cw_read:	
  1911  007C                     ??_cw_write:	
  1912                           ; 1 bytes @ 0xC
  1913                           
  1914  007C                     ??_cw_read_word:	
  1915                           ; 1 bytes @ 0xC
  1916                           
  1917  007C                     ??_wait_r_ack:	
  1918                           ; 1 bytes @ 0xC
  1919                           
  1920  007C                     ??___lldiv:	
  1921                           ; 1 bytes @ 0xC
  1922                           
  1923  007C                     cw_write@point_reg:	
  1924                           ; 1 bytes @ 0xC
  1925                           
  1926                           
  1927                           ; 1 bytes @ 0xC
  1928  007C                     	ds	1
  1929  007D                     cw_read@point_reg:	
  1930                           
  1931                           ; 1 bytes @ 0xD
  1932  007D                     	ds	1
  1933  007E                     ??_cw_bat_work:	
  1934  007E                     ??_update_vol:	
  1935                           ; 1 bytes @ 0xE
  1936                           
  1937                           
  1938                           	psect	cstackBANK0
  1939  0020                     __pcstackBANK0:	
  1940                           ; 1 bytes @ 0xE
  1941                           
  1942  0020                     ?___lldiv:	
  1943  0020                     wait_r_ack@ack:	
  1944                           ; 4 bytes @ 0x0
  1945                           
  1946  0020                     ___lldiv@divisor:	
  1947                           ; 2 bytes @ 0x0
  1948                           
  1949                           
  1950                           ; 4 bytes @ 0x0
  1951  0020                     	ds	2
  1952  0022                     wait_r_ack@i:	
  1953                           
  1954                           ; 2 bytes @ 0x2
  1955  0022                     	ds	2
  1956  0024                     ?_cw_read:	
  1957  0024                     ?_cw_write:	
  1958                           ; 2 bytes @ 0x4
  1959                           
  1960  0024                     ?_cw_read_word:	
  1961                           ; 2 bytes @ 0x4
  1962                           
  1963  0024                     cw_read@r_pdata:	
  1964                           ; 2 bytes @ 0x4
  1965                           
  1966  0024                     cw_read_word@r_pdata:	
  1967                           ; 1 bytes @ 0x4
  1968                           
  1969  0024                     cw_write@w_pdata:	
  1970                           ; 1 bytes @ 0x4
  1971                           
  1972  0024                     ___lldiv@dividend:	
  1973                           ; 1 bytes @ 0x4
  1974                           
  1975                           
  1976                           ; 4 bytes @ 0x4
  1977  0024                     	ds	1
  1978  0025                     cw_read_word@length:	
  1979                           
  1980                           ; 2 bytes @ 0x5
  1981  0025                     	ds	2
  1982  0027                     ??_cw_update_config_info:	
  1983  0027                     cw_read_word@point_reg:	
  1984                           ; 1 bytes @ 0x7
  1985                           
  1986                           
  1987                           ; 1 bytes @ 0x7
  1988  0027                     	ds	1
  1989  0028                     cw_update_config_info@reset_val:	
  1990  0028                     cw_read_word@count:	
  1991                           ; 1 bytes @ 0x8
  1992                           
  1993  0028                     ___lldiv@quotient:	
  1994                           ; 1 bytes @ 0x8
  1995                           
  1996                           
  1997                           ; 4 bytes @ 0x8
  1998  0028                     	ds	1
  1999  0029                     cw_update_config_info@ret:	
  2000                           
  2001                           ; 2 bytes @ 0x9
  2002  0029                     	ds	2
  2003  002B                     cw_update_config_info@i:	
  2004                           
  2005                           ; 1 bytes @ 0xB
  2006  002B                     	ds	1
  2007  002C                     cw_update_config_info@reg_val:	
  2008  002C                     ___lldiv@counter:	
  2009                           ; 1 bytes @ 0xC
  2010                           
  2011                           
  2012                           ; 1 bytes @ 0xC
  2013  002C                     	ds	1
  2014  002D                     ??_cw_init:	
  2015  002D                     ?_cw_get_vol:	
  2016                           ; 1 bytes @ 0xD
  2017                           
  2018                           
  2019                           ; 2 bytes @ 0xD
  2020  002D                     	ds	2
  2021  002F                     ??_cw_get_vol:	
  2022  002F                     cw_init@i:	
  2023                           ; 1 bytes @ 0xF
  2024                           
  2025                           
  2026                           ; 1 bytes @ 0xF
  2027  002F                     	ds	1
  2028  0030                     cw_init@ret:	
  2029                           
  2030                           ; 2 bytes @ 0x10
  2031  0030                     	ds	2
  2032  0032                     cw_init@reg_val:	
  2033                           
  2034                           ; 1 bytes @ 0x12
  2035  0032                     	ds	1
  2036  0033                     ??_cw_bat_init:	
  2037  0033                     ?_cw_por:	
  2038                           ; 1 bytes @ 0x13
  2039                           
  2040                           
  2041                           ; 2 bytes @ 0x13
  2042  0033                     	ds	1
  2043  0034                     cw_bat_init@loop:	
  2044  0034                     cw_get_vol@ret:	
  2045                           ; 1 bytes @ 0x14
  2046                           
  2047                           
  2048                           ; 2 bytes @ 0x14
  2049  0034                     	ds	1
  2050  0035                     ??_cw_por:	
  2051  0035                     cw_bat_init@ret:	
  2052                           ; 1 bytes @ 0x15
  2053                           
  2054                           
  2055                           ; 1 bytes @ 0x15
  2056  0035                     	ds	1
  2057  0036                     cw_get_vol@reg_val:	
  2058                           
  2059                           ; 2 bytes @ 0x16
  2060  0036                     	ds	1
  2061  0037                     cw_por@reset_val:	
  2062                           
  2063                           ; 1 bytes @ 0x17
  2064  0037                     	ds	1
  2065  0038                     cw_por@ret:	
  2066  0038                     cw_get_vol@ad_value_min:	
  2067                           ; 2 bytes @ 0x18
  2068                           
  2069                           
  2070                           ; 2 bytes @ 0x18
  2071  0038                     	ds	2
  2072  003A                     ?_cw_get_capacity:	
  2073  003A                     cw_get_vol@ad_value_max:	
  2074                           ; 2 bytes @ 0x1A
  2075                           
  2076                           
  2077                           ; 2 bytes @ 0x1A
  2078  003A                     	ds	2
  2079  003C                     ??_cw_get_capacity:	
  2080  003C                     cw_get_vol@ad_value:	
  2081                           ; 1 bytes @ 0x1C
  2082                           
  2083                           
  2084                           ; 4 bytes @ 0x1C
  2085  003C                     	ds	2
  2086  003E                     cw_get_capacity@cw_capacity:	
  2087                           
  2088                           ; 1 bytes @ 0x1E
  2089  003E                     	ds	1
  2090  003F                     cw_get_capacity@ret:	
  2091                           
  2092                           ; 2 bytes @ 0x1F
  2093  003F                     	ds	1
  2094  0040                     cw_get_vol@get_ad_times:	
  2095                           
  2096                           ; 1 bytes @ 0x20
  2097  0040                     	ds	1
  2098  0041                     cw_get_capacity@reg_val:	
  2099  0041                     cw_get_vol@ad_buff:	
  2100                           ; 1 bytes @ 0x21
  2101                           
  2102                           
  2103                           ; 2 bytes @ 0x21
  2104  0041                     	ds	1
  2105  0042                     ??_update_capacity:	
  2106                           
  2107                           ; 1 bytes @ 0x22
  2108  0042                     	ds	1
  2109  0043                     update_capacity@cw_capacity:	
  2110  0043                     update_vol@cw_voltage:	
  2111                           ; 2 bytes @ 0x23
  2112                           
  2113                           
  2114                           ; 2 bytes @ 0x23
  2115  0043                     	ds	2
  2116  0045                     ??_main:	
  2117                           
  2118                           ; 1 bytes @ 0x25
  2119  0045                     	ds	1
  2120  0046                     main@ret:	
  2121                           
  2122                           ; 1 bytes @ 0x26
  2123  0046                     	ds	1
  2124                           
  2125                           	psect	maintext
  2126  0481                     __pmaintext:	
  2127 ;;
  2128 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2129 ;;
  2130 ;; *************** function _main *****************
  2131 ;; Defined at:
  2132 ;;		line 54 in file "main.c"
  2133 ;; Parameters:    Size  Location     Type
  2134 ;;		None
  2135 ;; Auto vars:     Size  Location     Type
  2136 ;;  ret             1   38[BANK0 ] unsigned char 
  2137 ;;  send_char       1    0        unsigned char 
  2138 ;; Return value:  Size  Location     Type
  2139 ;;                  1    wreg      void 
  2140 ;; Registers used:
  2141 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2142 ;; Tracked objects:
  2143 ;;		On entry : B3F/0
  2144 ;;		On exit  : 0/0
  2145 ;;		Unchanged: 0/0
  2146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2147 ;;      Params:         0       0       0       0
  2148 ;;      Locals:         0       1       0       0
  2149 ;;      Temps:          0       1       0       0
  2150 ;;      Totals:         0       2       0       0
  2151 ;;Total ram usage:        2 bytes
  2152 ;; Hardware stack levels required when called:   10
  2153 ;; This function calls:
  2154 ;;		_CW_Delay10ms
  2155 ;;		_EUSART1_Write
  2156 ;;		_SYSTEM_Initialize
  2157 ;;		_cw_bat_init
  2158 ;;		_cw_bat_work
  2159 ;; This function is called by:
  2160 ;;		Startup code after reset
  2161 ;; This function uses a non-reentrant model
  2162 ;;
  2163                           
  2164                           
  2165                           ;psect for function _main
  2166  0481                     _main:	
  2167                           
  2168                           ;main.c: 57: unsigned char ret = 0;
  2169                           
  2170                           ;incstack = 0
  2171                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2172  0481  0140               	movlb	0	; select bank0
  2173  0482  01C6               	clrf	main@ret
  2174                           
  2175                           ;main.c: 58: uint8_t send_char;
  2176                           ;main.c: 59: SYSTEM_Initialize();
  2177  0483  2110               	fcall	_SYSTEM_Initialize
  2178                           
  2179                           ;main.c: 60: do { LATCbits.LATC2 = 1; } while(0);
  2180  0484  0140               	movlb	0	; select bank0
  2181  0485  151A               	bsf	26,2	;volatile
  2182                           
  2183                           ;main.c: 61: do { LATAbits.LATA2 = 1; } while(0);
  2184  0486  1518               	bsf	24,2	;volatile
  2185                           
  2186                           ;main.c: 62: do { LATAbits.LATA5 = 1; } while(0);
  2187  0487  1698               	bsf	24,5	;volatile
  2188                           
  2189                           ;main.c: 63: do { LATAbits.LATA4 = 1; } while(0);
  2190  0488  1618               	bsf	24,4	;volatile
  2191                           
  2192                           ;main.c: 64: ret = cw_bat_init();
  2193  0489  219C               	fcall	_cw_bat_init
  2194  048A  0140               	movlb	0	; select bank0
  2195  048B  00C5               	movwf	??_main
  2196  048C  0845               	movf	??_main,w
  2197  048D  00C6               	movwf	main@ret
  2198                           
  2199                           ;main.c: 80: cw_bat_work();
  2200  048E  2114               	fcall	_cw_bat_work
  2201  048F                     l2425:	
  2202                           ;main.c: 82: while (1)
  2203                           
  2204                           
  2205                           ;main.c: 83: {
  2206                           ;main.c: 85: if(cw_bat.capacity >= 80)
  2207  048F  3000               	movlw	0
  2208  0490  0140               	movlb	0	; select bank0
  2209  0491  0249               	subwf	_cw_bat+2,w
  2210  0492  3050               	movlw	80
  2211  0493  1903               	skipnz
  2212  0494  0248               	subwf	_cw_bat+1,w
  2213  0495  1C03               	skipc
  2214  0496  2C99               	goto	l2427
  2215                           
  2216                           ;main.c: 86: {
  2217                           ;main.c: 87: do { LATCbits.LATC2 = 0; } while(0);
  2218  0497  111A               	bcf	26,2	;volatile
  2219  0498  2CA1               	goto	L1
  2220  0499                     l2427:	
  2221                           ;main.c: 91: }
  2222                           
  2223                           ;main.c: 90: do { LATAbits.LATA4 = 0; } while(0);
  2224                           
  2225                           ;main.c: 89: do { LATAbits.LATA5 = 0; } while(0);
  2226                           
  2227                           ;main.c: 88: do { LATAbits.LATA2 = 0; } while(0);
  2228                           
  2229                           
  2230                           ;main.c: 92: else if(cw_bat.capacity >= 60)
  2231  0499  3000               	movlw	0
  2232  049A  0249               	subwf	_cw_bat+2,w
  2233  049B  303C               	movlw	60
  2234  049C  1903               	skipnz
  2235  049D  0248               	subwf	_cw_bat+1,w
  2236  049E  1C03               	skipc
  2237  049F  2CA3               	goto	l2429
  2238                           
  2239                           ;main.c: 93: {
  2240                           ;main.c: 94: do { LATCbits.LATC2 = 1; } while(0);
  2241  04A0  151A               	bsf	26,2	;volatile
  2242  04A1                     L1:	
  2243                           
  2244                           ;main.c: 95: do { LATAbits.LATA2 = 0; } while(0);
  2245  04A1  1118               	bcf	24,2	;volatile
  2246  04A2  2CAC               	goto	L2
  2247  04A3                     l2429:	
  2248                           ;main.c: 98: }
  2249                           
  2250                           ;main.c: 97: do { LATAbits.LATA4 = 0; } while(0);
  2251                           
  2252                           ;main.c: 96: do { LATAbits.LATA5 = 0; } while(0);
  2253                           
  2254                           
  2255                           ;main.c: 99: else if(cw_bat.capacity >= 40)
  2256  04A3  3000               	movlw	0
  2257  04A4  0249               	subwf	_cw_bat+2,w
  2258  04A5  3028               	movlw	40
  2259  04A6  1903               	skipnz
  2260  04A7  0248               	subwf	_cw_bat+1,w
  2261  04A8  1C03               	skipc
  2262  04A9  2CAE               	goto	l2431
  2263                           
  2264                           ;main.c: 100: {
  2265                           ;main.c: 101: do { LATCbits.LATC2 = 1; } while(0);
  2266  04AA  151A               	bsf	26,2	;volatile
  2267                           
  2268                           ;main.c: 102: do { LATAbits.LATA2 = 1; } while(0);
  2269  04AB  1518               	bsf	24,2	;volatile
  2270  04AC                     L2:	
  2271                           
  2272                           ;main.c: 103: do { LATAbits.LATA5 = 0; } while(0);
  2273  04AC  1298               	bcf	24,5	;volatile
  2274                           
  2275                           ;main.c: 104: do { LATAbits.LATA4 = 0; } while(0);
  2276  04AD  2CB8               	goto	l168
  2277  04AE                     l2431:	
  2278                           ;main.c: 105: }
  2279                           
  2280                           
  2281                           ;main.c: 106: else if(cw_bat.capacity >= 20)
  2282  04AE  3000               	movlw	0
  2283  04AF  0249               	subwf	_cw_bat+2,w
  2284  04B0  3014               	movlw	20
  2285  04B1  1903               	skipnz
  2286  04B2  0248               	subwf	_cw_bat+1,w
  2287  04B3  1C03               	skipc
  2288  04B4  2CBA               	goto	l171
  2289                           
  2290                           ;main.c: 107: {
  2291                           ;main.c: 108: do { LATCbits.LATC2 = 1; } while(0);
  2292  04B5  151A               	bsf	26,2	;volatile
  2293                           
  2294                           ;main.c: 109: do { LATAbits.LATA2 = 1; } while(0);
  2295  04B6  1518               	bsf	24,2	;volatile
  2296                           
  2297                           ;main.c: 110: do { LATAbits.LATA5 = 1; } while(0);
  2298  04B7  1698               	bsf	24,5	;volatile
  2299  04B8                     l168:	
  2300                           ;main.c: 111: do { LATAbits.LATA4 = 0; } while(0);
  2301                           
  2302  04B8  1218               	bcf	24,4	;volatile
  2303                           
  2304                           ;main.c: 112: }
  2305  04B9  2CBE               	goto	l2433
  2306  04BA                     l171:	
  2307                           ;main.c: 113: else
  2308                           ;main.c: 114: {
  2309                           ;main.c: 115: do { LATCbits.LATC2 = 1; } while(0);
  2310                           
  2311  04BA  151A               	bsf	26,2	;volatile
  2312                           
  2313                           ;main.c: 116: do { LATAbits.LATA2 = 1; } while(0);
  2314  04BB  1518               	bsf	24,2	;volatile
  2315                           
  2316                           ;main.c: 117: do { LATAbits.LATA5 = 1; } while(0);
  2317  04BC  1698               	bsf	24,5	;volatile
  2318                           
  2319                           ;main.c: 118: do { LATAbits.LATA4 = 1; } while(0);
  2320  04BD  1618               	bsf	24,4	;volatile
  2321  04BE                     l2433:	
  2322                           
  2323                           ;main.c: 119: }
  2324                           ;main.c: 121: CW_Delay10ms(1000);
  2325  04BE  30E8               	movlw	232
  2326  04BF  00F0               	movwf	CW_Delay10ms@c
  2327  04C0  3003               	movlw	3
  2328  04C1  00F1               	movwf	CW_Delay10ms@c+1
  2329  04C2  2216               	fcall	_CW_Delay10ms
  2330                           
  2331                           ;main.c: 123: cw_bat_work();
  2332  04C3  2114               	fcall	_cw_bat_work
  2333                           
  2334                           ;main.c: 125: EUSART1_Write('S');
  2335  04C4  3053               	movlw	83
  2336  04C5  2118               	fcall	_EUSART1_Write
  2337                           
  2338                           ;main.c: 126: EUSART1_Write(cw_bat.voltage);
  2339  04C6  0140               	movlb	0	; select bank0
  2340  04C7  084A               	movf	_cw_bat+3,w
  2341  04C8  2118               	fcall	_EUSART1_Write
  2342                           
  2343                           ;main.c: 127: EUSART1_Write(cw_bat.capacity);
  2344  04C9  0140               	movlb	0	; select bank0
  2345  04CA  0848               	movf	_cw_bat+1,w
  2346  04CB  2118               	fcall	_EUSART1_Write
  2347                           
  2348                           ;main.c: 128: EUSART1_Write('E');
  2349  04CC  3045               	movlw	69
  2350  04CD  2118               	fcall	_EUSART1_Write
  2351  04CE  2C8F               	goto	l2425
  2352  04CF                     __end_of_main:	
  2353                           
  2354                           	psect	text1
  2355  0114                     __ptext1:	
  2356 ;; *************** function _cw_bat_work *****************
  2357 ;; Defined at:
  2358 ;;		line 555 in file "CW201x.c"
  2359 ;; Parameters:    Size  Location     Type
  2360 ;;		None
  2361 ;; Auto vars:     Size  Location     Type
  2362 ;;		None
  2363 ;; Return value:  Size  Location     Type
  2364 ;;                  1    wreg      void 
  2365 ;; Registers used:
  2366 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2367 ;; Tracked objects:
  2368 ;;		On entry : 0/0
  2369 ;;		On exit  : 0/0
  2370 ;;		Unchanged: 0/0
  2371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2372 ;;      Params:         0       0       0       0
  2373 ;;      Locals:         0       0       0       0
  2374 ;;      Temps:          0       0       0       0
  2375 ;;      Totals:         0       0       0       0
  2376 ;;Total ram usage:        0 bytes
  2377 ;; Hardware stack levels used:    1
  2378 ;; Hardware stack levels required when called:    9
  2379 ;; This function calls:
  2380 ;;		_update_capacity
  2381 ;;		_update_usb_online
  2382 ;;		_update_vol
  2383 ;; This function is called by:
  2384 ;;		_main
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387                           
  2388                           
  2389                           ;psect for function _cw_bat_work
  2390  0114                     _cw_bat_work:	
  2391                           
  2392                           ;CW201x.c: 557: update_usb_online();
  2393                           
  2394                           ;incstack = 0
  2395                           ; Regs used in _cw_bat_work: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2396  0114  2120               	fcall	_update_usb_online
  2397                           
  2398                           ;CW201x.c: 558: update_capacity();
  2399  0115  2237               	fcall	_update_capacity
  2400                           
  2401                           ;CW201x.c: 559: update_vol();
  2402  0116  2185               	fcall	_update_vol
  2403  0117  0008               	return
  2404  0118                     __end_of_cw_bat_work:	
  2405                           
  2406                           	psect	text2
  2407  0185                     __ptext2:	
  2408 ;; *************** function _update_vol *****************
  2409 ;; Defined at:
  2410 ;;		line 508 in file "CW201x.c"
  2411 ;; Parameters:    Size  Location     Type
  2412 ;;		None
  2413 ;; Auto vars:     Size  Location     Type
  2414 ;;  cw_voltage      2   35[BANK0 ] unsigned int 
  2415 ;; Return value:  Size  Location     Type
  2416 ;;                  1    wreg      void 
  2417 ;; Registers used:
  2418 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2419 ;; Tracked objects:
  2420 ;;		On entry : 0/0
  2421 ;;		On exit  : 0/0
  2422 ;;		Unchanged: 0/0
  2423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2424 ;;      Params:         0       0       0       0
  2425 ;;      Locals:         0       2       0       0
  2426 ;;      Temps:          0       0       0       0
  2427 ;;      Totals:         0       2       0       0
  2428 ;;Total ram usage:        2 bytes
  2429 ;; Hardware stack levels used:    1
  2430 ;; Hardware stack levels required when called:    5
  2431 ;; This function calls:
  2432 ;;		_cw_get_vol
  2433 ;; This function is called by:
  2434 ;;		_cw_bat_work
  2435 ;; This function uses a non-reentrant model
  2436 ;;
  2437                           
  2438                           
  2439                           ;psect for function _update_vol
  2440  0185                     _update_vol:	
  2441                           
  2442                           ;CW201x.c: 510: unsigned int cw_voltage;
  2443                           ;CW201x.c: 511: cw_voltage = cw_get_vol();
  2444                           
  2445                           ;incstack = 0
  2446                           ; Regs used in _update_vol: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2447  0185  2648               	fcall	_cw_get_vol
  2448  0186  0140               	movlb	0	; select bank0
  2449  0187  082E               	movf	?_cw_get_vol+1,w
  2450  0188  00C4               	movwf	update_vol@cw_voltage+1
  2451  0189  082D               	movf	?_cw_get_vol,w
  2452  018A  00C3               	movwf	update_vol@cw_voltage
  2453                           
  2454                           ;CW201x.c: 512: if(cw_voltage == 1){
  2455  018B  0343               	decf	update_vol@cw_voltage,w
  2456  018C  0444               	iorwf	update_vol@cw_voltage+1,w
  2457  018D  1903               	btfsc	3,2
  2458  018E  0008               	return
  2459                           
  2460                           ;CW201x.c: 515: }else if(cw_bat.voltage != cw_voltage)
  2461  018F  0844               	movf	update_vol@cw_voltage+1,w
  2462  0190  064B               	xorwf	_cw_bat+4,w
  2463  0191  1D03               	skipz
  2464  0192  2995               	goto	u2265
  2465  0193  0843               	movf	update_vol@cw_voltage,w
  2466  0194  064A               	xorwf	_cw_bat+3,w
  2467  0195                     u2265:	
  2468  0195  1903               	skipnz
  2469  0196  0008               	return
  2470                           
  2471                           ;CW201x.c: 516: {
  2472                           ;CW201x.c: 517: cw_bat.voltage = cw_voltage;
  2473  0197  0844               	movf	update_vol@cw_voltage+1,w
  2474  0198  00CB               	movwf	_cw_bat+4
  2475  0199  0843               	movf	update_vol@cw_voltage,w
  2476  019A  00CA               	movwf	_cw_bat+3
  2477  019B  0008               	return
  2478  019C                     __end_of_update_vol:	
  2479                           
  2480                           	psect	text3
  2481  0648                     __ptext3:	
  2482 ;; *************** function _cw_get_vol *****************
  2483 ;; Defined at:
  2484 ;;		line 434 in file "CW201x.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;		None
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;  ad_value        4   28[BANK0 ] unsigned long 
  2489 ;;  ad_buff         2   33[BANK0 ] unsigned int 
  2490 ;;  reg_val         2   22[BANK0 ] unsigned char [2]
  2491 ;;  ad_value_max    2   26[BANK0 ] unsigned int 
  2492 ;;  ad_value_min    2   24[BANK0 ] unsigned int 
  2493 ;;  ret             2   20[BANK0 ] int 
  2494 ;;  get_ad_times    1   32[BANK0 ] unsigned char 
  2495 ;; Return value:  Size  Location     Type
  2496 ;;                  2   13[BANK0 ] unsigned int 
  2497 ;; Registers used:
  2498 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2499 ;; Tracked objects:
  2500 ;;		On entry : 0/0
  2501 ;;		On exit  : 0/0
  2502 ;;		Unchanged: 0/0
  2503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2504 ;;      Params:         0       2       0       0
  2505 ;;      Locals:         0      15       0       0
  2506 ;;      Temps:          0       5       0       0
  2507 ;;      Totals:         0      22       0       0
  2508 ;;Total ram usage:       22 bytes
  2509 ;; Hardware stack levels used:    1
  2510 ;; Hardware stack levels required when called:    4
  2511 ;; This function calls:
  2512 ;;		___lldiv
  2513 ;;		___lmul
  2514 ;;		_cw_read_word
  2515 ;; This function is called by:
  2516 ;;		_update_vol
  2517 ;; This function uses a non-reentrant model
  2518 ;;
  2519                           
  2520                           
  2521                           ;psect for function _cw_get_vol
  2522  0648                     _cw_get_vol:	
  2523                           
  2524                           ;CW201x.c: 436: int ret = 0;
  2525                           
  2526                           ;incstack = 0
  2527                           ; Regs used in _cw_get_vol: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2528  0648  0140               	movlb	0	; select bank0
  2529  0649  01B4               	clrf	cw_get_vol@ret
  2530  064A  01B5               	clrf	cw_get_vol@ret+1
  2531                           
  2532                           ;CW201x.c: 437: unsigned char get_ad_times = 0;
  2533  064B  01C0               	clrf	cw_get_vol@get_ad_times
  2534                           
  2535                           ;CW201x.c: 438: unsigned char reg_val[2] = {0 , 0};
  2536  064C  084E               	movf	cw_get_vol@F80+1,w
  2537  064D  00B7               	movwf	cw_get_vol@reg_val+1
  2538  064E  084D               	movf	cw_get_vol@F80,w
  2539  064F  00B6               	movwf	cw_get_vol@reg_val
  2540                           
  2541                           ;CW201x.c: 439: unsigned long ad_value = 0;
  2542  0650  3000               	movlw	0
  2543  0651  00BF               	movwf	cw_get_vol@ad_value+3
  2544  0652  3000               	movlw	0
  2545  0653  00BE               	movwf	cw_get_vol@ad_value+2
  2546  0654  3000               	movlw	0
  2547  0655  00BD               	movwf	cw_get_vol@ad_value+1
  2548  0656  3000               	movlw	0
  2549  0657  00BC               	movwf	cw_get_vol@ad_value
  2550                           
  2551                           ;CW201x.c: 440: unsigned int ad_buff = 0;
  2552  0658  01C1               	clrf	cw_get_vol@ad_buff
  2553  0659  01C2               	clrf	cw_get_vol@ad_buff+1
  2554                           
  2555                           ;CW201x.c: 441: unsigned int ad_value_min = 0;
  2556  065A  01B8               	clrf	cw_get_vol@ad_value_min
  2557  065B  01B9               	clrf	cw_get_vol@ad_value_min+1
  2558                           
  2559                           ;CW201x.c: 442: unsigned int ad_value_max = 0;
  2560  065C  01BA               	clrf	cw_get_vol@ad_value_max
  2561  065D  01BB               	clrf	cw_get_vol@ad_value_max+1
  2562                           
  2563                           ;CW201x.c: 444: for(get_ad_times = 0; get_ad_times < 3; get_ad_times++)
  2564  065E  01C0               	clrf	cw_get_vol@get_ad_times
  2565  065F  3003               	movlw	3
  2566  0660  0240               	subwf	cw_get_vol@get_ad_times,w
  2567  0661  1803               	btfsc	3,0
  2568  0662  2EBC               	goto	l2249
  2569  0663                     l2229:	
  2570                           
  2571                           ;CW201x.c: 445: {
  2572                           ;CW201x.c: 446: ret = cw_read_word(0x2, &reg_val[0],2);
  2573  0663  3036               	movlw	(low (cw_get_vol@reg_val| 0))& (0+255)
  2574  0664  00AF               	movwf	??_cw_get_vol
  2575  0665  082F               	movf	??_cw_get_vol,w
  2576  0666  00A4               	movwf	cw_read_word@r_pdata
  2577  0667  3002               	movlw	2
  2578  0668  00A5               	movwf	cw_read_word@length
  2579  0669  3000               	movlw	0
  2580  066A  00A6               	movwf	cw_read_word@length+1
  2581  066B  3002               	movlw	2
  2582  066C  2522               	fcall	_cw_read_word
  2583  066D  0140               	movlb	0	; select bank0
  2584  066E  0825               	movf	?_cw_read_word+1,w
  2585  066F  00B5               	movwf	cw_get_vol@ret+1
  2586  0670  0824               	movf	?_cw_read_word,w
  2587  0671  00B4               	movwf	cw_get_vol@ret
  2588                           
  2589                           ;CW201x.c: 447: if(ret)
  2590  0672  0834               	movf	cw_get_vol@ret,w
  2591  0673  0435               	iorwf	cw_get_vol@ret+1,w
  2592  0674  1903               	btfsc	3,2
  2593  0675  2E7B               	goto	l2237
  2594                           
  2595                           ;CW201x.c: 448: {
  2596                           ;CW201x.c: 449: return 1;
  2597  0676  3001               	movlw	1
  2598  0677  00AD               	movwf	?_cw_get_vol
  2599  0678  3000               	movlw	0
  2600  0679  00AE               	movwf	?_cw_get_vol+1
  2601  067A  0008               	return
  2602  067B                     l2237:	
  2603                           
  2604                           ;CW201x.c: 450: }
  2605                           ;CW201x.c: 451: ad_buff = (reg_val[0] << 8) + reg_val[1];
  2606  067B  0837               	movf	cw_get_vol@reg_val+1,w
  2607  067C  00AF               	movwf	??_cw_get_vol
  2608  067D  01B0               	clrf	??_cw_get_vol+1
  2609  067E  0836               	movf	cw_get_vol@reg_val,w
  2610  067F  00B1               	movwf	??_cw_get_vol+2
  2611  0680  01B2               	clrf	??_cw_get_vol+3
  2612  0681  0831               	movf	??_cw_get_vol+2,w
  2613  0682  00B2               	movwf	??_cw_get_vol+3
  2614  0683  01B1               	clrf	??_cw_get_vol+2
  2615  0684  082F               	movf	??_cw_get_vol,w
  2616  0685  0731               	addwf	??_cw_get_vol+2,w
  2617  0686  00C1               	movwf	cw_get_vol@ad_buff
  2618  0687  0830               	movf	??_cw_get_vol+1,w
  2619  0688  3D32               	addwfc	??_cw_get_vol+3,w
  2620  0689  00C2               	movwf	cw_get_vol@ad_buff+1
  2621                           
  2622                           ;CW201x.c: 453: if(get_ad_times == 0)
  2623  068A  0840               	movf	cw_get_vol@get_ad_times,w
  2624  068B  1D03               	btfss	3,2
  2625  068C  2E95               	goto	l277
  2626                           
  2627                           ;CW201x.c: 454: {
  2628                           ;CW201x.c: 455: ad_value_min = ad_buff;
  2629  068D  0842               	movf	cw_get_vol@ad_buff+1,w
  2630  068E  00B9               	movwf	cw_get_vol@ad_value_min+1
  2631  068F  0841               	movf	cw_get_vol@ad_buff,w
  2632  0690  00B8               	movwf	cw_get_vol@ad_value_min
  2633                           
  2634                           ;CW201x.c: 456: ad_value_max = ad_buff;
  2635  0691  0842               	movf	cw_get_vol@ad_buff+1,w
  2636  0692  00BB               	movwf	cw_get_vol@ad_value_max+1
  2637  0693  0841               	movf	cw_get_vol@ad_buff,w
  2638  0694  00BA               	movwf	cw_get_vol@ad_value_max
  2639  0695                     l277:	
  2640                           
  2641                           ;CW201x.c: 457: }
  2642                           ;CW201x.c: 458: if(ad_buff < ad_value_min)
  2643  0695  0839               	movf	cw_get_vol@ad_value_min+1,w
  2644  0696  0242               	subwf	cw_get_vol@ad_buff+1,w
  2645  0697  1D03               	skipz
  2646  0698  2E9B               	goto	u2065
  2647  0699  0838               	movf	cw_get_vol@ad_value_min,w
  2648  069A  0241               	subwf	cw_get_vol@ad_buff,w
  2649  069B                     u2065:	
  2650  069B  1803               	skipnc
  2651  069C  2EA1               	goto	l278
  2652                           
  2653                           ;CW201x.c: 459: {
  2654                           ;CW201x.c: 460: ad_value_min = ad_buff;
  2655  069D  0842               	movf	cw_get_vol@ad_buff+1,w
  2656  069E  00B9               	movwf	cw_get_vol@ad_value_min+1
  2657  069F  0841               	movf	cw_get_vol@ad_buff,w
  2658  06A0  00B8               	movwf	cw_get_vol@ad_value_min
  2659  06A1                     l278:	
  2660                           
  2661                           ;CW201x.c: 461: }
  2662                           ;CW201x.c: 462: if(ad_buff > ad_value_max)
  2663  06A1  0842               	movf	cw_get_vol@ad_buff+1,w
  2664  06A2  023B               	subwf	cw_get_vol@ad_value_max+1,w
  2665  06A3  1D03               	skipz
  2666  06A4  2EA7               	goto	u2075
  2667  06A5  0841               	movf	cw_get_vol@ad_buff,w
  2668  06A6  023A               	subwf	cw_get_vol@ad_value_max,w
  2669  06A7                     u2075:	
  2670  06A7  1803               	skipnc
  2671  06A8  2EAD               	goto	l279
  2672                           
  2673                           ;CW201x.c: 463: {
  2674                           ;CW201x.c: 464: ad_value_max = ad_buff;
  2675  06A9  0842               	movf	cw_get_vol@ad_buff+1,w
  2676  06AA  00BB               	movwf	cw_get_vol@ad_value_max+1
  2677  06AB  0841               	movf	cw_get_vol@ad_buff,w
  2678  06AC  00BA               	movwf	cw_get_vol@ad_value_max
  2679  06AD                     l279:	
  2680                           
  2681                           ;CW201x.c: 465: }
  2682                           ;CW201x.c: 466: ad_value += ad_buff;
  2683  06AD  0841               	movf	cw_get_vol@ad_buff,w
  2684  06AE  07BC               	addwf	cw_get_vol@ad_value,f
  2685  06AF  0842               	movf	cw_get_vol@ad_buff+1,w
  2686  06B0  3DBD               	addwfc	cw_get_vol@ad_value+1,f
  2687  06B1  3000               	movlw	0
  2688  06B2  3DBE               	addwfc	cw_get_vol@ad_value+2,f
  2689  06B3  3DBF               	addwfc	cw_get_vol@ad_value+3,f
  2690  06B4  3001               	movlw	1
  2691  06B5  00AF               	movwf	??_cw_get_vol
  2692  06B6  082F               	movf	??_cw_get_vol,w
  2693  06B7  07C0               	addwf	cw_get_vol@get_ad_times,f
  2694  06B8  3003               	movlw	3
  2695  06B9  0240               	subwf	cw_get_vol@get_ad_times,w
  2696  06BA  1C03               	skipc
  2697  06BB  2E63               	goto	l2229
  2698  06BC                     l2249:	
  2699                           
  2700                           ;CW201x.c: 467: }
  2701                           ;CW201x.c: 468: ad_value -= ad_value_min;
  2702  06BC  0838               	movf	cw_get_vol@ad_value_min,w
  2703  06BD  00AF               	movwf	??_cw_get_vol
  2704  06BE  0839               	movf	cw_get_vol@ad_value_min+1,w
  2705  06BF  00B0               	movwf	??_cw_get_vol+1
  2706  06C0  01B1               	clrf	??_cw_get_vol+2
  2707  06C1  01B2               	clrf	??_cw_get_vol+3
  2708  06C2  082F               	movf	??_cw_get_vol,w
  2709  06C3  02BC               	subwf	cw_get_vol@ad_value,f
  2710  06C4  0830               	movf	??_cw_get_vol+1,w
  2711  06C5  3BBD               	subwfb	cw_get_vol@ad_value+1,f
  2712  06C6  0831               	movf	??_cw_get_vol+2,w
  2713  06C7  3BBE               	subwfb	cw_get_vol@ad_value+2,f
  2714  06C8  0832               	movf	??_cw_get_vol+3,w
  2715  06C9  3BBF               	subwfb	cw_get_vol@ad_value+3,f
  2716                           
  2717                           ;CW201x.c: 469: ad_value -= ad_value_max;
  2718  06CA  083A               	movf	cw_get_vol@ad_value_max,w
  2719  06CB  00AF               	movwf	??_cw_get_vol
  2720  06CC  083B               	movf	cw_get_vol@ad_value_max+1,w
  2721  06CD  00B0               	movwf	??_cw_get_vol+1
  2722  06CE  01B1               	clrf	??_cw_get_vol+2
  2723  06CF  01B2               	clrf	??_cw_get_vol+3
  2724  06D0  082F               	movf	??_cw_get_vol,w
  2725  06D1  02BC               	subwf	cw_get_vol@ad_value,f
  2726  06D2  0830               	movf	??_cw_get_vol+1,w
  2727  06D3  3BBD               	subwfb	cw_get_vol@ad_value+1,f
  2728  06D4  0831               	movf	??_cw_get_vol+2,w
  2729  06D5  3BBE               	subwfb	cw_get_vol@ad_value+2,f
  2730  06D6  0832               	movf	??_cw_get_vol+3,w
  2731  06D7  3BBF               	subwfb	cw_get_vol@ad_value+3,f
  2732                           
  2733                           ;CW201x.c: 470: ad_value = (ad_value * 305 + 50000) / 100000;
  2734  06D8  3000               	movlw	0
  2735  06D9  00A3               	movwf	___lldiv@divisor+3
  2736  06DA  3001               	movlw	1
  2737  06DB  00A2               	movwf	___lldiv@divisor+2
  2738  06DC  3086               	movlw	134
  2739  06DD  00A1               	movwf	___lldiv@divisor+1
  2740  06DE  30A0               	movlw	160
  2741  06DF  00A0               	movwf	___lldiv@divisor
  2742  06E0  3050               	movlw	80
  2743  06E1  00AF               	movwf	??_cw_get_vol
  2744  06E2  30C3               	movlw	195
  2745  06E3  00B0               	movwf	??_cw_get_vol+1
  2746  06E4  3000               	movlw	0
  2747  06E5  00B1               	movwf	??_cw_get_vol+2
  2748  06E6  3000               	movlw	0
  2749  06E7  00B2               	movwf	??_cw_get_vol+3
  2750  06E8  083F               	movf	cw_get_vol@ad_value+3,w
  2751  06E9  00F3               	movwf	___lmul@multiplier+3
  2752  06EA  083E               	movf	cw_get_vol@ad_value+2,w
  2753  06EB  00F2               	movwf	___lmul@multiplier+2
  2754  06EC  083D               	movf	cw_get_vol@ad_value+1,w
  2755  06ED  00F1               	movwf	___lmul@multiplier+1
  2756  06EE  083C               	movf	cw_get_vol@ad_value,w
  2757  06EF  00F0               	movwf	___lmul@multiplier
  2758  06F0  3000               	movlw	0
  2759  06F1  00F7               	movwf	___lmul@multiplicand+3
  2760  06F2  3000               	movlw	0
  2761  06F3  00F6               	movwf	___lmul@multiplicand+2
  2762  06F4  3001               	movlw	1
  2763  06F5  00F5               	movwf	___lmul@multiplicand+1
  2764  06F6  3031               	movlw	49
  2765  06F7  00F4               	movwf	___lmul@multiplicand
  2766  06F8  22A9               	fcall	___lmul
  2767  06F9  0870               	movf	?___lmul,w
  2768  06FA  0140               	movlb	0	; select bank0
  2769  06FB  07AF               	addwf	??_cw_get_vol,f
  2770  06FC  0871               	movf	?___lmul+1,w
  2771  06FD  3DB0               	addwfc	??_cw_get_vol+1,f
  2772  06FE  0872               	movf	?___lmul+2,w
  2773  06FF  3DB1               	addwfc	??_cw_get_vol+2,f
  2774  0700  0873               	movf	?___lmul+3,w
  2775  0701  3DB2               	addwfc	??_cw_get_vol+3,f
  2776  0702  0832               	movf	??_cw_get_vol+3,w
  2777  0703  00A7               	movwf	___lldiv@dividend+3
  2778  0704  0831               	movf	??_cw_get_vol+2,w
  2779  0705  00A6               	movwf	___lldiv@dividend+2
  2780  0706  0830               	movf	??_cw_get_vol+1,w
  2781  0707  00A5               	movwf	___lldiv@dividend+1
  2782  0708  082F               	movf	??_cw_get_vol,w
  2783  0709  00A4               	movwf	___lldiv@dividend
  2784  070A  24CF               	fcall	___lldiv
  2785  070B  0140               	movlb	0	; select bank0
  2786  070C  0823               	movf	?___lldiv+3,w
  2787  070D  00BF               	movwf	cw_get_vol@ad_value+3
  2788  070E  0822               	movf	?___lldiv+2,w
  2789  070F  00BE               	movwf	cw_get_vol@ad_value+2
  2790  0710  0821               	movf	?___lldiv+1,w
  2791  0711  00BD               	movwf	cw_get_vol@ad_value+1
  2792  0712  0820               	movf	?___lldiv,w
  2793  0713  00BC               	movwf	cw_get_vol@ad_value
  2794                           
  2795                           ;CW201x.c: 471: return(ad_value);
  2796  0714  083D               	movf	cw_get_vol@ad_value+1,w
  2797  0715  00AE               	movwf	?_cw_get_vol+1
  2798  0716  083C               	movf	cw_get_vol@ad_value,w
  2799  0717  00AD               	movwf	?_cw_get_vol
  2800  0718  0008               	return
  2801  0719                     __end_of_cw_get_vol:	
  2802                           
  2803                           	psect	text4
  2804  0522                     __ptext4:	
  2805 ;; *************** function _cw_read_word *****************
  2806 ;; Defined at:
  2807 ;;		line 189 in file "iic.c"
  2808 ;; Parameters:    Size  Location     Type
  2809 ;;  point_reg       1    wreg     unsigned char 
  2810 ;;  r_pdata         1    4[BANK0 ] PTR unsigned char 
  2811 ;;		 -> cw_get_vol@reg_val(2), 
  2812 ;;  length          2    5[BANK0 ] unsigned int 
  2813 ;; Auto vars:     Size  Location     Type
  2814 ;;  point_reg       1    7[BANK0 ] unsigned char 
  2815 ;;  count           1    8[BANK0 ] unsigned char 
  2816 ;; Return value:  Size  Location     Type
  2817 ;;                  2    4[BANK0 ] int 
  2818 ;; Registers used:
  2819 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2820 ;; Tracked objects:
  2821 ;;		On entry : 0/0
  2822 ;;		On exit  : 0/0
  2823 ;;		Unchanged: 0/0
  2824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2825 ;;      Params:         0       3       0       0
  2826 ;;      Locals:         0       2       0       0
  2827 ;;      Temps:          2       0       0       0
  2828 ;;      Totals:         2       5       0       0
  2829 ;;Total ram usage:        7 bytes
  2830 ;; Hardware stack levels used:    1
  2831 ;; Hardware stack levels required when called:    3
  2832 ;; This function calls:
  2833 ;;		_read_byte
  2834 ;;		_s_ack
  2835 ;;		_sn_ack
  2836 ;;		_start
  2837 ;;		_stop
  2838 ;;		_wait_r_ack
  2839 ;;		_write_byte
  2840 ;; This function is called by:
  2841 ;;		_cw_get_vol
  2842 ;; This function uses a non-reentrant model
  2843 ;;
  2844                           
  2845                           
  2846                           ;psect for function _cw_read_word
  2847  0522                     _cw_read_word:	
  2848                           
  2849                           ;incstack = 0
  2850                           ; Regs used in _cw_read_word: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2851                           ;cw_read_word@point_reg stored from wreg
  2852  0522  0140               	movlb	0	; select bank0
  2853  0523  00A7               	movwf	cw_read_word@point_reg
  2854                           
  2855                           ;iic.c: 191: unsigned char count;
  2856                           ;iic.c: 193: start();
  2857  0524  2134               	fcall	_start
  2858                           
  2859                           ;iic.c: 194: write_byte(0xc4);
  2860  0525  30C4               	movlw	196
  2861  0526  21B7               	fcall	_write_byte
  2862                           
  2863                           ;iic.c: 195: if(wait_r_ack())
  2864  0527  22D8               	fcall	_wait_r_ack
  2865  0528  087A               	movf	?_wait_r_ack,w
  2866  0529  047B               	iorwf	?_wait_r_ack+1,w
  2867  052A  1903               	btfsc	3,2
  2868  052B  2D32               	goto	l2111
  2869                           
  2870                           ;iic.c: 196: {
  2871                           ;iic.c: 197: return 1;
  2872  052C  3001               	movlw	1
  2873  052D  0140               	movlb	0	; select bank0
  2874  052E  00A4               	movwf	?_cw_read_word
  2875  052F  3000               	movlw	0
  2876  0530  00A5               	movwf	?_cw_read_word+1
  2877  0531  0008               	return
  2878  0532                     l2111:	
  2879                           
  2880                           ;iic.c: 198: }
  2881                           ;iic.c: 199: write_byte(point_reg);
  2882  0532  0140               	movlb	0	; select bank0
  2883  0533  0827               	movf	cw_read_word@point_reg,w
  2884  0534  21B7               	fcall	_write_byte
  2885                           
  2886                           ;iic.c: 200: if(wait_r_ack())
  2887  0535  22D8               	fcall	_wait_r_ack
  2888  0536  087A               	movf	?_wait_r_ack,w
  2889  0537  047B               	iorwf	?_wait_r_ack+1,w
  2890  0538  1903               	btfsc	3,2
  2891  0539  2D40               	goto	l2117
  2892                           
  2893                           ;iic.c: 201: {
  2894                           ;iic.c: 202: return 1;
  2895  053A  3001               	movlw	1
  2896  053B  0140               	movlb	0	; select bank0
  2897  053C  00A4               	movwf	?_cw_read_word
  2898  053D  3000               	movlw	0
  2899  053E  00A5               	movwf	?_cw_read_word+1
  2900  053F  0008               	return
  2901  0540                     l2117:	
  2902                           
  2903                           ;iic.c: 203: }
  2904                           ;iic.c: 204: start();
  2905  0540  2134               	fcall	_start
  2906                           
  2907                           ;iic.c: 205: write_byte(0xc5);
  2908  0541  30C5               	movlw	197
  2909  0542  21B7               	fcall	_write_byte
  2910                           
  2911                           ;iic.c: 206: if(wait_r_ack())
  2912  0543  22D8               	fcall	_wait_r_ack
  2913  0544  087A               	movf	?_wait_r_ack,w
  2914  0545  047B               	iorwf	?_wait_r_ack+1,w
  2915  0546  1903               	btfsc	3,2
  2916  0547  2D4E               	goto	l2123
  2917                           
  2918                           ;iic.c: 207: {
  2919                           ;iic.c: 208: return 1;
  2920  0548  3001               	movlw	1
  2921  0549  0140               	movlb	0	; select bank0
  2922  054A  00A4               	movwf	?_cw_read_word
  2923  054B  3000               	movlw	0
  2924  054C  00A5               	movwf	?_cw_read_word+1
  2925  054D  0008               	return
  2926  054E                     l2123:	
  2927                           
  2928                           ;iic.c: 209: }
  2929                           ;iic.c: 210: for(count = 0; count < length; count++ ){
  2930  054E  0140               	movlb	0	; select bank0
  2931  054F  01A8               	clrf	cw_read_word@count
  2932  0550                     l2135:	
  2933  0550  0828               	movf	cw_read_word@count,w
  2934  0551  00FC               	movwf	??_cw_read_word
  2935  0552  01FD               	clrf	??_cw_read_word+1
  2936  0553  0826               	movf	cw_read_word@length+1,w
  2937  0554  027D               	subwf	??_cw_read_word+1,w
  2938  0555  1D03               	skipz
  2939  0556  2D59               	goto	u1875
  2940  0557  0825               	movf	cw_read_word@length,w
  2941  0558  027C               	subwf	??_cw_read_word,w
  2942  0559                     u1875:	
  2943  0559  1803               	btfsc	3,0
  2944  055A  2D7D               	goto	l2137
  2945                           
  2946                           ;iic.c: 211: *r_pdata = read_byte();
  2947  055B  2258               	fcall	_read_byte
  2948  055C  00FC               	movwf	??_cw_read_word
  2949  055D  0140               	movlb	0	; select bank0
  2950  055E  0824               	movf	cw_read_word@r_pdata,w
  2951  055F  0086               	movwf	6
  2952  0560  0187               	clrf	7
  2953  0561  087C               	movf	??_cw_read_word,w
  2954  0562  0081               	movwf	1
  2955                           
  2956                           ;iic.c: 212: if(count + 1 < length){
  2957  0563  0828               	movf	cw_read_word@count,w
  2958  0564  3E01               	addlw	1
  2959  0565  00FC               	movwf	??_cw_read_word
  2960  0566  3000               	movlw	0
  2961  0567  1803               	skipnc
  2962  0568  3001               	movlw	1
  2963  0569  00FD               	movwf	??_cw_read_word+1
  2964  056A  0826               	movf	cw_read_word@length+1,w
  2965  056B  027D               	subwf	??_cw_read_word+1,w
  2966  056C  1D03               	skipz
  2967  056D  2D70               	goto	u1865
  2968  056E  0825               	movf	cw_read_word@length,w
  2969  056F  027C               	subwf	??_cw_read_word,w
  2970  0570                     u1865:	
  2971  0570  1803               	skipnc
  2972  0571  2D77               	goto	l2133
  2973                           
  2974                           ;iic.c: 213: r_pdata++;
  2975  0572  3001               	movlw	1
  2976  0573  00FC               	movwf	??_cw_read_word
  2977  0574  087C               	movf	??_cw_read_word,w
  2978  0575  07A4               	addwf	cw_read_word@r_pdata,f
  2979                           
  2980                           ;iic.c: 214: sn_ack();
  2981  0576  2163               	fcall	_sn_ack
  2982  0577                     l2133:	
  2983  0577  3001               	movlw	1
  2984  0578  00FC               	movwf	??_cw_read_word
  2985  0579  087C               	movf	??_cw_read_word,w
  2986  057A  0140               	movlb	0	; select bank0
  2987  057B  07A8               	addwf	cw_read_word@count,f
  2988  057C  2D50               	goto	l2135
  2989  057D                     l2137:	
  2990                           
  2991                           ;iic.c: 215: }
  2992                           ;iic.c: 216: }
  2993                           ;iic.c: 217: s_ack();
  2994  057D  2129               	fcall	_s_ack
  2995                           
  2996                           ;iic.c: 218: stop();
  2997  057E  2157               	fcall	_stop
  2998                           
  2999                           ;iic.c: 219: return 0;
  3000  057F  0140               	movlb	0	; select bank0
  3001  0580  01A4               	clrf	?_cw_read_word
  3002  0581  01A5               	clrf	?_cw_read_word+1
  3003  0582  0008               	return
  3004  0583                     __end_of_cw_read_word:	
  3005                           
  3006                           	psect	text5
  3007  0163                     __ptext5:	
  3008 ;; *************** function _sn_ack *****************
  3009 ;; Defined at:
  3010 ;;		line 113 in file "iic.c"
  3011 ;; Parameters:    Size  Location     Type
  3012 ;;		None
  3013 ;; Auto vars:     Size  Location     Type
  3014 ;;		None
  3015 ;; Return value:  Size  Location     Type
  3016 ;;                  1    wreg      void 
  3017 ;; Registers used:
  3018 ;;		wreg, status,2, status,0, pclath, cstack
  3019 ;; Tracked objects:
  3020 ;;		On entry : 0/0
  3021 ;;		On exit  : 0/0
  3022 ;;		Unchanged: 0/0
  3023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3024 ;;      Params:         0       0       0       0
  3025 ;;      Locals:         0       0       0       0
  3026 ;;      Temps:          0       0       0       0
  3027 ;;      Totals:         0       0       0       0
  3028 ;;Total ram usage:        0 bytes
  3029 ;; Hardware stack levels used:    1
  3030 ;; Hardware stack levels required when called:    1
  3031 ;; This function calls:
  3032 ;;		_Delay10us
  3033 ;; This function is called by:
  3034 ;;		_cw_read_word
  3035 ;; This function uses a non-reentrant model
  3036 ;;
  3037                           
  3038                           
  3039                           ;psect for function _sn_ack
  3040  0163                     _sn_ack:	
  3041                           
  3042                           ;incstack = 0
  3043                           ; Regs used in _sn_ack: [wreg+status,2+status,0+pclath+cstack]
  3044                           ;iic.c: 115: do { TRISCbits.TRISC1 = 0; } while(0);
  3045  0163  0140               	movlb	0	; select bank0
  3046  0164  1094               	bcf	20,1	;volatile
  3047                           
  3048                           ;iic.c: 116: do { LATCbits.LATC1 = 0; } while(0);
  3049  0165  109A               	bcf	26,1	;volatile
  3050                           
  3051                           ;iic.c: 117: Delay10us();
  3052  0166  21F6               	fcall	_Delay10us
  3053                           
  3054                           ;iic.c: 118: do { LATCbits.LATC0 = 1; } while(0);
  3055  0167  0140               	movlb	0	; select bank0
  3056  0168  141A               	bsf	26,0	;volatile
  3057                           
  3058                           ;iic.c: 119: Delay10us();
  3059  0169  21F6               	fcall	_Delay10us
  3060                           
  3061                           ;iic.c: 120: do { LATCbits.LATC0 = 0; } while(0);
  3062  016A  0140               	movlb	0	; select bank0
  3063  016B  101A               	bcf	26,0	;volatile
  3064                           
  3065                           ;iic.c: 121: do { LATCbits.LATC1 = 1; } while(0);
  3066  016C  149A               	bsf	26,1	;volatile
  3067                           
  3068                           ;iic.c: 122: Delay10us();
  3069  016D  21F6               	fcall	_Delay10us
  3070  016E  0008               	return
  3071  016F                     __end_of_sn_ack:	
  3072                           
  3073                           	psect	text6
  3074  02A9                     __ptext6:	
  3075 ;; *************** function ___lmul *****************
  3076 ;; Defined at:
  3077 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul32.c"
  3078 ;; Parameters:    Size  Location     Type
  3079 ;;  multiplier      4    0[COMMON] unsigned long 
  3080 ;;  multiplicand    4    4[COMMON] unsigned long 
  3081 ;; Auto vars:     Size  Location     Type
  3082 ;;  product         4    8[COMMON] unsigned long 
  3083 ;; Return value:  Size  Location     Type
  3084 ;;                  4    0[COMMON] unsigned long 
  3085 ;; Registers used:
  3086 ;;		wreg, status,2, status,0
  3087 ;; Tracked objects:
  3088 ;;		On entry : 0/0
  3089 ;;		On exit  : 0/0
  3090 ;;		Unchanged: 0/0
  3091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3092 ;;      Params:         8       0       0       0
  3093 ;;      Locals:         4       0       0       0
  3094 ;;      Temps:          0       0       0       0
  3095 ;;      Totals:        12       0       0       0
  3096 ;;Total ram usage:       12 bytes
  3097 ;; Hardware stack levels used:    1
  3098 ;; This function calls:
  3099 ;;		Nothing
  3100 ;; This function is called by:
  3101 ;;		_cw_get_vol
  3102 ;; This function uses a non-reentrant model
  3103 ;;
  3104                           
  3105                           
  3106                           ;psect for function ___lmul
  3107  02A9                     ___lmul:	
  3108                           
  3109                           ;incstack = 0
  3110                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3111  02A9  3000               	movlw	0
  3112  02AA  00FB               	movwf	___lmul@product+3
  3113  02AB  3000               	movlw	0
  3114  02AC  00FA               	movwf	___lmul@product+2
  3115  02AD  3000               	movlw	0
  3116  02AE  00F9               	movwf	___lmul@product+1
  3117  02AF  3000               	movlw	0
  3118  02B0  00F8               	movwf	___lmul@product
  3119  02B1                     l2145:	
  3120  02B1  1C70               	btfss	___lmul@multiplier,0
  3121  02B2  2ABB               	goto	l2149
  3122  02B3  0874               	movf	___lmul@multiplicand,w
  3123  02B4  07F8               	addwf	___lmul@product,f
  3124  02B5  0875               	movf	___lmul@multiplicand+1,w
  3125  02B6  3DF9               	addwfc	___lmul@product+1,f
  3126  02B7  0876               	movf	___lmul@multiplicand+2,w
  3127  02B8  3DFA               	addwfc	___lmul@product+2,f
  3128  02B9  0877               	movf	___lmul@multiplicand+3,w
  3129  02BA  3DFB               	addwfc	___lmul@product+3,f
  3130  02BB                     l2149:	
  3131  02BB  3001               	movlw	1
  3132  02BC                     u1895:	
  3133  02BC  35F4               	lslf	___lmul@multiplicand,f
  3134  02BD  0DF5               	rlf	___lmul@multiplicand+1,f
  3135  02BE  0DF6               	rlf	___lmul@multiplicand+2,f
  3136  02BF  0DF7               	rlf	___lmul@multiplicand+3,f
  3137  02C0  0B89               	decfsz	9,f
  3138  02C1  2ABC               	goto	u1895
  3139  02C2  3001               	movlw	1
  3140  02C3                     u1905:	
  3141  02C3  36F3               	lsrf	___lmul@multiplier+3,f
  3142  02C4  0CF2               	rrf	___lmul@multiplier+2,f
  3143  02C5  0CF1               	rrf	___lmul@multiplier+1,f
  3144  02C6  0CF0               	rrf	___lmul@multiplier,f
  3145  02C7  0B89               	decfsz	9,f
  3146  02C8  2AC3               	goto	u1905
  3147  02C9  0873               	movf	___lmul@multiplier+3,w
  3148  02CA  0472               	iorwf	___lmul@multiplier+2,w
  3149  02CB  0471               	iorwf	___lmul@multiplier+1,w
  3150  02CC  0470               	iorwf	___lmul@multiplier,w
  3151  02CD  1D03               	skipz
  3152  02CE  2AB1               	goto	l2145
  3153  02CF  087B               	movf	___lmul@product+3,w
  3154  02D0  00F3               	movwf	?___lmul+3
  3155  02D1  087A               	movf	___lmul@product+2,w
  3156  02D2  00F2               	movwf	?___lmul+2
  3157  02D3  0879               	movf	___lmul@product+1,w
  3158  02D4  00F1               	movwf	?___lmul+1
  3159  02D5  0878               	movf	___lmul@product,w
  3160  02D6  00F0               	movwf	?___lmul
  3161  02D7  0008               	return
  3162  02D8                     __end_of___lmul:	
  3163                           
  3164                           	psect	text7
  3165  04CF                     __ptext7:	
  3166 ;; *************** function ___lldiv *****************
  3167 ;; Defined at:
  3168 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
  3169 ;; Parameters:    Size  Location     Type
  3170 ;;  divisor         4    0[BANK0 ] unsigned long 
  3171 ;;  dividend        4    4[BANK0 ] unsigned long 
  3172 ;; Auto vars:     Size  Location     Type
  3173 ;;  quotient        4    8[BANK0 ] unsigned long 
  3174 ;;  counter         1   12[BANK0 ] unsigned char 
  3175 ;; Return value:  Size  Location     Type
  3176 ;;                  4    0[BANK0 ] unsigned long 
  3177 ;; Registers used:
  3178 ;;		wreg, status,2, status,0
  3179 ;; Tracked objects:
  3180 ;;		On entry : 0/0
  3181 ;;		On exit  : 0/0
  3182 ;;		Unchanged: 0/0
  3183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3184 ;;      Params:         0       8       0       0
  3185 ;;      Locals:         0       5       0       0
  3186 ;;      Temps:          1       0       0       0
  3187 ;;      Totals:         1      13       0       0
  3188 ;;Total ram usage:       14 bytes
  3189 ;; Hardware stack levels used:    1
  3190 ;; This function calls:
  3191 ;;		Nothing
  3192 ;; This function is called by:
  3193 ;;		_cw_get_vol
  3194 ;; This function uses a non-reentrant model
  3195 ;;
  3196                           
  3197                           
  3198                           ;psect for function ___lldiv
  3199  04CF                     ___lldiv:	
  3200                           
  3201                           ;incstack = 0
  3202                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3203  04CF  3000               	movlw	0
  3204  04D0  0140               	movlb	0	; select bank0
  3205  04D1  00AB               	movwf	___lldiv@quotient+3
  3206  04D2  3000               	movlw	0
  3207  04D3  00AA               	movwf	___lldiv@quotient+2
  3208  04D4  3000               	movlw	0
  3209  04D5  00A9               	movwf	___lldiv@quotient+1
  3210  04D6  3000               	movlw	0
  3211  04D7  00A8               	movwf	___lldiv@quotient
  3212  04D8  0823               	movf	___lldiv@divisor+3,w
  3213  04D9  0422               	iorwf	___lldiv@divisor+2,w
  3214  04DA  0421               	iorwf	___lldiv@divisor+1,w
  3215  04DB  0420               	iorwf	___lldiv@divisor,w
  3216  04DC  1903               	skipnz
  3217  04DD  2D19               	goto	l2177
  3218  04DE  01AC               	clrf	___lldiv@counter
  3219  04DF  0AAC               	incf	___lldiv@counter,f
  3220  04E0                     l2163:	
  3221  04E0  1BA3               	btfsc	___lldiv@divisor+3,7
  3222  04E1  2CEE               	goto	l2165
  3223  04E2  3001               	movlw	1
  3224  04E3                     u1935:	
  3225  04E3  35A0               	lslf	___lldiv@divisor,f
  3226  04E4  0DA1               	rlf	___lldiv@divisor+1,f
  3227  04E5  0DA2               	rlf	___lldiv@divisor+2,f
  3228  04E6  0DA3               	rlf	___lldiv@divisor+3,f
  3229  04E7  0B89               	decfsz	9,f
  3230  04E8  2CE3               	goto	u1935
  3231  04E9  3001               	movlw	1
  3232  04EA  00FC               	movwf	??___lldiv
  3233  04EB  087C               	movf	??___lldiv,w
  3234  04EC  07AC               	addwf	___lldiv@counter,f
  3235  04ED  2CE0               	goto	l2163
  3236  04EE                     l2165:	
  3237  04EE  3001               	movlw	1
  3238  04EF                     u1955:	
  3239  04EF  35A8               	lslf	___lldiv@quotient,f
  3240  04F0  0DA9               	rlf	___lldiv@quotient+1,f
  3241  04F1  0DAA               	rlf	___lldiv@quotient+2,f
  3242  04F2  0DAB               	rlf	___lldiv@quotient+3,f
  3243  04F3  0B89               	decfsz	9,f
  3244  04F4  2CEF               	goto	u1955
  3245  04F5  0823               	movf	___lldiv@divisor+3,w
  3246  04F6  0227               	subwf	___lldiv@dividend+3,w
  3247  04F7  1D03               	skipz
  3248  04F8  2D03               	goto	u1965
  3249  04F9  0822               	movf	___lldiv@divisor+2,w
  3250  04FA  0226               	subwf	___lldiv@dividend+2,w
  3251  04FB  1D03               	skipz
  3252  04FC  2D03               	goto	u1965
  3253  04FD  0821               	movf	___lldiv@divisor+1,w
  3254  04FE  0225               	subwf	___lldiv@dividend+1,w
  3255  04FF  1D03               	skipz
  3256  0500  2D03               	goto	u1965
  3257  0501  0820               	movf	___lldiv@divisor,w
  3258  0502  0224               	subwf	___lldiv@dividend,w
  3259  0503                     u1965:	
  3260  0503  1C03               	skipc
  3261  0504  2D0E               	goto	l2173
  3262  0505  0820               	movf	___lldiv@divisor,w
  3263  0506  02A4               	subwf	___lldiv@dividend,f
  3264  0507  0821               	movf	___lldiv@divisor+1,w
  3265  0508  3BA5               	subwfb	___lldiv@dividend+1,f
  3266  0509  0822               	movf	___lldiv@divisor+2,w
  3267  050A  3BA6               	subwfb	___lldiv@dividend+2,f
  3268  050B  0823               	movf	___lldiv@divisor+3,w
  3269  050C  3BA7               	subwfb	___lldiv@dividend+3,f
  3270  050D  1428               	bsf	___lldiv@quotient,0
  3271  050E                     l2173:	
  3272  050E  3001               	movlw	1
  3273  050F                     u1975:	
  3274  050F  36A3               	lsrf	___lldiv@divisor+3,f
  3275  0510  0CA2               	rrf	___lldiv@divisor+2,f
  3276  0511  0CA1               	rrf	___lldiv@divisor+1,f
  3277  0512  0CA0               	rrf	___lldiv@divisor,f
  3278  0513  0B89               	decfsz	9,f
  3279  0514  2D0F               	goto	u1975
  3280  0515  3001               	movlw	1
  3281  0516  02AC               	subwf	___lldiv@counter,f
  3282  0517  1D03               	btfss	3,2
  3283  0518  2CEE               	goto	l2165
  3284  0519                     l2177:	
  3285  0519  082B               	movf	___lldiv@quotient+3,w
  3286  051A  00A3               	movwf	?___lldiv+3
  3287  051B  082A               	movf	___lldiv@quotient+2,w
  3288  051C  00A2               	movwf	?___lldiv+2
  3289  051D  0829               	movf	___lldiv@quotient+1,w
  3290  051E  00A1               	movwf	?___lldiv+1
  3291  051F  0828               	movf	___lldiv@quotient,w
  3292  0520  00A0               	movwf	?___lldiv
  3293  0521  0008               	return
  3294  0522                     __end_of___lldiv:	
  3295                           
  3296                           	psect	text8
  3297  0120                     __ptext8:	
  3298 ;; *************** function _update_usb_online *****************
  3299 ;; Defined at:
  3300 ;;		line 544 in file "CW201x.c"
  3301 ;; Parameters:    Size  Location     Type
  3302 ;;		None
  3303 ;; Auto vars:     Size  Location     Type
  3304 ;;		None
  3305 ;; Return value:  Size  Location     Type
  3306 ;;                  1    wreg      void 
  3307 ;; Registers used:
  3308 ;;		wreg, status,2, status,0
  3309 ;; Tracked objects:
  3310 ;;		On entry : 0/0
  3311 ;;		On exit  : 0/0
  3312 ;;		Unchanged: 0/0
  3313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3314 ;;      Params:         0       0       0       0
  3315 ;;      Locals:         0       0       0       0
  3316 ;;      Temps:          0       0       0       0
  3317 ;;      Totals:         0       0       0       0
  3318 ;;Total ram usage:        0 bytes
  3319 ;; Hardware stack levels used:    1
  3320 ;; This function calls:
  3321 ;;		Nothing
  3322 ;; This function is called by:
  3323 ;;		_cw_bat_work
  3324 ;; This function uses a non-reentrant model
  3325 ;;
  3326                           
  3327                           
  3328                           ;psect for function _update_usb_online
  3329  0120                     _update_usb_online:	
  3330                           
  3331                           ;CW201x.c: 546: if(CHARGE == 1)
  3332                           
  3333                           ;incstack = 0
  3334                           ; Regs used in _update_usb_online: [wreg+status,2+status,0]
  3335  0120  0140               	movlb	0	; select bank0
  3336  0121  0350               	decf	_CHARGE,w
  3337  0122  1D03               	btfss	3,2
  3338  0123  2927               	goto	l2321
  3339                           
  3340                           ;CW201x.c: 547: {
  3341                           ;CW201x.c: 548: cw_bat.usb_online = 1;
  3342  0124  01C7               	clrf	_cw_bat
  3343  0125  0AC7               	incf	_cw_bat,f
  3344                           
  3345                           ;CW201x.c: 549: }else{
  3346  0126  0008               	return
  3347  0127                     l2321:	
  3348                           
  3349                           ;CW201x.c: 550: cw_bat.usb_online = 0;
  3350  0127  01C7               	clrf	_cw_bat
  3351  0128  0008               	return
  3352  0129                     __end_of_update_usb_online:	
  3353                           
  3354                           	psect	text9
  3355  0237                     __ptext9:	
  3356 ;; *************** function _update_capacity *****************
  3357 ;; Defined at:
  3358 ;;		line 497 in file "CW201x.c"
  3359 ;; Parameters:    Size  Location     Type
  3360 ;;		None
  3361 ;; Auto vars:     Size  Location     Type
  3362 ;;  cw_capacity     2   35[BANK0 ] int 
  3363 ;; Return value:  Size  Location     Type
  3364 ;;                  1    wreg      void 
  3365 ;; Registers used:
  3366 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3367 ;; Tracked objects:
  3368 ;;		On entry : 0/0
  3369 ;;		On exit  : 0/0
  3370 ;;		Unchanged: 0/0
  3371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3372 ;;      Params:         0       0       0       0
  3373 ;;      Locals:         0       2       0       0
  3374 ;;      Temps:          0       1       0       0
  3375 ;;      Totals:         0       3       0       0
  3376 ;;Total ram usage:        3 bytes
  3377 ;; Hardware stack levels used:    1
  3378 ;; Hardware stack levels required when called:    8
  3379 ;; This function calls:
  3380 ;;		_cw_get_capacity
  3381 ;; This function is called by:
  3382 ;;		_cw_bat_work
  3383 ;; This function uses a non-reentrant model
  3384 ;;
  3385                           
  3386                           
  3387                           ;psect for function _update_capacity
  3388  0237                     _update_capacity:	
  3389                           
  3390                           ;CW201x.c: 499: int cw_capacity;
  3391                           ;CW201x.c: 500: cw_capacity = cw_get_capacity();
  3392                           
  3393                           ;incstack = 0
  3394                           ; Regs used in _update_capacity: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3395  0237  23F4               	fcall	_cw_get_capacity
  3396  0238  0140               	movlb	0	; select bank0
  3397  0239  083B               	movf	?_cw_get_capacity+1,w
  3398  023A  00C4               	movwf	update_capacity@cw_capacity+1
  3399  023B  083A               	movf	?_cw_get_capacity,w
  3400  023C  00C3               	movwf	update_capacity@cw_capacity
  3401                           
  3402                           ;CW201x.c: 501: if((cw_capacity >= 0) && (cw_capacity <= 100) && (cw_bat.capacity != cw_
      +                          capacity))
  3403  023D  1BC4               	btfsc	update_capacity@cw_capacity+1,7
  3404  023E  0008               	return
  3405  023F  0844               	movf	update_capacity@cw_capacity+1,w
  3406  0240  3A80               	xorlw	128
  3407  0241  00C2               	movwf	??_update_capacity
  3408  0242  3080               	movlw	128
  3409  0243  0242               	subwf	??_update_capacity,w
  3410  0244  1D03               	skipz
  3411  0245  2A48               	goto	u2135
  3412  0246  3065               	movlw	101
  3413  0247  0243               	subwf	update_capacity@cw_capacity,w
  3414  0248                     u2135:	
  3415  0248  1803               	skipnc
  3416  0249  0008               	return
  3417  024A  0140               	movlb	0	; select bank0
  3418  024B  0844               	movf	update_capacity@cw_capacity+1,w
  3419  024C  0649               	xorwf	_cw_bat+2,w
  3420  024D  1D03               	skipz
  3421  024E  2A51               	goto	u2145
  3422  024F  0843               	movf	update_capacity@cw_capacity,w
  3423  0250  0648               	xorwf	_cw_bat+1,w
  3424  0251                     u2145:	
  3425  0251  1903               	skipnz
  3426  0252  0008               	return
  3427                           
  3428                           ;CW201x.c: 502: {
  3429                           ;CW201x.c: 503: cw_bat.capacity = cw_capacity;
  3430  0253  0844               	movf	update_capacity@cw_capacity+1,w
  3431  0254  00C9               	movwf	_cw_bat+2
  3432  0255  0843               	movf	update_capacity@cw_capacity,w
  3433  0256  00C8               	movwf	_cw_bat+1
  3434  0257  0008               	return
  3435  0258                     __end_of_update_capacity:	
  3436                           
  3437                           	psect	text10
  3438  03F4                     __ptext10:	
  3439 ;; *************** function _cw_get_capacity *****************
  3440 ;; Defined at:
  3441 ;;		line 325 in file "CW201x.c"
  3442 ;; Parameters:    Size  Location     Type
  3443 ;;		None
  3444 ;; Auto vars:     Size  Location     Type
  3445 ;;  ret             2   31[BANK0 ] int 
  3446 ;;  reg_val         1   33[BANK0 ] unsigned char 
  3447 ;;  cw_capacity     1   30[BANK0 ] unsigned char 
  3448 ;;  allow_capaci    1    0        unsigned char 
  3449 ;; Return value:  Size  Location     Type
  3450 ;;                  2   26[BANK0 ] int 
  3451 ;; Registers used:
  3452 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3453 ;; Tracked objects:
  3454 ;;		On entry : 0/0
  3455 ;;		On exit  : 0/0
  3456 ;;		Unchanged: 0/0
  3457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3458 ;;      Params:         0       2       0       0
  3459 ;;      Locals:         0       4       0       0
  3460 ;;      Temps:          0       2       0       0
  3461 ;;      Totals:         0       8       0       0
  3462 ;;Total ram usage:        8 bytes
  3463 ;; Hardware stack levels used:    1
  3464 ;; Hardware stack levels required when called:    7
  3465 ;; This function calls:
  3466 ;;		_cw_por
  3467 ;;		_cw_read
  3468 ;; This function is called by:
  3469 ;;		_update_capacity
  3470 ;; This function uses a non-reentrant model
  3471 ;;
  3472                           
  3473                           
  3474                           ;psect for function _cw_get_capacity
  3475  03F4                     _cw_get_capacity:	
  3476                           
  3477                           ;CW201x.c: 327: int ret = 0;
  3478                           
  3479                           ;incstack = 0
  3480                           ; Regs used in _cw_get_capacity: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3481  03F4  0140               	movlb	0	; select bank0
  3482  03F5  01BF               	clrf	cw_get_capacity@ret
  3483  03F6  01C0               	clrf	cw_get_capacity@ret+1
  3484                           
  3485                           ;CW201x.c: 328: unsigned char allow_capacity;
  3486                           ;CW201x.c: 329: unsigned char reg_val;
  3487                           ;CW201x.c: 331: unsigned char cw_capacity;
  3488                           ;CW201x.c: 334: ret = cw_read(0x4, &reg_val);
  3489  03F7  3041               	movlw	(low (cw_get_capacity@reg_val| 0))& (0+255)
  3490  03F8  00BC               	movwf	??_cw_get_capacity
  3491  03F9  083C               	movf	??_cw_get_capacity,w
  3492  03FA  00A4               	movwf	cw_read@r_pdata
  3493  03FB  3004               	movlw	4
  3494  03FC  233C               	fcall	_cw_read
  3495  03FD  0140               	movlb	0	; select bank0
  3496  03FE  0825               	movf	?_cw_read+1,w
  3497  03FF  00C0               	movwf	cw_get_capacity@ret+1
  3498  0400  0824               	movf	?_cw_read,w
  3499  0401  00BF               	movwf	cw_get_capacity@ret
  3500                           
  3501                           ;CW201x.c: 335: if(ret)
  3502  0402  083F               	movf	cw_get_capacity@ret,w
  3503  0403  0440               	iorwf	cw_get_capacity@ret+1,w
  3504  0404  1903               	btfsc	3,2
  3505  0405  2C0B               	goto	l2191
  3506                           
  3507                           ;CW201x.c: 336: {
  3508                           ;CW201x.c: 337: return -1;
  3509  0406  30FF               	movlw	255
  3510  0407  00BA               	movwf	?_cw_get_capacity
  3511  0408  30FF               	movlw	255
  3512  0409  00BB               	movwf	?_cw_get_capacity+1
  3513  040A  0008               	return
  3514  040B                     l2191:	
  3515                           
  3516                           ;CW201x.c: 338: }
  3517                           ;CW201x.c: 340: cw_capacity = reg_val;
  3518  040B  0841               	movf	cw_get_capacity@reg_val,w
  3519  040C  00BC               	movwf	??_cw_get_capacity
  3520  040D  083C               	movf	??_cw_get_capacity,w
  3521  040E  00BE               	movwf	cw_get_capacity@cw_capacity
  3522                           
  3523                           ;CW201x.c: 342: if ((cw_capacity < 0) || (cw_capacity > 100)) {
  3524  040F  3065               	movlw	101
  3525  0410  023E               	subwf	cw_get_capacity@cw_capacity,w
  3526  0411  1C03               	skipc
  3527  0412  2C30               	goto	l2213
  3528                           
  3529                           ;CW201x.c: 344: reset_loop++;
  3530  0413  3001               	movlw	1
  3531  0414  00BC               	movwf	??_cw_get_capacity
  3532  0415  083C               	movf	??_cw_get_capacity,w
  3533  0416  07CF               	addwf	_reset_loop,f
  3534                           
  3535                           ;CW201x.c: 345: if (reset_loop >5) {
  3536  0417  3006               	movlw	6
  3537  0418  024F               	subwf	_reset_loop,w
  3538  0419  1C03               	skipc
  3539  041A  2C2B               	goto	l2207
  3540                           
  3541                           ;CW201x.c: 346: ret = cw_por();
  3542  041B  2439               	fcall	_cw_por
  3543  041C  0140               	movlb	0	; select bank0
  3544  041D  0834               	movf	?_cw_por+1,w
  3545  041E  00C0               	movwf	cw_get_capacity@ret+1
  3546  041F  0833               	movf	?_cw_por,w
  3547  0420  00BF               	movwf	cw_get_capacity@ret
  3548                           
  3549                           ;CW201x.c: 347: if(ret)
  3550  0421  083F               	movf	cw_get_capacity@ret,w
  3551  0422  0440               	iorwf	cw_get_capacity@ret+1,w
  3552  0423  1903               	btfsc	3,2
  3553  0424  2C2A               	goto	l2205
  3554                           
  3555                           ;CW201x.c: 348: return -1;
  3556  0425  30FF               	movlw	255
  3557  0426  00BA               	movwf	?_cw_get_capacity
  3558  0427  30FF               	movlw	255
  3559  0428  00BB               	movwf	?_cw_get_capacity+1
  3560  0429  0008               	return
  3561  042A                     l2205:	
  3562                           
  3563                           ;CW201x.c: 349: reset_loop =0;
  3564  042A  01CF               	clrf	_reset_loop
  3565  042B                     l2207:	
  3566                           
  3567                           ;CW201x.c: 350: }
  3568                           ;CW201x.c: 351: return cw_bat.capacity;
  3569  042B  0849               	movf	_cw_bat+2,w
  3570  042C  00BB               	movwf	?_cw_get_capacity+1
  3571  042D  0848               	movf	_cw_bat+1,w
  3572  042E  00BA               	movwf	?_cw_get_capacity
  3573  042F  0008               	return
  3574  0430                     l2213:	
  3575                           ;CW201x.c: 352: }else {
  3576                           
  3577                           
  3578                           ;CW201x.c: 353: reset_loop =0;
  3579  0430  01CF               	clrf	_reset_loop
  3580                           
  3581                           ;CW201x.c: 354: }
  3582                           ;CW201x.c: 431: return(cw_capacity);
  3583  0431  083E               	movf	cw_get_capacity@cw_capacity,w
  3584  0432  00BC               	movwf	??_cw_get_capacity
  3585  0433  01BD               	clrf	??_cw_get_capacity+1
  3586  0434  083C               	movf	??_cw_get_capacity,w
  3587  0435  00BA               	movwf	?_cw_get_capacity
  3588  0436  083D               	movf	??_cw_get_capacity+1,w
  3589  0437  00BB               	movwf	?_cw_get_capacity+1
  3590  0438  0008               	return
  3591  0439                     __end_of_cw_get_capacity:	
  3592                           
  3593                           	psect	text11
  3594  0439                     __ptext11:	
  3595 ;; *************** function _cw_por *****************
  3596 ;; Defined at:
  3597 ;;		line 303 in file "CW201x.c"
  3598 ;; Parameters:    Size  Location     Type
  3599 ;;		None
  3600 ;; Auto vars:     Size  Location     Type
  3601 ;;  ret             2   24[BANK0 ] int 
  3602 ;;  reset_val       1   23[BANK0 ] unsigned char 
  3603 ;; Return value:  Size  Location     Type
  3604 ;;                  2   19[BANK0 ] int 
  3605 ;; Registers used:
  3606 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3607 ;; Tracked objects:
  3608 ;;		On entry : 0/0
  3609 ;;		On exit  : 0/0
  3610 ;;		Unchanged: 0/0
  3611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3612 ;;      Params:         0       2       0       0
  3613 ;;      Locals:         0       3       0       0
  3614 ;;      Temps:          0       2       0       0
  3615 ;;      Totals:         0       7       0       0
  3616 ;;Total ram usage:        7 bytes
  3617 ;; Hardware stack levels used:    1
  3618 ;; Hardware stack levels required when called:    6
  3619 ;; This function calls:
  3620 ;;		_CW_Delay100us
  3621 ;;		_cw_init
  3622 ;;		_cw_write
  3623 ;; This function is called by:
  3624 ;;		_cw_get_capacity
  3625 ;; This function uses a non-reentrant model
  3626 ;;
  3627                           
  3628                           
  3629                           ;psect for function _cw_por
  3630  0439                     _cw_por:	
  3631                           
  3632                           ;CW201x.c: 305: int ret = 0;
  3633                           
  3634                           ;incstack = 0
  3635                           ; Regs used in _cw_por: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3636  0439  0140               	movlb	0	; select bank0
  3637  043A  01B8               	clrf	cw_por@ret
  3638  043B  01B9               	clrf	cw_por@ret+1
  3639                           
  3640                           ;CW201x.c: 306: unsigned char reset_val = 0;
  3641  043C  01B7               	clrf	cw_por@reset_val
  3642                           
  3643                           ;CW201x.c: 307: reset_val = (0x3<<6);
  3644  043D  30C0               	movlw	192
  3645  043E  00B5               	movwf	??_cw_por
  3646  043F  0835               	movf	??_cw_por,w
  3647  0440  00B7               	movwf	cw_por@reset_val
  3648                           
  3649                           ;CW201x.c: 308: ret = cw_write(0xA, &reset_val);
  3650  0441  3037               	movlw	(low (cw_por@reset_val| 0))& (0+255)
  3651  0442  00B5               	movwf	??_cw_por
  3652  0443  0835               	movf	??_cw_por,w
  3653  0444  00A4               	movwf	cw_write@w_pdata
  3654  0445  300A               	movlw	10
  3655  0446  230A               	fcall	_cw_write
  3656  0447  0140               	movlb	0	; select bank0
  3657  0448  0825               	movf	?_cw_write+1,w
  3658  0449  00B9               	movwf	cw_por@ret+1
  3659  044A  0824               	movf	?_cw_write,w
  3660  044B  00B8               	movwf	cw_por@ret
  3661                           
  3662                           ;CW201x.c: 309: if (ret)
  3663  044C  0838               	movf	cw_por@ret,w
  3664  044D  0439               	iorwf	cw_por@ret+1,w
  3665  044E  1903               	btfsc	3,2
  3666  044F  2C55               	goto	l2079
  3667                           
  3668                           ;CW201x.c: 310: return -1;
  3669  0450  30FF               	movlw	255
  3670  0451  00B3               	movwf	?_cw_por
  3671  0452  30FF               	movlw	255
  3672  0453  00B4               	movwf	?_cw_por+1
  3673  0454  0008               	return
  3674  0455                     l2079:	
  3675                           
  3676                           ;CW201x.c: 311: CW_Delay100us();
  3677  0455  21D6               	fcall	_CW_Delay100us
  3678                           
  3679                           ;CW201x.c: 313: reset_val = (0x0<<6);
  3680  0456  0140               	movlb	0	; select bank0
  3681  0457  01B7               	clrf	cw_por@reset_val
  3682                           
  3683                           ;CW201x.c: 314: ret = cw_write(0xA, &reset_val);
  3684  0458  3037               	movlw	(low (cw_por@reset_val| 0))& (0+255)
  3685  0459  00B5               	movwf	??_cw_por
  3686  045A  0835               	movf	??_cw_por,w
  3687  045B  00A4               	movwf	cw_write@w_pdata
  3688  045C  300A               	movlw	10
  3689  045D  230A               	fcall	_cw_write
  3690  045E  0140               	movlb	0	; select bank0
  3691  045F  0825               	movf	?_cw_write+1,w
  3692  0460  00B9               	movwf	cw_por@ret+1
  3693  0461  0824               	movf	?_cw_write,w
  3694  0462  00B8               	movwf	cw_por@ret
  3695                           
  3696                           ;CW201x.c: 315: if (ret)
  3697  0463  0838               	movf	cw_por@ret,w
  3698  0464  0439               	iorwf	cw_por@ret+1,w
  3699  0465  1903               	btfsc	3,2
  3700  0466  2C6C               	goto	l2091
  3701                           
  3702                           ;CW201x.c: 316: return -1;
  3703  0467  30FF               	movlw	255
  3704  0468  00B3               	movwf	?_cw_por
  3705  0469  30FF               	movlw	255
  3706  046A  00B4               	movwf	?_cw_por+1
  3707  046B  0008               	return
  3708  046C                     l2091:	
  3709                           
  3710                           ;CW201x.c: 317: CW_Delay100us();
  3711  046C  21D6               	fcall	_CW_Delay100us
  3712                           
  3713                           ;CW201x.c: 319: ret = cw_init();
  3714  046D  2719               	fcall	_cw_init
  3715  046E  0140               	movlb	0	; select bank0
  3716  046F  00B5               	movwf	??_cw_por
  3717  0470  01B6               	clrf	??_cw_por+1
  3718  0471  0835               	movf	??_cw_por,w
  3719  0472  00B8               	movwf	cw_por@ret
  3720  0473  0836               	movf	??_cw_por+1,w
  3721  0474  00B9               	movwf	cw_por@ret+1
  3722                           
  3723                           ;CW201x.c: 320: if (ret)
  3724  0475  0838               	movf	cw_por@ret,w
  3725  0476  0439               	iorwf	cw_por@ret+1,w
  3726  0477  1903               	btfsc	3,2
  3727  0478  2C7E               	goto	l2101
  3728                           
  3729                           ;CW201x.c: 321: return ret;
  3730  0479  0839               	movf	cw_por@ret+1,w
  3731  047A  00B4               	movwf	?_cw_por+1
  3732  047B  0838               	movf	cw_por@ret,w
  3733  047C  00B3               	movwf	?_cw_por
  3734  047D  0008               	return
  3735  047E                     l2101:	
  3736                           
  3737                           ;CW201x.c: 322: return 0;
  3738  047E  01B3               	clrf	?_cw_por
  3739  047F  01B4               	clrf	?_cw_por+1
  3740  0480  0008               	return
  3741  0481                     __end_of_cw_por:	
  3742                           
  3743                           	psect	text12
  3744  019C                     __ptext12:	
  3745 ;; *************** function _cw_bat_init *****************
  3746 ;; Defined at:
  3747 ;;		line 577 in file "CW201x.c"
  3748 ;; Parameters:    Size  Location     Type
  3749 ;;		None
  3750 ;; Auto vars:     Size  Location     Type
  3751 ;;  ret             1   21[BANK0 ] unsigned char 
  3752 ;;  loop            1   20[BANK0 ] unsigned char 
  3753 ;; Return value:  Size  Location     Type
  3754 ;;                  1    wreg      unsigned char 
  3755 ;; Registers used:
  3756 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3757 ;; Tracked objects:
  3758 ;;		On entry : 0/0
  3759 ;;		On exit  : 0/0
  3760 ;;		Unchanged: 0/0
  3761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3762 ;;      Params:         0       0       0       0
  3763 ;;      Locals:         0       2       0       0
  3764 ;;      Temps:          0       1       0       0
  3765 ;;      Totals:         0       3       0       0
  3766 ;;Total ram usage:        3 bytes
  3767 ;; Hardware stack levels used:    1
  3768 ;; Hardware stack levels required when called:    6
  3769 ;; This function calls:
  3770 ;;		_cw_init
  3771 ;; This function is called by:
  3772 ;;		_main
  3773 ;; This function uses a non-reentrant model
  3774 ;;
  3775                           
  3776                           
  3777                           ;psect for function _cw_bat_init
  3778  019C                     _cw_bat_init:	
  3779                           
  3780                           ;CW201x.c: 579: unsigned char ret;
  3781                           ;CW201x.c: 580: unsigned char loop = 0;
  3782                           
  3783                           ;incstack = 0
  3784                           ; Regs used in _cw_bat_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3785  019C  0140               	movlb	0	; select bank0
  3786  019D  01B4               	clrf	cw_bat_init@loop
  3787  019E                     l2333:	
  3788                           ;CW201x.c: 584: while((loop++ < 200) && (ret != 0))
  3789                           
  3790                           ;CW201x.c: 583: ret = cw_init();
  3791                           
  3792                           
  3793                           ;CW201x.c: 585: {
  3794                           ;CW201x.c: 586: ret = cw_init();
  3795  019E  2719               	fcall	_cw_init
  3796  019F  0140               	movlb	0	; select bank0
  3797  01A0  00B3               	movwf	??_cw_bat_init
  3798  01A1  0833               	movf	??_cw_bat_init,w
  3799  01A2  00B5               	movwf	cw_bat_init@ret
  3800  01A3  0834               	movf	cw_bat_init@loop,w
  3801  01A4  0AB4               	incf	cw_bat_init@loop,f
  3802  01A5  00B3               	movwf	??_cw_bat_init
  3803  01A6  30C8               	movlw	200
  3804  01A7  0233               	subwf	??_cw_bat_init,w
  3805  01A8  1803               	skipnc
  3806  01A9  29AD               	goto	l2339
  3807  01AA  0835               	movf	cw_bat_init@ret,w
  3808  01AB  1D03               	btfss	3,2
  3809  01AC  299E               	goto	l2333
  3810  01AD                     l2339:	
  3811                           
  3812                           ;CW201x.c: 587: }
  3813                           ;CW201x.c: 589: cw_bat.usb_online = 0;
  3814  01AD  01C7               	clrf	_cw_bat
  3815                           
  3816                           ;CW201x.c: 590: cw_bat.capacity = 2;
  3817  01AE  3002               	movlw	2
  3818  01AF  00C8               	movwf	_cw_bat+1
  3819  01B0  3000               	movlw	0
  3820  01B1  00C9               	movwf	_cw_bat+2
  3821                           
  3822                           ;CW201x.c: 591: cw_bat.voltage = 0;
  3823  01B2  01CA               	clrf	_cw_bat+3
  3824  01B3  01CB               	clrf	_cw_bat+4
  3825                           
  3826                           ;CW201x.c: 595: cw_bat.alt = 0;
  3827  01B4  01CC               	clrf	_cw_bat+5
  3828                           
  3829                           ;CW201x.c: 597: return ret;
  3830  01B5  0835               	movf	cw_bat_init@ret,w
  3831  01B6  0008               	return
  3832  01B7                     __end_of_cw_bat_init:	
  3833                           
  3834                           	psect	text13
  3835  0719                     __ptext13:	
  3836 ;; *************** function _cw_init *****************
  3837 ;; Defined at:
  3838 ;;		line 139 in file "CW201x.c"
  3839 ;; Parameters:    Size  Location     Type
  3840 ;;		None
  3841 ;; Auto vars:     Size  Location     Type
  3842 ;;  ret             2   16[BANK0 ] unsigned int 
  3843 ;;  reg_val         1   18[BANK0 ] unsigned char 
  3844 ;;  i               1   15[BANK0 ] unsigned char 
  3845 ;; Return value:  Size  Location     Type
  3846 ;;                  1    wreg      unsigned char 
  3847 ;; Registers used:
  3848 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3849 ;; Tracked objects:
  3850 ;;		On entry : 0/0
  3851 ;;		On exit  : 0/0
  3852 ;;		Unchanged: 0/0
  3853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3854 ;;      Params:         0       0       0       0
  3855 ;;      Locals:         0       4       0       0
  3856 ;;      Temps:          0       2       0       0
  3857 ;;      Totals:         0       6       0       0
  3858 ;;Total ram usage:        6 bytes
  3859 ;; Hardware stack levels used:    1
  3860 ;; Hardware stack levels required when called:    5
  3861 ;; This function calls:
  3862 ;;		_CW_Delay10ms
  3863 ;;		_cw_read
  3864 ;;		_cw_update_config_info
  3865 ;;		_cw_write
  3866 ;; This function is called by:
  3867 ;;		_cw_por
  3868 ;;		_cw_bat_init
  3869 ;; This function uses a non-reentrant model
  3870 ;;
  3871                           
  3872                           
  3873                           ;psect for function _cw_init
  3874  0719                     _cw_init:	
  3875                           
  3876                           ;CW201x.c: 141: unsigned ret;
  3877                           ;CW201x.c: 142: unsigned char i;
  3878                           ;CW201x.c: 143: unsigned char reg_val = (0x0<<6);
  3879                           
  3880                           ;incstack = 0
  3881                           ; Regs used in _cw_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3882  0719  0140               	movlb	0	; select bank0
  3883  071A  01B2               	clrf	cw_init@reg_val
  3884                           
  3885                           ;CW201x.c: 144: const unsigned char cw_bat_config_info[64] = {
  3886                           ;CW201x.c: 145: 0x14,0xA6,0x70,0x6C,0x6C,0x67,0x64,
  3887                           ;CW201x.c: 146: 0x62,0x60,0x5C,0x59,0x4E,0x50,0x42,
  3888                           ;CW201x.c: 147: 0x2E,0x26,0x25,0x24,0x27,0x2E,0x41,
  3889                           ;CW201x.c: 148: 0x5A,0x6D,0x4C,0x39,0xD7,0x06,0x66,
  3890                           ;CW201x.c: 149: 0x00,0x01,0x05,0x34,0x61,0x76,0x79,
  3891                           ;CW201x.c: 150: 0x7D,0x42,0x1E,0xA4,0x00,0x27,0x5A,
  3892                           ;CW201x.c: 151: 0x52,0x87,0x8F,0x91,0x94,0x52,0x82,
  3893                           ;CW201x.c: 152: 0x8C,0x92,0x96,0x2B,0x59,0x6E,0xCB,
  3894                           ;CW201x.c: 153: 0x2F,0x7D,0x72,0xA5,0xB5,0xC1,0x94,
  3895  071B  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  3896  071C  00AD               	movwf	??_cw_init
  3897  071D  082D               	movf	??_cw_init,w
  3898  071E  00A4               	movwf	cw_write@w_pdata
  3899  071F  300A               	movlw	10
  3900  0720  230A               	fcall	_cw_write
  3901  0721  0140               	movlb	0	; select bank0
  3902  0722  0825               	movf	?_cw_write+1,w
  3903  0723  00B1               	movwf	cw_init@ret+1
  3904  0724  0824               	movf	?_cw_write,w
  3905  0725  00B0               	movwf	cw_init@ret
  3906                           
  3907                           ;CW201x.c: 159: if(ret)
  3908  0726  0830               	movf	cw_init@ret,w
  3909  0727  0431               	iorwf	cw_init@ret+1,w
  3910  0728  1903               	btfsc	3,2
  3911  0729  2F2C               	goto	l1951
  3912                           
  3913                           ;CW201x.c: 160: {
  3914                           ;CW201x.c: 161: return 1;
  3915  072A  3001               	movlw	1
  3916  072B  0008               	return
  3917  072C                     l1951:	
  3918                           
  3919                           ;CW201x.c: 162: }
  3920                           ;CW201x.c: 165: ret = cw_read(0x8, &reg_val);
  3921  072C  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  3922  072D  00AD               	movwf	??_cw_init
  3923  072E  082D               	movf	??_cw_init,w
  3924  072F  00A4               	movwf	cw_read@r_pdata
  3925  0730  3008               	movlw	8
  3926  0731  233C               	fcall	_cw_read
  3927  0732  0140               	movlb	0	; select bank0
  3928  0733  0825               	movf	?_cw_read+1,w
  3929  0734  00B1               	movwf	cw_init@ret+1
  3930  0735  0824               	movf	?_cw_read,w
  3931  0736  00B0               	movwf	cw_init@ret
  3932                           
  3933                           ;CW201x.c: 166: if(ret)
  3934  0737  0830               	movf	cw_init@ret,w
  3935  0738  0431               	iorwf	cw_init@ret+1,w
  3936  0739  1903               	btfsc	3,2
  3937  073A  2F3D               	goto	l1959
  3938                           
  3939                           ;CW201x.c: 167: {
  3940                           ;CW201x.c: 168: return 1;
  3941  073B  3001               	movlw	1
  3942  073C  0008               	return
  3943  073D                     l1959:	
  3944                           
  3945                           ;CW201x.c: 169: }
  3946                           ;CW201x.c: 170: if((reg_val & 0xf8) != (0x0<<3))
  3947  073D  0832               	movf	cw_init@reg_val,w
  3948  073E  39F8               	andlw	248
  3949  073F  1903               	btfsc	3,2
  3950  0740  2F56               	goto	l1971
  3951                           
  3952                           ;CW201x.c: 174: reg_val |= (0x0<<3);
  3953  0741  3007               	movlw	7
  3954  0742  00AD               	movwf	??_cw_init
  3955  0743  082D               	movf	??_cw_init,w
  3956  0744  05B2               	andwf	cw_init@reg_val,f
  3957                           
  3958                           ;CW201x.c: 175: ret = cw_write(0x8, &reg_val);
  3959  0745  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  3960  0746  00AD               	movwf	??_cw_init
  3961  0747  082D               	movf	??_cw_init,w
  3962  0748  00A4               	movwf	cw_write@w_pdata
  3963  0749  3008               	movlw	8
  3964  074A  230A               	fcall	_cw_write
  3965  074B  0140               	movlb	0	; select bank0
  3966  074C  0825               	movf	?_cw_write+1,w
  3967  074D  00B1               	movwf	cw_init@ret+1
  3968  074E  0824               	movf	?_cw_write,w
  3969  074F  00B0               	movwf	cw_init@ret
  3970                           
  3971                           ;CW201x.c: 176: if(ret)
  3972  0750  0830               	movf	cw_init@ret,w
  3973  0751  0431               	iorwf	cw_init@ret+1,w
  3974  0752  1903               	btfsc	3,2
  3975  0753  2F56               	goto	l1971
  3976                           
  3977                           ;CW201x.c: 177: {
  3978                           ;CW201x.c: 178: return 1;
  3979  0754  3001               	movlw	1
  3980  0755  0008               	return
  3981  0756                     l1971:	
  3982                           
  3983                           ;CW201x.c: 179: }
  3984                           ;CW201x.c: 180: }
  3985                           ;CW201x.c: 183: ret = cw_read(0x8, &reg_val);
  3986  0756  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  3987  0757  00AD               	movwf	??_cw_init
  3988  0758  082D               	movf	??_cw_init,w
  3989  0759  00A4               	movwf	cw_read@r_pdata
  3990  075A  3008               	movlw	8
  3991  075B  233C               	fcall	_cw_read
  3992  075C  0140               	movlb	0	; select bank0
  3993  075D  0825               	movf	?_cw_read+1,w
  3994  075E  00B1               	movwf	cw_init@ret+1
  3995  075F  0824               	movf	?_cw_read,w
  3996  0760  00B0               	movwf	cw_init@ret
  3997                           
  3998                           ;CW201x.c: 184: if(ret)
  3999  0761  0830               	movf	cw_init@ret,w
  4000  0762  0431               	iorwf	cw_init@ret+1,w
  4001  0763  1903               	btfsc	3,2
  4002  0764  2F67               	goto	l239
  4003                           
  4004                           ;CW201x.c: 185: {
  4005                           ;CW201x.c: 186: return 1;
  4006  0765  3001               	movlw	1
  4007  0766  0008               	return
  4008  0767                     l239:	
  4009                           
  4010                           ;CW201x.c: 187: }
  4011                           ;CW201x.c: 188: if(!(reg_val & (0x1<<1)))
  4012  0767  18B2               	btfsc	cw_init@reg_val,1
  4013  0768  2F77               	goto	l1987
  4014                           
  4015                           ;CW201x.c: 189: {
  4016                           ;CW201x.c: 191: ret = cw_update_config_info();
  4017  0769  2583               	fcall	_cw_update_config_info
  4018  076A  0140               	movlb	0	; select bank0
  4019  076B  00AD               	movwf	??_cw_init
  4020  076C  01AE               	clrf	??_cw_init+1
  4021  076D  082D               	movf	??_cw_init,w
  4022  076E  00B0               	movwf	cw_init@ret
  4023  076F  082E               	movf	??_cw_init+1,w
  4024  0770  00B1               	movwf	cw_init@ret+1
  4025                           
  4026                           ;CW201x.c: 192: if(ret)
  4027  0771  0830               	movf	cw_init@ret,w
  4028  0772  0431               	iorwf	cw_init@ret+1,w
  4029  0773  1903               	btfsc	3,2
  4030  0774  2FB3               	goto	l2019
  4031                           
  4032                           ;CW201x.c: 193: {
  4033                           ;CW201x.c: 194: return ret;
  4034  0775  0830               	movf	cw_init@ret,w
  4035  0776  0008               	return
  4036  0777                     l1987:	
  4037                           ;CW201x.c: 195: }
  4038                           ;CW201x.c: 196: }
  4039                           
  4040                           
  4041                           ;CW201x.c: 197: else
  4042                           ;CW201x.c: 198: {
  4043                           ;CW201x.c: 199: for(i = 0; i < 64; i++)
  4044  0777  01AF               	clrf	cw_init@i
  4045  0778  3040               	movlw	64
  4046  0779  022F               	subwf	cw_init@i,w
  4047  077A  1803               	btfsc	3,0
  4048  077B  2FA1               	goto	l2009
  4049  077C                     l1993:	
  4050                           
  4051                           ;CW201x.c: 200: {
  4052                           ;CW201x.c: 201: ret = cw_read(0x10 +i, &reg_val);
  4053  077C  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4054  077D  00AD               	movwf	??_cw_init
  4055  077E  082D               	movf	??_cw_init,w
  4056  077F  00A4               	movwf	cw_read@r_pdata
  4057  0780  082F               	movf	cw_init@i,w
  4058  0781  3E10               	addlw	16
  4059  0782  233C               	fcall	_cw_read
  4060  0783  0140               	movlb	0	; select bank0
  4061  0784  0825               	movf	?_cw_read+1,w
  4062  0785  00B1               	movwf	cw_init@ret+1
  4063  0786  0824               	movf	?_cw_read,w
  4064  0787  00B0               	movwf	cw_init@ret
  4065                           
  4066                           ;CW201x.c: 202: if(ret)
  4067  0788  0830               	movf	cw_init@ret,w
  4068  0789  0431               	iorwf	cw_init@ret+1,w
  4069  078A  1903               	btfsc	3,2
  4070  078B  2F8E               	goto	l2001
  4071                           
  4072                           ;CW201x.c: 203: {
  4073                           ;CW201x.c: 204: return 1;
  4074  078C  3001               	movlw	1
  4075  078D  0008               	return
  4076  078E                     l2001:	
  4077                           
  4078                           ;CW201x.c: 205: }
  4079                           ;CW201x.c: 206: if(cw_bat_config_info[i] != reg_val)
  4080  078E  082F               	movf	cw_init@i,w
  4081  078F  3EB4               	addlw	low (cw_init@cw_bat_config_info| (0+32768))
  4082  0790  0084               	movwf	4
  4083  0791  3083               	movlw	high (cw_init@cw_bat_config_info| (0+32768))
  4084  0792  1803               	skipnc
  4085  0793  3E01               	addlw	1
  4086  0794  0085               	movwf	5
  4087  0795  0800               	movf	0,w	;code access
  4088  0796  0632               	xorwf	cw_init@reg_val,w
  4089  0797  1D03               	btfss	3,2
  4090  0798  2FA1               	goto	l2009
  4091                           
  4092                           ;CW201x.c: 207: {
  4093                           ;CW201x.c: 208: break;
  4094  0799  3001               	movlw	1
  4095  079A  00AD               	movwf	??_cw_init
  4096  079B  082D               	movf	??_cw_init,w
  4097  079C  07AF               	addwf	cw_init@i,f
  4098  079D  3040               	movlw	64
  4099  079E  022F               	subwf	cw_init@i,w
  4100  079F  1C03               	skipc
  4101  07A0  2F7C               	goto	l1993
  4102  07A1                     l2009:	
  4103                           
  4104                           ;CW201x.c: 209: }
  4105                           ;CW201x.c: 210: }
  4106                           ;CW201x.c: 211: if(i != 64)
  4107  07A1  3040               	movlw	64
  4108  07A2  062F               	xorwf	cw_init@i,w
  4109  07A3  1903               	btfsc	3,2
  4110  07A4  2FB3               	goto	l2019
  4111                           
  4112                           ;CW201x.c: 212: {
  4113                           ;CW201x.c: 214: ret = cw_update_config_info();
  4114  07A5  2583               	fcall	_cw_update_config_info
  4115  07A6  0140               	movlb	0	; select bank0
  4116  07A7  00AD               	movwf	??_cw_init
  4117  07A8  01AE               	clrf	??_cw_init+1
  4118  07A9  082D               	movf	??_cw_init,w
  4119  07AA  00B0               	movwf	cw_init@ret
  4120  07AB  082E               	movf	??_cw_init+1,w
  4121  07AC  00B1               	movwf	cw_init@ret+1
  4122                           
  4123                           ;CW201x.c: 215: if(ret)
  4124  07AD  0830               	movf	cw_init@ret,w
  4125  07AE  0431               	iorwf	cw_init@ret+1,w
  4126  07AF  1903               	btfsc	3,2
  4127  07B0  2FB3               	goto	l2019
  4128                           
  4129                           ;CW201x.c: 216: {
  4130                           ;CW201x.c: 217: return ret;
  4131  07B1  0830               	movf	cw_init@ret,w
  4132  07B2  0008               	return
  4133  07B3                     l2019:	
  4134                           
  4135                           ;CW201x.c: 218: }
  4136                           ;CW201x.c: 219: }
  4137                           ;CW201x.c: 220: }
  4138                           ;CW201x.c: 222: for (i = 0; i < 30; i++) {
  4139  07B3  01AF               	clrf	cw_init@i
  4140  07B4  301E               	movlw	30
  4141  07B5  022F               	subwf	cw_init@i,w
  4142  07B6  1803               	btfsc	3,0
  4143  07B7  2FDB               	goto	l2045
  4144  07B8                     l2025:	
  4145                           
  4146                           ;CW201x.c: 223: CW_Delay10ms(10);
  4147  07B8  300A               	movlw	10
  4148  07B9  00F0               	movwf	CW_Delay10ms@c
  4149  07BA  3000               	movlw	0
  4150  07BB  00F1               	movwf	CW_Delay10ms@c+1
  4151  07BC  2216               	fcall	_CW_Delay10ms
  4152                           
  4153                           ;CW201x.c: 224: ret = cw_read(0x4, &reg_val);
  4154  07BD  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4155  07BE  0140               	movlb	0	; select bank0
  4156  07BF  00AD               	movwf	??_cw_init
  4157  07C0  082D               	movf	??_cw_init,w
  4158  07C1  00A4               	movwf	cw_read@r_pdata
  4159  07C2  3004               	movlw	4
  4160  07C3  233C               	fcall	_cw_read
  4161  07C4  0140               	movlb	0	; select bank0
  4162  07C5  0825               	movf	?_cw_read+1,w
  4163  07C6  00B1               	movwf	cw_init@ret+1
  4164  07C7  0824               	movf	?_cw_read,w
  4165  07C8  00B0               	movwf	cw_init@ret
  4166                           
  4167                           ;CW201x.c: 225: if (ret)
  4168  07C9  0830               	movf	cw_init@ret,w
  4169  07CA  0431               	iorwf	cw_init@ret+1,w
  4170  07CB  1903               	btfsc	3,2
  4171  07CC  2FCF               	goto	l2037
  4172                           
  4173                           ;CW201x.c: 226: return 1;
  4174  07CD  3001               	movlw	1
  4175  07CE  0008               	return
  4176  07CF                     l2037:	
  4177                           
  4178                           ;CW201x.c: 227: else if (reg_val <= 100)
  4179  07CF  3065               	movlw	101
  4180  07D0  0232               	subwf	cw_init@reg_val,w
  4181  07D1  1C03               	btfss	3,0
  4182  07D2  2FDB               	goto	l2045
  4183                           
  4184                           ;CW201x.c: 228: break;
  4185  07D3  3001               	movlw	1
  4186  07D4  00AD               	movwf	??_cw_init
  4187  07D5  082D               	movf	??_cw_init,w
  4188  07D6  07AF               	addwf	cw_init@i,f
  4189  07D7  301E               	movlw	30
  4190  07D8  022F               	subwf	cw_init@i,w
  4191  07D9  1C03               	skipc
  4192  07DA  2FB8               	goto	l2025
  4193  07DB                     l2045:	
  4194                           
  4195                           ;CW201x.c: 229: }
  4196                           ;CW201x.c: 231: if (i >=30){
  4197  07DB  301E               	movlw	30
  4198  07DC  022F               	subwf	cw_init@i,w
  4199  07DD  1C03               	skipc
  4200  07DE  2FF0               	goto	l2055
  4201                           
  4202                           ;CW201x.c: 232: reg_val = (0x3<<6);
  4203  07DF  30C0               	movlw	192
  4204  07E0  00AD               	movwf	??_cw_init
  4205  07E1  082D               	movf	??_cw_init,w
  4206  07E2  00B2               	movwf	cw_init@reg_val
  4207                           
  4208                           ;CW201x.c: 233: ret = cw_write(0xA, &reg_val);
  4209  07E3  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4210  07E4  00AD               	movwf	??_cw_init
  4211  07E5  082D               	movf	??_cw_init,w
  4212  07E6  00A4               	movwf	cw_write@w_pdata
  4213  07E7  300A               	movlw	10
  4214  07E8  230A               	fcall	_cw_write
  4215  07E9  0140               	movlb	0	; select bank0
  4216  07EA  0825               	movf	?_cw_write+1,w
  4217  07EB  00B1               	movwf	cw_init@ret+1
  4218  07EC  0824               	movf	?_cw_write,w
  4219  07ED  00B0               	movwf	cw_init@ret
  4220                           
  4221                           ;CW201x.c: 235: return 4;
  4222  07EE  3004               	movlw	4
  4223  07EF  0008               	return
  4224  07F0                     l2055:	
  4225                           
  4226                           ;CW201x.c: 236: }
  4227                           ;CW201x.c: 237: return 0;
  4228  07F0  3000               	movlw	0
  4229  07F1  0008               	return
  4230  07F2                     __end_of_cw_init:	
  4231                           
  4232                           	psect	text14
  4233  0583                     __ptext14:	
  4234 ;; *************** function _cw_update_config_info *****************
  4235 ;; Defined at:
  4236 ;;		line 53 in file "CW201x.c"
  4237 ;; Parameters:    Size  Location     Type
  4238 ;;		None
  4239 ;; Auto vars:     Size  Location     Type
  4240 ;;  ret             2    9[BANK0 ] int 
  4241 ;;  reg_val         1   12[BANK0 ] unsigned char 
  4242 ;;  i               1   11[BANK0 ] unsigned char 
  4243 ;;  reset_val       1    8[BANK0 ] unsigned char 
  4244 ;; Return value:  Size  Location     Type
  4245 ;;                  1    wreg      unsigned char 
  4246 ;; Registers used:
  4247 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4248 ;; Tracked objects:
  4249 ;;		On entry : 0/0
  4250 ;;		On exit  : 0/0
  4251 ;;		Unchanged: 0/0
  4252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4253 ;;      Params:         0       0       0       0
  4254 ;;      Locals:         0       5       0       0
  4255 ;;      Temps:          0       1       0       0
  4256 ;;      Totals:         0       6       0       0
  4257 ;;Total ram usage:        6 bytes
  4258 ;; Hardware stack levels used:    1
  4259 ;; Hardware stack levels required when called:    4
  4260 ;; This function calls:
  4261 ;;		_CW_Delay100us
  4262 ;;		_cw_read
  4263 ;;		_cw_write
  4264 ;; This function is called by:
  4265 ;;		_cw_init
  4266 ;; This function uses a non-reentrant model
  4267 ;;
  4268                           
  4269                           
  4270                           ;psect for function _cw_update_config_info
  4271  0583                     _cw_update_config_info:	
  4272                           
  4273                           ;CW201x.c: 55: int ret = 0;
  4274                           
  4275                           ;incstack = 0
  4276                           ; Regs used in _cw_update_config_info: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4277  0583  0140               	movlb	0	; select bank0
  4278  0584  01A9               	clrf	cw_update_config_info@ret
  4279  0585  01AA               	clrf	cw_update_config_info@ret+1
  4280                           
  4281                           ;CW201x.c: 56: unsigned char i;
  4282                           ;CW201x.c: 57: unsigned char reset_val;
  4283                           ;CW201x.c: 58: unsigned char reg_val;
  4284                           ;CW201x.c: 59: const unsigned char cw_bat_config_info[64] = {
  4285                           ;CW201x.c: 60: 0x14,0xA6,0x70,0x6C,0x6C,0x67,0x64,
  4286                           ;CW201x.c: 61: 0x62,0x60,0x5C,0x59,0x4E,0x50,0x42,
  4287                           ;CW201x.c: 62: 0x2E,0x26,0x25,0x24,0x27,0x2E,0x41,
  4288                           ;CW201x.c: 63: 0x5A,0x6D,0x4C,0x39,0xD7,0x06,0x66,
  4289                           ;CW201x.c: 64: 0x00,0x01,0x05,0x34,0x61,0x76,0x79,
  4290                           ;CW201x.c: 65: 0x7D,0x42,0x1E,0xA4,0x00,0x27,0x5A,
  4291                           ;CW201x.c: 66: 0x52,0x87,0x8F,0x91,0x94,0x52,0x82,
  4292  0586  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4293  0587  00A7               	movwf	??_cw_update_config_info
  4294  0588  0827               	movf	??_cw_update_config_info,w
  4295  0589  00A4               	movwf	cw_read@r_pdata
  4296  058A  300A               	movlw	10
  4297  058B  233C               	fcall	_cw_read
  4298  058C  0140               	movlb	0	; select bank0
  4299  058D  0825               	movf	?_cw_read+1,w
  4300  058E  00AA               	movwf	cw_update_config_info@ret+1
  4301  058F  0824               	movf	?_cw_read,w
  4302  0590  00A9               	movwf	cw_update_config_info@ret
  4303                           
  4304                           ;CW201x.c: 74: if(ret)
  4305  0591  0829               	movf	cw_update_config_info@ret,w
  4306  0592  042A               	iorwf	cw_update_config_info@ret+1,w
  4307  0593  1903               	btfsc	3,2
  4308  0594  2D97               	goto	l1847
  4309                           
  4310                           ;CW201x.c: 75: {
  4311                           ;CW201x.c: 76: return 1;
  4312  0595  3001               	movlw	1
  4313  0596  0008               	return
  4314  0597                     l1847:	
  4315                           
  4316                           ;CW201x.c: 77: }
  4317                           ;CW201x.c: 78: if((reg_val & (0x3<<6)) == (0x3<<6))
  4318  0597  30C0               	movlw	192
  4319  0598  052C               	andwf	cw_update_config_info@reg_val,w
  4320  0599  00A7               	movwf	??_cw_update_config_info
  4321  059A  30C0               	movlw	192
  4322  059B  0627               	xorwf	??_cw_update_config_info,w
  4323  059C  1D03               	btfss	3,2
  4324  059D  2DA0               	goto	l1853
  4325                           
  4326                           ;CW201x.c: 79: {
  4327                           ;CW201x.c: 80: return 2;
  4328  059E  3002               	movlw	2
  4329  059F  0008               	return
  4330  05A0                     l1853:	
  4331                           
  4332                           ;CW201x.c: 81: }
  4333                           ;CW201x.c: 83: for(i = 0; i < 64; i++)
  4334  05A0  01AB               	clrf	cw_update_config_info@i
  4335  05A1  3040               	movlw	64
  4336  05A2  022B               	subwf	cw_update_config_info@i,w
  4337  05A3  1803               	btfsc	3,0
  4338  05A4  2DCA               	goto	l1873
  4339  05A5                     l1859:	
  4340                           
  4341                           ;CW201x.c: 84: {
  4342                           ;CW201x.c: 85: reg_val = cw_bat_config_info[i];
  4343  05A5  082B               	movf	cw_update_config_info@i,w
  4344  05A6  3E74               	addlw	low (cw_update_config_info@cw_bat_config_info| (0+32768))
  4345  05A7  0084               	movwf	4
  4346  05A8  3083               	movlw	high (cw_update_config_info@cw_bat_config_info| (0+32768))
  4347  05A9  1803               	skipnc
  4348  05AA  3E01               	addlw	1
  4349  05AB  0085               	movwf	5
  4350  05AC  0800               	movf	0,w	;code access
  4351  05AD  00A7               	movwf	??_cw_update_config_info
  4352  05AE  0827               	movf	??_cw_update_config_info,w
  4353  05AF  00AC               	movwf	cw_update_config_info@reg_val
  4354                           
  4355                           ;CW201x.c: 86: ret = cw_write(0x10+i, &reg_val);
  4356  05B0  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4357  05B1  00A7               	movwf	??_cw_update_config_info
  4358  05B2  0827               	movf	??_cw_update_config_info,w
  4359  05B3  00A4               	movwf	cw_write@w_pdata
  4360  05B4  082B               	movf	cw_update_config_info@i,w
  4361  05B5  3E10               	addlw	16
  4362  05B6  230A               	fcall	_cw_write
  4363  05B7  0140               	movlb	0	; select bank0
  4364  05B8  0825               	movf	?_cw_write+1,w
  4365  05B9  00AA               	movwf	cw_update_config_info@ret+1
  4366  05BA  0824               	movf	?_cw_write,w
  4367  05BB  00A9               	movwf	cw_update_config_info@ret
  4368                           
  4369                           ;CW201x.c: 87: if(ret)
  4370  05BC  0829               	movf	cw_update_config_info@ret,w
  4371  05BD  042A               	iorwf	cw_update_config_info@ret+1,w
  4372  05BE  1903               	btfsc	3,2
  4373  05BF  2DC2               	goto	l1869
  4374                           
  4375                           ;CW201x.c: 88: {
  4376                           ;CW201x.c: 89: return 1;
  4377  05C0  3001               	movlw	1
  4378  05C1  0008               	return
  4379  05C2                     l1869:	
  4380  05C2  3001               	movlw	1
  4381  05C3  00A7               	movwf	??_cw_update_config_info
  4382  05C4  0827               	movf	??_cw_update_config_info,w
  4383  05C5  07AB               	addwf	cw_update_config_info@i,f
  4384  05C6  3040               	movlw	64
  4385  05C7  022B               	subwf	cw_update_config_info@i,w
  4386  05C8  1C03               	skipc
  4387  05C9  2DA5               	goto	l1859
  4388  05CA                     l1873:	
  4389                           
  4390                           ;CW201x.c: 90: }
  4391                           ;CW201x.c: 91: }
  4392                           ;CW201x.c: 94: for(i = 0; i < 64; i++)
  4393  05CA  01AB               	clrf	cw_update_config_info@i
  4394  05CB  3040               	movlw	64
  4395  05CC  022B               	subwf	cw_update_config_info@i,w
  4396  05CD  1803               	btfsc	3,0
  4397  05CE  2DF6               	goto	l1897
  4398  05CF                     l1879:	
  4399                           
  4400                           ;CW201x.c: 95: {
  4401                           ;CW201x.c: 96: ret = cw_read(0x10+i, &reg_val);
  4402  05CF  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4403  05D0  00A7               	movwf	??_cw_update_config_info
  4404  05D1  0827               	movf	??_cw_update_config_info,w
  4405  05D2  00A4               	movwf	cw_read@r_pdata
  4406  05D3  082B               	movf	cw_update_config_info@i,w
  4407  05D4  3E10               	addlw	16
  4408  05D5  233C               	fcall	_cw_read
  4409  05D6  0140               	movlb	0	; select bank0
  4410  05D7  0825               	movf	?_cw_read+1,w
  4411  05D8  00AA               	movwf	cw_update_config_info@ret+1
  4412  05D9  0824               	movf	?_cw_read,w
  4413  05DA  00A9               	movwf	cw_update_config_info@ret
  4414                           
  4415                           ;CW201x.c: 97: if(ret)
  4416  05DB  0829               	movf	cw_update_config_info@ret,w
  4417  05DC  042A               	iorwf	cw_update_config_info@ret+1,w
  4418  05DD  1903               	btfsc	3,2
  4419  05DE  2DE1               	goto	l1887
  4420                           
  4421                           ;CW201x.c: 98: {
  4422                           ;CW201x.c: 99: return 1;
  4423  05DF  3001               	movlw	1
  4424  05E0  0008               	return
  4425  05E1                     l1887:	
  4426                           
  4427                           ;CW201x.c: 100: }
  4428                           ;CW201x.c: 101: if(reg_val != cw_bat_config_info[i])
  4429  05E1  082B               	movf	cw_update_config_info@i,w
  4430  05E2  3E74               	addlw	low (cw_update_config_info@cw_bat_config_info| (0+32768))
  4431  05E3  0084               	movwf	4
  4432  05E4  3083               	movlw	high (cw_update_config_info@cw_bat_config_info| (0+32768))
  4433  05E5  1803               	skipnc
  4434  05E6  3E01               	addlw	1
  4435  05E7  0085               	movwf	5
  4436  05E8  0800               	movf	0,w	;code access
  4437  05E9  062C               	xorwf	cw_update_config_info@reg_val,w
  4438  05EA  1903               	skipnz
  4439  05EB  2DEE               	goto	l1893
  4440                           
  4441                           ;CW201x.c: 102: {
  4442                           ;CW201x.c: 103: return 3;
  4443  05EC  3003               	movlw	3
  4444  05ED  0008               	return
  4445  05EE                     l1893:	
  4446  05EE  3001               	movlw	1
  4447  05EF  00A7               	movwf	??_cw_update_config_info
  4448  05F0  0827               	movf	??_cw_update_config_info,w
  4449  05F1  07AB               	addwf	cw_update_config_info@i,f
  4450  05F2  3040               	movlw	64
  4451  05F3  022B               	subwf	cw_update_config_info@i,w
  4452  05F4  1C03               	skipc
  4453  05F5  2DCF               	goto	l1879
  4454  05F6                     l1897:	
  4455                           
  4456                           ;CW201x.c: 104: }
  4457                           ;CW201x.c: 105: }
  4458                           ;CW201x.c: 107: ret = cw_read(0x8, &reg_val);
  4459  05F6  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4460  05F7  00A7               	movwf	??_cw_update_config_info
  4461  05F8  0827               	movf	??_cw_update_config_info,w
  4462  05F9  00A4               	movwf	cw_read@r_pdata
  4463  05FA  3008               	movlw	8
  4464  05FB  233C               	fcall	_cw_read
  4465  05FC  0140               	movlb	0	; select bank0
  4466  05FD  0825               	movf	?_cw_read+1,w
  4467  05FE  00AA               	movwf	cw_update_config_info@ret+1
  4468  05FF  0824               	movf	?_cw_read,w
  4469  0600  00A9               	movwf	cw_update_config_info@ret
  4470                           
  4471                           ;CW201x.c: 108: if(ret)
  4472  0601  0829               	movf	cw_update_config_info@ret,w
  4473  0602  042A               	iorwf	cw_update_config_info@ret+1,w
  4474  0603  1903               	btfsc	3,2
  4475  0604  2E07               	goto	l226
  4476                           
  4477                           ;CW201x.c: 109: {
  4478                           ;CW201x.c: 110: return 1;
  4479  0605  3001               	movlw	1
  4480  0606  0008               	return
  4481  0607                     l226:	
  4482                           
  4483                           ;CW201x.c: 111: }
  4484                           ;CW201x.c: 112: reg_val |= (0x1<<1);
  4485  0607  14AC               	bsf	cw_update_config_info@reg_val,1
  4486                           
  4487                           ;CW201x.c: 114: reg_val |= (0x0<<3);
  4488  0608  3007               	movlw	7
  4489  0609  00A7               	movwf	??_cw_update_config_info
  4490  060A  0827               	movf	??_cw_update_config_info,w
  4491  060B  05AC               	andwf	cw_update_config_info@reg_val,f
  4492                           
  4493                           ;CW201x.c: 115: ret = cw_write(0x8, &reg_val);
  4494  060C  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4495  060D  00A7               	movwf	??_cw_update_config_info
  4496  060E  0827               	movf	??_cw_update_config_info,w
  4497  060F  00A4               	movwf	cw_write@w_pdata
  4498  0610  3008               	movlw	8
  4499  0611  230A               	fcall	_cw_write
  4500  0612  0140               	movlb	0	; select bank0
  4501  0613  0825               	movf	?_cw_write+1,w
  4502  0614  00AA               	movwf	cw_update_config_info@ret+1
  4503  0615  0824               	movf	?_cw_write,w
  4504  0616  00A9               	movwf	cw_update_config_info@ret
  4505                           
  4506                           ;CW201x.c: 116: if(ret)
  4507  0617  0829               	movf	cw_update_config_info@ret,w
  4508  0618  042A               	iorwf	cw_update_config_info@ret+1,w
  4509  0619  1903               	btfsc	3,2
  4510  061A  2E1D               	goto	l1915
  4511                           
  4512                           ;CW201x.c: 117: {
  4513                           ;CW201x.c: 118: return 1;
  4514  061B  3001               	movlw	1
  4515  061C  0008               	return
  4516  061D                     l1915:	
  4517                           
  4518                           ;CW201x.c: 119: }
  4519                           ;CW201x.c: 121: reset_val = (0x0<<6);
  4520  061D  01A8               	clrf	cw_update_config_info@reset_val
  4521                           
  4522                           ;CW201x.c: 122: reg_val = (0xf<<0);
  4523  061E  300F               	movlw	15
  4524  061F  00A7               	movwf	??_cw_update_config_info
  4525  0620  0827               	movf	??_cw_update_config_info,w
  4526  0621  00AC               	movwf	cw_update_config_info@reg_val
  4527                           
  4528                           ;CW201x.c: 123: ret = cw_write(0xA, &reg_val);
  4529  0622  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4530  0623  00A7               	movwf	??_cw_update_config_info
  4531  0624  0827               	movf	??_cw_update_config_info,w
  4532  0625  00A4               	movwf	cw_write@w_pdata
  4533  0626  300A               	movlw	10
  4534  0627  230A               	fcall	_cw_write
  4535  0628  0140               	movlb	0	; select bank0
  4536  0629  0825               	movf	?_cw_write+1,w
  4537  062A  00AA               	movwf	cw_update_config_info@ret+1
  4538  062B  0824               	movf	?_cw_write,w
  4539  062C  00A9               	movwf	cw_update_config_info@ret
  4540                           
  4541                           ;CW201x.c: 124: if(ret)
  4542  062D  0829               	movf	cw_update_config_info@ret,w
  4543  062E  042A               	iorwf	cw_update_config_info@ret+1,w
  4544  062F  1903               	btfsc	3,2
  4545  0630  2E33               	goto	l1927
  4546                           
  4547                           ;CW201x.c: 125: {
  4548                           ;CW201x.c: 126: return 1;
  4549  0631  3001               	movlw	1
  4550  0632  0008               	return
  4551  0633                     l1927:	
  4552                           
  4553                           ;CW201x.c: 127: }
  4554                           ;CW201x.c: 128: CW_Delay100us();
  4555  0633  21D6               	fcall	_CW_Delay100us
  4556                           
  4557                           ;CW201x.c: 129: ret = cw_write(0xA, &reset_val);
  4558  0634  3028               	movlw	(low (cw_update_config_info@reset_val| 0))& (0+255)
  4559  0635  0140               	movlb	0	; select bank0
  4560  0636  00A7               	movwf	??_cw_update_config_info
  4561  0637  0827               	movf	??_cw_update_config_info,w
  4562  0638  00A4               	movwf	cw_write@w_pdata
  4563  0639  300A               	movlw	10
  4564  063A  230A               	fcall	_cw_write
  4565  063B  0140               	movlb	0	; select bank0
  4566  063C  0825               	movf	?_cw_write+1,w
  4567  063D  00AA               	movwf	cw_update_config_info@ret+1
  4568  063E  0824               	movf	?_cw_write,w
  4569  063F  00A9               	movwf	cw_update_config_info@ret
  4570                           
  4571                           ;CW201x.c: 130: if(ret)
  4572  0640  0829               	movf	cw_update_config_info@ret,w
  4573  0641  042A               	iorwf	cw_update_config_info@ret+1,w
  4574  0642  1903               	btfsc	3,2
  4575  0643  2E46               	goto	l1937
  4576                           
  4577                           ;CW201x.c: 131: {
  4578                           ;CW201x.c: 132: return 1;
  4579  0644  3001               	movlw	1
  4580  0645  0008               	return
  4581  0646                     l1937:	
  4582                           
  4583                           ;CW201x.c: 133: }
  4584                           ;CW201x.c: 134: return 0;
  4585  0646  3000               	movlw	0
  4586  0647  0008               	return
  4587  0648                     __end_of_cw_update_config_info:	
  4588                           
  4589                           	psect	text15
  4590  030A                     __ptext15:	
  4591 ;; *************** function _cw_write *****************
  4592 ;; Defined at:
  4593 ;;		line 222 in file "iic.c"
  4594 ;; Parameters:    Size  Location     Type
  4595 ;;  point_reg       1    wreg     unsigned char 
  4596 ;;  w_pdata         1    4[BANK0 ] PTR unsigned char 
  4597 ;;		 -> cw_por@reset_val(1), cw_init@reg_val(1), cw_update_config_info@reset_val(1), cw_update_config_info@reg_val(1), 
  4598 ;; Auto vars:     Size  Location     Type
  4599 ;;  point_reg       1   12[COMMON] unsigned char 
  4600 ;; Return value:  Size  Location     Type
  4601 ;;                  2    4[BANK0 ] int 
  4602 ;; Registers used:
  4603 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4604 ;; Tracked objects:
  4605 ;;		On entry : 0/0
  4606 ;;		On exit  : 0/0
  4607 ;;		Unchanged: 0/0
  4608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4609 ;;      Params:         0       3       0       0
  4610 ;;      Locals:         1       0       0       0
  4611 ;;      Temps:          0       0       0       0
  4612 ;;      Totals:         1       3       0       0
  4613 ;;Total ram usage:        4 bytes
  4614 ;; Hardware stack levels used:    1
  4615 ;; Hardware stack levels required when called:    3
  4616 ;; This function calls:
  4617 ;;		_start
  4618 ;;		_stop
  4619 ;;		_wait_r_ack
  4620 ;;		_write_byte
  4621 ;; This function is called by:
  4622 ;;		_cw_update_config_info
  4623 ;;		_cw_init
  4624 ;;		_cw_por
  4625 ;; This function uses a non-reentrant model
  4626 ;;
  4627                           
  4628                           
  4629                           ;psect for function _cw_write
  4630  030A                     _cw_write:	
  4631                           
  4632                           ;incstack = 0
  4633                           ; Regs used in _cw_write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4634                           ;cw_write@point_reg stored from wreg
  4635  030A  00FC               	movwf	cw_write@point_reg
  4636                           
  4637                           ;iic.c: 224: start();
  4638  030B  2134               	fcall	_start
  4639                           
  4640                           ;iic.c: 225: write_byte(0xc4);
  4641  030C  30C4               	movlw	196
  4642  030D  21B7               	fcall	_write_byte
  4643                           
  4644                           ;iic.c: 226: if(wait_r_ack())
  4645  030E  22D8               	fcall	_wait_r_ack
  4646  030F  087A               	movf	?_wait_r_ack,w
  4647  0310  047B               	iorwf	?_wait_r_ack+1,w
  4648  0311  1903               	btfsc	3,2
  4649  0312  2B19               	goto	l1793
  4650                           
  4651                           ;iic.c: 227: {
  4652                           ;iic.c: 228: return 1;
  4653  0313  3001               	movlw	1
  4654  0314  0140               	movlb	0	; select bank0
  4655  0315  00A4               	movwf	?_cw_write
  4656  0316  3000               	movlw	0
  4657  0317  00A5               	movwf	?_cw_write+1
  4658  0318  0008               	return
  4659  0319                     l1793:	
  4660                           
  4661                           ;iic.c: 229: }
  4662                           ;iic.c: 230: write_byte(point_reg);
  4663  0319  087C               	movf	cw_write@point_reg,w
  4664  031A  21B7               	fcall	_write_byte
  4665                           
  4666                           ;iic.c: 231: if(wait_r_ack())
  4667  031B  22D8               	fcall	_wait_r_ack
  4668  031C  087A               	movf	?_wait_r_ack,w
  4669  031D  047B               	iorwf	?_wait_r_ack+1,w
  4670  031E  1903               	btfsc	3,2
  4671  031F  2B26               	goto	l1799
  4672                           
  4673                           ;iic.c: 232: {
  4674                           ;iic.c: 233: return 1;
  4675  0320  3001               	movlw	1
  4676  0321  0140               	movlb	0	; select bank0
  4677  0322  00A4               	movwf	?_cw_write
  4678  0323  3000               	movlw	0
  4679  0324  00A5               	movwf	?_cw_write+1
  4680  0325  0008               	return
  4681  0326                     l1799:	
  4682                           
  4683                           ;iic.c: 234: }
  4684                           ;iic.c: 235: write_byte(*w_pdata);
  4685  0326  0140               	movlb	0	; select bank0
  4686  0327  0824               	movf	cw_write@w_pdata,w
  4687  0328  0086               	movwf	6
  4688  0329  0187               	clrf	7
  4689  032A  0801               	movf	1,w
  4690  032B  21B7               	fcall	_write_byte
  4691                           
  4692                           ;iic.c: 236: if(wait_r_ack())
  4693  032C  22D8               	fcall	_wait_r_ack
  4694  032D  087A               	movf	?_wait_r_ack,w
  4695  032E  047B               	iorwf	?_wait_r_ack+1,w
  4696  032F  1903               	btfsc	3,2
  4697  0330  2B37               	goto	l1807
  4698                           
  4699                           ;iic.c: 237: {
  4700                           ;iic.c: 238: return 1;
  4701  0331  3001               	movlw	1
  4702  0332  0140               	movlb	0	; select bank0
  4703  0333  00A4               	movwf	?_cw_write
  4704  0334  3000               	movlw	0
  4705  0335  00A5               	movwf	?_cw_write+1
  4706  0336  0008               	return
  4707  0337                     l1807:	
  4708                           
  4709                           ;iic.c: 239: }
  4710                           ;iic.c: 240: stop();
  4711  0337  2157               	fcall	_stop
  4712                           
  4713                           ;iic.c: 241: return 0;
  4714  0338  0140               	movlb	0	; select bank0
  4715  0339  01A4               	clrf	?_cw_write
  4716  033A  01A5               	clrf	?_cw_write+1
  4717  033B  0008               	return
  4718  033C                     __end_of_cw_write:	
  4719                           
  4720                           	psect	text16
  4721  033C                     __ptext16:	
  4722 ;; *************** function _cw_read *****************
  4723 ;; Defined at:
  4724 ;;		line 164 in file "iic.c"
  4725 ;; Parameters:    Size  Location     Type
  4726 ;;  point_reg       1    wreg     unsigned char 
  4727 ;;  r_pdata         1    4[BANK0 ] PTR unsigned char 
  4728 ;;		 -> cw_get_capacity@reg_val(1), cw_init@reg_val(1), cw_update_config_info@reg_val(1), 
  4729 ;; Auto vars:     Size  Location     Type
  4730 ;;  point_reg       1   13[COMMON] unsigned char 
  4731 ;; Return value:  Size  Location     Type
  4732 ;;                  2    4[BANK0 ] int 
  4733 ;; Registers used:
  4734 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4735 ;; Tracked objects:
  4736 ;;		On entry : 0/0
  4737 ;;		On exit  : 0/0
  4738 ;;		Unchanged: 0/0
  4739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4740 ;;      Params:         0       2       0       0
  4741 ;;      Locals:         1       0       0       0
  4742 ;;      Temps:          1       0       0       0
  4743 ;;      Totals:         2       2       0       0
  4744 ;;Total ram usage:        4 bytes
  4745 ;; Hardware stack levels used:    1
  4746 ;; Hardware stack levels required when called:    3
  4747 ;; This function calls:
  4748 ;;		_read_byte
  4749 ;;		_s_ack
  4750 ;;		_start
  4751 ;;		_stop
  4752 ;;		_wait_r_ack
  4753 ;;		_write_byte
  4754 ;; This function is called by:
  4755 ;;		_cw_update_config_info
  4756 ;;		_cw_init
  4757 ;;		_cw_get_capacity
  4758 ;; This function uses a non-reentrant model
  4759 ;;
  4760                           
  4761                           
  4762                           ;psect for function _cw_read
  4763  033C                     _cw_read:	
  4764                           
  4765                           ;incstack = 0
  4766                           ; Regs used in _cw_read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4767                           ;cw_read@point_reg stored from wreg
  4768  033C  00FD               	movwf	cw_read@point_reg
  4769                           
  4770                           ;iic.c: 166: start();
  4771  033D  2134               	fcall	_start
  4772                           
  4773                           ;iic.c: 167: write_byte(0xc4);
  4774  033E  30C4               	movlw	196
  4775  033F  21B7               	fcall	_write_byte
  4776                           
  4777                           ;iic.c: 168: if(wait_r_ack())
  4778  0340  22D8               	fcall	_wait_r_ack
  4779  0341  087A               	movf	?_wait_r_ack,w
  4780  0342  047B               	iorwf	?_wait_r_ack+1,w
  4781  0343  1903               	btfsc	3,2
  4782  0344  2B4B               	goto	l1765
  4783                           
  4784                           ;iic.c: 169: {
  4785                           ;iic.c: 170: return 1;
  4786  0345  3001               	movlw	1
  4787  0346  0140               	movlb	0	; select bank0
  4788  0347  00A4               	movwf	?_cw_read
  4789  0348  3000               	movlw	0
  4790  0349  00A5               	movwf	?_cw_read+1
  4791  034A  0008               	return
  4792  034B                     l1765:	
  4793                           
  4794                           ;iic.c: 171: }
  4795                           ;iic.c: 172: write_byte(point_reg);
  4796  034B  087D               	movf	cw_read@point_reg,w
  4797  034C  21B7               	fcall	_write_byte
  4798                           
  4799                           ;iic.c: 173: if(wait_r_ack())
  4800  034D  22D8               	fcall	_wait_r_ack
  4801  034E  087A               	movf	?_wait_r_ack,w
  4802  034F  047B               	iorwf	?_wait_r_ack+1,w
  4803  0350  1903               	btfsc	3,2
  4804  0351  2B58               	goto	l1771
  4805                           
  4806                           ;iic.c: 174: {
  4807                           ;iic.c: 175: return 1;
  4808  0352  3001               	movlw	1
  4809  0353  0140               	movlb	0	; select bank0
  4810  0354  00A4               	movwf	?_cw_read
  4811  0355  3000               	movlw	0
  4812  0356  00A5               	movwf	?_cw_read+1
  4813  0357  0008               	return
  4814  0358                     l1771:	
  4815                           
  4816                           ;iic.c: 176: }
  4817                           ;iic.c: 177: start();
  4818  0358  2134               	fcall	_start
  4819                           
  4820                           ;iic.c: 178: write_byte(0xc5);
  4821  0359  30C5               	movlw	197
  4822  035A  21B7               	fcall	_write_byte
  4823                           
  4824                           ;iic.c: 179: if(wait_r_ack())
  4825  035B  22D8               	fcall	_wait_r_ack
  4826  035C  087A               	movf	?_wait_r_ack,w
  4827  035D  047B               	iorwf	?_wait_r_ack+1,w
  4828  035E  1903               	btfsc	3,2
  4829  035F  2B66               	goto	l1777
  4830                           
  4831                           ;iic.c: 180: {
  4832                           ;iic.c: 181: return 1;
  4833  0360  3001               	movlw	1
  4834  0361  0140               	movlb	0	; select bank0
  4835  0362  00A4               	movwf	?_cw_read
  4836  0363  3000               	movlw	0
  4837  0364  00A5               	movwf	?_cw_read+1
  4838  0365  0008               	return
  4839  0366                     l1777:	
  4840                           
  4841                           ;iic.c: 182: }
  4842                           ;iic.c: 183: *r_pdata = read_byte();
  4843  0366  2258               	fcall	_read_byte
  4844  0367  00FC               	movwf	??_cw_read
  4845  0368  0140               	movlb	0	; select bank0
  4846  0369  0824               	movf	cw_read@r_pdata,w
  4847  036A  0086               	movwf	6
  4848  036B  0187               	clrf	7
  4849  036C  087C               	movf	??_cw_read,w
  4850  036D  0081               	movwf	1
  4851                           
  4852                           ;iic.c: 184: s_ack();
  4853  036E  2129               	fcall	_s_ack
  4854                           
  4855                           ;iic.c: 185: stop();
  4856  036F  2157               	fcall	_stop
  4857                           
  4858                           ;iic.c: 186: return 0;
  4859  0370  0140               	movlb	0	; select bank0
  4860  0371  01A4               	clrf	?_cw_read
  4861  0372  01A5               	clrf	?_cw_read+1
  4862  0373  0008               	return
  4863  0374                     __end_of_cw_read:	
  4864                           
  4865                           	psect	text17
  4866  01B7                     __ptext17:	
  4867 ;; *************** function _write_byte *****************
  4868 ;; Defined at:
  4869 ;;		line 126 in file "iic.c"
  4870 ;; Parameters:    Size  Location     Type
  4871 ;;  w_data          1    wreg     unsigned char 
  4872 ;; Auto vars:     Size  Location     Type
  4873 ;;  w_data          1    5[COMMON] unsigned char 
  4874 ;;  i               1    6[COMMON] unsigned char 
  4875 ;; Return value:  Size  Location     Type
  4876 ;;                  1    wreg      void 
  4877 ;; Registers used:
  4878 ;;		wreg, status,2, status,0, pclath, cstack
  4879 ;; Tracked objects:
  4880 ;;		On entry : 0/0
  4881 ;;		On exit  : 0/0
  4882 ;;		Unchanged: 0/0
  4883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4884 ;;      Params:         0       0       0       0
  4885 ;;      Locals:         2       0       0       0
  4886 ;;      Temps:          1       0       0       0
  4887 ;;      Totals:         3       0       0       0
  4888 ;;Total ram usage:        3 bytes
  4889 ;; Hardware stack levels used:    1
  4890 ;; Hardware stack levels required when called:    1
  4891 ;; This function calls:
  4892 ;;		_Delay10us
  4893 ;; This function is called by:
  4894 ;;		_cw_read
  4895 ;;		_cw_read_word
  4896 ;;		_cw_write
  4897 ;; This function uses a non-reentrant model
  4898 ;;
  4899                           
  4900                           
  4901                           ;psect for function _write_byte
  4902  01B7                     _write_byte:	
  4903                           
  4904                           ;incstack = 0
  4905                           ; Regs used in _write_byte: [wreg+status,2+status,0+pclath+cstack]
  4906                           ;write_byte@w_data stored from wreg
  4907  01B7  00F5               	movwf	write_byte@w_data
  4908                           
  4909                           ;iic.c: 128: unsigned char i;
  4910                           ;iic.c: 129: do { TRISCbits.TRISC1 = 0; } while(0);
  4911  01B8  0140               	movlb	0	; select bank0
  4912  01B9  1094               	bcf	20,1	;volatile
  4913                           
  4914                           ;iic.c: 130: for(i = 0; i < 8; i++)
  4915  01BA  01F6               	clrf	write_byte@i
  4916  01BB                     L4:	
  4917  01BB  3008               	movlw	8
  4918  01BC  0276               	subwf	write_byte@i,w
  4919  01BD  1803               	btfsc	3,0
  4920  01BE  0008               	return
  4921                           
  4922                           ;iic.c: 131: {
  4923                           ;iic.c: 132: LATCbits.LATC1 = (w_data & 0x80)?1:0;
  4924  01BF  1FF5               	btfss	write_byte@w_data,7
  4925  01C0  29C4               	goto	u1250
  4926  01C1  0140               	movlb	0	; select bank0
  4927  01C2  149A               	bsf	26,1	;volatile
  4928  01C3  29C6               	goto	l1695
  4929  01C4                     u1250:	
  4930  01C4  0140               	movlb	0	; select bank0
  4931  01C5  109A               	bcf	26,1	;volatile
  4932  01C6                     l1695:	
  4933                           
  4934                           ;iic.c: 133: Delay10us();
  4935  01C6  21F6               	fcall	_Delay10us
  4936                           
  4937                           ;iic.c: 134: do { LATCbits.LATC0 = 1; } while(0);
  4938  01C7  0140               	movlb	0	; select bank0
  4939  01C8  141A               	bsf	26,0	;volatile
  4940                           
  4941                           ;iic.c: 135: Delay10us();
  4942  01C9  21F6               	fcall	_Delay10us
  4943                           
  4944                           ;iic.c: 136: do { LATCbits.LATC0 = 0; } while(0);
  4945  01CA  0140               	movlb	0	; select bank0
  4946  01CB  101A               	bcf	26,0	;volatile
  4947                           
  4948                           ;iic.c: 137: Delay10us();
  4949  01CC  21F6               	fcall	_Delay10us
  4950                           
  4951                           ;iic.c: 138: w_data = w_data << 1;
  4952  01CD  3575               	lslf	write_byte@w_data,w
  4953  01CE  00F4               	movwf	??_write_byte
  4954  01CF  0874               	movf	??_write_byte,w
  4955  01D0  00F5               	movwf	write_byte@w_data
  4956  01D1  3001               	movlw	1
  4957  01D2  00F4               	movwf	??_write_byte
  4958  01D3  0874               	movf	??_write_byte,w
  4959  01D4  07F6               	addwf	write_byte@i,f
  4960  01D5  29BB               	goto	L4
  4961  01D6                     __end_of_write_byte:	
  4962                           
  4963                           	psect	text18
  4964  02D8                     __ptext18:	
  4965 ;; *************** function _wait_r_ack *****************
  4966 ;; Defined at:
  4967 ;;		line 80 in file "iic.c"
  4968 ;; Parameters:    Size  Location     Type
  4969 ;;		None
  4970 ;; Auto vars:     Size  Location     Type
  4971 ;;  i               2    2[BANK0 ] unsigned int 
  4972 ;;  ack             2    0[BANK0 ] int 
  4973 ;; Return value:  Size  Location     Type
  4974 ;;                  2   10[COMMON] int 
  4975 ;; Registers used:
  4976 ;;		wreg, status,2, status,0, pclath, cstack
  4977 ;; Tracked objects:
  4978 ;;		On entry : 0/0
  4979 ;;		On exit  : 0/0
  4980 ;;		Unchanged: 0/0
  4981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4982 ;;      Params:         2       0       0       0
  4983 ;;      Locals:         0       4       0       0
  4984 ;;      Temps:          0       0       0       0
  4985 ;;      Totals:         2       4       0       0
  4986 ;;Total ram usage:        6 bytes
  4987 ;; Hardware stack levels used:    1
  4988 ;; Hardware stack levels required when called:    2
  4989 ;; This function calls:
  4990 ;;		_r_ack
  4991 ;;		_stop
  4992 ;; This function is called by:
  4993 ;;		_cw_read
  4994 ;;		_cw_read_word
  4995 ;;		_cw_write
  4996 ;; This function uses a non-reentrant model
  4997 ;;
  4998                           
  4999                           
  5000                           ;psect for function _wait_r_ack
  5001  02D8                     _wait_r_ack:	
  5002                           
  5003                           ;iic.c: 82: int ack;
  5004                           ;iic.c: 83: unsigned int i;
  5005                           ;iic.c: 84: ack = 1;
  5006                           
  5007                           ;incstack = 0
  5008                           ; Regs used in _wait_r_ack: [wreg+status,2+status,0+pclath+cstack]
  5009  02D8  3001               	movlw	1
  5010  02D9  0140               	movlb	0	; select bank0
  5011  02DA  00A0               	movwf	wait_r_ack@ack
  5012  02DB  3000               	movlw	0
  5013  02DC  00A1               	movwf	wait_r_ack@ack+1
  5014                           
  5015                           ;iic.c: 85: for(i = 0; i < 100; i++)
  5016  02DD  01A2               	clrf	wait_r_ack@i
  5017  02DE  01A3               	clrf	wait_r_ack@i+1
  5018  02DF  3000               	movlw	0
  5019  02E0  0223               	subwf	wait_r_ack@i+1,w
  5020  02E1  3064               	movlw	100
  5021  02E2  1903               	skipnz
  5022  02E3  0222               	subwf	wait_r_ack@i,w
  5023  02E4  1803               	btfsc	3,0
  5024  02E5  2B07               	goto	l1679
  5025  02E6                     l1663:	
  5026                           
  5027                           ;iic.c: 86: {
  5028                           ;iic.c: 87: ack = r_ack();
  5029  02E6  216F               	fcall	_r_ack
  5030  02E7  0875               	movf	?_r_ack+1,w
  5031  02E8  0140               	movlb	0	; select bank0
  5032  02E9  00A1               	movwf	wait_r_ack@ack+1
  5033  02EA  0874               	movf	?_r_ack,w
  5034  02EB  00A0               	movwf	wait_r_ack@ack
  5035                           
  5036                           ;iic.c: 88: if(!ack)
  5037  02EC  0820               	movf	wait_r_ack@ack,w
  5038  02ED  0421               	iorwf	wait_r_ack@ack+1,w
  5039  02EE  1903               	btfsc	3,2
  5040  02EF  2B07               	goto	l1679
  5041                           
  5042                           ;iic.c: 91: }
  5043                           ;iic.c: 92: if(i == 99)
  5044                           
  5045                           ;iic.c: 89: {
  5046                           ;iic.c: 90: break;
  5047  02F0  3063               	movlw	99
  5048  02F1  0622               	xorwf	wait_r_ack@i,w
  5049  02F2  0423               	iorwf	wait_r_ack@i+1,w
  5050  02F3  1D03               	btfss	3,2
  5051  02F4  2AFB               	goto	l1677
  5052                           
  5053                           ;iic.c: 93: {
  5054                           ;iic.c: 94: stop();
  5055  02F5  2157               	fcall	_stop
  5056                           
  5057                           ;iic.c: 95: return 1;
  5058  02F6  3001               	movlw	1
  5059  02F7  00FA               	movwf	?_wait_r_ack
  5060  02F8  3000               	movlw	0
  5061  02F9  00FB               	movwf	?_wait_r_ack+1
  5062  02FA  0008               	return
  5063  02FB                     l1677:	
  5064  02FB  3001               	movlw	1
  5065  02FC  0140               	movlb	0	; select bank0
  5066  02FD  07A2               	addwf	wait_r_ack@i,f
  5067  02FE  3000               	movlw	0
  5068  02FF  3DA3               	addwfc	wait_r_ack@i+1,f
  5069  0300  3000               	movlw	0
  5070  0301  0223               	subwf	wait_r_ack@i+1,w
  5071  0302  3064               	movlw	100
  5072  0303  1903               	skipnz
  5073  0304  0222               	subwf	wait_r_ack@i,w
  5074  0305  1C03               	skipc
  5075  0306  2AE6               	goto	l1663
  5076  0307                     l1679:	
  5077                           
  5078                           ;iic.c: 96: }
  5079                           ;iic.c: 97: }
  5080                           ;iic.c: 98: return 0;
  5081  0307  01FA               	clrf	?_wait_r_ack
  5082  0308  01FB               	clrf	?_wait_r_ack+1
  5083  0309  0008               	return
  5084  030A                     __end_of_wait_r_ack:	
  5085                           
  5086                           	psect	text19
  5087  0157                     __ptext19:	
  5088 ;; *************** function _stop *****************
  5089 ;; Defined at:
  5090 ;;		line 54 in file "iic.c"
  5091 ;; Parameters:    Size  Location     Type
  5092 ;;		None
  5093 ;; Auto vars:     Size  Location     Type
  5094 ;;		None
  5095 ;; Return value:  Size  Location     Type
  5096 ;;                  1    wreg      void 
  5097 ;; Registers used:
  5098 ;;		wreg, status,2, status,0, pclath, cstack
  5099 ;; Tracked objects:
  5100 ;;		On entry : 0/0
  5101 ;;		On exit  : 0/0
  5102 ;;		Unchanged: 0/0
  5103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5104 ;;      Params:         0       0       0       0
  5105 ;;      Locals:         0       0       0       0
  5106 ;;      Temps:          0       0       0       0
  5107 ;;      Totals:         0       0       0       0
  5108 ;;Total ram usage:        0 bytes
  5109 ;; Hardware stack levels used:    1
  5110 ;; Hardware stack levels required when called:    1
  5111 ;; This function calls:
  5112 ;;		_Delay10us
  5113 ;; This function is called by:
  5114 ;;		_wait_r_ack
  5115 ;;		_cw_read
  5116 ;;		_cw_read_word
  5117 ;;		_cw_write
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121                           
  5122                           ;psect for function _stop
  5123  0157                     _stop:	
  5124                           
  5125                           ;incstack = 0
  5126                           ; Regs used in _stop: [wreg+status,2+status,0+pclath+cstack]
  5127                           ;iic.c: 56: do { TRISCbits.TRISC1 = 0; } while(0);
  5128  0157  0140               	movlb	0	; select bank0
  5129  0158  1094               	bcf	20,1	;volatile
  5130                           
  5131                           ;iic.c: 57: do { LATCbits.LATC1 = 0; } while(0);
  5132  0159  109A               	bcf	26,1	;volatile
  5133                           
  5134                           ;iic.c: 58: Delay10us();
  5135  015A  21F6               	fcall	_Delay10us
  5136                           
  5137                           ;iic.c: 59: do { LATCbits.LATC0 = 1; } while(0);
  5138  015B  0140               	movlb	0	; select bank0
  5139  015C  141A               	bsf	26,0	;volatile
  5140                           
  5141                           ;iic.c: 60: Delay10us();
  5142  015D  21F6               	fcall	_Delay10us
  5143                           
  5144                           ;iic.c: 61: do { LATCbits.LATC1 = 1; } while(0);
  5145  015E  0140               	movlb	0	; select bank0
  5146  015F  149A               	bsf	26,1	;volatile
  5147                           
  5148                           ;iic.c: 62: Delay10us();
  5149  0160  21F6               	fcall	_Delay10us
  5150                           
  5151                           ;iic.c: 64: Delay10us();
  5152  0161  21F6               	fcall	_Delay10us
  5153  0162  0008               	return
  5154  0163                     __end_of_stop:	
  5155                           
  5156                           	psect	text20
  5157  016F                     __ptext20:	
  5158 ;; *************** function _r_ack *****************
  5159 ;; Defined at:
  5160 ;;		line 67 in file "iic.c"
  5161 ;; Parameters:    Size  Location     Type
  5162 ;;		None
  5163 ;; Auto vars:     Size  Location     Type
  5164 ;;  ack             2    8[COMMON] int 
  5165 ;; Return value:  Size  Location     Type
  5166 ;;                  2    4[COMMON] int 
  5167 ;; Registers used:
  5168 ;;		wreg, status,2, status,0, pclath, cstack
  5169 ;; Tracked objects:
  5170 ;;		On entry : 0/0
  5171 ;;		On exit  : 0/0
  5172 ;;		Unchanged: 0/0
  5173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5174 ;;      Params:         2       0       0       0
  5175 ;;      Locals:         2       0       0       0
  5176 ;;      Temps:          2       0       0       0
  5177 ;;      Totals:         6       0       0       0
  5178 ;;Total ram usage:        6 bytes
  5179 ;; Hardware stack levels used:    1
  5180 ;; Hardware stack levels required when called:    1
  5181 ;; This function calls:
  5182 ;;		_Delay10us
  5183 ;; This function is called by:
  5184 ;;		_wait_r_ack
  5185 ;; This function uses a non-reentrant model
  5186 ;;
  5187                           
  5188                           
  5189                           ;psect for function _r_ack
  5190  016F                     _r_ack:	
  5191                           
  5192                           ;incstack = 0
  5193                           ; Regs used in _r_ack: [wreg+status,2+status,0+pclath+cstack]
  5194                           ;iic.c: 69: int ack;
  5195                           ;iic.c: 70: do { TRISCbits.TRISC1 = 1; } while(0);
  5196  016F  0140               	movlb	0	; select bank0
  5197  0170  1494               	bsf	20,1	;volatile
  5198                           
  5199                           ;iic.c: 71: do { LATCbits.LATC0 = 1; } while(0);
  5200  0171  141A               	bsf	26,0	;volatile
  5201                           
  5202                           ;iic.c: 72: Delay10us();
  5203  0172  21F6               	fcall	_Delay10us
  5204                           
  5205                           ;iic.c: 73: ack = PORTCbits.RC1;
  5206  0173  0140               	movlb	0	; select bank0
  5207  0174  0C0E               	rrf	14,w	;volatile
  5208  0175  3901               	andlw	1
  5209  0176  00F6               	movwf	??_r_ack
  5210  0177  01F7               	clrf	??_r_ack+1
  5211  0178  0876               	movf	??_r_ack,w
  5212  0179  00F8               	movwf	r_ack@ack
  5213  017A  0877               	movf	??_r_ack+1,w
  5214  017B  00F9               	movwf	r_ack@ack+1
  5215                           
  5216                           ;iic.c: 74: Delay10us();
  5217  017C  21F6               	fcall	_Delay10us
  5218                           
  5219                           ;iic.c: 75: do { LATCbits.LATC0 = 0; } while(0);
  5220  017D  0140               	movlb	0	; select bank0
  5221  017E  101A               	bcf	26,0	;volatile
  5222                           
  5223                           ;iic.c: 76: Delay10us();
  5224  017F  21F6               	fcall	_Delay10us
  5225                           
  5226                           ;iic.c: 77: return ack;
  5227  0180  0879               	movf	r_ack@ack+1,w
  5228  0181  00F5               	movwf	?_r_ack+1
  5229  0182  0878               	movf	r_ack@ack,w
  5230  0183  00F4               	movwf	?_r_ack
  5231  0184  0008               	return
  5232  0185                     __end_of_r_ack:	
  5233                           
  5234                           	psect	text21
  5235  0134                     __ptext21:	
  5236 ;; *************** function _start *****************
  5237 ;; Defined at:
  5238 ;;		line 43 in file "iic.c"
  5239 ;; Parameters:    Size  Location     Type
  5240 ;;		None
  5241 ;; Auto vars:     Size  Location     Type
  5242 ;;		None
  5243 ;; Return value:  Size  Location     Type
  5244 ;;                  1    wreg      void 
  5245 ;; Registers used:
  5246 ;;		wreg, status,2, status,0, pclath, cstack
  5247 ;; Tracked objects:
  5248 ;;		On entry : 0/0
  5249 ;;		On exit  : 0/0
  5250 ;;		Unchanged: 0/0
  5251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5252 ;;      Params:         0       0       0       0
  5253 ;;      Locals:         0       0       0       0
  5254 ;;      Temps:          0       0       0       0
  5255 ;;      Totals:         0       0       0       0
  5256 ;;Total ram usage:        0 bytes
  5257 ;; Hardware stack levels used:    1
  5258 ;; Hardware stack levels required when called:    1
  5259 ;; This function calls:
  5260 ;;		_Delay10us
  5261 ;; This function is called by:
  5262 ;;		_cw_read
  5263 ;;		_cw_read_word
  5264 ;;		_cw_write
  5265 ;; This function uses a non-reentrant model
  5266 ;;
  5267                           
  5268                           
  5269                           ;psect for function _start
  5270  0134                     _start:	
  5271                           
  5272                           ;incstack = 0
  5273                           ; Regs used in _start: [wreg+status,2+status,0+pclath+cstack]
  5274                           ;iic.c: 45: do { TRISCbits.TRISC1 = 0; } while(0);
  5275  0134  0140               	movlb	0	; select bank0
  5276  0135  1094               	bcf	20,1	;volatile
  5277                           
  5278                           ;iic.c: 46: do { LATCbits.LATC1 = 1; } while(0);
  5279  0136  149A               	bsf	26,1	;volatile
  5280                           
  5281                           ;iic.c: 47: do { LATCbits.LATC0 = 1; } while(0);
  5282  0137  141A               	bsf	26,0	;volatile
  5283                           
  5284                           ;iic.c: 48: Delay10us();
  5285  0138  21F6               	fcall	_Delay10us
  5286                           
  5287                           ;iic.c: 49: do { LATCbits.LATC1 = 0; } while(0);
  5288  0139  0140               	movlb	0	; select bank0
  5289  013A  109A               	bcf	26,1	;volatile
  5290                           
  5291                           ;iic.c: 50: Delay10us();
  5292  013B  21F6               	fcall	_Delay10us
  5293                           
  5294                           ;iic.c: 51: do { LATCbits.LATC0 = 0; } while(0);
  5295  013C  0140               	movlb	0	; select bank0
  5296  013D  101A               	bcf	26,0	;volatile
  5297  013E  0008               	return
  5298  013F                     __end_of_start:	
  5299                           
  5300                           	psect	text22
  5301  0129                     __ptext22:	
  5302 ;; *************** function _s_ack *****************
  5303 ;; Defined at:
  5304 ;;		line 101 in file "iic.c"
  5305 ;; Parameters:    Size  Location     Type
  5306 ;;		None
  5307 ;; Auto vars:     Size  Location     Type
  5308 ;;		None
  5309 ;; Return value:  Size  Location     Type
  5310 ;;                  1    wreg      void 
  5311 ;; Registers used:
  5312 ;;		wreg, status,2, status,0, pclath, cstack
  5313 ;; Tracked objects:
  5314 ;;		On entry : 0/0
  5315 ;;		On exit  : 0/0
  5316 ;;		Unchanged: 0/0
  5317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5318 ;;      Params:         0       0       0       0
  5319 ;;      Locals:         0       0       0       0
  5320 ;;      Temps:          0       0       0       0
  5321 ;;      Totals:         0       0       0       0
  5322 ;;Total ram usage:        0 bytes
  5323 ;; Hardware stack levels used:    1
  5324 ;; Hardware stack levels required when called:    1
  5325 ;; This function calls:
  5326 ;;		_Delay10us
  5327 ;; This function is called by:
  5328 ;;		_cw_read
  5329 ;;		_cw_read_word
  5330 ;; This function uses a non-reentrant model
  5331 ;;
  5332                           
  5333                           
  5334                           ;psect for function _s_ack
  5335  0129                     _s_ack:	
  5336                           
  5337                           ;incstack = 0
  5338                           ; Regs used in _s_ack: [wreg+status,2+status,0+pclath+cstack]
  5339                           ;iic.c: 103: do { TRISCbits.TRISC1 = 0; } while(0);
  5340  0129  0140               	movlb	0	; select bank0
  5341  012A  1094               	bcf	20,1	;volatile
  5342                           
  5343                           ;iic.c: 104: do { LATCbits.LATC1 = 1; } while(0);
  5344  012B  149A               	bsf	26,1	;volatile
  5345                           
  5346                           ;iic.c: 105: Delay10us();
  5347  012C  21F6               	fcall	_Delay10us
  5348                           
  5349                           ;iic.c: 106: do { LATCbits.LATC0 = 1; } while(0);
  5350  012D  0140               	movlb	0	; select bank0
  5351  012E  141A               	bsf	26,0	;volatile
  5352                           
  5353                           ;iic.c: 107: Delay10us();
  5354  012F  21F6               	fcall	_Delay10us
  5355                           
  5356                           ;iic.c: 108: do { LATCbits.LATC0 = 0; } while(0);
  5357  0130  0140               	movlb	0	; select bank0
  5358  0131  101A               	bcf	26,0	;volatile
  5359                           
  5360                           ;iic.c: 109: Delay10us();
  5361  0132  21F6               	fcall	_Delay10us
  5362  0133  0008               	return
  5363  0134                     __end_of_s_ack:	
  5364                           
  5365                           	psect	text23
  5366  0258                     __ptext23:	
  5367 ;; *************** function _read_byte *****************
  5368 ;; Defined at:
  5369 ;;		line 142 in file "iic.c"
  5370 ;; Parameters:    Size  Location     Type
  5371 ;;		None
  5372 ;; Auto vars:     Size  Location     Type
  5373 ;;  r_data          1    6[COMMON] unsigned char 
  5374 ;;  i               1    5[COMMON] unsigned char 
  5375 ;; Return value:  Size  Location     Type
  5376 ;;                  1    wreg      unsigned char 
  5377 ;; Registers used:
  5378 ;;		wreg, status,2, status,0, pclath, cstack
  5379 ;; Tracked objects:
  5380 ;;		On entry : 0/0
  5381 ;;		On exit  : 0/0
  5382 ;;		Unchanged: 0/0
  5383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5384 ;;      Params:         0       0       0       0
  5385 ;;      Locals:         2       0       0       0
  5386 ;;      Temps:          1       0       0       0
  5387 ;;      Totals:         3       0       0       0
  5388 ;;Total ram usage:        3 bytes
  5389 ;; Hardware stack levels used:    1
  5390 ;; Hardware stack levels required when called:    1
  5391 ;; This function calls:
  5392 ;;		_Delay10us
  5393 ;; This function is called by:
  5394 ;;		_cw_read
  5395 ;;		_cw_read_word
  5396 ;; This function uses a non-reentrant model
  5397 ;;
  5398                           
  5399                           
  5400                           ;psect for function _read_byte
  5401  0258                     _read_byte:	
  5402                           
  5403                           ;incstack = 0
  5404                           ; Regs used in _read_byte: [wreg+status,2+status,0+pclath+cstack]
  5405                           ;iic.c: 144: unsigned char i;
  5406                           ;iic.c: 145: unsigned char r_data;
  5407                           ;iic.c: 146: do { TRISCbits.TRISC1 = 1; } while(0);
  5408  0258  0140               	movlb	0	; select bank0
  5409  0259  1494               	bsf	20,1	;volatile
  5410                           
  5411                           ;iic.c: 147: for(i = 0; i < 8; i++)
  5412  025A  01F5               	clrf	read_byte@i
  5413  025B  3008               	movlw	8
  5414  025C  0275               	subwf	read_byte@i,w
  5415  025D  1803               	btfsc	3,0
  5416  025E  2A79               	goto	l1731
  5417  025F                     l402:	
  5418                           ;iic.c: 148: {
  5419                           ;iic.c: 149: do { LATCbits.LATC0 = 1; } while(0);
  5420                           
  5421  025F  0140               	movlb	0	; select bank0
  5422  0260  141A               	bsf	26,0	;volatile
  5423                           
  5424                           ;iic.c: 150: Delay10us();
  5425  0261  21F6               	fcall	_Delay10us
  5426                           
  5427                           ;iic.c: 151: r_data = r_data << 1;
  5428  0262  3576               	lslf	read_byte@r_data,w
  5429  0263  00F4               	movwf	??_read_byte
  5430  0264  0874               	movf	??_read_byte,w
  5431  0265  00F6               	movwf	read_byte@r_data
  5432                           
  5433                           ;iic.c: 152: Delay10us();
  5434  0266  21F6               	fcall	_Delay10us
  5435                           
  5436                           ;iic.c: 153: if(PORTCbits.RC1)
  5437  0267  0140               	movlb	0	; select bank0
  5438  0268  1C8E               	btfss	14,1	;volatile
  5439  0269  2A6F               	goto	l1723
  5440                           
  5441                           ;iic.c: 154: {
  5442                           ;iic.c: 155: r_data = r_data | 0x1;
  5443  026A  0876               	movf	read_byte@r_data,w
  5444  026B  3801               	iorlw	1
  5445  026C  00F4               	movwf	??_read_byte
  5446  026D  0874               	movf	??_read_byte,w
  5447  026E  00F6               	movwf	read_byte@r_data
  5448  026F                     l1723:	
  5449                           ;iic.c: 156: }
  5450                           ;iic.c: 157: do { LATCbits.LATC0 = 0; } while(0);
  5451                           
  5452  026F  101A               	bcf	26,0	;volatile
  5453                           
  5454                           ;iic.c: 158: Delay10us();
  5455  0270  21F6               	fcall	_Delay10us
  5456  0271  3001               	movlw	1
  5457  0272  00F4               	movwf	??_read_byte
  5458  0273  0874               	movf	??_read_byte,w
  5459  0274  07F5               	addwf	read_byte@i,f
  5460  0275  3008               	movlw	8
  5461  0276  0275               	subwf	read_byte@i,w
  5462  0277  1C03               	skipc
  5463  0278  2A5F               	goto	l402
  5464  0279                     l1731:	
  5465                           
  5466                           ;iic.c: 159: }
  5467                           ;iic.c: 160: return r_data;
  5468  0279  0876               	movf	read_byte@r_data,w
  5469  027A  0008               	return
  5470  027B                     __end_of_read_byte:	
  5471                           
  5472                           	psect	text24
  5473  01F6                     __ptext24:	
  5474 ;; *************** function _Delay10us *****************
  5475 ;; Defined at:
  5476 ;;		line 22 in file "iic.c"
  5477 ;; Parameters:    Size  Location     Type
  5478 ;;		None
  5479 ;; Auto vars:     Size  Location     Type
  5480 ;;  i               1    3[COMMON] unsigned char 
  5481 ;;  b               1    2[COMMON] unsigned char 
  5482 ;;  a               1    1[COMMON] unsigned char 
  5483 ;; Return value:  Size  Location     Type
  5484 ;;                  1    wreg      void 
  5485 ;; Registers used:
  5486 ;;		wreg, status,2, status,0
  5487 ;; Tracked objects:
  5488 ;;		On entry : 0/0
  5489 ;;		On exit  : 0/0
  5490 ;;		Unchanged: 0/0
  5491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5492 ;;      Params:         0       0       0       0
  5493 ;;      Locals:         3       0       0       0
  5494 ;;      Temps:          1       0       0       0
  5495 ;;      Totals:         4       0       0       0
  5496 ;;Total ram usage:        4 bytes
  5497 ;; Hardware stack levels used:    1
  5498 ;; This function calls:
  5499 ;;		Nothing
  5500 ;; This function is called by:
  5501 ;;		_start
  5502 ;;		_stop
  5503 ;;		_r_ack
  5504 ;;		_s_ack
  5505 ;;		_sn_ack
  5506 ;;		_write_byte
  5507 ;;		_read_byte
  5508 ;; This function uses a non-reentrant model
  5509 ;;
  5510                           
  5511                           
  5512                           ;psect for function _Delay10us
  5513  01F6                     _Delay10us:	
  5514                           
  5515                           ;iic.c: 24: unsigned char a, b;
  5516                           ;iic.c: 25: unsigned char i;
  5517                           ;iic.c: 26: for(i = 0; i < 2; i++)
  5518                           
  5519                           ;incstack = 0
  5520                           ; Regs used in _Delay10us: [wreg+status,2+status,0]
  5521  01F6  01F3               	clrf	Delay10us@i
  5522  01F7                     L5:	
  5523  01F7  3002               	movlw	2
  5524  01F8  0273               	subwf	Delay10us@i,w
  5525  01F9  1803               	btfsc	3,0
  5526  01FA  0008               	return
  5527                           
  5528                           ;iic.c: 27: {
  5529                           ;iic.c: 28: for(b = 1;b > 0;b --)
  5530  01FB  01F2               	clrf	Delay10us@b
  5531  01FC  0AF2               	incf	Delay10us@b,f
  5532  01FD  0872               	movf	Delay10us@b,w
  5533  01FE  1903               	btfsc	3,2
  5534  01FF  2A11               	goto	l1625
  5535  0200                     l1615:	
  5536                           
  5537                           ;iic.c: 29: {
  5538                           ;iic.c: 30: for(a = 7;a > 0;a --) ;
  5539  0200  3007               	movlw	7
  5540  0201  00F0               	movwf	??_Delay10us
  5541  0202  0870               	movf	??_Delay10us,w
  5542  0203  00F1               	movwf	Delay10us@a
  5543  0204  0871               	movf	Delay10us@a,w
  5544  0205  1903               	btfsc	3,2
  5545  0206  2A0C               	goto	l1623
  5546  0207                     l1621:	
  5547  0207  3001               	movlw	1
  5548  0208  02F1               	subwf	Delay10us@a,f
  5549  0209  0871               	movf	Delay10us@a,w
  5550  020A  1D03               	btfss	3,2
  5551  020B  2A07               	goto	l1621
  5552  020C                     l1623:	
  5553  020C  3001               	movlw	1
  5554  020D  02F2               	subwf	Delay10us@b,f
  5555  020E  0872               	movf	Delay10us@b,w
  5556  020F  1D03               	btfss	3,2
  5557  0210  2A00               	goto	l1615
  5558  0211                     l1625:	
  5559  0211  3001               	movlw	1
  5560  0212  00F0               	movwf	??_Delay10us
  5561  0213  0870               	movf	??_Delay10us,w
  5562  0214  07F3               	addwf	Delay10us@i,f
  5563  0215  29F7               	goto	L5
  5564  0216                     __end_of_Delay10us:	
  5565                           
  5566                           	psect	text25
  5567  01D6                     __ptext25:	
  5568 ;; *************** function _CW_Delay100us *****************
  5569 ;; Defined at:
  5570 ;;		line 38 in file "CW201x.c"
  5571 ;; Parameters:    Size  Location     Type
  5572 ;;		None
  5573 ;; Auto vars:     Size  Location     Type
  5574 ;;  i               1    3[COMMON] unsigned char 
  5575 ;;  b               1    2[COMMON] unsigned char 
  5576 ;;  a               1    1[COMMON] unsigned char 
  5577 ;; Return value:  Size  Location     Type
  5578 ;;                  1    wreg      void 
  5579 ;; Registers used:
  5580 ;;		wreg, status,2, status,0
  5581 ;; Tracked objects:
  5582 ;;		On entry : 0/0
  5583 ;;		On exit  : 0/0
  5584 ;;		Unchanged: 0/0
  5585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5586 ;;      Params:         0       0       0       0
  5587 ;;      Locals:         3       0       0       0
  5588 ;;      Temps:          1       0       0       0
  5589 ;;      Totals:         4       0       0       0
  5590 ;;Total ram usage:        4 bytes
  5591 ;; Hardware stack levels used:    1
  5592 ;; This function calls:
  5593 ;;		Nothing
  5594 ;; This function is called by:
  5595 ;;		_cw_update_config_info
  5596 ;;		_cw_por
  5597 ;; This function uses a non-reentrant model
  5598 ;;
  5599                           
  5600                           
  5601                           ;psect for function _CW_Delay100us
  5602  01D6                     _CW_Delay100us:	
  5603                           
  5604                           ;CW201x.c: 40: unsigned char a, b;
  5605                           ;CW201x.c: 41: unsigned char i;
  5606                           ;CW201x.c: 42: for(i = 0; i < 10; i++)
  5607                           
  5608                           ;incstack = 0
  5609                           ; Regs used in _CW_Delay100us: [wreg+status,2+status,0]
  5610  01D6  01F3               	clrf	CW_Delay100us@i
  5611  01D7                     L6:	
  5612  01D7  300A               	movlw	10
  5613  01D8  0273               	subwf	CW_Delay100us@i,w
  5614  01D9  1803               	btfsc	3,0
  5615  01DA  0008               	return
  5616                           
  5617                           ;CW201x.c: 43: {
  5618                           ;CW201x.c: 44: for(b = 1;b > 0;b --)
  5619  01DB  01F2               	clrf	CW_Delay100us@b
  5620  01DC  0AF2               	incf	CW_Delay100us@b,f
  5621  01DD  0872               	movf	CW_Delay100us@b,w
  5622  01DE  1903               	btfsc	3,2
  5623  01DF  29F1               	goto	l1755
  5624  01E0                     l1745:	
  5625                           
  5626                           ;CW201x.c: 45: {
  5627                           ;CW201x.c: 46: for(a = 7;a > 0;a --);
  5628  01E0  3007               	movlw	7
  5629  01E1  00F0               	movwf	??_CW_Delay100us
  5630  01E2  0870               	movf	??_CW_Delay100us,w
  5631  01E3  00F1               	movwf	CW_Delay100us@a
  5632  01E4  0871               	movf	CW_Delay100us@a,w
  5633  01E5  1903               	btfsc	3,2
  5634  01E6  29EC               	goto	l1753
  5635  01E7                     l1751:	
  5636  01E7  3001               	movlw	1
  5637  01E8  02F1               	subwf	CW_Delay100us@a,f
  5638  01E9  0871               	movf	CW_Delay100us@a,w
  5639  01EA  1D03               	btfss	3,2
  5640  01EB  29E7               	goto	l1751
  5641  01EC                     l1753:	
  5642  01EC  3001               	movlw	1
  5643  01ED  02F2               	subwf	CW_Delay100us@b,f
  5644  01EE  0872               	movf	CW_Delay100us@b,w
  5645  01EF  1D03               	btfss	3,2
  5646  01F0  29E0               	goto	l1745
  5647  01F1                     l1755:	
  5648  01F1  3001               	movlw	1
  5649  01F2  00F0               	movwf	??_CW_Delay100us
  5650  01F3  0870               	movf	??_CW_Delay100us,w
  5651  01F4  07F3               	addwf	CW_Delay100us@i,f
  5652  01F5  29D7               	goto	L6
  5653  01F6                     __end_of_CW_Delay100us:	
  5654                           
  5655                           	psect	text26
  5656  0216                     __ptext26:	
  5657 ;; *************** function _CW_Delay10ms *****************
  5658 ;; Defined at:
  5659 ;;		line 26 in file "CW201x.c"
  5660 ;; Parameters:    Size  Location     Type
  5661 ;;  c               2    0[COMMON] unsigned int 
  5662 ;; Auto vars:     Size  Location     Type
  5663 ;;  b               1    4[COMMON] unsigned char 
  5664 ;;  a               1    3[COMMON] unsigned char 
  5665 ;;  d               1    0        unsigned char 
  5666 ;; Return value:  Size  Location     Type
  5667 ;;                  1    wreg      void 
  5668 ;; Registers used:
  5669 ;;		wreg, status,2, status,0
  5670 ;; Tracked objects:
  5671 ;;		On entry : 0/0
  5672 ;;		On exit  : 0/0
  5673 ;;		Unchanged: 0/0
  5674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5675 ;;      Params:         2       0       0       0
  5676 ;;      Locals:         2       0       0       0
  5677 ;;      Temps:          1       0       0       0
  5678 ;;      Totals:         5       0       0       0
  5679 ;;Total ram usage:        5 bytes
  5680 ;; Hardware stack levels used:    1
  5681 ;; This function calls:
  5682 ;;		Nothing
  5683 ;; This function is called by:
  5684 ;;		_main
  5685 ;;		_cw_init
  5686 ;; This function uses a non-reentrant model
  5687 ;;
  5688                           
  5689                           
  5690                           ;psect for function _CW_Delay10ms
  5691  0216                     _CW_Delay10ms:	
  5692                           
  5693                           ;CW201x.c: 28: unsigned char a, b, d;
  5694                           ;CW201x.c: 29: for (;c>0;c--)
  5695                           
  5696                           ;incstack = 0
  5697                           ; Regs used in _CW_Delay10ms: [wreg+status,2+status,0]
  5698  0216  0870               	movf	CW_Delay10ms@c,w
  5699  0217  0471               	iorwf	CW_Delay10ms@c+1,w
  5700  0218  1903               	btfsc	3,2
  5701  0219  0008               	return
  5702                           
  5703                           ;CW201x.c: 30: {
  5704                           ;CW201x.c: 31: for(b=95;b>0;b--)
  5705  021A  305F               	movlw	95
  5706  021B  00F2               	movwf	??_CW_Delay10ms
  5707  021C  0872               	movf	??_CW_Delay10ms,w
  5708  021D  00F4               	movwf	CW_Delay10ms@b
  5709  021E  0874               	movf	CW_Delay10ms@b,w
  5710  021F  1903               	btfsc	3,2
  5711  0220  2A32               	goto	l1833
  5712  0221                     l1823:	
  5713                           
  5714                           ;CW201x.c: 32: {
  5715                           ;CW201x.c: 33: for(a=209;a>0;a--) ;
  5716  0221  30D1               	movlw	209
  5717  0222  00F2               	movwf	??_CW_Delay10ms
  5718  0223  0872               	movf	??_CW_Delay10ms,w
  5719  0224  00F3               	movwf	CW_Delay10ms@a
  5720  0225  0873               	movf	CW_Delay10ms@a,w
  5721  0226  1903               	btfsc	3,2
  5722  0227  2A2D               	goto	l1831
  5723  0228                     l1829:	
  5724  0228  3001               	movlw	1
  5725  0229  02F3               	subwf	CW_Delay10ms@a,f
  5726  022A  0873               	movf	CW_Delay10ms@a,w
  5727  022B  1D03               	btfss	3,2
  5728  022C  2A28               	goto	l1829
  5729  022D                     l1831:	
  5730  022D  3001               	movlw	1
  5731  022E  02F4               	subwf	CW_Delay10ms@b,f
  5732  022F  0874               	movf	CW_Delay10ms@b,w
  5733  0230  1D03               	btfss	3,2
  5734  0231  2A21               	goto	l1823
  5735  0232                     l1833:	
  5736  0232  3001               	movlw	1
  5737  0233  02F0               	subwf	CW_Delay10ms@c,f
  5738  0234  3000               	movlw	0
  5739  0235  3BF1               	subwfb	CW_Delay10ms@c+1,f
  5740  0236  2A16               	goto	_CW_Delay10ms
  5741  0237                     __end_of_CW_Delay10ms:	
  5742                           
  5743                           	psect	text27
  5744  0110                     __ptext27:	
  5745 ;; *************** function _SYSTEM_Initialize *****************
  5746 ;; Defined at:
  5747 ;;		line 86 in file "mcc_generated_files/mcc.c"
  5748 ;; Parameters:    Size  Location     Type
  5749 ;;		None
  5750 ;; Auto vars:     Size  Location     Type
  5751 ;;		None
  5752 ;; Return value:  Size  Location     Type
  5753 ;;                  1    wreg      void 
  5754 ;; Registers used:
  5755 ;;		wreg, status,2, status,0, pclath, cstack
  5756 ;; Tracked objects:
  5757 ;;		On entry : 0/0
  5758 ;;		On exit  : 0/0
  5759 ;;		Unchanged: 0/0
  5760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5761 ;;      Params:         0       0       0       0
  5762 ;;      Locals:         0       0       0       0
  5763 ;;      Temps:          0       0       0       0
  5764 ;;      Totals:         0       0       0       0
  5765 ;;Total ram usage:        0 bytes
  5766 ;; Hardware stack levels used:    1
  5767 ;; Hardware stack levels required when called:    1
  5768 ;; This function calls:
  5769 ;;		_EUSART1_Initialize
  5770 ;;		_OSCILLATOR_Initialize
  5771 ;;		_PIN_MANAGER_Initialize
  5772 ;; This function is called by:
  5773 ;;		_main
  5774 ;; This function uses a non-reentrant model
  5775 ;;
  5776                           
  5777                           
  5778                           ;psect for function _SYSTEM_Initialize
  5779  0110                     _SYSTEM_Initialize:	
  5780                           
  5781                           ;mcc.c: 89: PIN_MANAGER_Initialize();
  5782                           
  5783                           ;incstack = 0
  5784                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5785  0110  227B               	fcall	_PIN_MANAGER_Initialize
  5786                           
  5787                           ;mcc.c: 90: OSCILLATOR_Initialize();
  5788  0111  214B               	fcall	_OSCILLATOR_Initialize
  5789                           
  5790                           ;mcc.c: 91: EUSART1_Initialize();
  5791  0112  213F               	fcall	_EUSART1_Initialize
  5792  0113  0008               	return
  5793  0114                     __end_of_SYSTEM_Initialize:	
  5794                           
  5795                           	psect	text28
  5796  027B                     __ptext28:	
  5797 ;; *************** function _PIN_MANAGER_Initialize *****************
  5798 ;; Defined at:
  5799 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  5800 ;; Parameters:    Size  Location     Type
  5801 ;;		None
  5802 ;; Auto vars:     Size  Location     Type
  5803 ;;  state           1    0[COMMON] unsigned char 
  5804 ;; Return value:  Size  Location     Type
  5805 ;;                  1    wreg      void 
  5806 ;; Registers used:
  5807 ;;		wreg, status,2, status,0
  5808 ;; Tracked objects:
  5809 ;;		On entry : 0/0
  5810 ;;		On exit  : 0/0
  5811 ;;		Unchanged: 0/0
  5812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5813 ;;      Params:         0       0       0       0
  5814 ;;      Locals:         1       0       0       0
  5815 ;;      Temps:          0       0       0       0
  5816 ;;      Totals:         1       0       0       0
  5817 ;;Total ram usage:        1 bytes
  5818 ;; Hardware stack levels used:    1
  5819 ;; This function calls:
  5820 ;;		Nothing
  5821 ;; This function is called by:
  5822 ;;		_SYSTEM_Initialize
  5823 ;; This function uses a non-reentrant model
  5824 ;;
  5825                           
  5826                           
  5827                           ;psect for function _PIN_MANAGER_Initialize
  5828  027B                     _PIN_MANAGER_Initialize:	
  5829                           
  5830                           ;pin_manager.c: 56: LATA = 0x00;
  5831                           
  5832                           ;incstack = 0
  5833                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  5834  027B  0140               	movlb	0	; select bank0
  5835  027C  0198               	clrf	24	;volatile
  5836                           
  5837                           ;pin_manager.c: 57: LATC = 0x00;
  5838  027D  019A               	clrf	26	;volatile
  5839                           
  5840                           ;pin_manager.c: 62: TRISA = 0x03;
  5841  027E  3003               	movlw	3
  5842  027F  0092               	movwf	18	;volatile
  5843                           
  5844                           ;pin_manager.c: 63: TRISC = 0x2A;
  5845  0280  302A               	movlw	42
  5846  0281  0094               	movwf	20	;volatile
  5847                           
  5848                           ;pin_manager.c: 68: ANSELC = 0x1D;
  5849  0282  301D               	movlw	29
  5850  0283  017E               	movlb	62	; select bank62
  5851  0284  00CE               	movwf	78	;volatile
  5852                           
  5853                           ;pin_manager.c: 69: ANSELA = 0x37;
  5854  0285  3037               	movlw	55
  5855  0286  00B8               	movwf	56	;volatile
  5856                           
  5857                           ;pin_manager.c: 74: WPUA = 0x00;
  5858  0287  01B9               	clrf	57	;volatile
  5859                           
  5860                           ;pin_manager.c: 75: WPUC = 0x00;
  5861  0288  01CF               	clrf	79	;volatile
  5862                           
  5863                           ;pin_manager.c: 80: ODCONA = 0x00;
  5864  0289  01BA               	clrf	58	;volatile
  5865                           
  5866                           ;pin_manager.c: 81: ODCONC = 0x00;
  5867  028A  01D0               	clrf	80	;volatile
  5868                           
  5869                           ;pin_manager.c: 88: bool state = GIE;
  5870  028B  3000               	movlw	0
  5871  028C  1B8B               	btfsc	11,7	;volatile
  5872  028D  3001               	movlw	1
  5873  028E  00F0               	movwf	PIN_MANAGER_Initialize@state
  5874                           
  5875                           ;pin_manager.c: 89: GIE = 0;
  5876  028F  138B               	bcf	11,7	;volatile
  5877                           
  5878                           ;pin_manager.c: 90: PPSLOCK = 0x55;
  5879  0290  3055               	movlw	85
  5880  0291  017D               	movlb	61	; select bank61
  5881  0292  008F               	movwf	15	;volatile
  5882                           
  5883                           ;pin_manager.c: 91: PPSLOCK = 0xAA;
  5884  0293  30AA               	movlw	170
  5885  0294  008F               	movwf	15	;volatile
  5886                           
  5887                           ;pin_manager.c: 92: PPSLOCKbits.PPSLOCKED = 0x00;
  5888  0295  100F               	bcf	15,0	;volatile
  5889                           
  5890                           ;pin_manager.c: 94: RX1DTPPSbits.RX1DTPPS = 0x15;
  5891  0296  084B               	movf	75,w	;volatile
  5892  0297  39C0               	andlw	-64
  5893  0298  3815               	iorlw	21
  5894  0299  00CB               	movwf	75	;volatile
  5895                           
  5896                           ;pin_manager.c: 95: RC4PPS = 0x0F;
  5897  029A  300F               	movlw	15
  5898  029B  017E               	movlb	62	; select bank62
  5899  029C  00A4               	movwf	36	;volatile
  5900                           
  5901                           ;pin_manager.c: 97: PPSLOCK = 0x55;
  5902  029D  3055               	movlw	85
  5903  029E  017D               	movlb	61	; select bank61
  5904  029F  008F               	movwf	15	;volatile
  5905                           
  5906                           ;pin_manager.c: 98: PPSLOCK = 0xAA;
  5907  02A0  30AA               	movlw	170
  5908  02A1  008F               	movwf	15	;volatile
  5909                           
  5910                           ;pin_manager.c: 99: PPSLOCKbits.PPSLOCKED = 0x01;
  5911  02A2  140F               	bsf	15,0	;volatile
  5912                           
  5913                           ;pin_manager.c: 101: GIE = state;
  5914  02A3  1C70               	btfss	PIN_MANAGER_Initialize@state,0
  5915  02A4  2AA7               	goto	u2090
  5916  02A5  178B               	bsf	11,7	;volatile
  5917  02A6  0008               	return
  5918  02A7                     u2090:	
  5919  02A7  138B               	bcf	11,7	;volatile
  5920  02A8  0008               	return
  5921  02A9                     __end_of_PIN_MANAGER_Initialize:	
  5922                           
  5923                           	psect	text29
  5924  014B                     __ptext29:	
  5925 ;; *************** function _OSCILLATOR_Initialize *****************
  5926 ;; Defined at:
  5927 ;;		line 94 in file "mcc_generated_files/mcc.c"
  5928 ;; Parameters:    Size  Location     Type
  5929 ;;		None
  5930 ;; Auto vars:     Size  Location     Type
  5931 ;;		None
  5932 ;; Return value:  Size  Location     Type
  5933 ;;                  1    wreg      void 
  5934 ;; Registers used:
  5935 ;;		wreg, status,2
  5936 ;; Tracked objects:
  5937 ;;		On entry : 0/0
  5938 ;;		On exit  : 0/0
  5939 ;;		Unchanged: 0/0
  5940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5941 ;;      Params:         0       0       0       0
  5942 ;;      Locals:         0       0       0       0
  5943 ;;      Temps:          0       0       0       0
  5944 ;;      Totals:         0       0       0       0
  5945 ;;Total ram usage:        0 bytes
  5946 ;; Hardware stack levels used:    1
  5947 ;; This function calls:
  5948 ;;		Nothing
  5949 ;; This function is called by:
  5950 ;;		_SYSTEM_Initialize
  5951 ;; This function uses a non-reentrant model
  5952 ;;
  5953                           
  5954                           
  5955                           ;psect for function _OSCILLATOR_Initialize
  5956  014B                     _OSCILLATOR_Initialize:	
  5957                           
  5958                           ;mcc.c: 97: OSCCON1 = 0x10;
  5959                           
  5960                           ;incstack = 0
  5961                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5962  014B  3010               	movlw	16
  5963  014C  0151               	movlb	17	; select bank17
  5964  014D  008D               	movwf	13	;volatile
  5965                           
  5966                           ;mcc.c: 99: OSCCON3 = 0x00;
  5967  014E  018F               	clrf	15	;volatile
  5968                           
  5969                           ;mcc.c: 101: OSCEN = 0x00;
  5970  014F  0191               	clrf	17	;volatile
  5971                           
  5972                           ;mcc.c: 103: OSCFRQ = 0x05;
  5973  0150  3005               	movlw	5
  5974  0151  0093               	movwf	19	;volatile
  5975                           
  5976                           ;mcc.c: 105: OSCSTAT = 0x00;
  5977  0152  0190               	clrf	16	;volatile
  5978                           
  5979                           ;mcc.c: 107: OSCTUNE = 0x00;
  5980  0153  0192               	clrf	18	;volatile
  5981  0154                     l60:	
  5982                           ;mcc.c: 110: {
  5983                           
  5984                           ;mcc.c: 109: while(PLLR == 0)
  5985                           
  5986  0154  1810               	btfsc	16,0	;volatile
  5987  0155  0008               	return
  5988  0156  2954               	goto	l60
  5989  0157                     __end_of_OSCILLATOR_Initialize:	
  5990                           
  5991                           	psect	text30
  5992  013F                     __ptext30:	
  5993 ;; *************** function _EUSART1_Initialize *****************
  5994 ;; Defined at:
  5995 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  5996 ;; Parameters:    Size  Location     Type
  5997 ;;		None
  5998 ;; Auto vars:     Size  Location     Type
  5999 ;;		None
  6000 ;; Return value:  Size  Location     Type
  6001 ;;                  1    wreg      void 
  6002 ;; Registers used:
  6003 ;;		wreg
  6004 ;; Tracked objects:
  6005 ;;		On entry : 0/0
  6006 ;;		On exit  : 0/0
  6007 ;;		Unchanged: 0/0
  6008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6009 ;;      Params:         0       0       0       0
  6010 ;;      Locals:         0       0       0       0
  6011 ;;      Temps:          0       0       0       0
  6012 ;;      Totals:         0       0       0       0
  6013 ;;Total ram usage:        0 bytes
  6014 ;; Hardware stack levels used:    1
  6015 ;; This function calls:
  6016 ;;		Nothing
  6017 ;; This function is called by:
  6018 ;;		_SYSTEM_Initialize
  6019 ;; This function uses a non-reentrant model
  6020 ;;
  6021                           
  6022                           
  6023                           ;psect for function _EUSART1_Initialize
  6024  013F                     _EUSART1_Initialize:	
  6025                           
  6026                           ;eusart1.c: 60: BAUD1CON = 0x08;
  6027                           
  6028                           ;incstack = 0
  6029                           ; Regs used in _EUSART1_Initialize: [wreg]
  6030  013F  3008               	movlw	8
  6031  0140  0142               	movlb	2	; select bank2
  6032  0141  009F               	movwf	31	;volatile
  6033                           
  6034                           ;eusart1.c: 63: RC1STA = 0x90;
  6035  0142  3090               	movlw	144
  6036  0143  009D               	movwf	29	;volatile
  6037                           
  6038                           ;eusart1.c: 66: TX1STA = 0x24;
  6039  0144  3024               	movlw	36
  6040  0145  009E               	movwf	30	;volatile
  6041                           
  6042                           ;eusart1.c: 69: SP1BRGL = 0x40;
  6043  0146  3040               	movlw	64
  6044  0147  009B               	movwf	27	;volatile
  6045                           
  6046                           ;eusart1.c: 72: SP1BRGH = 0x03;
  6047  0148  3003               	movlw	3
  6048  0149  009C               	movwf	28	;volatile
  6049  014A  0008               	return
  6050  014B                     __end_of_EUSART1_Initialize:	
  6051                           
  6052                           	psect	text31
  6053  0118                     __ptext31:	
  6054 ;; *************** function _EUSART1_Write *****************
  6055 ;; Defined at:
  6056 ;;		line 96 in file "mcc_generated_files/eusart1.c"
  6057 ;; Parameters:    Size  Location     Type
  6058 ;;  txData          1    wreg     unsigned char 
  6059 ;; Auto vars:     Size  Location     Type
  6060 ;;  txData          1    0[COMMON] unsigned char 
  6061 ;; Return value:  Size  Location     Type
  6062 ;;                  1    wreg      void 
  6063 ;; Registers used:
  6064 ;;		wreg
  6065 ;; Tracked objects:
  6066 ;;		On entry : 0/0
  6067 ;;		On exit  : 0/0
  6068 ;;		Unchanged: 0/0
  6069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6070 ;;      Params:         0       0       0       0
  6071 ;;      Locals:         1       0       0       0
  6072 ;;      Temps:          0       0       0       0
  6073 ;;      Totals:         1       0       0       0
  6074 ;;Total ram usage:        1 bytes
  6075 ;; Hardware stack levels used:    1
  6076 ;; This function calls:
  6077 ;;		Nothing
  6078 ;; This function is called by:
  6079 ;;		_main
  6080 ;; This function uses a non-reentrant model
  6081 ;;
  6082                           
  6083                           
  6084                           ;psect for function _EUSART1_Write
  6085  0118                     _EUSART1_Write:	
  6086                           
  6087                           ;incstack = 0
  6088                           ; Regs used in _EUSART1_Write: [wreg]
  6089                           ;EUSART1_Write@txData stored from wreg
  6090  0118  00F0               	movwf	EUSART1_Write@txData
  6091  0119                     l31:	
  6092                           ;eusart1.c: 99: {
  6093                           
  6094                           ;eusart1.c: 98: while(0 == PIR3bits.TX1IF)
  6095                           
  6096  0119  014E               	movlb	14	; select bank14
  6097  011A  1E0F               	btfss	15,4	;volatile
  6098  011B  2919               	goto	l31
  6099                           
  6100                           ;eusart1.c: 100: }
  6101                           ;eusart1.c: 102: TX1REG = txData;
  6102  011C  0870               	movf	EUSART1_Write@txData,w
  6103  011D  0142               	movlb	2	; select bank2
  6104  011E  009A               	movwf	26	;volatile
  6105  011F  0008               	return
  6106  0120                     __end_of_EUSART1_Write:	
  6107  007E                     btemp	set	126	;btemp
  6108  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    128
    Data        0
    BSS         11
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     39      50
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    cw_write@w_pdata	PTR unsigned char  size(1) Largest target is 1
		 -> cw_por@reset_val(BANK0[1]), cw_init@reg_val(BANK0[1]), cw_update_config_info@reset_val(BANK0[1]), cw_update_config_info@reg_val(BANK0[1]), 

    cw_read_word@r_pdata	PTR unsigned char  size(1) Largest target is 2
		 -> cw_get_vol@reg_val(BANK0[2]), 

    cw_read@r_pdata	PTR unsigned char  size(1) Largest target is 1
		 -> cw_get_capacity@reg_val(BANK0[1]), cw_init@reg_val(BANK0[1]), cw_update_config_info@reg_val(BANK0[1]), 


Critical Paths under _main in COMMON

    _cw_get_vol->_cw_read_word
    _cw_read_word->_wait_r_ack
    _sn_ack->_Delay10us
    ___lldiv->___lmul
    _cw_get_capacity->_cw_read
    _cw_init->_cw_read
    _cw_update_config_info->_cw_read
    _cw_write->_wait_r_ack
    _cw_read->_wait_r_ack
    _write_byte->_Delay10us
    _wait_r_ack->_r_ack
    _stop->_Delay10us
    _r_ack->_Delay10us
    _start->_Delay10us
    _s_ack->_Delay10us
    _read_byte->_Delay10us
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize

Critical Paths under _main in BANK0

    _cw_bat_work->_update_capacity
    _cw_bat_work->_update_vol
    _update_vol->_cw_get_vol
    _cw_get_vol->___lldiv
    _cw_read_word->_wait_r_ack
    _update_capacity->_cw_get_capacity
    _cw_get_capacity->_cw_por
    _cw_por->_cw_init
    _cw_bat_init->_cw_init
    _cw_init->_cw_update_config_info
    _cw_update_config_info->_cw_write
    _cw_write->_wait_r_ack
    _cw_read->_wait_r_ack

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   23653
                                             37 BANK0      2     2      0
                       _CW_Delay10ms
                      _EUSART1_Write
                  _SYSTEM_Initialize
                        _cw_bat_init
                        _cw_bat_work
 ---------------------------------------------------------------------------------
 (1) _cw_bat_work                                          0     0      0   14943
                    _update_capacity
                  _update_usb_online
                         _update_vol
 ---------------------------------------------------------------------------------
 (2) _update_vol                                           2     2      0    2755
                                             35 BANK0      2     2      0
                         _cw_get_vol
 ---------------------------------------------------------------------------------
 (3) _cw_get_vol                                          22    20      2    2659
                                             13 BANK0     22    20      2
                            ___lldiv
                             ___lmul
                       _cw_read_word
 ---------------------------------------------------------------------------------
 (4) _cw_read_word                                         7     4      3    1687
                                             12 COMMON     2     2      0
                                              4 BANK0      5     2      3
                          _read_byte
                              _s_ack
                             _sn_ack
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (5) _sn_ack                                               0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     220
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     290
                                             12 COMMON     1     1      0
                                              0 BANK0     13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _update_usb_online                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _update_capacity                                      3     3      0   12188
                                             34 BANK0      3     3      0
                    _cw_get_capacity
 ---------------------------------------------------------------------------------
 (3) _cw_get_capacity                                      9     7      2   12099
                                             26 BANK0      8     6      2
                             _cw_por
                            _cw_read
 ---------------------------------------------------------------------------------
 (4) _cw_por                                               7     5      2   10119
                                             19 BANK0      7     5      2
                      _CW_Delay100us
                            _cw_init
                           _cw_write
 ---------------------------------------------------------------------------------
 (1) _cw_bat_init                                          3     3      0    8394
                                             19 BANK0      3     3      0
                            _cw_init
 ---------------------------------------------------------------------------------
 (5) _cw_init                                              6     6      0    8325
                                             13 BANK0      6     6      0
                       _CW_Delay10ms
                            _cw_read
              _cw_update_config_info
                           _cw_write
 ---------------------------------------------------------------------------------
 (6) _cw_update_config_info                                6     6      0    4045
                                              7 BANK0      6     6      0
                      _CW_Delay100us
                            _cw_read
                           _cw_write
 ---------------------------------------------------------------------------------
 (5) _cw_write                                             4     1      3    1516
                                             12 COMMON     1     1      0
                                              4 BANK0      3     0      3
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (4) _cw_read                                              4     2      2    1842
                                             12 COMMON     2     2      0
                                              4 BANK0      2     0      2
                          _read_byte
                              _s_ack
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (5) _write_byte                                           3     3      0     229
                                              4 COMMON     3     3      0
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _wait_r_ack                                           6     4      2     391
                                             10 COMMON     2     0      2
                                              0 BANK0      4     4      0
                              _r_ack
                               _stop
 ---------------------------------------------------------------------------------
 (6) _stop                                                 0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (6) _r_ack                                                6     4      2     161
                                              4 COMMON     6     4      2
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _start                                                0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _s_ack                                                0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _read_byte                                            3     3      0     252
                                              4 COMMON     3     3      0
                          _Delay10us
 ---------------------------------------------------------------------------------
 (6) _Delay10us                                            4     4      0     138
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (7) _CW_Delay100us                                        4     4      0     138
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (6) _CW_Delay10ms                                         6     4      2     265
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      23
                 _EUSART1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Write                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CW_Delay10ms
   _EUSART1_Write
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _cw_bat_init
     _cw_init
       _CW_Delay10ms
       _cw_read
         _read_byte
           _Delay10us
         _s_ack
           _Delay10us
         _start
           _Delay10us
         _stop
           _Delay10us
         _wait_r_ack
           _r_ack
             _Delay10us
           _stop
             _Delay10us
         _write_byte
           _Delay10us
       _cw_update_config_info
         _CW_Delay100us
         _cw_read
           _read_byte
             _Delay10us
           _s_ack
             _Delay10us
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us
         _cw_write
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us
       _cw_write
         _start
           _Delay10us
         _stop
           _Delay10us
         _wait_r_ack
           _r_ack
             _Delay10us
           _stop
             _Delay10us
         _write_byte
           _Delay10us
   _cw_bat_work
     _update_capacity
       _cw_get_capacity
         _cw_por
           _CW_Delay100us
           _cw_init
             _CW_Delay10ms
             _cw_read
               _read_byte
                 _Delay10us
               _s_ack
                 _Delay10us
               _start
                 _Delay10us
               _stop
                 _Delay10us
               _wait_r_ack
                 _r_ack
                   _Delay10us
                 _stop
                   _Delay10us
               _write_byte
                 _Delay10us
             _cw_update_config_info
               _CW_Delay100us
               _cw_read
                 _read_byte
                   _Delay10us
                 _s_ack
                   _Delay10us
                 _start
                   _Delay10us
                 _stop
                   _Delay10us
                 _wait_r_ack
                   _r_ack
                     _Delay10us
                   _stop
                     _Delay10us
                 _write_byte
                   _Delay10us
               _cw_write
                 _start
                   _Delay10us
                 _stop
                   _Delay10us
                 _wait_r_ack
                   _r_ack
                     _Delay10us
                   _stop
                     _Delay10us
                 _write_byte
                   _Delay10us
             _cw_write
               _start
                 _Delay10us
               _stop
                 _Delay10us
               _wait_r_ack
                 _r_ack
                   _Delay10us
                 _stop
                   _Delay10us
               _write_byte
                 _Delay10us
           _cw_write
             _start
               _Delay10us
             _stop
               _Delay10us
             _wait_r_ack
               _r_ack
                 _Delay10us
               _stop
                 _Delay10us
             _write_byte
               _Delay10us
         _cw_read
           _read_byte
             _Delay10us
           _s_ack
             _Delay10us
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us
     _update_usb_online
     _update_vol
       _cw_get_vol
         ___lldiv
           ___lmul (ARG)
         ___lmul
         _cw_read_word
           _read_byte
             _Delay10us
           _s_ack
             _Delay10us
           _sn_ack
             _Delay10us
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     27      32       5       62.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
ABS                  0      0      40      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      40      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sat Sep 09 10:51:33 2017

                                    __CFG_CP$OFF 0000                                               l31 0119  
                                             l60 0154                                  _update_capacity 0237  
                                    __CFG_LVP$ON 0000                                              l402 025F  
                                            l226 0607                                              l171 04BA  
                                            l239 0767                                              l168 04B8  
                                            l277 0695                                              l278 06A1  
                                            l279 06AD                                              _GIE 005F  
                                   __CFG_BORV$LO 0000                                              wreg 0009  
                                  __CFG_BBEN$OFF 0000                                     __CFG_ZCD$OFF 0000  
                                  ?_cw_read_word 0024                                             l2001 078E  
                                  CW_Delay10ms@a 0073                                             l2101 047E  
                                  CW_Delay10ms@b 0074                                    CW_Delay10ms@c 0070  
                                           l2111 0532                                             l2025 07B8  
                                           l2009 07A1                                             l2019 07B3  
                                           l2123 054E                                             l2037 07CF  
                                           l2045 07DB                                             l2205 042A  
                                           l2213 0430                                             l2133 0577  
                                           l2117 0540                                             l2055 07F0  
                                           l2207 042B                                             l2135 0550  
                                           l2321 0127                                             l2145 02B1  
                                           l2137 057D                                             l2091 046C  
                                           l2163 04E0                                             l1621 0207  
                                           l2333 019E                                             l2173 050E  
                                           l2165 04EE                                             l2149 02BB  
                                           l2237 067B                                             l2229 0663  
                                           l1623 020C                                             l1615 0200  
                                           l2079 0455                                             l2191 040B  
                                           l2431 04AE                                             l1625 0211  
                                           l2177 0519                                             l2249 06BC  
                                           l2433 04BE                                             l2425 048F  
                                           l1723 026F                                             l1731 0279  
                                           l2339 01AD                                             l2427 0499  
                                           l2429 04A3                                             l1831 022D  
                                           l1823 0221                                             l1751 01E7  
                                           l1663 02E6                                             l1807 0337  
                                           l1833 0232                                             l1753 01EC  
                                           l1745 01E0                                             l1755 01F1  
                                           l1771 0358                                             l1915 061D  
                                           l1829 0228                                             l1677 02FB  
                                           l1765 034B                                             l1853 05A0  
                                           l1679 0307                                             l1695 01C6  
                                           l1927 0633                                             l1847 0597  
                                           l1951 072C                                             l1777 0366  
                                           l1793 0319                                             l1937 0646  
                                           l1873 05CA                                             l1859 05A5  
                                           l1971 0756                                             l1893 05EE  
                                           l1869 05C2                                             l1799 0326  
                                           l1887 05E1                                             l1879 05CF  
                                           l1959 073D                                             l1897 05F6  
                                           l1993 077C                                             l1987 0777  
                                           u1250 01C4                                             _LATA 0018  
                                           u2135 0248                                             _LATC 001A  
                                           u2145 0251                                             u2065 069B  
                                           u2090 02A7                                             u2075 06A7  
                                           u2265 0195                                             u1905 02C3  
                                           u1935 04E3                                             u1865 0570  
                                           u1955 04EF                                             u1875 0559  
                                           u1965 0503                                             u1975 050F  
                                           u1895 02BC                                             _PLLR 4480  
                                           _WPUA 1F39                                             _WPUC 1F4F  
                                  _EUSART1_Write 0118                                    __CFG_FCMEN$ON 0000  
                                           _main 0481                                             fsr0h 0005  
                                           fsr1h 0007                                             indf0 0000  
                                           fsr0l 0004                                             indf1 0001  
                                           fsr1l 0006                                             btemp 007E  
                                           _stop 0157                                    __CFG_BOREN$ON 0000  
                                           start 0001                                    __CFG_CSWEN$ON 0000  
                                 CW_Delay100us@a 0071                                   CW_Delay100us@b 0072  
                                 CW_Delay100us@i 0073                                 ?_cw_get_capacity 003A  
                     update_capacity@cw_capacity 0043                   __size_of_OSCILLATOR_Initialize 000C  
                  __end_of_OSCILLATOR_Initialize 0157                            _cw_update_config_info 0583  
                                          ?_main 0070                                    __CFG_WDTE$OFF 0000  
                                __end_of___lldiv 0522                                            ?_stop 0070  
                                          _OSCEN 0891                                            _TRISA 0012  
                                          _TRISC 0014                              ___lmul@multiplicand 0074  
                                  __CFG_WRTB$OFF 0000                                    __CFG_WRTC$OFF 0000  
                                __end_of_cw_init 07F2                                  __end_of_cw_read 0374  
                                 ??_cw_read_word 007C                                            _count 0051  
                                          _r_ack 016F                                            _s_ack 0129  
                                          _start 0134                                   ?_EUSART1_Write 0070  
                      cw_init@cw_bat_config_info 03B4                                            status 0003  
                                          wtemp0 007E                                   __CFG_MCLRE$OFF 0000  
                        __end_of_update_capacity 0258                                  __initialization 07F2  
                     __end_of_EUSART1_Initialize 014B                                     __end_of_main 04CF  
                             __size_of_Delay10us 0020                                     __end_of_stop 0163  
                                 __CFG_SAFEN$OFF 0000                                   cw_bat_init@ret 0035  
                                         ??_main 0045                                           ??_stop 0074  
                                         ?_r_ack 0074                                           ?_s_ack 0070  
                               cw_read@point_reg 007D                                           _CHARGE 0050  
                                         _ANSELA 1F38                                           _ANSELC 1F4E  
                                         ?_start 0070                                           _RC1REG 0119  
                                         _RC1STA 011D                                           _RC4PPS 1F24  
                                         _ODCONA 1F3A                                           _ODCONC 1F50  
                                 __CFG_WDTCCS$SC 0000                                           _OSCFRQ 0893  
                                         _TX1REG 011A                                           _TX1STA 011E  
                                cw_write@w_pdata 0024                                   __CFG_PWRTE$OFF 0000  
                                  cw_get_vol@F80 004D                             __size_of_cw_bat_init 001B  
                           __size_of_cw_bat_work 0004                                           ___lmul 02A9  
                                  cw_get_vol@ret 0034                                   __CFG_STVREN$ON 0000  
                                      ??___lldiv 007C                                 __end_of_cw_write 033C  
                                         _cw_bat 0047                                           _cw_por 0439  
                         ?_cw_update_config_info 0070                                           _sn_ack 0163  
                                      ??_cw_init 002D                                        ??_cw_read 007C  
                                  ?_CW_Delay10ms 0070                                  ??_EUSART1_Write 0070  
                              __end_of_Delay10us 0216                                _SYSTEM_Initialize 0110  
                        __end_of__initialization 07FE                               ?_SYSTEM_Initialize 0070  
                              _update_usb_online 0120                                 ?_update_capacity 0070  
                              cw_get_vol@ad_buff 0041                                   __pcstackCOMMON 0070  
                             ?_update_usb_online 0070                              ??_SYSTEM_Initialize 0071  
                           __end_of_cw_read_word 0583                                    __end_of_r_ack 0185  
                                  __end_of_s_ack 0134                                    __end_of_start 013F  
                         __size_of_CW_Delay100us 0020                                   ??_CW_Delay10ms 0072  
                            ??_update_usb_online 0070                                cw_get_vol@reg_val 0036  
                                cw_bat_init@loop 0034                                          ??_r_ack 0076  
                                        ??_s_ack 0074                        __end_of_SYSTEM_Initialize 0114  
                                        ??_start 0074                                       __pbssBANK0 0047  
                      __end_of_update_usb_online 0129                               __size_of_read_byte 0023  
                                     __pmaintext 0481                                          ?___lmul 0070  
                                __CFG_PPS1WAY$ON 0000                                          ?_cw_por 0033  
                                 ___lmul@product 0078                                          ?_sn_ack 0070  
                                        _SP1BRGH 011C                                          _SP1BRGL 011B  
                                        _OSCCON1 088D                                          _OSCCON3 088F  
                                        _OSCSTAT 0890                                          _OSCTUNE 0892  
                                        _PPSLOCK 1E8F                                       _cw_get_vol 0648  
                                      ?_cw_write 0024                                    _CW_Delay100us 01D6  
                           update_vol@cw_voltage 0043                                  __size_of___lmul 002F  
              __end_ofcw_init@cw_bat_config_info 03F4                                          ___lldiv 04CF  
                                __size_of_cw_por 0048                                  __size_of_sn_ack 000C  
                                        __ptext1 0114                                          __ptext2 0185  
                                        __ptext3 0648                                          __ptext4 0522  
                                        __ptext5 0163                                          __ptext6 02A9  
                                        __ptext7 04CF                                          __ptext8 0120  
                                        __ptext9 0237                                          _cw_init 0719  
                                        _cw_read 033C                                  __CFG_WRTAPP$OFF 0000  
                          _OSCILLATOR_Initialize 014B                                __end_of_read_byte 027B  
                             _EUSART1_Initialize 013F                         __size_of_cw_get_capacity 0045  
                       ??_PIN_MANAGER_Initialize 0070                                  __CFG_WRTSAF$OFF 0000  
                     __size_of_SYSTEM_Initialize 0004                                          main@ret 0046  
                           end_of_initialization 07FE                                 write_byte@w_data 0075  
                                 ?_CW_Delay100us 0070                              ?_EUSART1_Initialize 0070  
                                     ??_cw_write 007C                       __size_of_update_usb_online 0009  
                           __end_of_CW_Delay10ms 0237                            __size_of_cw_read_word 0061  
                                ___lldiv@divisor 0020                                  cw_por@reset_val 0037  
                                ___lldiv@counter 002C                                       _reset_loop 004F  
                   cw_update_config_info@reg_val 002C                          ??_cw_update_config_info 0027  
                                    wait_r_ack@i 0022                                       _wait_r_ack 02D8  
                           ??_EUSART1_Initialize 0070                            __CFG_WDTCPS$WDTCPS_31 0000  
                                      _PORTCbits 000E                         cw_update_config_info@ret 0029  
                                      _TRISCbits 0014                                       _update_vol 0185  
                                    ?_cw_get_vol 002D                              EUSART1_Write@txData 0070  
                               __CFG_FEXTOSC$OFF 0000                                     _cw_read_word 0522  
                                      _Delay10us 01F6                                   cw_init@reg_val 0032  
                                  ??_cw_bat_init 0033                                    ??_cw_bat_work 007E  
                                     cw_init@ret 0030                                   cw_read@r_pdata 0024  
                             cw_get_vol@ad_value 003C                                   __end_of___lmul 02D8  
                                     _write_byte 01B7                                   __end_of_cw_por 0481  
                         ?_OSCILLATOR_Initialize 0070                                   __end_of_sn_ack 016F  
                            start_initialization 07F2                  __size_of_PIN_MANAGER_Initialize 002E  
                                ??_CW_Delay100us 0070                            __end_of_EUSART1_Write 0120  
                     cw_get_capacity@cw_capacity 003E                                ??_cw_get_capacity 003C  
                                     ?_Delay10us 0070                                 __CFG_LPBOREN$OFF 0000  
                                       ??___lmul 0078                              __end_of_cw_bat_init 01B7  
                            __size_of_cw_get_vol 00D1                                      ?_wait_r_ack 007A  
                            __end_of_cw_bat_work 0118                                         ??_cw_por 0035  
                                       ??_sn_ack 0074                                       read_byte@i 0075  
                       __size_of_update_capacity 0021                           cw_update_config_info@i 002B  
                         cw_get_capacity@reg_val 0041                                        ___latbits 0000  
                                  __pcstackBANK0 0020                                      ?_update_vol 0070  
                          __size_of_CW_Delay10ms 0021                                __size_of_cw_write 0032  
                         cw_get_vol@ad_value_max 003A                           cw_get_vol@ad_value_min 0038  
                            cw_read_word@r_pdata 0024                           _PIN_MANAGER_Initialize 027B  
                                       ?___lldiv 0020                                      ?_write_byte 0070  
                          cw_read_word@point_reg 0027                                         ?_cw_init 0070  
                                       ?_cw_read 0024                                         _BAUD1CON 011F  
                                   _CW_Delay10ms 0216                             __CFG_RSTOSC$HFINTPLL 0000  
                                 __size_of_r_ack 0016                                   __size_of_s_ack 000B  
                                      _read_byte 0258                                   __size_of_start 000B  
                            __size_of_wait_r_ack 0032                                      ??_Delay10us 0070  
                                       _LATAbits 0018                                         _LATCbits 001A  
                                    _cw_bat_init 019C                                      _cw_bat_work 0114  
                                       _PIR3bits 070F                                __CFG_BBSIZE$BB512 0000  
                            __size_of_update_vol 0017                   __size_of_cw_update_config_info 00C5  
                  __end_of_cw_update_config_info 0648                                     _RX1DTPPSbits 1ECB  
                                    write_byte@i 0076                                     ??_cw_get_vol 002F  
                              ??_update_capacity 0042                                        cw_por@ret 0038  
                              ___lmul@multiplier 0070                                       ?_read_byte 0070  
                              cw_write@point_reg 007C                              __size_of_write_byte 001F  
                                read_byte@r_data 0076                          ??_OSCILLATOR_Initialize 0070  
                             __end_of_cw_get_vol 0719                                 __size_of___lldiv 0053  
                    __size_of_EUSART1_Initialize 000C                                  _cw_get_capacity 03F4  
                               __size_of_cw_init 00D9                                 __size_of_cw_read 0038  
                             cw_read_word@length 0025                                         __ptext10 03F4  
                                       __ptext11 0439                                         __ptext20 016F  
                                       __ptext12 019C                                         __ptext21 0134  
                                       __ptext13 0719                                         __ptext30 013F  
                                       __ptext22 0129                                         __ptext14 0583  
                                       __ptext31 0118                                         __ptext23 0258  
                                       __ptext15 030A                                         __ptext24 01F6  
                                       __ptext16 033C                                         __ptext25 01D6  
                                       __ptext17 01B7                                         __ptext26 0216  
                                       __ptext18 02D8                                         __ptext27 0110  
                                       __ptext19 0157                                         __ptext28 027B  
                                       __ptext29 014B                                         _cw_write 030A  
                             cw_get_capacity@ret 003F                                    __size_of_main 004E  
                                  __size_of_stop 000C                             __CFG_WDTCWS$WDTCWS_7 0000  
                                     Delay10us@a 0071                                       Delay10us@b 0072  
                                     Delay10us@i 0073                                       _RC1STAbits 011D  
                                   ??_wait_r_ack 007C                                         cw_init@i 002F  
                 cw_update_config_info@reset_val 0028                      PIN_MANAGER_Initialize@state 0070  
                                       r_ack@ack 0078                                    wait_r_ack@ack 0020  
__end_ofcw_update_config_info@cw_bat_config_info 03B4          cw_update_config_info@cw_bat_config_info 0374  
                                   ??_update_vol 007E                                      ??_read_byte 0074  
                          __end_of_CW_Delay100us 01F6                                cw_read_word@count 0028  
                             __end_of_wait_r_ack 030A                                 ___lldiv@dividend 0024  
                        ?_PIN_MANAGER_Initialize 0070                                __CFG_CLKOUTEN$OFF 0000  
                                    _PPSLOCKbits 1E8F                          __end_of_cw_get_capacity 0439  
                             __end_of_update_vol 019C                           cw_get_vol@get_ad_times 0040  
                                   ??_write_byte 0074                           __size_of_EUSART1_Write 0008  
                                  __pstringtext1 03B4                                    __pstringtext2 0374  
                               ___lldiv@quotient 0028                   __end_of_PIN_MANAGER_Initialize 02A9  
                             __end_of_write_byte 01D6                                     ?_cw_bat_init 0070  
                                   ?_cw_bat_work 0070  
