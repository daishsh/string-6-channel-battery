

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Tue Aug 29 14:03:22 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F15323
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	intentry,global,class=CODE,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	dabs	1,0x7E,2
    48  0000                     
    49                           ; Version 1.43
    50                           ; Generated 25/07/2017 GMT
    51                           ; 
    52                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC16F15323 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     	;# 
    84  0001                     	;# 
    85  0002                     	;# 
    86  0003                     	;# 
    87  0004                     	;# 
    88  0005                     	;# 
    89  0006                     	;# 
    90  0007                     	;# 
    91  0008                     	;# 
    92  0009                     	;# 
    93  000A                     	;# 
    94  000B                     	;# 
    95  000C                     	;# 
    96  000E                     	;# 
    97  0012                     	;# 
    98  0014                     	;# 
    99  0018                     	;# 
   100  001A                     	;# 
   101  009B                     	;# 
   102  009B                     	;# 
   103  009C                     	;# 
   104  009D                     	;# 
   105  009E                     	;# 
   106  009F                     	;# 
   107  0119                     	;# 
   108  0119                     	;# 
   109  0119                     	;# 
   110  011A                     	;# 
   111  011A                     	;# 
   112  011A                     	;# 
   113  011B                     	;# 
   114  011B                     	;# 
   115  011B                     	;# 
   116  011B                     	;# 
   117  011B                     	;# 
   118  011C                     	;# 
   119  011C                     	;# 
   120  011C                     	;# 
   121  011D                     	;# 
   122  011D                     	;# 
   123  011D                     	;# 
   124  011E                     	;# 
   125  011E                     	;# 
   126  011E                     	;# 
   127  011F                     	;# 
   128  011F                     	;# 
   129  011F                     	;# 
   130  011F                     	;# 
   131  011F                     	;# 
   132  018C                     	;# 
   133  018D                     	;# 
   134  018E                     	;# 
   135  018F                     	;# 
   136  0190                     	;# 
   137  0191                     	;# 
   138  0192                     	;# 
   139  020C                     	;# 
   140  020C                     	;# 
   141  020D                     	;# 
   142  020E                     	;# 
   143  020F                     	;# 
   144  020F                     	;# 
   145  0210                     	;# 
   146  0210                     	;# 
   147  0211                     	;# 
   148  0211                     	;# 
   149  028C                     	;# 
   150  028C                     	;# 
   151  028D                     	;# 
   152  028D                     	;# 
   153  028E                     	;# 
   154  028F                     	;# 
   155  0290                     	;# 
   156  0291                     	;# 
   157  030C                     	;# 
   158  030C                     	;# 
   159  030D                     	;# 
   160  030E                     	;# 
   161  030F                     	;# 
   162  0310                     	;# 
   163  0310                     	;# 
   164  0311                     	;# 
   165  0312                     	;# 
   166  0313                     	;# 
   167  0314                     	;# 
   168  0315                     	;# 
   169  0316                     	;# 
   170  0318                     	;# 
   171  0319                     	;# 
   172  031A                     	;# 
   173  031C                     	;# 
   174  031D                     	;# 
   175  031E                     	;# 
   176  038C                     	;# 
   177  038D                     	;# 
   178  038E                     	;# 
   179  058C                     	;# 
   180  058C                     	;# 
   181  058D                     	;# 
   182  058E                     	;# 
   183  058F                     	;# 
   184  058F                     	;# 
   185  0590                     	;# 
   186  0591                     	;# 
   187  0592                     	;# 
   188  0593                     	;# 
   189  059C                     	;# 
   190  059C                     	;# 
   191  059D                     	;# 
   192  059D                     	;# 
   193  059E                     	;# 
   194  059F                     	;# 
   195  060C                     	;# 
   196  060D                     	;# 
   197  060E                     	;# 
   198  060F                     	;# 
   199  0610                     	;# 
   200  0611                     	;# 
   201  0612                     	;# 
   202  0613                     	;# 
   203  0614                     	;# 
   204  070C                     	;# 
   205  070D                     	;# 
   206  070E                     	;# 
   207  070F                     	;# 
   208  0710                     	;# 
   209  0711                     	;# 
   210  0712                     	;# 
   211  0713                     	;# 
   212  0716                     	;# 
   213  0717                     	;# 
   214  0718                     	;# 
   215  0719                     	;# 
   216  071A                     	;# 
   217  071B                     	;# 
   218  071C                     	;# 
   219  071D                     	;# 
   220  0796                     	;# 
   221  0797                     	;# 
   222  0798                     	;# 
   223  0799                     	;# 
   224  079A                     	;# 
   225  079B                     	;# 
   226  080C                     	;# 
   227  080D                     	;# 
   228  080E                     	;# 
   229  080F                     	;# 
   230  0810                     	;# 
   231  0811                     	;# 
   232  0812                     	;# 
   233  0813                     	;# 
   234  0814                     	;# 
   235  081A                     	;# 
   236  081A                     	;# 
   237  081B                     	;# 
   238  081C                     	;# 
   239  081C                     	;# 
   240  081D                     	;# 
   241  081E                     	;# 
   242  081F                     	;# 
   243  088C                     	;# 
   244  088D                     	;# 
   245  088E                     	;# 
   246  088F                     	;# 
   247  0890                     	;# 
   248  0891                     	;# 
   249  0892                     	;# 
   250  0893                     	;# 
   251  0895                     	;# 
   252  0896                     	;# 
   253  090C                     	;# 
   254  090E                     	;# 
   255  090F                     	;# 
   256  091F                     	;# 
   257  098F                     	;# 
   258  098F                     	;# 
   259  0990                     	;# 
   260  0991                     	;# 
   261  0992                     	;# 
   262  0993                     	;# 
   263  0994                     	;# 
   264  0995                     	;# 
   265  0996                     	;# 
   266  0997                     	;# 
   267  1E0F                     	;# 
   268  1E10                     	;# 
   269  1E11                     	;# 
   270  1E12                     	;# 
   271  1E13                     	;# 
   272  1E14                     	;# 
   273  1E15                     	;# 
   274  1E16                     	;# 
   275  1E17                     	;# 
   276  1E18                     	;# 
   277  1E19                     	;# 
   278  1E1A                     	;# 
   279  1E1B                     	;# 
   280  1E1C                     	;# 
   281  1E1D                     	;# 
   282  1E1E                     	;# 
   283  1E1F                     	;# 
   284  1E20                     	;# 
   285  1E21                     	;# 
   286  1E22                     	;# 
   287  1E23                     	;# 
   288  1E24                     	;# 
   289  1E25                     	;# 
   290  1E26                     	;# 
   291  1E27                     	;# 
   292  1E28                     	;# 
   293  1E29                     	;# 
   294  1E2A                     	;# 
   295  1E2B                     	;# 
   296  1E2C                     	;# 
   297  1E2D                     	;# 
   298  1E2E                     	;# 
   299  1E2F                     	;# 
   300  1E30                     	;# 
   301  1E31                     	;# 
   302  1E32                     	;# 
   303  1E33                     	;# 
   304  1E34                     	;# 
   305  1E35                     	;# 
   306  1E36                     	;# 
   307  1E37                     	;# 
   308  1E8F                     	;# 
   309  1E90                     	;# 
   310  1E91                     	;# 
   311  1E92                     	;# 
   312  1E93                     	;# 
   313  1E9C                     	;# 
   314  1EA1                     	;# 
   315  1EA2                     	;# 
   316  1EB1                     	;# 
   317  1EBB                     	;# 
   318  1EBC                     	;# 
   319  1EBD                     	;# 
   320  1EBE                     	;# 
   321  1EC3                     	;# 
   322  1EC5                     	;# 
   323  1EC6                     	;# 
   324  1EC7                     	;# 
   325  1ECB                     	;# 
   326  1ECC                     	;# 
   327  1F10                     	;# 
   328  1F11                     	;# 
   329  1F12                     	;# 
   330  1F13                     	;# 
   331  1F14                     	;# 
   332  1F15                     	;# 
   333  1F20                     	;# 
   334  1F21                     	;# 
   335  1F22                     	;# 
   336  1F23                     	;# 
   337  1F24                     	;# 
   338  1F25                     	;# 
   339  1F38                     	;# 
   340  1F39                     	;# 
   341  1F3A                     	;# 
   342  1F3B                     	;# 
   343  1F3C                     	;# 
   344  1F3D                     	;# 
   345  1F3E                     	;# 
   346  1F3F                     	;# 
   347  1F4E                     	;# 
   348  1F4F                     	;# 
   349  1F50                     	;# 
   350  1F51                     	;# 
   351  1F52                     	;# 
   352  1F53                     	;# 
   353  1F54                     	;# 
   354  1F55                     	;# 
   355  1FE4                     	;# 
   356  1FE5                     	;# 
   357  1FE6                     	;# 
   358  1FE7                     	;# 
   359  1FE8                     	;# 
   360  1FE8                     	;# 
   361  1FE9                     	;# 
   362  1FEA                     	;# 
   363  1FEA                     	;# 
   364  1FEB                     	;# 
   365  1FED                     	;# 
   366  1FEE                     	;# 
   367  1FEF                     	;# 
   368  0000                     	;# 
   369  0001                     	;# 
   370  0002                     	;# 
   371  0003                     	;# 
   372  0004                     	;# 
   373  0005                     	;# 
   374  0006                     	;# 
   375  0007                     	;# 
   376  0008                     	;# 
   377  0009                     	;# 
   378  000A                     	;# 
   379  000B                     	;# 
   380  000C                     	;# 
   381  000E                     	;# 
   382  0012                     	;# 
   383  0014                     	;# 
   384  0018                     	;# 
   385  001A                     	;# 
   386  009B                     	;# 
   387  009B                     	;# 
   388  009C                     	;# 
   389  009D                     	;# 
   390  009E                     	;# 
   391  009F                     	;# 
   392  0119                     	;# 
   393  0119                     	;# 
   394  0119                     	;# 
   395  011A                     	;# 
   396  011A                     	;# 
   397  011A                     	;# 
   398  011B                     	;# 
   399  011B                     	;# 
   400  011B                     	;# 
   401  011B                     	;# 
   402  011B                     	;# 
   403  011C                     	;# 
   404  011C                     	;# 
   405  011C                     	;# 
   406  011D                     	;# 
   407  011D                     	;# 
   408  011D                     	;# 
   409  011E                     	;# 
   410  011E                     	;# 
   411  011E                     	;# 
   412  011F                     	;# 
   413  011F                     	;# 
   414  011F                     	;# 
   415  011F                     	;# 
   416  011F                     	;# 
   417  018C                     	;# 
   418  018D                     	;# 
   419  018E                     	;# 
   420  018F                     	;# 
   421  0190                     	;# 
   422  0191                     	;# 
   423  0192                     	;# 
   424  020C                     	;# 
   425  020C                     	;# 
   426  020D                     	;# 
   427  020E                     	;# 
   428  020F                     	;# 
   429  020F                     	;# 
   430  0210                     	;# 
   431  0210                     	;# 
   432  0211                     	;# 
   433  0211                     	;# 
   434  028C                     	;# 
   435  028C                     	;# 
   436  028D                     	;# 
   437  028D                     	;# 
   438  028E                     	;# 
   439  028F                     	;# 
   440  0290                     	;# 
   441  0291                     	;# 
   442  030C                     	;# 
   443  030C                     	;# 
   444  030D                     	;# 
   445  030E                     	;# 
   446  030F                     	;# 
   447  0310                     	;# 
   448  0310                     	;# 
   449  0311                     	;# 
   450  0312                     	;# 
   451  0313                     	;# 
   452  0314                     	;# 
   453  0315                     	;# 
   454  0316                     	;# 
   455  0318                     	;# 
   456  0319                     	;# 
   457  031A                     	;# 
   458  031C                     	;# 
   459  031D                     	;# 
   460  031E                     	;# 
   461  038C                     	;# 
   462  038D                     	;# 
   463  038E                     	;# 
   464  058C                     	;# 
   465  058C                     	;# 
   466  058D                     	;# 
   467  058E                     	;# 
   468  058F                     	;# 
   469  058F                     	;# 
   470  0590                     	;# 
   471  0591                     	;# 
   472  0592                     	;# 
   473  0593                     	;# 
   474  059C                     	;# 
   475  059C                     	;# 
   476  059D                     	;# 
   477  059D                     	;# 
   478  059E                     	;# 
   479  059F                     	;# 
   480  060C                     	;# 
   481  060D                     	;# 
   482  060E                     	;# 
   483  060F                     	;# 
   484  0610                     	;# 
   485  0611                     	;# 
   486  0612                     	;# 
   487  0613                     	;# 
   488  0614                     	;# 
   489  070C                     	;# 
   490  070D                     	;# 
   491  070E                     	;# 
   492  070F                     	;# 
   493  0710                     	;# 
   494  0711                     	;# 
   495  0712                     	;# 
   496  0713                     	;# 
   497  0716                     	;# 
   498  0717                     	;# 
   499  0718                     	;# 
   500  0719                     	;# 
   501  071A                     	;# 
   502  071B                     	;# 
   503  071C                     	;# 
   504  071D                     	;# 
   505  0796                     	;# 
   506  0797                     	;# 
   507  0798                     	;# 
   508  0799                     	;# 
   509  079A                     	;# 
   510  079B                     	;# 
   511  080C                     	;# 
   512  080D                     	;# 
   513  080E                     	;# 
   514  080F                     	;# 
   515  0810                     	;# 
   516  0811                     	;# 
   517  0812                     	;# 
   518  0813                     	;# 
   519  0814                     	;# 
   520  081A                     	;# 
   521  081A                     	;# 
   522  081B                     	;# 
   523  081C                     	;# 
   524  081C                     	;# 
   525  081D                     	;# 
   526  081E                     	;# 
   527  081F                     	;# 
   528  088C                     	;# 
   529  088D                     	;# 
   530  088E                     	;# 
   531  088F                     	;# 
   532  0890                     	;# 
   533  0891                     	;# 
   534  0892                     	;# 
   535  0893                     	;# 
   536  0895                     	;# 
   537  0896                     	;# 
   538  090C                     	;# 
   539  090E                     	;# 
   540  090F                     	;# 
   541  091F                     	;# 
   542  098F                     	;# 
   543  098F                     	;# 
   544  0990                     	;# 
   545  0991                     	;# 
   546  0992                     	;# 
   547  0993                     	;# 
   548  0994                     	;# 
   549  0995                     	;# 
   550  0996                     	;# 
   551  0997                     	;# 
   552  1E0F                     	;# 
   553  1E10                     	;# 
   554  1E11                     	;# 
   555  1E12                     	;# 
   556  1E13                     	;# 
   557  1E14                     	;# 
   558  1E15                     	;# 
   559  1E16                     	;# 
   560  1E17                     	;# 
   561  1E18                     	;# 
   562  1E19                     	;# 
   563  1E1A                     	;# 
   564  1E1B                     	;# 
   565  1E1C                     	;# 
   566  1E1D                     	;# 
   567  1E1E                     	;# 
   568  1E1F                     	;# 
   569  1E20                     	;# 
   570  1E21                     	;# 
   571  1E22                     	;# 
   572  1E23                     	;# 
   573  1E24                     	;# 
   574  1E25                     	;# 
   575  1E26                     	;# 
   576  1E27                     	;# 
   577  1E28                     	;# 
   578  1E29                     	;# 
   579  1E2A                     	;# 
   580  1E2B                     	;# 
   581  1E2C                     	;# 
   582  1E2D                     	;# 
   583  1E2E                     	;# 
   584  1E2F                     	;# 
   585  1E30                     	;# 
   586  1E31                     	;# 
   587  1E32                     	;# 
   588  1E33                     	;# 
   589  1E34                     	;# 
   590  1E35                     	;# 
   591  1E36                     	;# 
   592  1E37                     	;# 
   593  1E8F                     	;# 
   594  1E90                     	;# 
   595  1E91                     	;# 
   596  1E92                     	;# 
   597  1E93                     	;# 
   598  1E9C                     	;# 
   599  1EA1                     	;# 
   600  1EA2                     	;# 
   601  1EB1                     	;# 
   602  1EBB                     	;# 
   603  1EBC                     	;# 
   604  1EBD                     	;# 
   605  1EBE                     	;# 
   606  1EC3                     	;# 
   607  1EC5                     	;# 
   608  1EC6                     	;# 
   609  1EC7                     	;# 
   610  1ECB                     	;# 
   611  1ECC                     	;# 
   612  1F10                     	;# 
   613  1F11                     	;# 
   614  1F12                     	;# 
   615  1F13                     	;# 
   616  1F14                     	;# 
   617  1F15                     	;# 
   618  1F20                     	;# 
   619  1F21                     	;# 
   620  1F22                     	;# 
   621  1F23                     	;# 
   622  1F24                     	;# 
   623  1F25                     	;# 
   624  1F38                     	;# 
   625  1F39                     	;# 
   626  1F3A                     	;# 
   627  1F3B                     	;# 
   628  1F3C                     	;# 
   629  1F3D                     	;# 
   630  1F3E                     	;# 
   631  1F3F                     	;# 
   632  1F4E                     	;# 
   633  1F4F                     	;# 
   634  1F50                     	;# 
   635  1F51                     	;# 
   636  1F52                     	;# 
   637  1F53                     	;# 
   638  1F54                     	;# 
   639  1F55                     	;# 
   640  1FE4                     	;# 
   641  1FE5                     	;# 
   642  1FE6                     	;# 
   643  1FE7                     	;# 
   644  1FE8                     	;# 
   645  1FE8                     	;# 
   646  1FE9                     	;# 
   647  1FEA                     	;# 
   648  1FEA                     	;# 
   649  1FEB                     	;# 
   650  1FED                     	;# 
   651  1FEE                     	;# 
   652  1FEF                     	;# 
   653  0000                     	;# 
   654  0001                     	;# 
   655  0002                     	;# 
   656  0003                     	;# 
   657  0004                     	;# 
   658  0005                     	;# 
   659  0006                     	;# 
   660  0007                     	;# 
   661  0008                     	;# 
   662  0009                     	;# 
   663  000A                     	;# 
   664  000B                     	;# 
   665  000C                     	;# 
   666  000E                     	;# 
   667  0012                     	;# 
   668  0014                     	;# 
   669  0018                     	;# 
   670  001A                     	;# 
   671  009B                     	;# 
   672  009B                     	;# 
   673  009C                     	;# 
   674  009D                     	;# 
   675  009E                     	;# 
   676  009F                     	;# 
   677  0119                     	;# 
   678  0119                     	;# 
   679  0119                     	;# 
   680  011A                     	;# 
   681  011A                     	;# 
   682  011A                     	;# 
   683  011B                     	;# 
   684  011B                     	;# 
   685  011B                     	;# 
   686  011B                     	;# 
   687  011B                     	;# 
   688  011C                     	;# 
   689  011C                     	;# 
   690  011C                     	;# 
   691  011D                     	;# 
   692  011D                     	;# 
   693  011D                     	;# 
   694  011E                     	;# 
   695  011E                     	;# 
   696  011E                     	;# 
   697  011F                     	;# 
   698  011F                     	;# 
   699  011F                     	;# 
   700  011F                     	;# 
   701  011F                     	;# 
   702  018C                     	;# 
   703  018D                     	;# 
   704  018E                     	;# 
   705  018F                     	;# 
   706  0190                     	;# 
   707  0191                     	;# 
   708  0192                     	;# 
   709  020C                     	;# 
   710  020C                     	;# 
   711  020D                     	;# 
   712  020E                     	;# 
   713  020F                     	;# 
   714  020F                     	;# 
   715  0210                     	;# 
   716  0210                     	;# 
   717  0211                     	;# 
   718  0211                     	;# 
   719  028C                     	;# 
   720  028C                     	;# 
   721  028D                     	;# 
   722  028D                     	;# 
   723  028E                     	;# 
   724  028F                     	;# 
   725  0290                     	;# 
   726  0291                     	;# 
   727  030C                     	;# 
   728  030C                     	;# 
   729  030D                     	;# 
   730  030E                     	;# 
   731  030F                     	;# 
   732  0310                     	;# 
   733  0310                     	;# 
   734  0311                     	;# 
   735  0312                     	;# 
   736  0313                     	;# 
   737  0314                     	;# 
   738  0315                     	;# 
   739  0316                     	;# 
   740  0318                     	;# 
   741  0319                     	;# 
   742  031A                     	;# 
   743  031C                     	;# 
   744  031D                     	;# 
   745  031E                     	;# 
   746  038C                     	;# 
   747  038D                     	;# 
   748  038E                     	;# 
   749  058C                     	;# 
   750  058C                     	;# 
   751  058D                     	;# 
   752  058E                     	;# 
   753  058F                     	;# 
   754  058F                     	;# 
   755  0590                     	;# 
   756  0591                     	;# 
   757  0592                     	;# 
   758  0593                     	;# 
   759  059C                     	;# 
   760  059C                     	;# 
   761  059D                     	;# 
   762  059D                     	;# 
   763  059E                     	;# 
   764  059F                     	;# 
   765  060C                     	;# 
   766  060D                     	;# 
   767  060E                     	;# 
   768  060F                     	;# 
   769  0610                     	;# 
   770  0611                     	;# 
   771  0612                     	;# 
   772  0613                     	;# 
   773  0614                     	;# 
   774  070C                     	;# 
   775  070D                     	;# 
   776  070E                     	;# 
   777  070F                     	;# 
   778  0710                     	;# 
   779  0711                     	;# 
   780  0712                     	;# 
   781  0713                     	;# 
   782  0716                     	;# 
   783  0717                     	;# 
   784  0718                     	;# 
   785  0719                     	;# 
   786  071A                     	;# 
   787  071B                     	;# 
   788  071C                     	;# 
   789  071D                     	;# 
   790  0796                     	;# 
   791  0797                     	;# 
   792  0798                     	;# 
   793  0799                     	;# 
   794  079A                     	;# 
   795  079B                     	;# 
   796  080C                     	;# 
   797  080D                     	;# 
   798  080E                     	;# 
   799  080F                     	;# 
   800  0810                     	;# 
   801  0811                     	;# 
   802  0812                     	;# 
   803  0813                     	;# 
   804  0814                     	;# 
   805  081A                     	;# 
   806  081A                     	;# 
   807  081B                     	;# 
   808  081C                     	;# 
   809  081C                     	;# 
   810  081D                     	;# 
   811  081E                     	;# 
   812  081F                     	;# 
   813  088C                     	;# 
   814  088D                     	;# 
   815  088E                     	;# 
   816  088F                     	;# 
   817  0890                     	;# 
   818  0891                     	;# 
   819  0892                     	;# 
   820  0893                     	;# 
   821  0895                     	;# 
   822  0896                     	;# 
   823  090C                     	;# 
   824  090E                     	;# 
   825  090F                     	;# 
   826  091F                     	;# 
   827  098F                     	;# 
   828  098F                     	;# 
   829  0990                     	;# 
   830  0991                     	;# 
   831  0992                     	;# 
   832  0993                     	;# 
   833  0994                     	;# 
   834  0995                     	;# 
   835  0996                     	;# 
   836  0997                     	;# 
   837  1E0F                     	;# 
   838  1E10                     	;# 
   839  1E11                     	;# 
   840  1E12                     	;# 
   841  1E13                     	;# 
   842  1E14                     	;# 
   843  1E15                     	;# 
   844  1E16                     	;# 
   845  1E17                     	;# 
   846  1E18                     	;# 
   847  1E19                     	;# 
   848  1E1A                     	;# 
   849  1E1B                     	;# 
   850  1E1C                     	;# 
   851  1E1D                     	;# 
   852  1E1E                     	;# 
   853  1E1F                     	;# 
   854  1E20                     	;# 
   855  1E21                     	;# 
   856  1E22                     	;# 
   857  1E23                     	;# 
   858  1E24                     	;# 
   859  1E25                     	;# 
   860  1E26                     	;# 
   861  1E27                     	;# 
   862  1E28                     	;# 
   863  1E29                     	;# 
   864  1E2A                     	;# 
   865  1E2B                     	;# 
   866  1E2C                     	;# 
   867  1E2D                     	;# 
   868  1E2E                     	;# 
   869  1E2F                     	;# 
   870  1E30                     	;# 
   871  1E31                     	;# 
   872  1E32                     	;# 
   873  1E33                     	;# 
   874  1E34                     	;# 
   875  1E35                     	;# 
   876  1E36                     	;# 
   877  1E37                     	;# 
   878  1E8F                     	;# 
   879  1E90                     	;# 
   880  1E91                     	;# 
   881  1E92                     	;# 
   882  1E93                     	;# 
   883  1E9C                     	;# 
   884  1EA1                     	;# 
   885  1EA2                     	;# 
   886  1EB1                     	;# 
   887  1EBB                     	;# 
   888  1EBC                     	;# 
   889  1EBD                     	;# 
   890  1EBE                     	;# 
   891  1EC3                     	;# 
   892  1EC5                     	;# 
   893  1EC6                     	;# 
   894  1EC7                     	;# 
   895  1ECB                     	;# 
   896  1ECC                     	;# 
   897  1F10                     	;# 
   898  1F11                     	;# 
   899  1F12                     	;# 
   900  1F13                     	;# 
   901  1F14                     	;# 
   902  1F15                     	;# 
   903  1F20                     	;# 
   904  1F21                     	;# 
   905  1F22                     	;# 
   906  1F23                     	;# 
   907  1F24                     	;# 
   908  1F25                     	;# 
   909  1F38                     	;# 
   910  1F39                     	;# 
   911  1F3A                     	;# 
   912  1F3B                     	;# 
   913  1F3C                     	;# 
   914  1F3D                     	;# 
   915  1F3E                     	;# 
   916  1F3F                     	;# 
   917  1F4E                     	;# 
   918  1F4F                     	;# 
   919  1F50                     	;# 
   920  1F51                     	;# 
   921  1F52                     	;# 
   922  1F53                     	;# 
   923  1F54                     	;# 
   924  1F55                     	;# 
   925  1FE4                     	;# 
   926  1FE5                     	;# 
   927  1FE6                     	;# 
   928  1FE7                     	;# 
   929  1FE8                     	;# 
   930  1FE8                     	;# 
   931  1FE9                     	;# 
   932  1FEA                     	;# 
   933  1FEA                     	;# 
   934  1FEB                     	;# 
   935  1FED                     	;# 
   936  1FEE                     	;# 
   937  1FEF                     	;# 
   938  0000                     	;# 
   939  0001                     	;# 
   940  0002                     	;# 
   941  0003                     	;# 
   942  0004                     	;# 
   943  0005                     	;# 
   944  0006                     	;# 
   945  0007                     	;# 
   946  0008                     	;# 
   947  0009                     	;# 
   948  000A                     	;# 
   949  000B                     	;# 
   950  000C                     	;# 
   951  000E                     	;# 
   952  0012                     	;# 
   953  0014                     	;# 
   954  0018                     	;# 
   955  001A                     	;# 
   956  009B                     	;# 
   957  009B                     	;# 
   958  009C                     	;# 
   959  009D                     	;# 
   960  009E                     	;# 
   961  009F                     	;# 
   962  0119                     	;# 
   963  0119                     	;# 
   964  0119                     	;# 
   965  011A                     	;# 
   966  011A                     	;# 
   967  011A                     	;# 
   968  011B                     	;# 
   969  011B                     	;# 
   970  011B                     	;# 
   971  011B                     	;# 
   972  011B                     	;# 
   973  011C                     	;# 
   974  011C                     	;# 
   975  011C                     	;# 
   976  011D                     	;# 
   977  011D                     	;# 
   978  011D                     	;# 
   979  011E                     	;# 
   980  011E                     	;# 
   981  011E                     	;# 
   982  011F                     	;# 
   983  011F                     	;# 
   984  011F                     	;# 
   985  011F                     	;# 
   986  011F                     	;# 
   987  018C                     	;# 
   988  018D                     	;# 
   989  018E                     	;# 
   990  018F                     	;# 
   991  0190                     	;# 
   992  0191                     	;# 
   993  0192                     	;# 
   994  020C                     	;# 
   995  020C                     	;# 
   996  020D                     	;# 
   997  020E                     	;# 
   998  020F                     	;# 
   999  020F                     	;# 
  1000  0210                     	;# 
  1001  0210                     	;# 
  1002  0211                     	;# 
  1003  0211                     	;# 
  1004  028C                     	;# 
  1005  028C                     	;# 
  1006  028D                     	;# 
  1007  028D                     	;# 
  1008  028E                     	;# 
  1009  028F                     	;# 
  1010  0290                     	;# 
  1011  0291                     	;# 
  1012  030C                     	;# 
  1013  030C                     	;# 
  1014  030D                     	;# 
  1015  030E                     	;# 
  1016  030F                     	;# 
  1017  0310                     	;# 
  1018  0310                     	;# 
  1019  0311                     	;# 
  1020  0312                     	;# 
  1021  0313                     	;# 
  1022  0314                     	;# 
  1023  0315                     	;# 
  1024  0316                     	;# 
  1025  0318                     	;# 
  1026  0319                     	;# 
  1027  031A                     	;# 
  1028  031C                     	;# 
  1029  031D                     	;# 
  1030  031E                     	;# 
  1031  038C                     	;# 
  1032  038D                     	;# 
  1033  038E                     	;# 
  1034  058C                     	;# 
  1035  058C                     	;# 
  1036  058D                     	;# 
  1037  058E                     	;# 
  1038  058F                     	;# 
  1039  058F                     	;# 
  1040  0590                     	;# 
  1041  0591                     	;# 
  1042  0592                     	;# 
  1043  0593                     	;# 
  1044  059C                     	;# 
  1045  059C                     	;# 
  1046  059D                     	;# 
  1047  059D                     	;# 
  1048  059E                     	;# 
  1049  059F                     	;# 
  1050  060C                     	;# 
  1051  060D                     	;# 
  1052  060E                     	;# 
  1053  060F                     	;# 
  1054  0610                     	;# 
  1055  0611                     	;# 
  1056  0612                     	;# 
  1057  0613                     	;# 
  1058  0614                     	;# 
  1059  070C                     	;# 
  1060  070D                     	;# 
  1061  070E                     	;# 
  1062  070F                     	;# 
  1063  0710                     	;# 
  1064  0711                     	;# 
  1065  0712                     	;# 
  1066  0713                     	;# 
  1067  0716                     	;# 
  1068  0717                     	;# 
  1069  0718                     	;# 
  1070  0719                     	;# 
  1071  071A                     	;# 
  1072  071B                     	;# 
  1073  071C                     	;# 
  1074  071D                     	;# 
  1075  0796                     	;# 
  1076  0797                     	;# 
  1077  0798                     	;# 
  1078  0799                     	;# 
  1079  079A                     	;# 
  1080  079B                     	;# 
  1081  080C                     	;# 
  1082  080D                     	;# 
  1083  080E                     	;# 
  1084  080F                     	;# 
  1085  0810                     	;# 
  1086  0811                     	;# 
  1087  0812                     	;# 
  1088  0813                     	;# 
  1089  0814                     	;# 
  1090  081A                     	;# 
  1091  081A                     	;# 
  1092  081B                     	;# 
  1093  081C                     	;# 
  1094  081C                     	;# 
  1095  081D                     	;# 
  1096  081E                     	;# 
  1097  081F                     	;# 
  1098  088C                     	;# 
  1099  088D                     	;# 
  1100  088E                     	;# 
  1101  088F                     	;# 
  1102  0890                     	;# 
  1103  0891                     	;# 
  1104  0892                     	;# 
  1105  0893                     	;# 
  1106  0895                     	;# 
  1107  0896                     	;# 
  1108  090C                     	;# 
  1109  090E                     	;# 
  1110  090F                     	;# 
  1111  091F                     	;# 
  1112  098F                     	;# 
  1113  098F                     	;# 
  1114  0990                     	;# 
  1115  0991                     	;# 
  1116  0992                     	;# 
  1117  0993                     	;# 
  1118  0994                     	;# 
  1119  0995                     	;# 
  1120  0996                     	;# 
  1121  0997                     	;# 
  1122  1E0F                     	;# 
  1123  1E10                     	;# 
  1124  1E11                     	;# 
  1125  1E12                     	;# 
  1126  1E13                     	;# 
  1127  1E14                     	;# 
  1128  1E15                     	;# 
  1129  1E16                     	;# 
  1130  1E17                     	;# 
  1131  1E18                     	;# 
  1132  1E19                     	;# 
  1133  1E1A                     	;# 
  1134  1E1B                     	;# 
  1135  1E1C                     	;# 
  1136  1E1D                     	;# 
  1137  1E1E                     	;# 
  1138  1E1F                     	;# 
  1139  1E20                     	;# 
  1140  1E21                     	;# 
  1141  1E22                     	;# 
  1142  1E23                     	;# 
  1143  1E24                     	;# 
  1144  1E25                     	;# 
  1145  1E26                     	;# 
  1146  1E27                     	;# 
  1147  1E28                     	;# 
  1148  1E29                     	;# 
  1149  1E2A                     	;# 
  1150  1E2B                     	;# 
  1151  1E2C                     	;# 
  1152  1E2D                     	;# 
  1153  1E2E                     	;# 
  1154  1E2F                     	;# 
  1155  1E30                     	;# 
  1156  1E31                     	;# 
  1157  1E32                     	;# 
  1158  1E33                     	;# 
  1159  1E34                     	;# 
  1160  1E35                     	;# 
  1161  1E36                     	;# 
  1162  1E37                     	;# 
  1163  1E8F                     	;# 
  1164  1E90                     	;# 
  1165  1E91                     	;# 
  1166  1E92                     	;# 
  1167  1E93                     	;# 
  1168  1E9C                     	;# 
  1169  1EA1                     	;# 
  1170  1EA2                     	;# 
  1171  1EB1                     	;# 
  1172  1EBB                     	;# 
  1173  1EBC                     	;# 
  1174  1EBD                     	;# 
  1175  1EBE                     	;# 
  1176  1EC3                     	;# 
  1177  1EC5                     	;# 
  1178  1EC6                     	;# 
  1179  1EC7                     	;# 
  1180  1ECB                     	;# 
  1181  1ECC                     	;# 
  1182  1F10                     	;# 
  1183  1F11                     	;# 
  1184  1F12                     	;# 
  1185  1F13                     	;# 
  1186  1F14                     	;# 
  1187  1F15                     	;# 
  1188  1F20                     	;# 
  1189  1F21                     	;# 
  1190  1F22                     	;# 
  1191  1F23                     	;# 
  1192  1F24                     	;# 
  1193  1F25                     	;# 
  1194  1F38                     	;# 
  1195  1F39                     	;# 
  1196  1F3A                     	;# 
  1197  1F3B                     	;# 
  1198  1F3C                     	;# 
  1199  1F3D                     	;# 
  1200  1F3E                     	;# 
  1201  1F3F                     	;# 
  1202  1F4E                     	;# 
  1203  1F4F                     	;# 
  1204  1F50                     	;# 
  1205  1F51                     	;# 
  1206  1F52                     	;# 
  1207  1F53                     	;# 
  1208  1F54                     	;# 
  1209  1F55                     	;# 
  1210  1FE4                     	;# 
  1211  1FE5                     	;# 
  1212  1FE6                     	;# 
  1213  1FE7                     	;# 
  1214  1FE8                     	;# 
  1215  1FE8                     	;# 
  1216  1FE9                     	;# 
  1217  1FEA                     	;# 
  1218  1FEA                     	;# 
  1219  1FEB                     	;# 
  1220  1FED                     	;# 
  1221  1FEE                     	;# 
  1222  1FEF                     	;# 
  1223  0000                     	;# 
  1224  0001                     	;# 
  1225  0002                     	;# 
  1226  0003                     	;# 
  1227  0004                     	;# 
  1228  0005                     	;# 
  1229  0006                     	;# 
  1230  0007                     	;# 
  1231  0008                     	;# 
  1232  0009                     	;# 
  1233  000A                     	;# 
  1234  000B                     	;# 
  1235  000C                     	;# 
  1236  000E                     	;# 
  1237  0012                     	;# 
  1238  0014                     	;# 
  1239  0018                     	;# 
  1240  001A                     	;# 
  1241  009B                     	;# 
  1242  009B                     	;# 
  1243  009C                     	;# 
  1244  009D                     	;# 
  1245  009E                     	;# 
  1246  009F                     	;# 
  1247  0119                     	;# 
  1248  0119                     	;# 
  1249  0119                     	;# 
  1250  011A                     	;# 
  1251  011A                     	;# 
  1252  011A                     	;# 
  1253  011B                     	;# 
  1254  011B                     	;# 
  1255  011B                     	;# 
  1256  011B                     	;# 
  1257  011B                     	;# 
  1258  011C                     	;# 
  1259  011C                     	;# 
  1260  011C                     	;# 
  1261  011D                     	;# 
  1262  011D                     	;# 
  1263  011D                     	;# 
  1264  011E                     	;# 
  1265  011E                     	;# 
  1266  011E                     	;# 
  1267  011F                     	;# 
  1268  011F                     	;# 
  1269  011F                     	;# 
  1270  011F                     	;# 
  1271  011F                     	;# 
  1272  018C                     	;# 
  1273  018D                     	;# 
  1274  018E                     	;# 
  1275  018F                     	;# 
  1276  0190                     	;# 
  1277  0191                     	;# 
  1278  0192                     	;# 
  1279  020C                     	;# 
  1280  020C                     	;# 
  1281  020D                     	;# 
  1282  020E                     	;# 
  1283  020F                     	;# 
  1284  020F                     	;# 
  1285  0210                     	;# 
  1286  0210                     	;# 
  1287  0211                     	;# 
  1288  0211                     	;# 
  1289  028C                     	;# 
  1290  028C                     	;# 
  1291  028D                     	;# 
  1292  028D                     	;# 
  1293  028E                     	;# 
  1294  028F                     	;# 
  1295  0290                     	;# 
  1296  0291                     	;# 
  1297  030C                     	;# 
  1298  030C                     	;# 
  1299  030D                     	;# 
  1300  030E                     	;# 
  1301  030F                     	;# 
  1302  0310                     	;# 
  1303  0310                     	;# 
  1304  0311                     	;# 
  1305  0312                     	;# 
  1306  0313                     	;# 
  1307  0314                     	;# 
  1308  0315                     	;# 
  1309  0316                     	;# 
  1310  0318                     	;# 
  1311  0319                     	;# 
  1312  031A                     	;# 
  1313  031C                     	;# 
  1314  031D                     	;# 
  1315  031E                     	;# 
  1316  038C                     	;# 
  1317  038D                     	;# 
  1318  038E                     	;# 
  1319  058C                     	;# 
  1320  058C                     	;# 
  1321  058D                     	;# 
  1322  058E                     	;# 
  1323  058F                     	;# 
  1324  058F                     	;# 
  1325  0590                     	;# 
  1326  0591                     	;# 
  1327  0592                     	;# 
  1328  0593                     	;# 
  1329  059C                     	;# 
  1330  059C                     	;# 
  1331  059D                     	;# 
  1332  059D                     	;# 
  1333  059E                     	;# 
  1334  059F                     	;# 
  1335  060C                     	;# 
  1336  060D                     	;# 
  1337  060E                     	;# 
  1338  060F                     	;# 
  1339  0610                     	;# 
  1340  0611                     	;# 
  1341  0612                     	;# 
  1342  0613                     	;# 
  1343  0614                     	;# 
  1344  070C                     	;# 
  1345  070D                     	;# 
  1346  070E                     	;# 
  1347  070F                     	;# 
  1348  0710                     	;# 
  1349  0711                     	;# 
  1350  0712                     	;# 
  1351  0713                     	;# 
  1352  0716                     	;# 
  1353  0717                     	;# 
  1354  0718                     	;# 
  1355  0719                     	;# 
  1356  071A                     	;# 
  1357  071B                     	;# 
  1358  071C                     	;# 
  1359  071D                     	;# 
  1360  0796                     	;# 
  1361  0797                     	;# 
  1362  0798                     	;# 
  1363  0799                     	;# 
  1364  079A                     	;# 
  1365  079B                     	;# 
  1366  080C                     	;# 
  1367  080D                     	;# 
  1368  080E                     	;# 
  1369  080F                     	;# 
  1370  0810                     	;# 
  1371  0811                     	;# 
  1372  0812                     	;# 
  1373  0813                     	;# 
  1374  0814                     	;# 
  1375  081A                     	;# 
  1376  081A                     	;# 
  1377  081B                     	;# 
  1378  081C                     	;# 
  1379  081C                     	;# 
  1380  081D                     	;# 
  1381  081E                     	;# 
  1382  081F                     	;# 
  1383  088C                     	;# 
  1384  088D                     	;# 
  1385  088E                     	;# 
  1386  088F                     	;# 
  1387  0890                     	;# 
  1388  0891                     	;# 
  1389  0892                     	;# 
  1390  0893                     	;# 
  1391  0895                     	;# 
  1392  0896                     	;# 
  1393  090C                     	;# 
  1394  090E                     	;# 
  1395  090F                     	;# 
  1396  091F                     	;# 
  1397  098F                     	;# 
  1398  098F                     	;# 
  1399  0990                     	;# 
  1400  0991                     	;# 
  1401  0992                     	;# 
  1402  0993                     	;# 
  1403  0994                     	;# 
  1404  0995                     	;# 
  1405  0996                     	;# 
  1406  0997                     	;# 
  1407  1E0F                     	;# 
  1408  1E10                     	;# 
  1409  1E11                     	;# 
  1410  1E12                     	;# 
  1411  1E13                     	;# 
  1412  1E14                     	;# 
  1413  1E15                     	;# 
  1414  1E16                     	;# 
  1415  1E17                     	;# 
  1416  1E18                     	;# 
  1417  1E19                     	;# 
  1418  1E1A                     	;# 
  1419  1E1B                     	;# 
  1420  1E1C                     	;# 
  1421  1E1D                     	;# 
  1422  1E1E                     	;# 
  1423  1E1F                     	;# 
  1424  1E20                     	;# 
  1425  1E21                     	;# 
  1426  1E22                     	;# 
  1427  1E23                     	;# 
  1428  1E24                     	;# 
  1429  1E25                     	;# 
  1430  1E26                     	;# 
  1431  1E27                     	;# 
  1432  1E28                     	;# 
  1433  1E29                     	;# 
  1434  1E2A                     	;# 
  1435  1E2B                     	;# 
  1436  1E2C                     	;# 
  1437  1E2D                     	;# 
  1438  1E2E                     	;# 
  1439  1E2F                     	;# 
  1440  1E30                     	;# 
  1441  1E31                     	;# 
  1442  1E32                     	;# 
  1443  1E33                     	;# 
  1444  1E34                     	;# 
  1445  1E35                     	;# 
  1446  1E36                     	;# 
  1447  1E37                     	;# 
  1448  1E8F                     	;# 
  1449  1E90                     	;# 
  1450  1E91                     	;# 
  1451  1E92                     	;# 
  1452  1E93                     	;# 
  1453  1E9C                     	;# 
  1454  1EA1                     	;# 
  1455  1EA2                     	;# 
  1456  1EB1                     	;# 
  1457  1EBB                     	;# 
  1458  1EBC                     	;# 
  1459  1EBD                     	;# 
  1460  1EBE                     	;# 
  1461  1EC3                     	;# 
  1462  1EC5                     	;# 
  1463  1EC6                     	;# 
  1464  1EC7                     	;# 
  1465  1ECB                     	;# 
  1466  1ECC                     	;# 
  1467  1F10                     	;# 
  1468  1F11                     	;# 
  1469  1F12                     	;# 
  1470  1F13                     	;# 
  1471  1F14                     	;# 
  1472  1F15                     	;# 
  1473  1F20                     	;# 
  1474  1F21                     	;# 
  1475  1F22                     	;# 
  1476  1F23                     	;# 
  1477  1F24                     	;# 
  1478  1F25                     	;# 
  1479  1F38                     	;# 
  1480  1F39                     	;# 
  1481  1F3A                     	;# 
  1482  1F3B                     	;# 
  1483  1F3C                     	;# 
  1484  1F3D                     	;# 
  1485  1F3E                     	;# 
  1486  1F3F                     	;# 
  1487  1F4E                     	;# 
  1488  1F4F                     	;# 
  1489  1F50                     	;# 
  1490  1F51                     	;# 
  1491  1F52                     	;# 
  1492  1F53                     	;# 
  1493  1F54                     	;# 
  1494  1F55                     	;# 
  1495  1FE4                     	;# 
  1496  1FE5                     	;# 
  1497  1FE6                     	;# 
  1498  1FE7                     	;# 
  1499  1FE8                     	;# 
  1500  1FE8                     	;# 
  1501  1FE9                     	;# 
  1502  1FEA                     	;# 
  1503  1FEA                     	;# 
  1504  1FEB                     	;# 
  1505  1FED                     	;# 
  1506  1FEE                     	;# 
  1507  1FEF                     	;# 
  1508  0000                     	;# 
  1509  0001                     	;# 
  1510  0002                     	;# 
  1511  0003                     	;# 
  1512  0004                     	;# 
  1513  0005                     	;# 
  1514  0006                     	;# 
  1515  0007                     	;# 
  1516  0008                     	;# 
  1517  0009                     	;# 
  1518  000A                     	;# 
  1519  000B                     	;# 
  1520  000C                     	;# 
  1521  000E                     	;# 
  1522  0012                     	;# 
  1523  0014                     	;# 
  1524  0018                     	;# 
  1525  001A                     	;# 
  1526  009B                     	;# 
  1527  009B                     	;# 
  1528  009C                     	;# 
  1529  009D                     	;# 
  1530  009E                     	;# 
  1531  009F                     	;# 
  1532  0119                     	;# 
  1533  0119                     	;# 
  1534  0119                     	;# 
  1535  011A                     	;# 
  1536  011A                     	;# 
  1537  011A                     	;# 
  1538  011B                     	;# 
  1539  011B                     	;# 
  1540  011B                     	;# 
  1541  011B                     	;# 
  1542  011B                     	;# 
  1543  011C                     	;# 
  1544  011C                     	;# 
  1545  011C                     	;# 
  1546  011D                     	;# 
  1547  011D                     	;# 
  1548  011D                     	;# 
  1549  011E                     	;# 
  1550  011E                     	;# 
  1551  011E                     	;# 
  1552  011F                     	;# 
  1553  011F                     	;# 
  1554  011F                     	;# 
  1555  011F                     	;# 
  1556  011F                     	;# 
  1557  018C                     	;# 
  1558  018D                     	;# 
  1559  018E                     	;# 
  1560  018F                     	;# 
  1561  0190                     	;# 
  1562  0191                     	;# 
  1563  0192                     	;# 
  1564  020C                     	;# 
  1565  020C                     	;# 
  1566  020D                     	;# 
  1567  020E                     	;# 
  1568  020F                     	;# 
  1569  020F                     	;# 
  1570  0210                     	;# 
  1571  0210                     	;# 
  1572  0211                     	;# 
  1573  0211                     	;# 
  1574  028C                     	;# 
  1575  028C                     	;# 
  1576  028D                     	;# 
  1577  028D                     	;# 
  1578  028E                     	;# 
  1579  028F                     	;# 
  1580  0290                     	;# 
  1581  0291                     	;# 
  1582  030C                     	;# 
  1583  030C                     	;# 
  1584  030D                     	;# 
  1585  030E                     	;# 
  1586  030F                     	;# 
  1587  0310                     	;# 
  1588  0310                     	;# 
  1589  0311                     	;# 
  1590  0312                     	;# 
  1591  0313                     	;# 
  1592  0314                     	;# 
  1593  0315                     	;# 
  1594  0316                     	;# 
  1595  0318                     	;# 
  1596  0319                     	;# 
  1597  031A                     	;# 
  1598  031C                     	;# 
  1599  031D                     	;# 
  1600  031E                     	;# 
  1601  038C                     	;# 
  1602  038D                     	;# 
  1603  038E                     	;# 
  1604  058C                     	;# 
  1605  058C                     	;# 
  1606  058D                     	;# 
  1607  058E                     	;# 
  1608  058F                     	;# 
  1609  058F                     	;# 
  1610  0590                     	;# 
  1611  0591                     	;# 
  1612  0592                     	;# 
  1613  0593                     	;# 
  1614  059C                     	;# 
  1615  059C                     	;# 
  1616  059D                     	;# 
  1617  059D                     	;# 
  1618  059E                     	;# 
  1619  059F                     	;# 
  1620  060C                     	;# 
  1621  060D                     	;# 
  1622  060E                     	;# 
  1623  060F                     	;# 
  1624  0610                     	;# 
  1625  0611                     	;# 
  1626  0612                     	;# 
  1627  0613                     	;# 
  1628  0614                     	;# 
  1629  070C                     	;# 
  1630  070D                     	;# 
  1631  070E                     	;# 
  1632  070F                     	;# 
  1633  0710                     	;# 
  1634  0711                     	;# 
  1635  0712                     	;# 
  1636  0713                     	;# 
  1637  0716                     	;# 
  1638  0717                     	;# 
  1639  0718                     	;# 
  1640  0719                     	;# 
  1641  071A                     	;# 
  1642  071B                     	;# 
  1643  071C                     	;# 
  1644  071D                     	;# 
  1645  0796                     	;# 
  1646  0797                     	;# 
  1647  0798                     	;# 
  1648  0799                     	;# 
  1649  079A                     	;# 
  1650  079B                     	;# 
  1651  080C                     	;# 
  1652  080D                     	;# 
  1653  080E                     	;# 
  1654  080F                     	;# 
  1655  0810                     	;# 
  1656  0811                     	;# 
  1657  0812                     	;# 
  1658  0813                     	;# 
  1659  0814                     	;# 
  1660  081A                     	;# 
  1661  081A                     	;# 
  1662  081B                     	;# 
  1663  081C                     	;# 
  1664  081C                     	;# 
  1665  081D                     	;# 
  1666  081E                     	;# 
  1667  081F                     	;# 
  1668  088C                     	;# 
  1669  088D                     	;# 
  1670  088E                     	;# 
  1671  088F                     	;# 
  1672  0890                     	;# 
  1673  0891                     	;# 
  1674  0892                     	;# 
  1675  0893                     	;# 
  1676  0895                     	;# 
  1677  0896                     	;# 
  1678  090C                     	;# 
  1679  090E                     	;# 
  1680  090F                     	;# 
  1681  091F                     	;# 
  1682  098F                     	;# 
  1683  098F                     	;# 
  1684  0990                     	;# 
  1685  0991                     	;# 
  1686  0992                     	;# 
  1687  0993                     	;# 
  1688  0994                     	;# 
  1689  0995                     	;# 
  1690  0996                     	;# 
  1691  0997                     	;# 
  1692  1E0F                     	;# 
  1693  1E10                     	;# 
  1694  1E11                     	;# 
  1695  1E12                     	;# 
  1696  1E13                     	;# 
  1697  1E14                     	;# 
  1698  1E15                     	;# 
  1699  1E16                     	;# 
  1700  1E17                     	;# 
  1701  1E18                     	;# 
  1702  1E19                     	;# 
  1703  1E1A                     	;# 
  1704  1E1B                     	;# 
  1705  1E1C                     	;# 
  1706  1E1D                     	;# 
  1707  1E1E                     	;# 
  1708  1E1F                     	;# 
  1709  1E20                     	;# 
  1710  1E21                     	;# 
  1711  1E22                     	;# 
  1712  1E23                     	;# 
  1713  1E24                     	;# 
  1714  1E25                     	;# 
  1715  1E26                     	;# 
  1716  1E27                     	;# 
  1717  1E28                     	;# 
  1718  1E29                     	;# 
  1719  1E2A                     	;# 
  1720  1E2B                     	;# 
  1721  1E2C                     	;# 
  1722  1E2D                     	;# 
  1723  1E2E                     	;# 
  1724  1E2F                     	;# 
  1725  1E30                     	;# 
  1726  1E31                     	;# 
  1727  1E32                     	;# 
  1728  1E33                     	;# 
  1729  1E34                     	;# 
  1730  1E35                     	;# 
  1731  1E36                     	;# 
  1732  1E37                     	;# 
  1733  1E8F                     	;# 
  1734  1E90                     	;# 
  1735  1E91                     	;# 
  1736  1E92                     	;# 
  1737  1E93                     	;# 
  1738  1E9C                     	;# 
  1739  1EA1                     	;# 
  1740  1EA2                     	;# 
  1741  1EB1                     	;# 
  1742  1EBB                     	;# 
  1743  1EBC                     	;# 
  1744  1EBD                     	;# 
  1745  1EBE                     	;# 
  1746  1EC3                     	;# 
  1747  1EC5                     	;# 
  1748  1EC6                     	;# 
  1749  1EC7                     	;# 
  1750  1ECB                     	;# 
  1751  1ECC                     	;# 
  1752  1F10                     	;# 
  1753  1F11                     	;# 
  1754  1F12                     	;# 
  1755  1F13                     	;# 
  1756  1F14                     	;# 
  1757  1F15                     	;# 
  1758  1F20                     	;# 
  1759  1F21                     	;# 
  1760  1F22                     	;# 
  1761  1F23                     	;# 
  1762  1F24                     	;# 
  1763  1F25                     	;# 
  1764  1F38                     	;# 
  1765  1F39                     	;# 
  1766  1F3A                     	;# 
  1767  1F3B                     	;# 
  1768  1F3C                     	;# 
  1769  1F3D                     	;# 
  1770  1F3E                     	;# 
  1771  1F3F                     	;# 
  1772  1F4E                     	;# 
  1773  1F4F                     	;# 
  1774  1F50                     	;# 
  1775  1F51                     	;# 
  1776  1F52                     	;# 
  1777  1F53                     	;# 
  1778  1F54                     	;# 
  1779  1F55                     	;# 
  1780  1FE4                     	;# 
  1781  1FE5                     	;# 
  1782  1FE6                     	;# 
  1783  1FE7                     	;# 
  1784  1FE8                     	;# 
  1785  1FE8                     	;# 
  1786  1FE9                     	;# 
  1787  1FEA                     	;# 
  1788  1FEA                     	;# 
  1789  1FEB                     	;# 
  1790  1FED                     	;# 
  1791  1FEE                     	;# 
  1792  1FEF                     	;# 
  1793                           
  1794                           	psect	stringtext1
  1795  045B                     __pstringtext1:	
  1796  045B                     cw_init@cw_bat_config_info:	
  1797  045B  3414               	retlw	20
  1798  045C  34A6               	retlw	166
  1799  045D  3470               	retlw	112
  1800  045E  346C               	retlw	108
  1801  045F  346C               	retlw	108
  1802  0460  3467               	retlw	103
  1803  0461  3464               	retlw	100
  1804  0462  3462               	retlw	98
  1805  0463  3460               	retlw	96
  1806  0464  345C               	retlw	92
  1807  0465  3459               	retlw	89
  1808  0466  344E               	retlw	78
  1809  0467  3450               	retlw	80
  1810  0468  3442               	retlw	66
  1811  0469  342E               	retlw	46
  1812  046A  3426               	retlw	38
  1813  046B  3425               	retlw	37
  1814  046C  3424               	retlw	36
  1815  046D  3427               	retlw	39
  1816  046E  342E               	retlw	46
  1817  046F  3441               	retlw	65
  1818  0470  345A               	retlw	90
  1819  0471  346D               	retlw	109
  1820  0472  344C               	retlw	76
  1821  0473  3439               	retlw	57
  1822  0474  34D7               	retlw	215
  1823  0475  3406               	retlw	6
  1824  0476  3466               	retlw	102
  1825  0477  3400               	retlw	0
  1826  0478  3401               	retlw	1
  1827  0479  3405               	retlw	5
  1828  047A  3434               	retlw	52
  1829  047B  3461               	retlw	97
  1830  047C  3476               	retlw	118
  1831  047D  3479               	retlw	121
  1832  047E  347D               	retlw	125
  1833  047F  3442               	retlw	66
  1834  0480  341E               	retlw	30
  1835  0481  34A4               	retlw	164
  1836  0482  3400               	retlw	0
  1837  0483  3427               	retlw	39
  1838  0484  345A               	retlw	90
  1839  0485  3452               	retlw	82
  1840  0486  3487               	retlw	135
  1841  0487  348F               	retlw	143
  1842  0488  3491               	retlw	145
  1843  0489  3494               	retlw	148
  1844  048A  3452               	retlw	82
  1845  048B  3482               	retlw	130
  1846  048C  348C               	retlw	140
  1847  048D  3492               	retlw	146
  1848  048E  3496               	retlw	150
  1849  048F  342B               	retlw	43
  1850  0490  3459               	retlw	89
  1851  0491  346E               	retlw	110
  1852  0492  34CB               	retlw	203
  1853  0493  342F               	retlw	47
  1854  0494  347D               	retlw	125
  1855  0495  3472               	retlw	114
  1856  0496  34A5               	retlw	165
  1857  0497  34B5               	retlw	181
  1858  0498  34C1               	retlw	193
  1859  0499  3494               	retlw	148
  1860  049A  3499               	retlw	153
  1861  049B                     __end_ofcw_init@cw_bat_config_info:	
  1862                           
  1863                           	psect	stringtext2
  1864  049B                     __pstringtext2:	
  1865  049B                     cw_update_config_info@cw_bat_config_info:	
  1866  049B  3414               	retlw	20
  1867  049C  34A6               	retlw	166
  1868  049D  3470               	retlw	112
  1869  049E  346C               	retlw	108
  1870  049F  346C               	retlw	108
  1871  04A0  3467               	retlw	103
  1872  04A1  3464               	retlw	100
  1873  04A2  3462               	retlw	98
  1874  04A3  3460               	retlw	96
  1875  04A4  345C               	retlw	92
  1876  04A5  3459               	retlw	89
  1877  04A6  344E               	retlw	78
  1878  04A7  3450               	retlw	80
  1879  04A8  3442               	retlw	66
  1880  04A9  342E               	retlw	46
  1881  04AA  3426               	retlw	38
  1882  04AB  3425               	retlw	37
  1883  04AC  3424               	retlw	36
  1884  04AD  3427               	retlw	39
  1885  04AE  342E               	retlw	46
  1886  04AF  3441               	retlw	65
  1887  04B0  345A               	retlw	90
  1888  04B1  346D               	retlw	109
  1889  04B2  344C               	retlw	76
  1890  04B3  3439               	retlw	57
  1891  04B4  34D7               	retlw	215
  1892  04B5  3406               	retlw	6
  1893  04B6  3466               	retlw	102
  1894  04B7  3400               	retlw	0
  1895  04B8  3401               	retlw	1
  1896  04B9  3405               	retlw	5
  1897  04BA  3434               	retlw	52
  1898  04BB  3461               	retlw	97
  1899  04BC  3476               	retlw	118
  1900  04BD  3479               	retlw	121
  1901  04BE  347D               	retlw	125
  1902  04BF  3442               	retlw	66
  1903  04C0  341E               	retlw	30
  1904  04C1  34A4               	retlw	164
  1905  04C2  3400               	retlw	0
  1906  04C3  3427               	retlw	39
  1907  04C4  345A               	retlw	90
  1908  04C5  3452               	retlw	82
  1909  04C6  3487               	retlw	135
  1910  04C7  348F               	retlw	143
  1911  04C8  3491               	retlw	145
  1912  04C9  3494               	retlw	148
  1913  04CA  3452               	retlw	82
  1914  04CB  3482               	retlw	130
  1915  04CC  348C               	retlw	140
  1916  04CD  3492               	retlw	146
  1917  04CE  3496               	retlw	150
  1918  04CF  342B               	retlw	43
  1919  04D0  3459               	retlw	89
  1920  04D1  346E               	retlw	110
  1921  04D2  34CB               	retlw	203
  1922  04D3  342F               	retlw	47
  1923  04D4  347D               	retlw	125
  1924  04D5  3472               	retlw	114
  1925  04D6  34A5               	retlw	165
  1926  04D7  34B5               	retlw	181
  1927  04D8  34C1               	retlw	193
  1928  04D9  3494               	retlw	148
  1929  04DA  3499               	retlw	153
  1930  04DB                     __end_ofcw_update_config_info@cw_bat_config_info:	
  1931  000E                     _PORTCbits	set	14
  1932  0014                     _TRISCbits	set	20
  1933  0018                     _LATAbits	set	24
  1934  000B                     _INTCONbits	set	11
  1935  0014                     _TRISC	set	20
  1936  0012                     _TRISA	set	18
  1937  001A                     _LATC	set	26
  1938  0018                     _LATA	set	24
  1939  001A                     _LATCbits	set	26
  1940  005F                     _GIE	set	95
  1941  0119                     _RC1REG	set	281
  1942  011D                     _RC1STAbits	set	285
  1943  011A                     _TX1REG	set	282
  1944  011C                     _SP1BRGH	set	284
  1945  011B                     _SP1BRGL	set	283
  1946  011E                     _TX1STA	set	286
  1947  011D                     _RC1STA	set	285
  1948  011F                     _BAUD1CON	set	287
  1949  070F                     _PIR3bits	set	1807
  1950  0719                     _PIE3bits	set	1817
  1951  0892                     _OSCTUNE	set	2194
  1952  0890                     _OSCSTAT	set	2192
  1953  0893                     _OSCFRQ	set	2195
  1954  0891                     _OSCEN	set	2193
  1955  088F                     _OSCCON3	set	2191
  1956  088D                     _OSCCON1	set	2189
  1957  4480                     _PLLR	set	17536
  1958  1ECB                     _RX1DTPPSbits	set	7883
  1959  1E8F                     _PPSLOCKbits	set	7823
  1960  1E8F                     _PPSLOCK	set	7823
  1961  1F24                     _RC4PPS	set	7972
  1962  1F50                     _ODCONC	set	8016
  1963  1F3A                     _ODCONA	set	7994
  1964  1F4F                     _WPUC	set	8015
  1965  1F39                     _WPUA	set	7993
  1966  1F38                     _ANSELA	set	7992
  1967  1F4E                     _ANSELC	set	8014
  1968                           
  1969                           ; #config settings
  1970  0000                     
  1971                           	psect	cinit
  1972  0016                     start_initialization:	
  1973  0016                     __initialization:	
  1974                           
  1975                           ; Clear objects allocated to COMMON
  1976  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  1977  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  1978  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  1979                           
  1980                           ; Clear objects allocated to BANK0
  1981  0019  3054               	movlw	low __pbssBANK0
  1982  001A  0084               	movwf	4
  1983  001B  3000               	movlw	high __pbssBANK0
  1984  001C  0085               	movwf	5
  1985  001D  3018               	movlw	24
  1986  001E  2768               	fcall	clear_ram0
  1987  001F                     end_of_initialization:	
  1988                           ;End of C runtime variable initialization code
  1989                           
  1990  001F                     __end_of__initialization:	
  1991  001F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1992  0020  0140               	movlb	0
  1993  0021  2BD1               	ljmp	_main	;jump to C main() function
  1994                           
  1995                           	psect	bssCOMMON
  1996  0078                     __pbssCOMMON:	
  1997  0078                     _CHARGE:	
  1998  0078                     	ds	1
  1999  0079                     _state:	
  2000  0079                     	ds	1
  2001  007A                     _count:	
  2002  007A                     	ds	1
  2003                           
  2004                           	psect	bssBANK0
  2005  0054                     __pbssBANK0:	
  2006  0054                     _rxbuf:	
  2007  0054                     	ds	15
  2008  0063                     _cw_bat:	
  2009  0063                     	ds	6
  2010  0069                     cw_get_vol@F80:	
  2011  0069                     	ds	2
  2012  006B                     _reset_loop:	
  2013  006B                     	ds	1
  2014                           
  2015                           	psect	clrtext
  2016  0768                     clear_ram0:	
  2017                           ;	Called with FSR0 containing the base address, and
  2018                           ;	WREG with the size to clear
  2019                           
  2020  0768  0064               	clrwdt	;clear the watchdog before getting into this loop
  2021  0769                     clrloop0:	
  2022  0769  0180               	clrf	0	;clear RAM location pointed to by FSR
  2023  076A  3101               	addfsr 0,1
  2024  076B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2025  076C  2F69               	goto	clrloop0	;have we reached the end yet?
  2026  076D  3400               	retlw	0	;all done for this memory range, return
  2027                           
  2028                           	psect	cstackCOMMON
  2029  0070                     __pcstackCOMMON:	
  2030  0070                     ?_PIN_MANAGER_Initialize:	
  2031  0070                     ?_OSCILLATOR_Initialize:	
  2032                           ; 1 bytes @ 0x0
  2033                           
  2034  0070                     ?_cw_bat_init:	
  2035                           ; 1 bytes @ 0x0
  2036                           
  2037  0070                     ?_cw_bat_work:	
  2038                           ; 1 bytes @ 0x0
  2039                           
  2040  0070                     ?_EUSART1_Initialize:	
  2041                           ; 1 bytes @ 0x0
  2042                           
  2043  0070                     ?_EUSART1_Write:	
  2044                           ; 1 bytes @ 0x0
  2045                           
  2046  0070                     ??_EUSART1_Write:	
  2047                           ; 1 bytes @ 0x0
  2048                           
  2049  0070                     ?_EUSART1_Receive_ISR:	
  2050                           ; 1 bytes @ 0x0
  2051                           
  2052  0070                     ?_SYSTEM_Initialize:	
  2053                           ; 1 bytes @ 0x0
  2054                           
  2055  0070                     ?_INTERRUPT_InterruptManager:	
  2056                           ; 1 bytes @ 0x0
  2057                           
  2058  0070                     ?_main:	
  2059                           ; 1 bytes @ 0x0
  2060                           
  2061  0070                     ?_CW_Delay100us:	
  2062                           ; 1 bytes @ 0x0
  2063                           
  2064  0070                     ?_cw_update_config_info:	
  2065                           ; 1 bytes @ 0x0
  2066                           
  2067  0070                     ?_cw_init:	
  2068                           ; 1 bytes @ 0x0
  2069                           
  2070  0070                     ?_update_capacity:	
  2071                           ; 1 bytes @ 0x0
  2072                           
  2073  0070                     ?_update_vol:	
  2074                           ; 1 bytes @ 0x0
  2075                           
  2076  0070                     ?_update_usb_online:	
  2077                           ; 1 bytes @ 0x0
  2078                           
  2079  0070                     ?_Delay10us:	
  2080                           ; 1 bytes @ 0x0
  2081                           
  2082  0070                     ?_start:	
  2083                           ; 1 bytes @ 0x0
  2084                           
  2085  0070                     ?_stop:	
  2086                           ; 1 bytes @ 0x0
  2087                           
  2088  0070                     ?_s_ack:	
  2089                           ; 1 bytes @ 0x0
  2090                           
  2091  0070                     ?_sn_ack:	
  2092                           ; 1 bytes @ 0x0
  2093                           
  2094  0070                     ?_write_byte:	
  2095                           ; 1 bytes @ 0x0
  2096                           
  2097  0070                     ?_read_byte:	
  2098                           ; 1 bytes @ 0x0
  2099                           
  2100  0070                     ?i1_CW_Delay10ms:	
  2101                           ; 1 bytes @ 0x0
  2102                           
  2103  0070                     EUSART1_Write@txData:	
  2104                           ; 1 bytes @ 0x0
  2105                           
  2106  0070                     i1CW_Delay10ms@c:	
  2107                           ; 1 bytes @ 0x0
  2108                           
  2109                           
  2110                           ; 2 bytes @ 0x0
  2111  0070                     	ds	2
  2112  0072                     ??i1_CW_Delay10ms:	
  2113                           
  2114                           ; 1 bytes @ 0x2
  2115  0072                     	ds	1
  2116  0073                     i1CW_Delay10ms@a:	
  2117                           
  2118                           ; 1 bytes @ 0x3
  2119  0073                     	ds	1
  2120  0074                     i1CW_Delay10ms@b:	
  2121                           
  2122                           ; 1 bytes @ 0x4
  2123  0074                     	ds	1
  2124  0075                     ??_EUSART1_Receive_ISR:	
  2125                           
  2126                           ; 1 bytes @ 0x5
  2127  0075                     	ds	1
  2128  0076                     EUSART1_Receive_ISR@dat:	
  2129                           
  2130                           ; 1 bytes @ 0x6
  2131  0076                     	ds	1
  2132  0077                     ??_INTERRUPT_InterruptManager:	
  2133                           
  2134                           ; 1 bytes @ 0x7
  2135  0077                     	ds	1
  2136                           
  2137                           	psect	cstackBANK0
  2138  0020                     __pcstackBANK0:	
  2139  0020                     ?_CW_Delay10ms:	
  2140  0020                     ??_PIN_MANAGER_Initialize:	
  2141                           ; 1 bytes @ 0x0
  2142                           
  2143  0020                     ??_OSCILLATOR_Initialize:	
  2144                           ; 1 bytes @ 0x0
  2145                           
  2146  0020                     ??_EUSART1_Initialize:	
  2147                           ; 1 bytes @ 0x0
  2148                           
  2149  0020                     ??_CW_Delay100us:	
  2150                           ; 1 bytes @ 0x0
  2151                           
  2152  0020                     ??_update_usb_online:	
  2153                           ; 1 bytes @ 0x0
  2154                           
  2155  0020                     ??_Delay10us:	
  2156                           ; 1 bytes @ 0x0
  2157                           
  2158  0020                     ?___lmul:	
  2159                           ; 1 bytes @ 0x0
  2160                           
  2161  0020                     PIN_MANAGER_Initialize@state:	
  2162                           ; 4 bytes @ 0x0
  2163                           
  2164  0020                     CW_Delay10ms@c:	
  2165                           ; 1 bytes @ 0x0
  2166                           
  2167  0020                     ___lmul@multiplier:	
  2168                           ; 2 bytes @ 0x0
  2169                           
  2170                           
  2171                           ; 4 bytes @ 0x0
  2172  0020                     	ds	1
  2173  0021                     ??_SYSTEM_Initialize:	
  2174  0021                     CW_Delay100us@a:	
  2175                           ; 1 bytes @ 0x1
  2176                           
  2177  0021                     Delay10us@a:	
  2178                           ; 1 bytes @ 0x1
  2179                           
  2180                           
  2181                           ; 1 bytes @ 0x1
  2182  0021                     	ds	1
  2183  0022                     ??_CW_Delay10ms:	
  2184  0022                     CW_Delay100us@b:	
  2185                           ; 1 bytes @ 0x2
  2186                           
  2187  0022                     Delay10us@b:	
  2188                           ; 1 bytes @ 0x2
  2189                           
  2190                           
  2191                           ; 1 bytes @ 0x2
  2192  0022                     	ds	1
  2193  0023                     CW_Delay10ms@a:	
  2194  0023                     CW_Delay100us@i:	
  2195                           ; 1 bytes @ 0x3
  2196                           
  2197  0023                     Delay10us@i:	
  2198                           ; 1 bytes @ 0x3
  2199                           
  2200                           
  2201                           ; 1 bytes @ 0x3
  2202  0023                     	ds	1
  2203  0024                     ??_start:	
  2204  0024                     ??_stop:	
  2205                           ; 1 bytes @ 0x4
  2206                           
  2207  0024                     ??_s_ack:	
  2208                           ; 1 bytes @ 0x4
  2209                           
  2210  0024                     ??_sn_ack:	
  2211                           ; 1 bytes @ 0x4
  2212                           
  2213  0024                     ??_write_byte:	
  2214                           ; 1 bytes @ 0x4
  2215                           
  2216  0024                     ??_read_byte:	
  2217                           ; 1 bytes @ 0x4
  2218                           
  2219  0024                     ?_r_ack:	
  2220                           ; 1 bytes @ 0x4
  2221                           
  2222  0024                     CW_Delay10ms@b:	
  2223                           ; 2 bytes @ 0x4
  2224                           
  2225  0024                     ___lmul@multiplicand:	
  2226                           ; 1 bytes @ 0x4
  2227                           
  2228                           
  2229                           ; 4 bytes @ 0x4
  2230  0024                     	ds	1
  2231  0025                     write_byte@w_data:	
  2232  0025                     read_byte@i:	
  2233                           ; 1 bytes @ 0x5
  2234                           
  2235                           
  2236                           ; 1 bytes @ 0x5
  2237  0025                     	ds	1
  2238  0026                     ??_r_ack:	
  2239  0026                     write_byte@i:	
  2240                           ; 1 bytes @ 0x6
  2241                           
  2242  0026                     read_byte@r_data:	
  2243                           ; 1 bytes @ 0x6
  2244                           
  2245                           
  2246                           ; 1 bytes @ 0x6
  2247  0026                     	ds	2
  2248  0028                     ??___lmul:	
  2249  0028                     r_ack@ack:	
  2250                           ; 1 bytes @ 0x8
  2251                           
  2252  0028                     ___lmul@product:	
  2253                           ; 2 bytes @ 0x8
  2254                           
  2255                           
  2256                           ; 4 bytes @ 0x8
  2257  0028                     	ds	2
  2258  002A                     ?_wait_r_ack:	
  2259                           
  2260                           ; 2 bytes @ 0xA
  2261  002A                     	ds	2
  2262  002C                     ??_wait_r_ack:	
  2263  002C                     ?___lldiv:	
  2264                           ; 1 bytes @ 0xC
  2265                           
  2266  002C                     wait_r_ack@ack:	
  2267                           ; 4 bytes @ 0xC
  2268                           
  2269  002C                     ___lldiv@divisor:	
  2270                           ; 2 bytes @ 0xC
  2271                           
  2272                           
  2273                           ; 4 bytes @ 0xC
  2274  002C                     	ds	2
  2275  002E                     wait_r_ack@i:	
  2276                           
  2277                           ; 2 bytes @ 0xE
  2278  002E                     	ds	2
  2279  0030                     ?_cw_read:	
  2280  0030                     ?_cw_write:	
  2281                           ; 2 bytes @ 0x10
  2282                           
  2283  0030                     ?_cw_read_word:	
  2284                           ; 2 bytes @ 0x10
  2285                           
  2286  0030                     cw_read@r_pdata:	
  2287                           ; 2 bytes @ 0x10
  2288                           
  2289  0030                     cw_read_word@r_pdata:	
  2290                           ; 1 bytes @ 0x10
  2291                           
  2292  0030                     cw_write@w_pdata:	
  2293                           ; 1 bytes @ 0x10
  2294                           
  2295  0030                     ___lldiv@dividend:	
  2296                           ; 1 bytes @ 0x10
  2297                           
  2298                           
  2299                           ; 4 bytes @ 0x10
  2300  0030                     	ds	1
  2301  0031                     cw_read_word@length:	
  2302                           
  2303                           ; 2 bytes @ 0x11
  2304  0031                     	ds	1
  2305  0032                     ??_cw_read:	
  2306                           
  2307                           ; 1 bytes @ 0x12
  2308  0032                     	ds	1
  2309  0033                     ??_cw_write:	
  2310  0033                     ??_cw_read_word:	
  2311                           ; 1 bytes @ 0x13
  2312                           
  2313  0033                     cw_read@point_reg:	
  2314                           ; 1 bytes @ 0x13
  2315                           
  2316  0033                     cw_write@point_reg:	
  2317                           ; 1 bytes @ 0x13
  2318                           
  2319                           
  2320                           ; 1 bytes @ 0x13
  2321  0033                     	ds	1
  2322  0034                     ??_cw_update_config_info:	
  2323  0034                     ??___lldiv:	
  2324                           ; 1 bytes @ 0x14
  2325                           
  2326                           
  2327                           ; 1 bytes @ 0x14
  2328  0034                     	ds	1
  2329  0035                     cw_update_config_info@reset_val:	
  2330  0035                     cw_read_word@point_reg:	
  2331                           ; 1 bytes @ 0x15
  2332                           
  2333  0035                     ___lldiv@quotient:	
  2334                           ; 1 bytes @ 0x15
  2335                           
  2336                           
  2337                           ; 4 bytes @ 0x15
  2338  0035                     	ds	1
  2339  0036                     cw_read_word@count:	
  2340  0036                     cw_update_config_info@ret:	
  2341                           ; 1 bytes @ 0x16
  2342                           
  2343                           
  2344                           ; 2 bytes @ 0x16
  2345  0036                     	ds	2
  2346  0038                     cw_update_config_info@i:	
  2347                           
  2348                           ; 1 bytes @ 0x18
  2349  0038                     	ds	1
  2350  0039                     cw_update_config_info@reg_val:	
  2351  0039                     ___lldiv@counter:	
  2352                           ; 1 bytes @ 0x19
  2353                           
  2354                           
  2355                           ; 1 bytes @ 0x19
  2356  0039                     	ds	1
  2357  003A                     ??_cw_init:	
  2358  003A                     ?_cw_get_vol:	
  2359                           ; 1 bytes @ 0x1A
  2360                           
  2361                           
  2362                           ; 2 bytes @ 0x1A
  2363  003A                     	ds	2
  2364  003C                     ??_cw_get_vol:	
  2365  003C                     cw_init@i:	
  2366                           ; 1 bytes @ 0x1C
  2367                           
  2368                           
  2369                           ; 1 bytes @ 0x1C
  2370  003C                     	ds	1
  2371  003D                     cw_init@ret:	
  2372                           
  2373                           ; 2 bytes @ 0x1D
  2374  003D                     	ds	2
  2375  003F                     cw_init@reg_val:	
  2376                           
  2377                           ; 1 bytes @ 0x1F
  2378  003F                     	ds	1
  2379  0040                     ??_cw_bat_init:	
  2380  0040                     ?_cw_por:	
  2381                           ; 1 bytes @ 0x20
  2382                           
  2383                           
  2384                           ; 2 bytes @ 0x20
  2385  0040                     	ds	1
  2386  0041                     cw_bat_init@loop:	
  2387  0041                     cw_get_vol@ret:	
  2388                           ; 1 bytes @ 0x21
  2389                           
  2390                           
  2391                           ; 2 bytes @ 0x21
  2392  0041                     	ds	1
  2393  0042                     ??_cw_por:	
  2394  0042                     cw_bat_init@ret:	
  2395                           ; 1 bytes @ 0x22
  2396                           
  2397                           
  2398                           ; 1 bytes @ 0x22
  2399  0042                     	ds	1
  2400  0043                     cw_get_vol@reg_val:	
  2401                           
  2402                           ; 2 bytes @ 0x23
  2403  0043                     	ds	1
  2404  0044                     cw_por@reset_val:	
  2405                           
  2406                           ; 1 bytes @ 0x24
  2407  0044                     	ds	1
  2408  0045                     cw_por@ret:	
  2409  0045                     cw_get_vol@ad_value_min:	
  2410                           ; 2 bytes @ 0x25
  2411                           
  2412                           
  2413                           ; 2 bytes @ 0x25
  2414  0045                     	ds	2
  2415  0047                     ?_cw_get_capacity:	
  2416  0047                     cw_get_vol@ad_value_max:	
  2417                           ; 2 bytes @ 0x27
  2418                           
  2419                           
  2420                           ; 2 bytes @ 0x27
  2421  0047                     	ds	2
  2422  0049                     ??_cw_get_capacity:	
  2423  0049                     cw_get_vol@ad_value:	
  2424                           ; 1 bytes @ 0x29
  2425                           
  2426                           
  2427                           ; 4 bytes @ 0x29
  2428  0049                     	ds	2
  2429  004B                     cw_get_capacity@cw_capacity:	
  2430                           
  2431                           ; 1 bytes @ 0x2B
  2432  004B                     	ds	1
  2433  004C                     cw_get_capacity@ret:	
  2434                           
  2435                           ; 2 bytes @ 0x2C
  2436  004C                     	ds	1
  2437  004D                     cw_get_vol@get_ad_times:	
  2438                           
  2439                           ; 1 bytes @ 0x2D
  2440  004D                     	ds	1
  2441  004E                     cw_get_capacity@reg_val:	
  2442  004E                     cw_get_vol@ad_buff:	
  2443                           ; 1 bytes @ 0x2E
  2444                           
  2445                           
  2446                           ; 2 bytes @ 0x2E
  2447  004E                     	ds	1
  2448  004F                     ??_update_capacity:	
  2449                           
  2450                           ; 1 bytes @ 0x2F
  2451  004F                     	ds	1
  2452  0050                     ??_update_vol:	
  2453  0050                     update_capacity@cw_capacity:	
  2454                           ; 1 bytes @ 0x30
  2455                           
  2456  0050                     update_vol@cw_voltage:	
  2457                           ; 2 bytes @ 0x30
  2458                           
  2459                           
  2460                           ; 2 bytes @ 0x30
  2461  0050                     	ds	2
  2462  0052                     ??_cw_bat_work:	
  2463  0052                     ??_main:	
  2464                           ; 1 bytes @ 0x32
  2465                           
  2466                           
  2467                           ; 1 bytes @ 0x32
  2468  0052                     	ds	1
  2469  0053                     main@ret:	
  2470                           
  2471                           ; 1 bytes @ 0x33
  2472  0053                     	ds	1
  2473                           
  2474                           	psect	maintext
  2475  03D1                     __pmaintext:	
  2476 ;;
  2477 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2478 ;;
  2479 ;; *************** function _main *****************
  2480 ;; Defined at:
  2481 ;;		line 54 in file "main.c"
  2482 ;; Parameters:    Size  Location     Type
  2483 ;;		None
  2484 ;; Auto vars:     Size  Location     Type
  2485 ;;  ret             1   51[BANK0 ] unsigned char 
  2486 ;;  send_char       1    0        unsigned char 
  2487 ;; Return value:  Size  Location     Type
  2488 ;;                  1    wreg      void 
  2489 ;; Registers used:
  2490 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2491 ;; Tracked objects:
  2492 ;;		On entry : B3F/0
  2493 ;;		On exit  : 0/0
  2494 ;;		Unchanged: 0/0
  2495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2496 ;;      Params:         0       0       0       0
  2497 ;;      Locals:         0       1       0       0
  2498 ;;      Temps:          0       1       0       0
  2499 ;;      Totals:         0       2       0       0
  2500 ;;Total ram usage:        2 bytes
  2501 ;; Hardware stack levels required when called:   13
  2502 ;; This function calls:
  2503 ;;		_CW_Delay10ms
  2504 ;;		_SYSTEM_Initialize
  2505 ;;		_cw_bat_init
  2506 ;;		_cw_bat_work
  2507 ;; This function is called by:
  2508 ;;		Startup code after reset
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           
  2513                           ;psect for function _main
  2514  03D1                     _main:	
  2515                           
  2516                           ;main.c: 57: unsigned char ret = 0;
  2517                           
  2518                           ;incstack = 0
  2519                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2520  03D1  0140               	movlb	0	; select bank0
  2521  03D2  01D3               	clrf	main@ret
  2522                           
  2523                           ;main.c: 58: uint8_t send_char;
  2524                           ;main.c: 59: SYSTEM_Initialize();
  2525  03D3  2772               	fcall	_SYSTEM_Initialize
  2526                           
  2527                           ;main.c: 60: do { LATCbits.LATC2 = 1; } while(0);
  2528  03D4  0140               	movlb	0	; select bank0
  2529  03D5  151A               	bsf	26,2	;volatile
  2530                           
  2531                           ;main.c: 61: do { LATAbits.LATA2 = 1; } while(0);
  2532  03D6  1518               	bsf	24,2	;volatile
  2533                           
  2534                           ;main.c: 62: do { LATAbits.LATA5 = 1; } while(0);
  2535  03D7  1698               	bsf	24,5	;volatile
  2536                           
  2537                           ;main.c: 63: do { LATAbits.LATA4 = 1; } while(0);
  2538  03D8  1618               	bsf	24,4	;volatile
  2539                           
  2540                           ;main.c: 64: ret = cw_bat_init();
  2541  03D9  26C2               	fcall	_cw_bat_init
  2542  03DA  0140               	movlb	0	; select bank0
  2543  03DB  00D2               	movwf	??_main
  2544  03DC  0852               	movf	??_main,w
  2545  03DD  00D3               	movwf	main@ret
  2546                           
  2547                           ;main.c: 69: (INTCONbits.GIE = 1);
  2548  03DE  178B               	bsf	11,7	;volatile
  2549                           
  2550                           ;main.c: 72: (INTCONbits.PEIE = 1);
  2551  03DF  170B               	bsf	11,6	;volatile
  2552  03E0                     l2538:	
  2553                           ;main.c: 80: while (1)
  2554                           
  2555                           
  2556                           ;main.c: 81: {
  2557                           ;main.c: 89: cw_bat_work();
  2558  03E0  276E               	fcall	_cw_bat_work
  2559                           
  2560                           ;main.c: 90: if(cw_bat.capacity >= 80)
  2561  03E1  3000               	movlw	0
  2562  03E2  0140               	movlb	0	; select bank0
  2563  03E3  0265               	subwf	_cw_bat+2,w
  2564  03E4  3050               	movlw	80
  2565  03E5  1903               	skipnz
  2566  03E6  0264               	subwf	_cw_bat+1,w
  2567  03E7  1C03               	skipc
  2568  03E8  2BEB               	goto	l2542
  2569                           
  2570                           ;main.c: 91: {
  2571                           ;main.c: 92: do { LATCbits.LATC2 = 0; } while(0);
  2572  03E9  111A               	bcf	26,2	;volatile
  2573  03EA  2BF3               	goto	L1
  2574  03EB                     l2542:	
  2575                           ;main.c: 96: }
  2576                           
  2577                           ;main.c: 95: do { LATAbits.LATA4 = 0; } while(0);
  2578                           
  2579                           ;main.c: 94: do { LATAbits.LATA5 = 0; } while(0);
  2580                           
  2581                           ;main.c: 93: do { LATAbits.LATA2 = 0; } while(0);
  2582                           
  2583                           
  2584                           ;main.c: 97: else if(cw_bat.capacity >= 60)
  2585  03EB  3000               	movlw	0
  2586  03EC  0265               	subwf	_cw_bat+2,w
  2587  03ED  303C               	movlw	60
  2588  03EE  1903               	skipnz
  2589  03EF  0264               	subwf	_cw_bat+1,w
  2590  03F0  1C03               	skipc
  2591  03F1  2BF5               	goto	l2544
  2592                           
  2593                           ;main.c: 98: {
  2594                           ;main.c: 99: do { LATCbits.LATC2 = 1; } while(0);
  2595  03F2  151A               	bsf	26,2	;volatile
  2596  03F3                     L1:	
  2597                           
  2598                           ;main.c: 100: do { LATAbits.LATA2 = 0; } while(0);
  2599  03F3  1118               	bcf	24,2	;volatile
  2600  03F4  2BFE               	goto	L2
  2601  03F5                     l2544:	
  2602                           ;main.c: 103: }
  2603                           
  2604                           ;main.c: 102: do { LATAbits.LATA4 = 0; } while(0);
  2605                           
  2606                           ;main.c: 101: do { LATAbits.LATA5 = 0; } while(0);
  2607                           
  2608                           
  2609                           ;main.c: 104: else if(cw_bat.capacity >= 40)
  2610  03F5  3000               	movlw	0
  2611  03F6  0265               	subwf	_cw_bat+2,w
  2612  03F7  3028               	movlw	40
  2613  03F8  1903               	skipnz
  2614  03F9  0264               	subwf	_cw_bat+1,w
  2615  03FA  1C03               	skipc
  2616  03FB  2C00               	goto	l2546
  2617                           
  2618                           ;main.c: 105: {
  2619                           ;main.c: 106: do { LATCbits.LATC2 = 1; } while(0);
  2620  03FC  151A               	bsf	26,2	;volatile
  2621                           
  2622                           ;main.c: 107: do { LATAbits.LATA2 = 1; } while(0);
  2623  03FD  1518               	bsf	24,2	;volatile
  2624  03FE                     L2:	
  2625                           
  2626                           ;main.c: 108: do { LATAbits.LATA5 = 0; } while(0);
  2627  03FE  1298               	bcf	24,5	;volatile
  2628                           
  2629                           ;main.c: 109: do { LATAbits.LATA4 = 0; } while(0);
  2630  03FF  2C0A               	goto	l205
  2631  0400                     l2546:	
  2632                           ;main.c: 110: }
  2633                           
  2634                           
  2635                           ;main.c: 111: else if(cw_bat.capacity >= 20)
  2636  0400  3000               	movlw	0
  2637  0401  0265               	subwf	_cw_bat+2,w
  2638  0402  3014               	movlw	20
  2639  0403  1903               	skipnz
  2640  0404  0264               	subwf	_cw_bat+1,w
  2641  0405  1C03               	skipc
  2642  0406  2C0C               	goto	l208
  2643                           
  2644                           ;main.c: 112: {
  2645                           ;main.c: 113: do { LATCbits.LATC2 = 1; } while(0);
  2646  0407  151A               	bsf	26,2	;volatile
  2647                           
  2648                           ;main.c: 114: do { LATAbits.LATA2 = 1; } while(0);
  2649  0408  1518               	bsf	24,2	;volatile
  2650                           
  2651                           ;main.c: 115: do { LATAbits.LATA5 = 1; } while(0);
  2652  0409  1698               	bsf	24,5	;volatile
  2653  040A                     l205:	
  2654                           ;main.c: 116: do { LATAbits.LATA4 = 0; } while(0);
  2655                           
  2656  040A  1218               	bcf	24,4	;volatile
  2657                           
  2658                           ;main.c: 117: }
  2659  040B  2C10               	goto	l2548
  2660  040C                     l208:	
  2661                           ;main.c: 118: else
  2662                           ;main.c: 119: {
  2663                           ;main.c: 120: do { LATCbits.LATC2 = 1; } while(0);
  2664                           
  2665  040C  151A               	bsf	26,2	;volatile
  2666                           
  2667                           ;main.c: 121: do { LATAbits.LATA2 = 1; } while(0);
  2668  040D  1518               	bsf	24,2	;volatile
  2669                           
  2670                           ;main.c: 122: do { LATAbits.LATA5 = 1; } while(0);
  2671  040E  1698               	bsf	24,5	;volatile
  2672                           
  2673                           ;main.c: 123: do { LATAbits.LATA4 = 1; } while(0);
  2674  040F  1618               	bsf	24,4	;volatile
  2675  0410                     l2548:	
  2676                           
  2677                           ;main.c: 124: }
  2678                           ;main.c: 125: CW_Delay10ms(100);
  2679  0410  3064               	movlw	100
  2680  0411  00A0               	movwf	CW_Delay10ms@c
  2681  0412  3000               	movlw	0
  2682  0413  00A1               	movwf	CW_Delay10ms@c+1
  2683  0414  25FC               	fcall	_CW_Delay10ms
  2684  0415  2BE0               	goto	l2538
  2685  0416                     __end_of_main:	
  2686                           
  2687                           	psect	text1
  2688  076E                     __ptext1:	
  2689 ;; *************** function _cw_bat_work *****************
  2690 ;; Defined at:
  2691 ;;		line 555 in file "CW201x.c"
  2692 ;; Parameters:    Size  Location     Type
  2693 ;;		None
  2694 ;; Auto vars:     Size  Location     Type
  2695 ;;		None
  2696 ;; Return value:  Size  Location     Type
  2697 ;;                  1    wreg      void 
  2698 ;; Registers used:
  2699 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2700 ;; Tracked objects:
  2701 ;;		On entry : 0/0
  2702 ;;		On exit  : 0/0
  2703 ;;		Unchanged: 0/0
  2704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2705 ;;      Params:         0       0       0       0
  2706 ;;      Locals:         0       0       0       0
  2707 ;;      Temps:          0       0       0       0
  2708 ;;      Totals:         0       0       0       0
  2709 ;;Total ram usage:        0 bytes
  2710 ;; Hardware stack levels used:    1
  2711 ;; Hardware stack levels required when called:   12
  2712 ;; This function calls:
  2713 ;;		_update_capacity
  2714 ;;		_update_usb_online
  2715 ;;		_update_vol
  2716 ;; This function is called by:
  2717 ;;		_main
  2718 ;; This function uses a non-reentrant model
  2719 ;;
  2720                           
  2721                           
  2722                           ;psect for function _cw_bat_work
  2723  076E                     _cw_bat_work:	
  2724                           
  2725                           ;CW201x.c: 557: update_usb_online();
  2726                           
  2727                           ;incstack = 0
  2728                           ; Regs used in _cw_bat_work: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2729  076E  2756               	fcall	_update_usb_online
  2730                           
  2731                           ;CW201x.c: 558: update_capacity();
  2732  076F  261E               	fcall	_update_capacity
  2733                           
  2734                           ;CW201x.c: 559: update_vol();
  2735  0770  26DD               	fcall	_update_vol
  2736  0771  0008               	return
  2737  0772                     __end_of_cw_bat_work:	
  2738                           
  2739                           	psect	text2
  2740  06DD                     __ptext2:	
  2741 ;; *************** function _update_vol *****************
  2742 ;; Defined at:
  2743 ;;		line 508 in file "CW201x.c"
  2744 ;; Parameters:    Size  Location     Type
  2745 ;;		None
  2746 ;; Auto vars:     Size  Location     Type
  2747 ;;  cw_voltage      2   48[BANK0 ] unsigned int 
  2748 ;; Return value:  Size  Location     Type
  2749 ;;                  1    wreg      void 
  2750 ;; Registers used:
  2751 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2752 ;; Tracked objects:
  2753 ;;		On entry : 0/0
  2754 ;;		On exit  : 0/0
  2755 ;;		Unchanged: 0/0
  2756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2757 ;;      Params:         0       0       0       0
  2758 ;;      Locals:         0       2       0       0
  2759 ;;      Temps:          0       0       0       0
  2760 ;;      Totals:         0       2       0       0
  2761 ;;Total ram usage:        2 bytes
  2762 ;; Hardware stack levels used:    1
  2763 ;; Hardware stack levels required when called:    8
  2764 ;; This function calls:
  2765 ;;		_cw_get_vol
  2766 ;; This function is called by:
  2767 ;;		_cw_bat_work
  2768 ;; This function uses a non-reentrant model
  2769 ;;
  2770                           
  2771                           
  2772                           ;psect for function _update_vol
  2773  06DD                     _update_vol:	
  2774                           
  2775                           ;CW201x.c: 510: unsigned int cw_voltage;
  2776                           ;CW201x.c: 511: cw_voltage = cw_get_vol();
  2777                           
  2778                           ;incstack = 0
  2779                           ; Regs used in _update_vol: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2780  06DD  21C0               	fcall	_cw_get_vol
  2781  06DE  0140               	movlb	0	; select bank0
  2782  06DF  083B               	movf	?_cw_get_vol+1,w
  2783  06E0  00D1               	movwf	update_vol@cw_voltage+1
  2784  06E1  083A               	movf	?_cw_get_vol,w
  2785  06E2  00D0               	movwf	update_vol@cw_voltage
  2786                           
  2787                           ;CW201x.c: 512: if(cw_voltage == 1){
  2788  06E3  0350               	decf	update_vol@cw_voltage,w
  2789  06E4  0451               	iorwf	update_vol@cw_voltage+1,w
  2790  06E5  1903               	btfsc	3,2
  2791  06E6  0008               	return
  2792                           
  2793                           ;CW201x.c: 515: }else if(cw_bat.voltage != cw_voltage)
  2794  06E7  0851               	movf	update_vol@cw_voltage+1,w
  2795  06E8  0667               	xorwf	_cw_bat+4,w
  2796  06E9  1D03               	skipz
  2797  06EA  2EED               	goto	u2325
  2798  06EB  0850               	movf	update_vol@cw_voltage,w
  2799  06EC  0666               	xorwf	_cw_bat+3,w
  2800  06ED                     u2325:	
  2801  06ED  1903               	skipnz
  2802  06EE  0008               	return
  2803                           
  2804                           ;CW201x.c: 516: {
  2805                           ;CW201x.c: 517: cw_bat.voltage = cw_voltage;
  2806  06EF  0851               	movf	update_vol@cw_voltage+1,w
  2807  06F0  00E7               	movwf	_cw_bat+4
  2808  06F1  0850               	movf	update_vol@cw_voltage,w
  2809  06F2  00E6               	movwf	_cw_bat+3
  2810  06F3  0008               	return
  2811  06F4                     __end_of_update_vol:	
  2812                           
  2813                           	psect	text3
  2814  01C0                     __ptext3:	
  2815 ;; *************** function _cw_get_vol *****************
  2816 ;; Defined at:
  2817 ;;		line 434 in file "CW201x.c"
  2818 ;; Parameters:    Size  Location     Type
  2819 ;;		None
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;  ad_value        4   41[BANK0 ] unsigned long 
  2822 ;;  ad_buff         2   46[BANK0 ] unsigned int 
  2823 ;;  reg_val         2   35[BANK0 ] unsigned char [2]
  2824 ;;  ad_value_max    2   39[BANK0 ] unsigned int 
  2825 ;;  ad_value_min    2   37[BANK0 ] unsigned int 
  2826 ;;  ret             2   33[BANK0 ] int 
  2827 ;;  get_ad_times    1   45[BANK0 ] unsigned char 
  2828 ;; Return value:  Size  Location     Type
  2829 ;;                  2   26[BANK0 ] unsigned int 
  2830 ;; Registers used:
  2831 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2832 ;; Tracked objects:
  2833 ;;		On entry : 0/0
  2834 ;;		On exit  : 0/0
  2835 ;;		Unchanged: 0/0
  2836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2837 ;;      Params:         0       2       0       0
  2838 ;;      Locals:         0      15       0       0
  2839 ;;      Temps:          0       5       0       0
  2840 ;;      Totals:         0      22       0       0
  2841 ;;Total ram usage:       22 bytes
  2842 ;; Hardware stack levels used:    1
  2843 ;; Hardware stack levels required when called:    7
  2844 ;; This function calls:
  2845 ;;		___lldiv
  2846 ;;		___lmul
  2847 ;;		_cw_read_word
  2848 ;; This function is called by:
  2849 ;;		_update_vol
  2850 ;; This function uses a non-reentrant model
  2851 ;;
  2852                           
  2853                           
  2854                           ;psect for function _cw_get_vol
  2855  01C0                     _cw_get_vol:	
  2856                           
  2857                           ;CW201x.c: 436: int ret = 0;
  2858                           
  2859                           ;incstack = 0
  2860                           ; Regs used in _cw_get_vol: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2861  01C0  0140               	movlb	0	; select bank0
  2862  01C1  01C1               	clrf	cw_get_vol@ret
  2863  01C2  01C2               	clrf	cw_get_vol@ret+1
  2864                           
  2865                           ;CW201x.c: 437: unsigned char get_ad_times = 0;
  2866  01C3  01CD               	clrf	cw_get_vol@get_ad_times
  2867                           
  2868                           ;CW201x.c: 438: unsigned char reg_val[2] = {0 , 0};
  2869  01C4  086A               	movf	cw_get_vol@F80+1,w
  2870  01C5  00C4               	movwf	cw_get_vol@reg_val+1
  2871  01C6  0869               	movf	cw_get_vol@F80,w
  2872  01C7  00C3               	movwf	cw_get_vol@reg_val
  2873                           
  2874                           ;CW201x.c: 439: unsigned long ad_value = 0;
  2875  01C8  3000               	movlw	0
  2876  01C9  00CC               	movwf	cw_get_vol@ad_value+3
  2877  01CA  3000               	movlw	0
  2878  01CB  00CB               	movwf	cw_get_vol@ad_value+2
  2879  01CC  3000               	movlw	0
  2880  01CD  00CA               	movwf	cw_get_vol@ad_value+1
  2881  01CE  3000               	movlw	0
  2882  01CF  00C9               	movwf	cw_get_vol@ad_value
  2883                           
  2884                           ;CW201x.c: 440: unsigned int ad_buff = 0;
  2885  01D0  01CE               	clrf	cw_get_vol@ad_buff
  2886  01D1  01CF               	clrf	cw_get_vol@ad_buff+1
  2887                           
  2888                           ;CW201x.c: 441: unsigned int ad_value_min = 0;
  2889  01D2  01C5               	clrf	cw_get_vol@ad_value_min
  2890  01D3  01C6               	clrf	cw_get_vol@ad_value_min+1
  2891                           
  2892                           ;CW201x.c: 442: unsigned int ad_value_max = 0;
  2893  01D4  01C7               	clrf	cw_get_vol@ad_value_max
  2894  01D5  01C8               	clrf	cw_get_vol@ad_value_max+1
  2895                           
  2896                           ;CW201x.c: 444: for(get_ad_times = 0; get_ad_times < 3; get_ad_times++)
  2897  01D6  01CD               	clrf	cw_get_vol@get_ad_times
  2898  01D7  3003               	movlw	3
  2899  01D8  024D               	subwf	cw_get_vol@get_ad_times,w
  2900  01D9  1803               	btfsc	3,0
  2901  01DA  2A34               	goto	l2344
  2902  01DB                     l2324:	
  2903                           
  2904                           ;CW201x.c: 445: {
  2905                           ;CW201x.c: 446: ret = cw_read_word(0x2, &reg_val[0],2);
  2906  01DB  3043               	movlw	(low (cw_get_vol@reg_val| 0))& (0+255)
  2907  01DC  00BC               	movwf	??_cw_get_vol
  2908  01DD  083C               	movf	??_cw_get_vol,w
  2909  01DE  00B0               	movwf	cw_read_word@r_pdata
  2910  01DF  3002               	movlw	2
  2911  01E0  00B1               	movwf	cw_read_word@length
  2912  01E1  3000               	movlw	0
  2913  01E2  00B2               	movwf	cw_read_word@length+1
  2914  01E3  3002               	movlw	2
  2915  01E4  2281               	fcall	_cw_read_word
  2916  01E5  0140               	movlb	0	; select bank0
  2917  01E6  0831               	movf	?_cw_read_word+1,w
  2918  01E7  00C2               	movwf	cw_get_vol@ret+1
  2919  01E8  0830               	movf	?_cw_read_word,w
  2920  01E9  00C1               	movwf	cw_get_vol@ret
  2921                           
  2922                           ;CW201x.c: 447: if(ret)
  2923  01EA  0841               	movf	cw_get_vol@ret,w
  2924  01EB  0442               	iorwf	cw_get_vol@ret+1,w
  2925  01EC  1903               	btfsc	3,2
  2926  01ED  29F3               	goto	l2332
  2927                           
  2928                           ;CW201x.c: 448: {
  2929                           ;CW201x.c: 449: return 1;
  2930  01EE  3001               	movlw	1
  2931  01EF  00BA               	movwf	?_cw_get_vol
  2932  01F0  3000               	movlw	0
  2933  01F1  00BB               	movwf	?_cw_get_vol+1
  2934  01F2  0008               	return
  2935  01F3                     l2332:	
  2936                           
  2937                           ;CW201x.c: 450: }
  2938                           ;CW201x.c: 451: ad_buff = (reg_val[0] << 8) + reg_val[1];
  2939  01F3  0844               	movf	cw_get_vol@reg_val+1,w
  2940  01F4  00BC               	movwf	??_cw_get_vol
  2941  01F5  01BD               	clrf	??_cw_get_vol+1
  2942  01F6  0843               	movf	cw_get_vol@reg_val,w
  2943  01F7  00BE               	movwf	??_cw_get_vol+2
  2944  01F8  01BF               	clrf	??_cw_get_vol+3
  2945  01F9  083E               	movf	??_cw_get_vol+2,w
  2946  01FA  00BF               	movwf	??_cw_get_vol+3
  2947  01FB  01BE               	clrf	??_cw_get_vol+2
  2948  01FC  083C               	movf	??_cw_get_vol,w
  2949  01FD  073E               	addwf	??_cw_get_vol+2,w
  2950  01FE  00CE               	movwf	cw_get_vol@ad_buff
  2951  01FF  083D               	movf	??_cw_get_vol+1,w
  2952  0200  3D3F               	addwfc	??_cw_get_vol+3,w
  2953  0201  00CF               	movwf	cw_get_vol@ad_buff+1
  2954                           
  2955                           ;CW201x.c: 453: if(get_ad_times == 0)
  2956  0202  084D               	movf	cw_get_vol@get_ad_times,w
  2957  0203  1D03               	btfss	3,2
  2958  0204  2A0D               	goto	l314
  2959                           
  2960                           ;CW201x.c: 454: {
  2961                           ;CW201x.c: 455: ad_value_min = ad_buff;
  2962  0205  084F               	movf	cw_get_vol@ad_buff+1,w
  2963  0206  00C6               	movwf	cw_get_vol@ad_value_min+1
  2964  0207  084E               	movf	cw_get_vol@ad_buff,w
  2965  0208  00C5               	movwf	cw_get_vol@ad_value_min
  2966                           
  2967                           ;CW201x.c: 456: ad_value_max = ad_buff;
  2968  0209  084F               	movf	cw_get_vol@ad_buff+1,w
  2969  020A  00C8               	movwf	cw_get_vol@ad_value_max+1
  2970  020B  084E               	movf	cw_get_vol@ad_buff,w
  2971  020C  00C7               	movwf	cw_get_vol@ad_value_max
  2972  020D                     l314:	
  2973                           
  2974                           ;CW201x.c: 457: }
  2975                           ;CW201x.c: 458: if(ad_buff < ad_value_min)
  2976  020D  0846               	movf	cw_get_vol@ad_value_min+1,w
  2977  020E  024F               	subwf	cw_get_vol@ad_buff+1,w
  2978  020F  1D03               	skipz
  2979  0210  2A13               	goto	u2215
  2980  0211  0845               	movf	cw_get_vol@ad_value_min,w
  2981  0212  024E               	subwf	cw_get_vol@ad_buff,w
  2982  0213                     u2215:	
  2983  0213  1803               	skipnc
  2984  0214  2A19               	goto	l315
  2985                           
  2986                           ;CW201x.c: 459: {
  2987                           ;CW201x.c: 460: ad_value_min = ad_buff;
  2988  0215  084F               	movf	cw_get_vol@ad_buff+1,w
  2989  0216  00C6               	movwf	cw_get_vol@ad_value_min+1
  2990  0217  084E               	movf	cw_get_vol@ad_buff,w
  2991  0218  00C5               	movwf	cw_get_vol@ad_value_min
  2992  0219                     l315:	
  2993                           
  2994                           ;CW201x.c: 461: }
  2995                           ;CW201x.c: 462: if(ad_buff > ad_value_max)
  2996  0219  084F               	movf	cw_get_vol@ad_buff+1,w
  2997  021A  0248               	subwf	cw_get_vol@ad_value_max+1,w
  2998  021B  1D03               	skipz
  2999  021C  2A1F               	goto	u2225
  3000  021D  084E               	movf	cw_get_vol@ad_buff,w
  3001  021E  0247               	subwf	cw_get_vol@ad_value_max,w
  3002  021F                     u2225:	
  3003  021F  1803               	skipnc
  3004  0220  2A25               	goto	l316
  3005                           
  3006                           ;CW201x.c: 463: {
  3007                           ;CW201x.c: 464: ad_value_max = ad_buff;
  3008  0221  084F               	movf	cw_get_vol@ad_buff+1,w
  3009  0222  00C8               	movwf	cw_get_vol@ad_value_max+1
  3010  0223  084E               	movf	cw_get_vol@ad_buff,w
  3011  0224  00C7               	movwf	cw_get_vol@ad_value_max
  3012  0225                     l316:	
  3013                           
  3014                           ;CW201x.c: 465: }
  3015                           ;CW201x.c: 466: ad_value += ad_buff;
  3016  0225  084E               	movf	cw_get_vol@ad_buff,w
  3017  0226  07C9               	addwf	cw_get_vol@ad_value,f
  3018  0227  084F               	movf	cw_get_vol@ad_buff+1,w
  3019  0228  3DCA               	addwfc	cw_get_vol@ad_value+1,f
  3020  0229  3000               	movlw	0
  3021  022A  3DCB               	addwfc	cw_get_vol@ad_value+2,f
  3022  022B  3DCC               	addwfc	cw_get_vol@ad_value+3,f
  3023  022C  3001               	movlw	1
  3024  022D  00BC               	movwf	??_cw_get_vol
  3025  022E  083C               	movf	??_cw_get_vol,w
  3026  022F  07CD               	addwf	cw_get_vol@get_ad_times,f
  3027  0230  3003               	movlw	3
  3028  0231  024D               	subwf	cw_get_vol@get_ad_times,w
  3029  0232  1C03               	skipc
  3030  0233  29DB               	goto	l2324
  3031  0234                     l2344:	
  3032                           
  3033                           ;CW201x.c: 467: }
  3034                           ;CW201x.c: 468: ad_value -= ad_value_min;
  3035  0234  0845               	movf	cw_get_vol@ad_value_min,w
  3036  0235  00BC               	movwf	??_cw_get_vol
  3037  0236  0846               	movf	cw_get_vol@ad_value_min+1,w
  3038  0237  00BD               	movwf	??_cw_get_vol+1
  3039  0238  01BE               	clrf	??_cw_get_vol+2
  3040  0239  01BF               	clrf	??_cw_get_vol+3
  3041  023A  083C               	movf	??_cw_get_vol,w
  3042  023B  02C9               	subwf	cw_get_vol@ad_value,f
  3043  023C  083D               	movf	??_cw_get_vol+1,w
  3044  023D  3BCA               	subwfb	cw_get_vol@ad_value+1,f
  3045  023E  083E               	movf	??_cw_get_vol+2,w
  3046  023F  3BCB               	subwfb	cw_get_vol@ad_value+2,f
  3047  0240  083F               	movf	??_cw_get_vol+3,w
  3048  0241  3BCC               	subwfb	cw_get_vol@ad_value+3,f
  3049                           
  3050                           ;CW201x.c: 469: ad_value -= ad_value_max;
  3051  0242  0847               	movf	cw_get_vol@ad_value_max,w
  3052  0243  00BC               	movwf	??_cw_get_vol
  3053  0244  0848               	movf	cw_get_vol@ad_value_max+1,w
  3054  0245  00BD               	movwf	??_cw_get_vol+1
  3055  0246  01BE               	clrf	??_cw_get_vol+2
  3056  0247  01BF               	clrf	??_cw_get_vol+3
  3057  0248  083C               	movf	??_cw_get_vol,w
  3058  0249  02C9               	subwf	cw_get_vol@ad_value,f
  3059  024A  083D               	movf	??_cw_get_vol+1,w
  3060  024B  3BCA               	subwfb	cw_get_vol@ad_value+1,f
  3061  024C  083E               	movf	??_cw_get_vol+2,w
  3062  024D  3BCB               	subwfb	cw_get_vol@ad_value+2,f
  3063  024E  083F               	movf	??_cw_get_vol+3,w
  3064  024F  3BCC               	subwfb	cw_get_vol@ad_value+3,f
  3065                           
  3066                           ;CW201x.c: 470: ad_value = ad_value * 305 / 100000;
  3067  0250  3000               	movlw	0
  3068  0251  00AF               	movwf	___lldiv@divisor+3
  3069  0252  3001               	movlw	1
  3070  0253  00AE               	movwf	___lldiv@divisor+2
  3071  0254  3086               	movlw	134
  3072  0255  00AD               	movwf	___lldiv@divisor+1
  3073  0256  30A0               	movlw	160
  3074  0257  00AC               	movwf	___lldiv@divisor
  3075  0258  084C               	movf	cw_get_vol@ad_value+3,w
  3076  0259  00A3               	movwf	___lmul@multiplier+3
  3077  025A  084B               	movf	cw_get_vol@ad_value+2,w
  3078  025B  00A2               	movwf	___lmul@multiplier+2
  3079  025C  084A               	movf	cw_get_vol@ad_value+1,w
  3080  025D  00A1               	movwf	___lmul@multiplier+1
  3081  025E  0849               	movf	cw_get_vol@ad_value,w
  3082  025F  00A0               	movwf	___lmul@multiplier
  3083  0260  3000               	movlw	0
  3084  0261  00A7               	movwf	___lmul@multiplicand+3
  3085  0262  3000               	movlw	0
  3086  0263  00A6               	movwf	___lmul@multiplicand+2
  3087  0264  3001               	movlw	1
  3088  0265  00A5               	movwf	___lmul@multiplicand+1
  3089  0266  3031               	movlw	49
  3090  0267  00A4               	movwf	___lmul@multiplicand
  3091  0268  2578               	fcall	___lmul
  3092  0269  0140               	movlb	0	; select bank0
  3093  026A  0823               	movf	?___lmul+3,w
  3094  026B  00B3               	movwf	___lldiv@dividend+3
  3095  026C  0822               	movf	?___lmul+2,w
  3096  026D  00B2               	movwf	___lldiv@dividend+2
  3097  026E  0821               	movf	?___lmul+1,w
  3098  026F  00B1               	movwf	___lldiv@dividend+1
  3099  0270  0820               	movf	?___lmul,w
  3100  0271  00B0               	movwf	___lldiv@dividend
  3101  0272  2336               	fcall	___lldiv
  3102  0273  0140               	movlb	0	; select bank0
  3103  0274  082F               	movf	?___lldiv+3,w
  3104  0275  00CC               	movwf	cw_get_vol@ad_value+3
  3105  0276  082E               	movf	?___lldiv+2,w
  3106  0277  00CB               	movwf	cw_get_vol@ad_value+2
  3107  0278  082D               	movf	?___lldiv+1,w
  3108  0279  00CA               	movwf	cw_get_vol@ad_value+1
  3109  027A  082C               	movf	?___lldiv,w
  3110  027B  00C9               	movwf	cw_get_vol@ad_value
  3111                           
  3112                           ;CW201x.c: 471: return(ad_value);
  3113  027C  084A               	movf	cw_get_vol@ad_value+1,w
  3114  027D  00BB               	movwf	?_cw_get_vol+1
  3115  027E  0849               	movf	cw_get_vol@ad_value,w
  3116  027F  00BA               	movwf	?_cw_get_vol
  3117  0280  0008               	return
  3118  0281                     __end_of_cw_get_vol:	
  3119                           
  3120                           	psect	text4
  3121  0281                     __ptext4:	
  3122 ;; *************** function _cw_read_word *****************
  3123 ;; Defined at:
  3124 ;;		line 189 in file "iic.c"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;  point_reg       1    wreg     unsigned char 
  3127 ;;  r_pdata         1   16[BANK0 ] PTR unsigned char 
  3128 ;;		 -> cw_get_vol@reg_val(2), 
  3129 ;;  length          2   17[BANK0 ] unsigned int 
  3130 ;; Auto vars:     Size  Location     Type
  3131 ;;  point_reg       1   21[BANK0 ] unsigned char 
  3132 ;;  count           1   22[BANK0 ] unsigned char 
  3133 ;; Return value:  Size  Location     Type
  3134 ;;                  2   16[BANK0 ] int 
  3135 ;; Registers used:
  3136 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3137 ;; Tracked objects:
  3138 ;;		On entry : 0/0
  3139 ;;		On exit  : 0/0
  3140 ;;		Unchanged: 0/0
  3141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3142 ;;      Params:         0       3       0       0
  3143 ;;      Locals:         0       2       0       0
  3144 ;;      Temps:          0       2       0       0
  3145 ;;      Totals:         0       7       0       0
  3146 ;;Total ram usage:        7 bytes
  3147 ;; Hardware stack levels used:    1
  3148 ;; Hardware stack levels required when called:    6
  3149 ;; This function calls:
  3150 ;;		_read_byte
  3151 ;;		_s_ack
  3152 ;;		_sn_ack
  3153 ;;		_start
  3154 ;;		_stop
  3155 ;;		_wait_r_ack
  3156 ;;		_write_byte
  3157 ;; This function is called by:
  3158 ;;		_cw_get_vol
  3159 ;; This function uses a non-reentrant model
  3160 ;;
  3161                           
  3162                           
  3163                           ;psect for function _cw_read_word
  3164  0281                     _cw_read_word:	
  3165                           
  3166                           ;incstack = 0
  3167                           ; Regs used in _cw_read_word: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3168                           ;cw_read_word@point_reg stored from wreg
  3169  0281  0140               	movlb	0	; select bank0
  3170  0282  00B5               	movwf	cw_read_word@point_reg
  3171                           
  3172                           ;iic.c: 191: unsigned char count;
  3173                           ;iic.c: 193: start();
  3174  0283  2740               	fcall	_start
  3175                           
  3176                           ;iic.c: 194: write_byte(0xc4);
  3177  0284  30C4               	movlw	196
  3178  0285  26A2               	fcall	_write_byte
  3179                           
  3180                           ;iic.c: 195: if(wait_r_ack())
  3181  0286  2546               	fcall	_wait_r_ack
  3182  0287  0140               	movlb	0	; select bank0
  3183  0288  082A               	movf	?_wait_r_ack,w
  3184  0289  042B               	iorwf	?_wait_r_ack+1,w
  3185  028A  1903               	btfsc	3,2
  3186  028B  2A91               	goto	l2206
  3187                           
  3188                           ;iic.c: 196: {
  3189                           ;iic.c: 197: return 1;
  3190  028C  3001               	movlw	1
  3191  028D  00B0               	movwf	?_cw_read_word
  3192  028E  3000               	movlw	0
  3193  028F  00B1               	movwf	?_cw_read_word+1
  3194  0290  0008               	return
  3195  0291                     l2206:	
  3196                           
  3197                           ;iic.c: 198: }
  3198                           ;iic.c: 199: write_byte(point_reg);
  3199  0291  0835               	movf	cw_read_word@point_reg,w
  3200  0292  26A2               	fcall	_write_byte
  3201                           
  3202                           ;iic.c: 200: if(wait_r_ack())
  3203  0293  2546               	fcall	_wait_r_ack
  3204  0294  0140               	movlb	0	; select bank0
  3205  0295  082A               	movf	?_wait_r_ack,w
  3206  0296  042B               	iorwf	?_wait_r_ack+1,w
  3207  0297  1903               	btfsc	3,2
  3208  0298  2A9E               	goto	l2212
  3209                           
  3210                           ;iic.c: 201: {
  3211                           ;iic.c: 202: return 1;
  3212  0299  3001               	movlw	1
  3213  029A  00B0               	movwf	?_cw_read_word
  3214  029B  3000               	movlw	0
  3215  029C  00B1               	movwf	?_cw_read_word+1
  3216  029D  0008               	return
  3217  029E                     l2212:	
  3218                           
  3219                           ;iic.c: 203: }
  3220                           ;iic.c: 204: start();
  3221  029E  2740               	fcall	_start
  3222                           
  3223                           ;iic.c: 205: write_byte(0xc5);
  3224  029F  30C5               	movlw	197
  3225  02A0  26A2               	fcall	_write_byte
  3226                           
  3227                           ;iic.c: 206: if(wait_r_ack())
  3228  02A1  2546               	fcall	_wait_r_ack
  3229  02A2  0140               	movlb	0	; select bank0
  3230  02A3  082A               	movf	?_wait_r_ack,w
  3231  02A4  042B               	iorwf	?_wait_r_ack+1,w
  3232  02A5  1903               	btfsc	3,2
  3233  02A6  2AAC               	goto	l2218
  3234                           
  3235                           ;iic.c: 207: {
  3236                           ;iic.c: 208: return 1;
  3237  02A7  3001               	movlw	1
  3238  02A8  00B0               	movwf	?_cw_read_word
  3239  02A9  3000               	movlw	0
  3240  02AA  00B1               	movwf	?_cw_read_word+1
  3241  02AB  0008               	return
  3242  02AC                     l2218:	
  3243                           
  3244                           ;iic.c: 209: }
  3245                           ;iic.c: 210: for(count = 0; count < length; count++ ){
  3246  02AC  01B6               	clrf	cw_read_word@count
  3247  02AD                     l2230:	
  3248  02AD  0836               	movf	cw_read_word@count,w
  3249  02AE  00B3               	movwf	??_cw_read_word
  3250  02AF  01B4               	clrf	??_cw_read_word+1
  3251  02B0  0832               	movf	cw_read_word@length+1,w
  3252  02B1  0234               	subwf	??_cw_read_word+1,w
  3253  02B2  1D03               	skipz
  3254  02B3  2AB6               	goto	u2025
  3255  02B4  0831               	movf	cw_read_word@length,w
  3256  02B5  0233               	subwf	??_cw_read_word,w
  3257  02B6                     u2025:	
  3258  02B6  1803               	btfsc	3,0
  3259  02B7  2ADA               	goto	l2232
  3260                           
  3261                           ;iic.c: 211: *r_pdata = read_byte();
  3262  02B8  25D8               	fcall	_read_byte
  3263  02B9  0140               	movlb	0	; select bank0
  3264  02BA  00B3               	movwf	??_cw_read_word
  3265  02BB  0830               	movf	cw_read_word@r_pdata,w
  3266  02BC  0086               	movwf	6
  3267  02BD  0187               	clrf	7
  3268  02BE  0833               	movf	??_cw_read_word,w
  3269  02BF  0081               	movwf	1
  3270                           
  3271                           ;iic.c: 212: if(count + 1 < length){
  3272  02C0  0836               	movf	cw_read_word@count,w
  3273  02C1  3E01               	addlw	1
  3274  02C2  00B3               	movwf	??_cw_read_word
  3275  02C3  3000               	movlw	0
  3276  02C4  1803               	skipnc
  3277  02C5  3001               	movlw	1
  3278  02C6  00B4               	movwf	??_cw_read_word+1
  3279  02C7  0832               	movf	cw_read_word@length+1,w
  3280  02C8  0234               	subwf	??_cw_read_word+1,w
  3281  02C9  1D03               	skipz
  3282  02CA  2ACD               	goto	u2015
  3283  02CB  0831               	movf	cw_read_word@length,w
  3284  02CC  0233               	subwf	??_cw_read_word,w
  3285  02CD                     u2015:	
  3286  02CD  1803               	skipnc
  3287  02CE  2AD4               	goto	l2228
  3288                           
  3289                           ;iic.c: 213: r_pdata++;
  3290  02CF  3001               	movlw	1
  3291  02D0  00B3               	movwf	??_cw_read_word
  3292  02D1  0833               	movf	??_cw_read_word,w
  3293  02D2  07B0               	addwf	cw_read_word@r_pdata,f
  3294                           
  3295                           ;iic.c: 214: sn_ack();
  3296  02D3  271C               	fcall	_sn_ack
  3297  02D4                     l2228:	
  3298  02D4  3001               	movlw	1
  3299  02D5  0140               	movlb	0	; select bank0
  3300  02D6  00B3               	movwf	??_cw_read_word
  3301  02D7  0833               	movf	??_cw_read_word,w
  3302  02D8  07B6               	addwf	cw_read_word@count,f
  3303  02D9  2AAD               	goto	l2230
  3304  02DA                     l2232:	
  3305                           
  3306                           ;iic.c: 215: }
  3307                           ;iic.c: 216: }
  3308                           ;iic.c: 217: s_ack();
  3309  02DA  274B               	fcall	_s_ack
  3310                           
  3311                           ;iic.c: 218: stop();
  3312  02DB  2728               	fcall	_stop
  3313                           
  3314                           ;iic.c: 219: return 0;
  3315  02DC  0140               	movlb	0	; select bank0
  3316  02DD  01B0               	clrf	?_cw_read_word
  3317  02DE  01B1               	clrf	?_cw_read_word+1
  3318  02DF  0008               	return
  3319  02E0                     __end_of_cw_read_word:	
  3320                           
  3321                           	psect	text5
  3322  071C                     __ptext5:	
  3323 ;; *************** function _sn_ack *****************
  3324 ;; Defined at:
  3325 ;;		line 113 in file "iic.c"
  3326 ;; Parameters:    Size  Location     Type
  3327 ;;		None
  3328 ;; Auto vars:     Size  Location     Type
  3329 ;;		None
  3330 ;; Return value:  Size  Location     Type
  3331 ;;                  1    wreg      void 
  3332 ;; Registers used:
  3333 ;;		wreg, status,2, status,0, pclath, cstack
  3334 ;; Tracked objects:
  3335 ;;		On entry : 0/0
  3336 ;;		On exit  : 0/0
  3337 ;;		Unchanged: 0/0
  3338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3339 ;;      Params:         0       0       0       0
  3340 ;;      Locals:         0       0       0       0
  3341 ;;      Temps:          0       0       0       0
  3342 ;;      Totals:         0       0       0       0
  3343 ;;Total ram usage:        0 bytes
  3344 ;; Hardware stack levels used:    1
  3345 ;; Hardware stack levels required when called:    4
  3346 ;; This function calls:
  3347 ;;		_Delay10us
  3348 ;; This function is called by:
  3349 ;;		_cw_read_word
  3350 ;; This function uses a non-reentrant model
  3351 ;;
  3352                           
  3353                           
  3354                           ;psect for function _sn_ack
  3355  071C                     _sn_ack:	
  3356                           
  3357                           ;incstack = 0
  3358                           ; Regs used in _sn_ack: [wreg+status,2+status,0+pclath+cstack]
  3359                           ;iic.c: 115: do { TRISCbits.TRISC1 = 0; } while(0);
  3360  071C  0140               	movlb	0	; select bank0
  3361  071D  1094               	bcf	20,1	;volatile
  3362                           
  3363                           ;iic.c: 116: do { LATCbits.LATC1 = 0; } while(0);
  3364  071E  109A               	bcf	26,1	;volatile
  3365                           
  3366                           ;iic.c: 117: Delay10us();
  3367  071F  263F               	fcall	_Delay10us
  3368                           
  3369                           ;iic.c: 118: do { LATCbits.LATC0 = 1; } while(0);
  3370  0720  0140               	movlb	0	; select bank0
  3371  0721  141A               	bsf	26,0	;volatile
  3372                           
  3373                           ;iic.c: 119: Delay10us();
  3374  0722  263F               	fcall	_Delay10us
  3375                           
  3376                           ;iic.c: 120: do { LATCbits.LATC0 = 0; } while(0);
  3377  0723  0140               	movlb	0	; select bank0
  3378  0724  101A               	bcf	26,0	;volatile
  3379                           
  3380                           ;iic.c: 121: do { LATCbits.LATC1 = 1; } while(0);
  3381  0725  149A               	bsf	26,1	;volatile
  3382                           
  3383                           ;iic.c: 122: Delay10us();
  3384  0726  263F               	fcall	_Delay10us
  3385  0727  0008               	return
  3386  0728                     __end_of_sn_ack:	
  3387                           
  3388                           	psect	text6
  3389  0578                     __ptext6:	
  3390 ;; *************** function ___lmul *****************
  3391 ;; Defined at:
  3392 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul32.c"
  3393 ;; Parameters:    Size  Location     Type
  3394 ;;  multiplier      4    0[BANK0 ] unsigned long 
  3395 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  3396 ;; Auto vars:     Size  Location     Type
  3397 ;;  product         4    8[BANK0 ] unsigned long 
  3398 ;; Return value:  Size  Location     Type
  3399 ;;                  4    0[BANK0 ] unsigned long 
  3400 ;; Registers used:
  3401 ;;		wreg, status,2, status,0
  3402 ;; Tracked objects:
  3403 ;;		On entry : 0/0
  3404 ;;		On exit  : 0/0
  3405 ;;		Unchanged: 0/0
  3406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3407 ;;      Params:         0       8       0       0
  3408 ;;      Locals:         0       4       0       0
  3409 ;;      Temps:          0       0       0       0
  3410 ;;      Totals:         0      12       0       0
  3411 ;;Total ram usage:       12 bytes
  3412 ;; Hardware stack levels used:    1
  3413 ;; Hardware stack levels required when called:    3
  3414 ;; This function calls:
  3415 ;;		Nothing
  3416 ;; This function is called by:
  3417 ;;		_cw_get_vol
  3418 ;; This function uses a non-reentrant model
  3419 ;;
  3420                           
  3421                           
  3422                           ;psect for function ___lmul
  3423  0578                     ___lmul:	
  3424                           
  3425                           ;incstack = 0
  3426                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3427  0578  3000               	movlw	0
  3428  0579  0140               	movlb	0	; select bank0
  3429  057A  00AB               	movwf	___lmul@product+3
  3430  057B  3000               	movlw	0
  3431  057C  00AA               	movwf	___lmul@product+2
  3432  057D  3000               	movlw	0
  3433  057E  00A9               	movwf	___lmul@product+1
  3434  057F  3000               	movlw	0
  3435  0580  00A8               	movwf	___lmul@product
  3436  0581                     l2240:	
  3437  0581  1C20               	btfss	___lmul@multiplier,0
  3438  0582  2D8B               	goto	l2244
  3439  0583  0824               	movf	___lmul@multiplicand,w
  3440  0584  07A8               	addwf	___lmul@product,f
  3441  0585  0825               	movf	___lmul@multiplicand+1,w
  3442  0586  3DA9               	addwfc	___lmul@product+1,f
  3443  0587  0826               	movf	___lmul@multiplicand+2,w
  3444  0588  3DAA               	addwfc	___lmul@product+2,f
  3445  0589  0827               	movf	___lmul@multiplicand+3,w
  3446  058A  3DAB               	addwfc	___lmul@product+3,f
  3447  058B                     l2244:	
  3448  058B  3001               	movlw	1
  3449  058C                     u2045:	
  3450  058C  35A4               	lslf	___lmul@multiplicand,f
  3451  058D  0DA5               	rlf	___lmul@multiplicand+1,f
  3452  058E  0DA6               	rlf	___lmul@multiplicand+2,f
  3453  058F  0DA7               	rlf	___lmul@multiplicand+3,f
  3454  0590  0B89               	decfsz	9,f
  3455  0591  2D8C               	goto	u2045
  3456  0592  3001               	movlw	1
  3457  0593                     u2055:	
  3458  0593  36A3               	lsrf	___lmul@multiplier+3,f
  3459  0594  0CA2               	rrf	___lmul@multiplier+2,f
  3460  0595  0CA1               	rrf	___lmul@multiplier+1,f
  3461  0596  0CA0               	rrf	___lmul@multiplier,f
  3462  0597  0B89               	decfsz	9,f
  3463  0598  2D93               	goto	u2055
  3464  0599  0823               	movf	___lmul@multiplier+3,w
  3465  059A  0422               	iorwf	___lmul@multiplier+2,w
  3466  059B  0421               	iorwf	___lmul@multiplier+1,w
  3467  059C  0420               	iorwf	___lmul@multiplier,w
  3468  059D  1D03               	skipz
  3469  059E  2D81               	goto	l2240
  3470  059F  082B               	movf	___lmul@product+3,w
  3471  05A0  00A3               	movwf	?___lmul+3
  3472  05A1  082A               	movf	___lmul@product+2,w
  3473  05A2  00A2               	movwf	?___lmul+2
  3474  05A3  0829               	movf	___lmul@product+1,w
  3475  05A4  00A1               	movwf	?___lmul+1
  3476  05A5  0828               	movf	___lmul@product,w
  3477  05A6  00A0               	movwf	?___lmul
  3478  05A7  0008               	return
  3479  05A8                     __end_of___lmul:	
  3480                           
  3481                           	psect	text7
  3482  0336                     __ptext7:	
  3483 ;; *************** function ___lldiv *****************
  3484 ;; Defined at:
  3485 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
  3486 ;; Parameters:    Size  Location     Type
  3487 ;;  divisor         4   12[BANK0 ] unsigned long 
  3488 ;;  dividend        4   16[BANK0 ] unsigned long 
  3489 ;; Auto vars:     Size  Location     Type
  3490 ;;  quotient        4   21[BANK0 ] unsigned long 
  3491 ;;  counter         1   25[BANK0 ] unsigned char 
  3492 ;; Return value:  Size  Location     Type
  3493 ;;                  4   12[BANK0 ] unsigned long 
  3494 ;; Registers used:
  3495 ;;		wreg, status,2, status,0
  3496 ;; Tracked objects:
  3497 ;;		On entry : 0/0
  3498 ;;		On exit  : 0/0
  3499 ;;		Unchanged: 0/0
  3500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3501 ;;      Params:         0       8       0       0
  3502 ;;      Locals:         0       5       0       0
  3503 ;;      Temps:          0       1       0       0
  3504 ;;      Totals:         0      14       0       0
  3505 ;;Total ram usage:       14 bytes
  3506 ;; Hardware stack levels used:    1
  3507 ;; Hardware stack levels required when called:    3
  3508 ;; This function calls:
  3509 ;;		Nothing
  3510 ;; This function is called by:
  3511 ;;		_cw_get_vol
  3512 ;; This function uses a non-reentrant model
  3513 ;;
  3514                           
  3515                           
  3516                           ;psect for function ___lldiv
  3517  0336                     ___lldiv:	
  3518                           
  3519                           ;incstack = 0
  3520                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3521  0336  3000               	movlw	0
  3522  0337  0140               	movlb	0	; select bank0
  3523  0338  00B8               	movwf	___lldiv@quotient+3
  3524  0339  3000               	movlw	0
  3525  033A  00B7               	movwf	___lldiv@quotient+2
  3526  033B  3000               	movlw	0
  3527  033C  00B6               	movwf	___lldiv@quotient+1
  3528  033D  3000               	movlw	0
  3529  033E  00B5               	movwf	___lldiv@quotient
  3530  033F  082F               	movf	___lldiv@divisor+3,w
  3531  0340  042E               	iorwf	___lldiv@divisor+2,w
  3532  0341  042D               	iorwf	___lldiv@divisor+1,w
  3533  0342  042C               	iorwf	___lldiv@divisor,w
  3534  0343  1903               	skipnz
  3535  0344  2B80               	goto	l2272
  3536  0345  01B9               	clrf	___lldiv@counter
  3537  0346  0AB9               	incf	___lldiv@counter,f
  3538  0347                     l2258:	
  3539  0347  1BAF               	btfsc	___lldiv@divisor+3,7
  3540  0348  2B55               	goto	l2260
  3541  0349  3001               	movlw	1
  3542  034A                     u2085:	
  3543  034A  35AC               	lslf	___lldiv@divisor,f
  3544  034B  0DAD               	rlf	___lldiv@divisor+1,f
  3545  034C  0DAE               	rlf	___lldiv@divisor+2,f
  3546  034D  0DAF               	rlf	___lldiv@divisor+3,f
  3547  034E  0B89               	decfsz	9,f
  3548  034F  2B4A               	goto	u2085
  3549  0350  3001               	movlw	1
  3550  0351  00B4               	movwf	??___lldiv
  3551  0352  0834               	movf	??___lldiv,w
  3552  0353  07B9               	addwf	___lldiv@counter,f
  3553  0354  2B47               	goto	l2258
  3554  0355                     l2260:	
  3555  0355  3001               	movlw	1
  3556  0356                     u2105:	
  3557  0356  35B5               	lslf	___lldiv@quotient,f
  3558  0357  0DB6               	rlf	___lldiv@quotient+1,f
  3559  0358  0DB7               	rlf	___lldiv@quotient+2,f
  3560  0359  0DB8               	rlf	___lldiv@quotient+3,f
  3561  035A  0B89               	decfsz	9,f
  3562  035B  2B56               	goto	u2105
  3563  035C  082F               	movf	___lldiv@divisor+3,w
  3564  035D  0233               	subwf	___lldiv@dividend+3,w
  3565  035E  1D03               	skipz
  3566  035F  2B6A               	goto	u2115
  3567  0360  082E               	movf	___lldiv@divisor+2,w
  3568  0361  0232               	subwf	___lldiv@dividend+2,w
  3569  0362  1D03               	skipz
  3570  0363  2B6A               	goto	u2115
  3571  0364  082D               	movf	___lldiv@divisor+1,w
  3572  0365  0231               	subwf	___lldiv@dividend+1,w
  3573  0366  1D03               	skipz
  3574  0367  2B6A               	goto	u2115
  3575  0368  082C               	movf	___lldiv@divisor,w
  3576  0369  0230               	subwf	___lldiv@dividend,w
  3577  036A                     u2115:	
  3578  036A  1C03               	skipc
  3579  036B  2B75               	goto	l2268
  3580  036C  082C               	movf	___lldiv@divisor,w
  3581  036D  02B0               	subwf	___lldiv@dividend,f
  3582  036E  082D               	movf	___lldiv@divisor+1,w
  3583  036F  3BB1               	subwfb	___lldiv@dividend+1,f
  3584  0370  082E               	movf	___lldiv@divisor+2,w
  3585  0371  3BB2               	subwfb	___lldiv@dividend+2,f
  3586  0372  082F               	movf	___lldiv@divisor+3,w
  3587  0373  3BB3               	subwfb	___lldiv@dividend+3,f
  3588  0374  1435               	bsf	___lldiv@quotient,0
  3589  0375                     l2268:	
  3590  0375  3001               	movlw	1
  3591  0376                     u2125:	
  3592  0376  36AF               	lsrf	___lldiv@divisor+3,f
  3593  0377  0CAE               	rrf	___lldiv@divisor+2,f
  3594  0378  0CAD               	rrf	___lldiv@divisor+1,f
  3595  0379  0CAC               	rrf	___lldiv@divisor,f
  3596  037A  0B89               	decfsz	9,f
  3597  037B  2B76               	goto	u2125
  3598  037C  3001               	movlw	1
  3599  037D  02B9               	subwf	___lldiv@counter,f
  3600  037E  1D03               	btfss	3,2
  3601  037F  2B55               	goto	l2260
  3602  0380                     l2272:	
  3603  0380  0838               	movf	___lldiv@quotient+3,w
  3604  0381  00AF               	movwf	?___lldiv+3
  3605  0382  0837               	movf	___lldiv@quotient+2,w
  3606  0383  00AE               	movwf	?___lldiv+2
  3607  0384  0836               	movf	___lldiv@quotient+1,w
  3608  0385  00AD               	movwf	?___lldiv+1
  3609  0386  0835               	movf	___lldiv@quotient,w
  3610  0387  00AC               	movwf	?___lldiv
  3611  0388  0008               	return
  3612  0389                     __end_of___lldiv:	
  3613                           
  3614                           	psect	text8
  3615  0756                     __ptext8:	
  3616 ;; *************** function _update_usb_online *****************
  3617 ;; Defined at:
  3618 ;;		line 544 in file "CW201x.c"
  3619 ;; Parameters:    Size  Location     Type
  3620 ;;		None
  3621 ;; Auto vars:     Size  Location     Type
  3622 ;;		None
  3623 ;; Return value:  Size  Location     Type
  3624 ;;                  1    wreg      void 
  3625 ;; Registers used:
  3626 ;;		wreg, status,2, status,0
  3627 ;; Tracked objects:
  3628 ;;		On entry : 0/0
  3629 ;;		On exit  : 0/0
  3630 ;;		Unchanged: 0/0
  3631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3632 ;;      Params:         0       0       0       0
  3633 ;;      Locals:         0       0       0       0
  3634 ;;      Temps:          0       0       0       0
  3635 ;;      Totals:         0       0       0       0
  3636 ;;Total ram usage:        0 bytes
  3637 ;; Hardware stack levels used:    1
  3638 ;; Hardware stack levels required when called:    3
  3639 ;; This function calls:
  3640 ;;		Nothing
  3641 ;; This function is called by:
  3642 ;;		_cw_bat_work
  3643 ;; This function uses a non-reentrant model
  3644 ;;
  3645                           
  3646                           
  3647                           ;psect for function _update_usb_online
  3648  0756                     _update_usb_online:	
  3649                           
  3650                           ;CW201x.c: 546: if(CHARGE == 1)
  3651                           
  3652                           ;incstack = 0
  3653                           ; Regs used in _update_usb_online: [wreg+status,2+status,0]
  3654  0756  0378               	decf	_CHARGE,w
  3655  0757  1D03               	btfss	3,2
  3656  0758  2F5D               	goto	l2424
  3657                           
  3658                           ;CW201x.c: 547: {
  3659                           ;CW201x.c: 548: cw_bat.usb_online = 1;
  3660  0759  0140               	movlb	0	; select bank0
  3661  075A  01E3               	clrf	_cw_bat
  3662  075B  0AE3               	incf	_cw_bat,f
  3663                           
  3664                           ;CW201x.c: 549: }else{
  3665  075C  0008               	return
  3666  075D                     l2424:	
  3667                           
  3668                           ;CW201x.c: 550: cw_bat.usb_online = 0;
  3669  075D  0140               	movlb	0	; select bank0
  3670  075E  01E3               	clrf	_cw_bat
  3671  075F  0008               	return
  3672  0760                     __end_of_update_usb_online:	
  3673                           
  3674                           	psect	text9
  3675  061E                     __ptext9:	
  3676 ;; *************** function _update_capacity *****************
  3677 ;; Defined at:
  3678 ;;		line 497 in file "CW201x.c"
  3679 ;; Parameters:    Size  Location     Type
  3680 ;;		None
  3681 ;; Auto vars:     Size  Location     Type
  3682 ;;  cw_capacity     2   48[BANK0 ] int 
  3683 ;; Return value:  Size  Location     Type
  3684 ;;                  1    wreg      void 
  3685 ;; Registers used:
  3686 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3687 ;; Tracked objects:
  3688 ;;		On entry : 0/0
  3689 ;;		On exit  : 0/0
  3690 ;;		Unchanged: 0/0
  3691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3692 ;;      Params:         0       0       0       0
  3693 ;;      Locals:         0       2       0       0
  3694 ;;      Temps:          0       1       0       0
  3695 ;;      Totals:         0       3       0       0
  3696 ;;Total ram usage:        3 bytes
  3697 ;; Hardware stack levels used:    1
  3698 ;; Hardware stack levels required when called:   11
  3699 ;; This function calls:
  3700 ;;		_cw_get_capacity
  3701 ;; This function is called by:
  3702 ;;		_cw_bat_work
  3703 ;; This function uses a non-reentrant model
  3704 ;;
  3705                           
  3706                           
  3707                           ;psect for function _update_capacity
  3708  061E                     _update_capacity:	
  3709                           
  3710                           ;CW201x.c: 499: int cw_capacity;
  3711                           ;CW201x.c: 500: cw_capacity = cw_get_capacity();
  3712                           
  3713                           ;incstack = 0
  3714                           ; Regs used in _update_capacity: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3715  061E  2416               	fcall	_cw_get_capacity
  3716  061F  0140               	movlb	0	; select bank0
  3717  0620  0848               	movf	?_cw_get_capacity+1,w
  3718  0621  00D1               	movwf	update_capacity@cw_capacity+1
  3719  0622  0847               	movf	?_cw_get_capacity,w
  3720  0623  00D0               	movwf	update_capacity@cw_capacity
  3721                           
  3722                           ;CW201x.c: 501: if((cw_capacity >= 0) && (cw_capacity <= 100) && (cw_bat.capacity != cw_
      +                          capacity))
  3723  0624  1BD1               	btfsc	update_capacity@cw_capacity+1,7
  3724  0625  0008               	return
  3725  0626  0851               	movf	update_capacity@cw_capacity+1,w
  3726  0627  3A80               	xorlw	128
  3727  0628  00CF               	movwf	??_update_capacity
  3728  0629  3080               	movlw	128
  3729  062A  024F               	subwf	??_update_capacity,w
  3730  062B  1D03               	skipz
  3731  062C  2E2F               	goto	u2295
  3732  062D  3065               	movlw	101
  3733  062E  0250               	subwf	update_capacity@cw_capacity,w
  3734  062F                     u2295:	
  3735  062F  1803               	skipnc
  3736  0630  0008               	return
  3737  0631  0140               	movlb	0	; select bank0
  3738  0632  0851               	movf	update_capacity@cw_capacity+1,w
  3739  0633  0665               	xorwf	_cw_bat+2,w
  3740  0634  1D03               	skipz
  3741  0635  2E38               	goto	u2305
  3742  0636  0850               	movf	update_capacity@cw_capacity,w
  3743  0637  0664               	xorwf	_cw_bat+1,w
  3744  0638                     u2305:	
  3745  0638  1903               	skipnz
  3746  0639  0008               	return
  3747                           
  3748                           ;CW201x.c: 502: {
  3749                           ;CW201x.c: 503: cw_bat.capacity = cw_capacity;
  3750  063A  0851               	movf	update_capacity@cw_capacity+1,w
  3751  063B  00E5               	movwf	_cw_bat+2
  3752  063C  0850               	movf	update_capacity@cw_capacity,w
  3753  063D  00E4               	movwf	_cw_bat+1
  3754  063E  0008               	return
  3755  063F                     __end_of_update_capacity:	
  3756                           
  3757                           	psect	text10
  3758  0416                     __ptext10:	
  3759 ;; *************** function _cw_get_capacity *****************
  3760 ;; Defined at:
  3761 ;;		line 325 in file "CW201x.c"
  3762 ;; Parameters:    Size  Location     Type
  3763 ;;		None
  3764 ;; Auto vars:     Size  Location     Type
  3765 ;;  ret             2   44[BANK0 ] int 
  3766 ;;  reg_val         1   46[BANK0 ] unsigned char 
  3767 ;;  cw_capacity     1   43[BANK0 ] unsigned char 
  3768 ;;  allow_capaci    1    0        unsigned char 
  3769 ;; Return value:  Size  Location     Type
  3770 ;;                  2   39[BANK0 ] int 
  3771 ;; Registers used:
  3772 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3773 ;; Tracked objects:
  3774 ;;		On entry : 0/0
  3775 ;;		On exit  : 0/0
  3776 ;;		Unchanged: 0/0
  3777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3778 ;;      Params:         0       2       0       0
  3779 ;;      Locals:         0       4       0       0
  3780 ;;      Temps:          0       2       0       0
  3781 ;;      Totals:         0       8       0       0
  3782 ;;Total ram usage:        8 bytes
  3783 ;; Hardware stack levels used:    1
  3784 ;; Hardware stack levels required when called:   10
  3785 ;; This function calls:
  3786 ;;		_cw_por
  3787 ;;		_cw_read
  3788 ;; This function is called by:
  3789 ;;		_update_capacity
  3790 ;; This function uses a non-reentrant model
  3791 ;;
  3792                           
  3793                           
  3794                           ;psect for function _cw_get_capacity
  3795  0416                     _cw_get_capacity:	
  3796                           
  3797                           ;CW201x.c: 327: int ret = 0;
  3798                           
  3799                           ;incstack = 0
  3800                           ; Regs used in _cw_get_capacity: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3801  0416  0140               	movlb	0	; select bank0
  3802  0417  01CC               	clrf	cw_get_capacity@ret
  3803  0418  01CD               	clrf	cw_get_capacity@ret+1
  3804                           
  3805                           ;CW201x.c: 328: unsigned char allow_capacity;
  3806                           ;CW201x.c: 329: unsigned char reg_val;
  3807                           ;CW201x.c: 331: unsigned char cw_capacity;
  3808                           ;CW201x.c: 334: ret = cw_read(0x4, &reg_val);
  3809  0419  304E               	movlw	(low (cw_get_capacity@reg_val| 0))& (0+255)
  3810  041A  00C9               	movwf	??_cw_get_capacity
  3811  041B  0849               	movf	??_cw_get_capacity,w
  3812  041C  00B0               	movwf	cw_read@r_pdata
  3813  041D  3004               	movlw	4
  3814  041E  24DB               	fcall	_cw_read
  3815  041F  0140               	movlb	0	; select bank0
  3816  0420  0831               	movf	?_cw_read+1,w
  3817  0421  00CD               	movwf	cw_get_capacity@ret+1
  3818  0422  0830               	movf	?_cw_read,w
  3819  0423  00CC               	movwf	cw_get_capacity@ret
  3820                           
  3821                           ;CW201x.c: 335: if(ret)
  3822  0424  084C               	movf	cw_get_capacity@ret,w
  3823  0425  044D               	iorwf	cw_get_capacity@ret+1,w
  3824  0426  1903               	btfsc	3,2
  3825  0427  2C2D               	goto	l2286
  3826                           
  3827                           ;CW201x.c: 336: {
  3828                           ;CW201x.c: 337: return -1;
  3829  0428  30FF               	movlw	255
  3830  0429  00C7               	movwf	?_cw_get_capacity
  3831  042A  30FF               	movlw	255
  3832  042B  00C8               	movwf	?_cw_get_capacity+1
  3833  042C  0008               	return
  3834  042D                     l2286:	
  3835                           
  3836                           ;CW201x.c: 338: }
  3837                           ;CW201x.c: 340: cw_capacity = reg_val;
  3838  042D  084E               	movf	cw_get_capacity@reg_val,w
  3839  042E  00C9               	movwf	??_cw_get_capacity
  3840  042F  0849               	movf	??_cw_get_capacity,w
  3841  0430  00CB               	movwf	cw_get_capacity@cw_capacity
  3842                           
  3843                           ;CW201x.c: 342: if ((cw_capacity < 0) || (cw_capacity > 100)) {
  3844  0431  3065               	movlw	101
  3845  0432  024B               	subwf	cw_get_capacity@cw_capacity,w
  3846  0433  1C03               	skipc
  3847  0434  2C52               	goto	l2308
  3848                           
  3849                           ;CW201x.c: 344: reset_loop++;
  3850  0435  3001               	movlw	1
  3851  0436  00C9               	movwf	??_cw_get_capacity
  3852  0437  0849               	movf	??_cw_get_capacity,w
  3853  0438  07EB               	addwf	_reset_loop,f
  3854                           
  3855                           ;CW201x.c: 345: if (reset_loop >5) {
  3856  0439  3006               	movlw	6
  3857  043A  026B               	subwf	_reset_loop,w
  3858  043B  1C03               	skipc
  3859  043C  2C4D               	goto	l2302
  3860                           
  3861                           ;CW201x.c: 346: ret = cw_por();
  3862  043D  2389               	fcall	_cw_por
  3863  043E  0140               	movlb	0	; select bank0
  3864  043F  0841               	movf	?_cw_por+1,w
  3865  0440  00CD               	movwf	cw_get_capacity@ret+1
  3866  0441  0840               	movf	?_cw_por,w
  3867  0442  00CC               	movwf	cw_get_capacity@ret
  3868                           
  3869                           ;CW201x.c: 347: if(ret)
  3870  0443  084C               	movf	cw_get_capacity@ret,w
  3871  0444  044D               	iorwf	cw_get_capacity@ret+1,w
  3872  0445  1903               	btfsc	3,2
  3873  0446  2C4C               	goto	l2300
  3874                           
  3875                           ;CW201x.c: 348: return -1;
  3876  0447  30FF               	movlw	255
  3877  0448  00C7               	movwf	?_cw_get_capacity
  3878  0449  30FF               	movlw	255
  3879  044A  00C8               	movwf	?_cw_get_capacity+1
  3880  044B  0008               	return
  3881  044C                     l2300:	
  3882                           
  3883                           ;CW201x.c: 349: reset_loop =0;
  3884  044C  01EB               	clrf	_reset_loop
  3885  044D                     l2302:	
  3886                           
  3887                           ;CW201x.c: 350: }
  3888                           ;CW201x.c: 351: return cw_bat.capacity;
  3889  044D  0865               	movf	_cw_bat+2,w
  3890  044E  00C8               	movwf	?_cw_get_capacity+1
  3891  044F  0864               	movf	_cw_bat+1,w
  3892  0450  00C7               	movwf	?_cw_get_capacity
  3893  0451  0008               	return
  3894  0452                     l2308:	
  3895                           ;CW201x.c: 352: }else {
  3896                           
  3897                           
  3898                           ;CW201x.c: 353: reset_loop =0;
  3899  0452  01EB               	clrf	_reset_loop
  3900                           
  3901                           ;CW201x.c: 354: }
  3902                           ;CW201x.c: 431: return(cw_capacity);
  3903  0453  084B               	movf	cw_get_capacity@cw_capacity,w
  3904  0454  00C9               	movwf	??_cw_get_capacity
  3905  0455  01CA               	clrf	??_cw_get_capacity+1
  3906  0456  0849               	movf	??_cw_get_capacity,w
  3907  0457  00C7               	movwf	?_cw_get_capacity
  3908  0458  084A               	movf	??_cw_get_capacity+1,w
  3909  0459  00C8               	movwf	?_cw_get_capacity+1
  3910  045A  0008               	return
  3911  045B                     __end_of_cw_get_capacity:	
  3912                           
  3913                           	psect	text11
  3914  0389                     __ptext11:	
  3915 ;; *************** function _cw_por *****************
  3916 ;; Defined at:
  3917 ;;		line 303 in file "CW201x.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;		None
  3920 ;; Auto vars:     Size  Location     Type
  3921 ;;  ret             2   37[BANK0 ] int 
  3922 ;;  reset_val       1   36[BANK0 ] unsigned char 
  3923 ;; Return value:  Size  Location     Type
  3924 ;;                  2   32[BANK0 ] int 
  3925 ;; Registers used:
  3926 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3927 ;; Tracked objects:
  3928 ;;		On entry : 0/0
  3929 ;;		On exit  : 0/0
  3930 ;;		Unchanged: 0/0
  3931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3932 ;;      Params:         0       2       0       0
  3933 ;;      Locals:         0       3       0       0
  3934 ;;      Temps:          0       2       0       0
  3935 ;;      Totals:         0       7       0       0
  3936 ;;Total ram usage:        7 bytes
  3937 ;; Hardware stack levels used:    1
  3938 ;; Hardware stack levels required when called:    9
  3939 ;; This function calls:
  3940 ;;		_CW_Delay100us
  3941 ;;		_cw_init
  3942 ;;		_cw_write
  3943 ;; This function is called by:
  3944 ;;		_cw_get_capacity
  3945 ;; This function uses a non-reentrant model
  3946 ;;
  3947                           
  3948                           
  3949                           ;psect for function _cw_por
  3950  0389                     _cw_por:	
  3951                           
  3952                           ;CW201x.c: 305: int ret = 0;
  3953                           
  3954                           ;incstack = 0
  3955                           ; Regs used in _cw_por: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3956  0389  0140               	movlb	0	; select bank0
  3957  038A  01C5               	clrf	cw_por@ret
  3958  038B  01C6               	clrf	cw_por@ret+1
  3959                           
  3960                           ;CW201x.c: 306: unsigned char reset_val = 0;
  3961  038C  01C4               	clrf	cw_por@reset_val
  3962                           
  3963                           ;CW201x.c: 307: reset_val = (0x3<<6);
  3964  038D  30C0               	movlw	192
  3965  038E  00C2               	movwf	??_cw_por
  3966  038F  0842               	movf	??_cw_por,w
  3967  0390  00C4               	movwf	cw_por@reset_val
  3968                           
  3969                           ;CW201x.c: 308: ret = cw_write(0xA, &reset_val);
  3970  0391  3044               	movlw	(low (cw_por@reset_val| 0))& (0+255)
  3971  0392  00C2               	movwf	??_cw_por
  3972  0393  0842               	movf	??_cw_por,w
  3973  0394  00B0               	movwf	cw_write@w_pdata
  3974  0395  300A               	movlw	10
  3975  0396  2514               	fcall	_cw_write
  3976  0397  0140               	movlb	0	; select bank0
  3977  0398  0831               	movf	?_cw_write+1,w
  3978  0399  00C6               	movwf	cw_por@ret+1
  3979  039A  0830               	movf	?_cw_write,w
  3980  039B  00C5               	movwf	cw_por@ret
  3981                           
  3982                           ;CW201x.c: 309: if (ret)
  3983  039C  0845               	movf	cw_por@ret,w
  3984  039D  0446               	iorwf	cw_por@ret+1,w
  3985  039E  1903               	btfsc	3,2
  3986  039F  2BA5               	goto	l2174
  3987                           
  3988                           ;CW201x.c: 310: return -1;
  3989  03A0  30FF               	movlw	255
  3990  03A1  00C0               	movwf	?_cw_por
  3991  03A2  30FF               	movlw	255
  3992  03A3  00C1               	movwf	?_cw_por+1
  3993  03A4  0008               	return
  3994  03A5                     l2174:	
  3995                           
  3996                           ;CW201x.c: 311: CW_Delay100us();
  3997  03A5  2660               	fcall	_CW_Delay100us
  3998                           
  3999                           ;CW201x.c: 313: reset_val = (0x0<<6);
  4000  03A6  0140               	movlb	0	; select bank0
  4001  03A7  01C4               	clrf	cw_por@reset_val
  4002                           
  4003                           ;CW201x.c: 314: ret = cw_write(0xA, &reset_val);
  4004  03A8  3044               	movlw	(low (cw_por@reset_val| 0))& (0+255)
  4005  03A9  00C2               	movwf	??_cw_por
  4006  03AA  0842               	movf	??_cw_por,w
  4007  03AB  00B0               	movwf	cw_write@w_pdata
  4008  03AC  300A               	movlw	10
  4009  03AD  2514               	fcall	_cw_write
  4010  03AE  0140               	movlb	0	; select bank0
  4011  03AF  0831               	movf	?_cw_write+1,w
  4012  03B0  00C6               	movwf	cw_por@ret+1
  4013  03B1  0830               	movf	?_cw_write,w
  4014  03B2  00C5               	movwf	cw_por@ret
  4015                           
  4016                           ;CW201x.c: 315: if (ret)
  4017  03B3  0845               	movf	cw_por@ret,w
  4018  03B4  0446               	iorwf	cw_por@ret+1,w
  4019  03B5  1903               	btfsc	3,2
  4020  03B6  2BBC               	goto	l2186
  4021                           
  4022                           ;CW201x.c: 316: return -1;
  4023  03B7  30FF               	movlw	255
  4024  03B8  00C0               	movwf	?_cw_por
  4025  03B9  30FF               	movlw	255
  4026  03BA  00C1               	movwf	?_cw_por+1
  4027  03BB  0008               	return
  4028  03BC                     l2186:	
  4029                           
  4030                           ;CW201x.c: 317: CW_Delay100us();
  4031  03BC  2660               	fcall	_CW_Delay100us
  4032                           
  4033                           ;CW201x.c: 319: ret = cw_init();
  4034  03BD  2022               	fcall	_cw_init
  4035  03BE  0140               	movlb	0	; select bank0
  4036  03BF  00C2               	movwf	??_cw_por
  4037  03C0  01C3               	clrf	??_cw_por+1
  4038  03C1  0842               	movf	??_cw_por,w
  4039  03C2  00C5               	movwf	cw_por@ret
  4040  03C3  0843               	movf	??_cw_por+1,w
  4041  03C4  00C6               	movwf	cw_por@ret+1
  4042                           
  4043                           ;CW201x.c: 320: if (ret)
  4044  03C5  0845               	movf	cw_por@ret,w
  4045  03C6  0446               	iorwf	cw_por@ret+1,w
  4046  03C7  1903               	btfsc	3,2
  4047  03C8  2BCE               	goto	l2196
  4048                           
  4049                           ;CW201x.c: 321: return ret;
  4050  03C9  0846               	movf	cw_por@ret+1,w
  4051  03CA  00C1               	movwf	?_cw_por+1
  4052  03CB  0845               	movf	cw_por@ret,w
  4053  03CC  00C0               	movwf	?_cw_por
  4054  03CD  0008               	return
  4055  03CE                     l2196:	
  4056                           
  4057                           ;CW201x.c: 322: return 0;
  4058  03CE  01C0               	clrf	?_cw_por
  4059  03CF  01C1               	clrf	?_cw_por+1
  4060  03D0  0008               	return
  4061  03D1                     __end_of_cw_por:	
  4062                           
  4063                           	psect	text12
  4064  06C2                     __ptext12:	
  4065 ;; *************** function _cw_bat_init *****************
  4066 ;; Defined at:
  4067 ;;		line 577 in file "CW201x.c"
  4068 ;; Parameters:    Size  Location     Type
  4069 ;;		None
  4070 ;; Auto vars:     Size  Location     Type
  4071 ;;  ret             1   34[BANK0 ] unsigned char 
  4072 ;;  loop            1   33[BANK0 ] unsigned char 
  4073 ;; Return value:  Size  Location     Type
  4074 ;;                  1    wreg      unsigned char 
  4075 ;; Registers used:
  4076 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4077 ;; Tracked objects:
  4078 ;;		On entry : 0/0
  4079 ;;		On exit  : 0/0
  4080 ;;		Unchanged: 0/0
  4081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4082 ;;      Params:         0       0       0       0
  4083 ;;      Locals:         0       2       0       0
  4084 ;;      Temps:          0       1       0       0
  4085 ;;      Totals:         0       3       0       0
  4086 ;;Total ram usage:        3 bytes
  4087 ;; Hardware stack levels used:    1
  4088 ;; Hardware stack levels required when called:    9
  4089 ;; This function calls:
  4090 ;;		_cw_init
  4091 ;; This function is called by:
  4092 ;;		_main
  4093 ;; This function uses a non-reentrant model
  4094 ;;
  4095                           
  4096                           
  4097                           ;psect for function _cw_bat_init
  4098  06C2                     _cw_bat_init:	
  4099                           
  4100                           ;CW201x.c: 579: unsigned char ret;
  4101                           ;CW201x.c: 580: unsigned char loop = 0;
  4102                           
  4103                           ;incstack = 0
  4104                           ; Regs used in _cw_bat_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4105  06C2  0140               	movlb	0	; select bank0
  4106  06C3  01C1               	clrf	cw_bat_init@loop
  4107  06C4                     l2488:	
  4108                           ;CW201x.c: 584: while((loop++ < 200) && (ret != 0))
  4109                           
  4110                           ;CW201x.c: 583: ret = cw_init();
  4111                           
  4112                           
  4113                           ;CW201x.c: 585: {
  4114                           ;CW201x.c: 586: ret = cw_init();
  4115  06C4  2022               	fcall	_cw_init
  4116  06C5  0140               	movlb	0	; select bank0
  4117  06C6  00C0               	movwf	??_cw_bat_init
  4118  06C7  0840               	movf	??_cw_bat_init,w
  4119  06C8  00C2               	movwf	cw_bat_init@ret
  4120  06C9  0841               	movf	cw_bat_init@loop,w
  4121  06CA  0AC1               	incf	cw_bat_init@loop,f
  4122  06CB  00C0               	movwf	??_cw_bat_init
  4123  06CC  30C8               	movlw	200
  4124  06CD  0240               	subwf	??_cw_bat_init,w
  4125  06CE  1803               	skipnc
  4126  06CF  2ED3               	goto	l2494
  4127  06D0  0842               	movf	cw_bat_init@ret,w
  4128  06D1  1D03               	btfss	3,2
  4129  06D2  2EC4               	goto	l2488
  4130  06D3                     l2494:	
  4131                           
  4132                           ;CW201x.c: 587: }
  4133                           ;CW201x.c: 589: cw_bat.usb_online = 0;
  4134  06D3  01E3               	clrf	_cw_bat
  4135                           
  4136                           ;CW201x.c: 590: cw_bat.capacity = 2;
  4137  06D4  3002               	movlw	2
  4138  06D5  00E4               	movwf	_cw_bat+1
  4139  06D6  3000               	movlw	0
  4140  06D7  00E5               	movwf	_cw_bat+2
  4141                           
  4142                           ;CW201x.c: 591: cw_bat.voltage = 0;
  4143  06D8  01E6               	clrf	_cw_bat+3
  4144  06D9  01E7               	clrf	_cw_bat+4
  4145                           
  4146                           ;CW201x.c: 595: cw_bat.alt = 0;
  4147  06DA  01E8               	clrf	_cw_bat+5
  4148                           
  4149                           ;CW201x.c: 597: return ret;
  4150  06DB  0842               	movf	cw_bat_init@ret,w
  4151  06DC  0008               	return
  4152  06DD                     __end_of_cw_bat_init:	
  4153                           
  4154                           	psect	text13
  4155  0022                     __ptext13:	
  4156 ;; *************** function _cw_init *****************
  4157 ;; Defined at:
  4158 ;;		line 139 in file "CW201x.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;		None
  4161 ;; Auto vars:     Size  Location     Type
  4162 ;;  ret             2   29[BANK0 ] unsigned int 
  4163 ;;  reg_val         1   31[BANK0 ] unsigned char 
  4164 ;;  i               1   28[BANK0 ] unsigned char 
  4165 ;; Return value:  Size  Location     Type
  4166 ;;                  1    wreg      unsigned char 
  4167 ;; Registers used:
  4168 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4169 ;; Tracked objects:
  4170 ;;		On entry : 0/0
  4171 ;;		On exit  : 0/0
  4172 ;;		Unchanged: 0/0
  4173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4174 ;;      Params:         0       0       0       0
  4175 ;;      Locals:         0       4       0       0
  4176 ;;      Temps:          0       2       0       0
  4177 ;;      Totals:         0       6       0       0
  4178 ;;Total ram usage:        6 bytes
  4179 ;; Hardware stack levels used:    1
  4180 ;; Hardware stack levels required when called:    8
  4181 ;; This function calls:
  4182 ;;		_CW_Delay10ms
  4183 ;;		_cw_read
  4184 ;;		_cw_update_config_info
  4185 ;;		_cw_write
  4186 ;; This function is called by:
  4187 ;;		_cw_por
  4188 ;;		_cw_bat_init
  4189 ;; This function uses a non-reentrant model
  4190 ;;
  4191                           
  4192                           
  4193                           ;psect for function _cw_init
  4194  0022                     _cw_init:	
  4195                           
  4196                           ;CW201x.c: 141: unsigned ret;
  4197                           ;CW201x.c: 142: unsigned char i;
  4198                           ;CW201x.c: 143: unsigned char reg_val = (0x0<<6);
  4199                           
  4200                           ;incstack = 0
  4201                           ; Regs used in _cw_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4202  0022  0140               	movlb	0	; select bank0
  4203  0023  01BF               	clrf	cw_init@reg_val
  4204                           
  4205                           ;CW201x.c: 144: const unsigned char cw_bat_config_info[64] = {
  4206                           ;CW201x.c: 145: 0x14,0xA6,0x70,0x6C,0x6C,0x67,0x64,
  4207                           ;CW201x.c: 146: 0x62,0x60,0x5C,0x59,0x4E,0x50,0x42,
  4208                           ;CW201x.c: 147: 0x2E,0x26,0x25,0x24,0x27,0x2E,0x41,
  4209                           ;CW201x.c: 148: 0x5A,0x6D,0x4C,0x39,0xD7,0x06,0x66,
  4210                           ;CW201x.c: 149: 0x00,0x01,0x05,0x34,0x61,0x76,0x79,
  4211                           ;CW201x.c: 150: 0x7D,0x42,0x1E,0xA4,0x00,0x27,0x5A,
  4212                           ;CW201x.c: 151: 0x52,0x87,0x8F,0x91,0x94,0x52,0x82,
  4213                           ;CW201x.c: 152: 0x8C,0x92,0x96,0x2B,0x59,0x6E,0xCB,
  4214                           ;CW201x.c: 153: 0x2F,0x7D,0x72,0xA5,0xB5,0xC1,0x94,
  4215  0024  303F               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4216  0025  00BA               	movwf	??_cw_init
  4217  0026  083A               	movf	??_cw_init,w
  4218  0027  00B0               	movwf	cw_write@w_pdata
  4219  0028  300A               	movlw	10
  4220  0029  2514               	fcall	_cw_write
  4221  002A  0140               	movlb	0	; select bank0
  4222  002B  0831               	movf	?_cw_write+1,w
  4223  002C  00BE               	movwf	cw_init@ret+1
  4224  002D  0830               	movf	?_cw_write,w
  4225  002E  00BD               	movwf	cw_init@ret
  4226                           
  4227                           ;CW201x.c: 159: if(ret)
  4228  002F  083D               	movf	cw_init@ret,w
  4229  0030  043E               	iorwf	cw_init@ret+1,w
  4230  0031  1903               	btfsc	3,2
  4231  0032  2835               	goto	l2046
  4232                           
  4233                           ;CW201x.c: 160: {
  4234                           ;CW201x.c: 161: return 1;
  4235  0033  3001               	movlw	1
  4236  0034  0008               	return
  4237  0035                     l2046:	
  4238                           
  4239                           ;CW201x.c: 162: }
  4240                           ;CW201x.c: 165: ret = cw_read(0x8, &reg_val);
  4241  0035  303F               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4242  0036  00BA               	movwf	??_cw_init
  4243  0037  083A               	movf	??_cw_init,w
  4244  0038  00B0               	movwf	cw_read@r_pdata
  4245  0039  3008               	movlw	8
  4246  003A  24DB               	fcall	_cw_read
  4247  003B  0140               	movlb	0	; select bank0
  4248  003C  0831               	movf	?_cw_read+1,w
  4249  003D  00BE               	movwf	cw_init@ret+1
  4250  003E  0830               	movf	?_cw_read,w
  4251  003F  00BD               	movwf	cw_init@ret
  4252                           
  4253                           ;CW201x.c: 166: if(ret)
  4254  0040  083D               	movf	cw_init@ret,w
  4255  0041  043E               	iorwf	cw_init@ret+1,w
  4256  0042  1903               	btfsc	3,2
  4257  0043  2846               	goto	l2054
  4258                           
  4259                           ;CW201x.c: 167: {
  4260                           ;CW201x.c: 168: return 1;
  4261  0044  3001               	movlw	1
  4262  0045  0008               	return
  4263  0046                     l2054:	
  4264                           
  4265                           ;CW201x.c: 169: }
  4266                           ;CW201x.c: 170: if((reg_val & 0xf8) != (0x0<<3))
  4267  0046  083F               	movf	cw_init@reg_val,w
  4268  0047  39F8               	andlw	248
  4269  0048  1903               	btfsc	3,2
  4270  0049  285F               	goto	l2066
  4271                           
  4272                           ;CW201x.c: 174: reg_val |= (0x0<<3);
  4273  004A  3007               	movlw	7
  4274  004B  00BA               	movwf	??_cw_init
  4275  004C  083A               	movf	??_cw_init,w
  4276  004D  05BF               	andwf	cw_init@reg_val,f
  4277                           
  4278                           ;CW201x.c: 175: ret = cw_write(0x8, &reg_val);
  4279  004E  303F               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4280  004F  00BA               	movwf	??_cw_init
  4281  0050  083A               	movf	??_cw_init,w
  4282  0051  00B0               	movwf	cw_write@w_pdata
  4283  0052  3008               	movlw	8
  4284  0053  2514               	fcall	_cw_write
  4285  0054  0140               	movlb	0	; select bank0
  4286  0055  0831               	movf	?_cw_write+1,w
  4287  0056  00BE               	movwf	cw_init@ret+1
  4288  0057  0830               	movf	?_cw_write,w
  4289  0058  00BD               	movwf	cw_init@ret
  4290                           
  4291                           ;CW201x.c: 176: if(ret)
  4292  0059  083D               	movf	cw_init@ret,w
  4293  005A  043E               	iorwf	cw_init@ret+1,w
  4294  005B  1903               	btfsc	3,2
  4295  005C  285F               	goto	l2066
  4296                           
  4297                           ;CW201x.c: 177: {
  4298                           ;CW201x.c: 178: return 1;
  4299  005D  3001               	movlw	1
  4300  005E  0008               	return
  4301  005F                     l2066:	
  4302                           
  4303                           ;CW201x.c: 179: }
  4304                           ;CW201x.c: 180: }
  4305                           ;CW201x.c: 183: ret = cw_read(0x8, &reg_val);
  4306  005F  303F               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4307  0060  00BA               	movwf	??_cw_init
  4308  0061  083A               	movf	??_cw_init,w
  4309  0062  00B0               	movwf	cw_read@r_pdata
  4310  0063  3008               	movlw	8
  4311  0064  24DB               	fcall	_cw_read
  4312  0065  0140               	movlb	0	; select bank0
  4313  0066  0831               	movf	?_cw_read+1,w
  4314  0067  00BE               	movwf	cw_init@ret+1
  4315  0068  0830               	movf	?_cw_read,w
  4316  0069  00BD               	movwf	cw_init@ret
  4317                           
  4318                           ;CW201x.c: 184: if(ret)
  4319  006A  083D               	movf	cw_init@ret,w
  4320  006B  043E               	iorwf	cw_init@ret+1,w
  4321  006C  1903               	btfsc	3,2
  4322  006D  2870               	goto	l276
  4323                           
  4324                           ;CW201x.c: 185: {
  4325                           ;CW201x.c: 186: return 1;
  4326  006E  3001               	movlw	1
  4327  006F  0008               	return
  4328  0070                     l276:	
  4329                           
  4330                           ;CW201x.c: 187: }
  4331                           ;CW201x.c: 188: if(!(reg_val & (0x1<<1)))
  4332  0070  18BF               	btfsc	cw_init@reg_val,1
  4333  0071  2880               	goto	l2082
  4334                           
  4335                           ;CW201x.c: 189: {
  4336                           ;CW201x.c: 191: ret = cw_update_config_info();
  4337  0072  20FB               	fcall	_cw_update_config_info
  4338  0073  0140               	movlb	0	; select bank0
  4339  0074  00BA               	movwf	??_cw_init
  4340  0075  01BB               	clrf	??_cw_init+1
  4341  0076  083A               	movf	??_cw_init,w
  4342  0077  00BD               	movwf	cw_init@ret
  4343  0078  083B               	movf	??_cw_init+1,w
  4344  0079  00BE               	movwf	cw_init@ret+1
  4345                           
  4346                           ;CW201x.c: 192: if(ret)
  4347  007A  083D               	movf	cw_init@ret,w
  4348  007B  043E               	iorwf	cw_init@ret+1,w
  4349  007C  1903               	btfsc	3,2
  4350  007D  28BC               	goto	l2114
  4351                           
  4352                           ;CW201x.c: 193: {
  4353                           ;CW201x.c: 194: return ret;
  4354  007E  083D               	movf	cw_init@ret,w
  4355  007F  0008               	return
  4356  0080                     l2082:	
  4357                           ;CW201x.c: 195: }
  4358                           ;CW201x.c: 196: }
  4359                           
  4360                           
  4361                           ;CW201x.c: 197: else
  4362                           ;CW201x.c: 198: {
  4363                           ;CW201x.c: 199: for(i = 0; i < 64; i++)
  4364  0080  01BC               	clrf	cw_init@i
  4365  0081  3040               	movlw	64
  4366  0082  023C               	subwf	cw_init@i,w
  4367  0083  1803               	btfsc	3,0
  4368  0084  28AA               	goto	l2104
  4369  0085                     l2088:	
  4370                           
  4371                           ;CW201x.c: 200: {
  4372                           ;CW201x.c: 201: ret = cw_read(0x10 +i, &reg_val);
  4373  0085  303F               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4374  0086  00BA               	movwf	??_cw_init
  4375  0087  083A               	movf	??_cw_init,w
  4376  0088  00B0               	movwf	cw_read@r_pdata
  4377  0089  083C               	movf	cw_init@i,w
  4378  008A  3E10               	addlw	16
  4379  008B  24DB               	fcall	_cw_read
  4380  008C  0140               	movlb	0	; select bank0
  4381  008D  0831               	movf	?_cw_read+1,w
  4382  008E  00BE               	movwf	cw_init@ret+1
  4383  008F  0830               	movf	?_cw_read,w
  4384  0090  00BD               	movwf	cw_init@ret
  4385                           
  4386                           ;CW201x.c: 202: if(ret)
  4387  0091  083D               	movf	cw_init@ret,w
  4388  0092  043E               	iorwf	cw_init@ret+1,w
  4389  0093  1903               	btfsc	3,2
  4390  0094  2897               	goto	l2096
  4391                           
  4392                           ;CW201x.c: 203: {
  4393                           ;CW201x.c: 204: return 1;
  4394  0095  3001               	movlw	1
  4395  0096  0008               	return
  4396  0097                     l2096:	
  4397                           
  4398                           ;CW201x.c: 205: }
  4399                           ;CW201x.c: 206: if(cw_bat_config_info[i] != reg_val)
  4400  0097  083C               	movf	cw_init@i,w
  4401  0098  3E5B               	addlw	low (cw_init@cw_bat_config_info| (0+32768))
  4402  0099  0084               	movwf	4
  4403  009A  3084               	movlw	high (cw_init@cw_bat_config_info| (0+32768))
  4404  009B  1803               	skipnc
  4405  009C  3E01               	addlw	1
  4406  009D  0085               	movwf	5
  4407  009E  0800               	movf	0,w	;code access
  4408  009F  063F               	xorwf	cw_init@reg_val,w
  4409  00A0  1D03               	btfss	3,2
  4410  00A1  28AA               	goto	l2104
  4411                           
  4412                           ;CW201x.c: 207: {
  4413                           ;CW201x.c: 208: break;
  4414  00A2  3001               	movlw	1
  4415  00A3  00BA               	movwf	??_cw_init
  4416  00A4  083A               	movf	??_cw_init,w
  4417  00A5  07BC               	addwf	cw_init@i,f
  4418  00A6  3040               	movlw	64
  4419  00A7  023C               	subwf	cw_init@i,w
  4420  00A8  1C03               	skipc
  4421  00A9  2885               	goto	l2088
  4422  00AA                     l2104:	
  4423                           
  4424                           ;CW201x.c: 209: }
  4425                           ;CW201x.c: 210: }
  4426                           ;CW201x.c: 211: if(i != 64)
  4427  00AA  3040               	movlw	64
  4428  00AB  063C               	xorwf	cw_init@i,w
  4429  00AC  1903               	btfsc	3,2
  4430  00AD  28BC               	goto	l2114
  4431                           
  4432                           ;CW201x.c: 212: {
  4433                           ;CW201x.c: 214: ret = cw_update_config_info();
  4434  00AE  20FB               	fcall	_cw_update_config_info
  4435  00AF  0140               	movlb	0	; select bank0
  4436  00B0  00BA               	movwf	??_cw_init
  4437  00B1  01BB               	clrf	??_cw_init+1
  4438  00B2  083A               	movf	??_cw_init,w
  4439  00B3  00BD               	movwf	cw_init@ret
  4440  00B4  083B               	movf	??_cw_init+1,w
  4441  00B5  00BE               	movwf	cw_init@ret+1
  4442                           
  4443                           ;CW201x.c: 215: if(ret)
  4444  00B6  083D               	movf	cw_init@ret,w
  4445  00B7  043E               	iorwf	cw_init@ret+1,w
  4446  00B8  1903               	btfsc	3,2
  4447  00B9  28BC               	goto	l2114
  4448                           
  4449                           ;CW201x.c: 216: {
  4450                           ;CW201x.c: 217: return ret;
  4451  00BA  083D               	movf	cw_init@ret,w
  4452  00BB  0008               	return
  4453  00BC                     l2114:	
  4454                           
  4455                           ;CW201x.c: 218: }
  4456                           ;CW201x.c: 219: }
  4457                           ;CW201x.c: 220: }
  4458                           ;CW201x.c: 222: for (i = 0; i < 30; i++) {
  4459  00BC  01BC               	clrf	cw_init@i
  4460  00BD  301E               	movlw	30
  4461  00BE  023C               	subwf	cw_init@i,w
  4462  00BF  1803               	btfsc	3,0
  4463  00C0  28E4               	goto	l2140
  4464  00C1                     l2120:	
  4465                           
  4466                           ;CW201x.c: 223: CW_Delay10ms(10);
  4467  00C1  300A               	movlw	10
  4468  00C2  00A0               	movwf	CW_Delay10ms@c
  4469  00C3  3000               	movlw	0
  4470  00C4  00A1               	movwf	CW_Delay10ms@c+1
  4471  00C5  25FC               	fcall	_CW_Delay10ms
  4472                           
  4473                           ;CW201x.c: 224: ret = cw_read(0x4, &reg_val);
  4474  00C6  303F               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4475  00C7  0140               	movlb	0	; select bank0
  4476  00C8  00BA               	movwf	??_cw_init
  4477  00C9  083A               	movf	??_cw_init,w
  4478  00CA  00B0               	movwf	cw_read@r_pdata
  4479  00CB  3004               	movlw	4
  4480  00CC  24DB               	fcall	_cw_read
  4481  00CD  0140               	movlb	0	; select bank0
  4482  00CE  0831               	movf	?_cw_read+1,w
  4483  00CF  00BE               	movwf	cw_init@ret+1
  4484  00D0  0830               	movf	?_cw_read,w
  4485  00D1  00BD               	movwf	cw_init@ret
  4486                           
  4487                           ;CW201x.c: 225: if (ret)
  4488  00D2  083D               	movf	cw_init@ret,w
  4489  00D3  043E               	iorwf	cw_init@ret+1,w
  4490  00D4  1903               	btfsc	3,2
  4491  00D5  28D8               	goto	l2132
  4492                           
  4493                           ;CW201x.c: 226: return 1;
  4494  00D6  3001               	movlw	1
  4495  00D7  0008               	return
  4496  00D8                     l2132:	
  4497                           
  4498                           ;CW201x.c: 227: else if (reg_val <= 100)
  4499  00D8  3065               	movlw	101
  4500  00D9  023F               	subwf	cw_init@reg_val,w
  4501  00DA  1C03               	btfss	3,0
  4502  00DB  28E4               	goto	l2140
  4503                           
  4504                           ;CW201x.c: 228: break;
  4505  00DC  3001               	movlw	1
  4506  00DD  00BA               	movwf	??_cw_init
  4507  00DE  083A               	movf	??_cw_init,w
  4508  00DF  07BC               	addwf	cw_init@i,f
  4509  00E0  301E               	movlw	30
  4510  00E1  023C               	subwf	cw_init@i,w
  4511  00E2  1C03               	skipc
  4512  00E3  28C1               	goto	l2120
  4513  00E4                     l2140:	
  4514                           
  4515                           ;CW201x.c: 229: }
  4516                           ;CW201x.c: 231: if (i >=30){
  4517  00E4  301E               	movlw	30
  4518  00E5  023C               	subwf	cw_init@i,w
  4519  00E6  1C03               	skipc
  4520  00E7  28F9               	goto	l2150
  4521                           
  4522                           ;CW201x.c: 232: reg_val = (0x3<<6);
  4523  00E8  30C0               	movlw	192
  4524  00E9  00BA               	movwf	??_cw_init
  4525  00EA  083A               	movf	??_cw_init,w
  4526  00EB  00BF               	movwf	cw_init@reg_val
  4527                           
  4528                           ;CW201x.c: 233: ret = cw_write(0xA, &reg_val);
  4529  00EC  303F               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4530  00ED  00BA               	movwf	??_cw_init
  4531  00EE  083A               	movf	??_cw_init,w
  4532  00EF  00B0               	movwf	cw_write@w_pdata
  4533  00F0  300A               	movlw	10
  4534  00F1  2514               	fcall	_cw_write
  4535  00F2  0140               	movlb	0	; select bank0
  4536  00F3  0831               	movf	?_cw_write+1,w
  4537  00F4  00BE               	movwf	cw_init@ret+1
  4538  00F5  0830               	movf	?_cw_write,w
  4539  00F6  00BD               	movwf	cw_init@ret
  4540                           
  4541                           ;CW201x.c: 235: return 4;
  4542  00F7  3004               	movlw	4
  4543  00F8  0008               	return
  4544  00F9                     l2150:	
  4545                           
  4546                           ;CW201x.c: 236: }
  4547                           ;CW201x.c: 237: return 0;
  4548  00F9  3000               	movlw	0
  4549  00FA  0008               	return
  4550  00FB                     __end_of_cw_init:	
  4551                           
  4552                           	psect	text14
  4553  00FB                     __ptext14:	
  4554 ;; *************** function _cw_update_config_info *****************
  4555 ;; Defined at:
  4556 ;;		line 53 in file "CW201x.c"
  4557 ;; Parameters:    Size  Location     Type
  4558 ;;		None
  4559 ;; Auto vars:     Size  Location     Type
  4560 ;;  ret             2   22[BANK0 ] int 
  4561 ;;  reg_val         1   25[BANK0 ] unsigned char 
  4562 ;;  i               1   24[BANK0 ] unsigned char 
  4563 ;;  reset_val       1   21[BANK0 ] unsigned char 
  4564 ;; Return value:  Size  Location     Type
  4565 ;;                  1    wreg      unsigned char 
  4566 ;; Registers used:
  4567 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4568 ;; Tracked objects:
  4569 ;;		On entry : 0/0
  4570 ;;		On exit  : 0/0
  4571 ;;		Unchanged: 0/0
  4572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4573 ;;      Params:         0       0       0       0
  4574 ;;      Locals:         0       5       0       0
  4575 ;;      Temps:          0       1       0       0
  4576 ;;      Totals:         0       6       0       0
  4577 ;;Total ram usage:        6 bytes
  4578 ;; Hardware stack levels used:    1
  4579 ;; Hardware stack levels required when called:    7
  4580 ;; This function calls:
  4581 ;;		_CW_Delay100us
  4582 ;;		_cw_read
  4583 ;;		_cw_write
  4584 ;; This function is called by:
  4585 ;;		_cw_init
  4586 ;; This function uses a non-reentrant model
  4587 ;;
  4588                           
  4589                           
  4590                           ;psect for function _cw_update_config_info
  4591  00FB                     _cw_update_config_info:	
  4592                           
  4593                           ;CW201x.c: 55: int ret = 0;
  4594                           
  4595                           ;incstack = 0
  4596                           ; Regs used in _cw_update_config_info: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4597  00FB  0140               	movlb	0	; select bank0
  4598  00FC  01B6               	clrf	cw_update_config_info@ret
  4599  00FD  01B7               	clrf	cw_update_config_info@ret+1
  4600                           
  4601                           ;CW201x.c: 56: unsigned char i;
  4602                           ;CW201x.c: 57: unsigned char reset_val;
  4603                           ;CW201x.c: 58: unsigned char reg_val;
  4604                           ;CW201x.c: 59: const unsigned char cw_bat_config_info[64] = {
  4605                           ;CW201x.c: 60: 0x14,0xA6,0x70,0x6C,0x6C,0x67,0x64,
  4606                           ;CW201x.c: 61: 0x62,0x60,0x5C,0x59,0x4E,0x50,0x42,
  4607                           ;CW201x.c: 62: 0x2E,0x26,0x25,0x24,0x27,0x2E,0x41,
  4608                           ;CW201x.c: 63: 0x5A,0x6D,0x4C,0x39,0xD7,0x06,0x66,
  4609                           ;CW201x.c: 64: 0x00,0x01,0x05,0x34,0x61,0x76,0x79,
  4610                           ;CW201x.c: 65: 0x7D,0x42,0x1E,0xA4,0x00,0x27,0x5A,
  4611                           ;CW201x.c: 66: 0x52,0x87,0x8F,0x91,0x94,0x52,0x82,
  4612  00FE  3039               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4613  00FF  00B4               	movwf	??_cw_update_config_info
  4614  0100  0834               	movf	??_cw_update_config_info,w
  4615  0101  00B0               	movwf	cw_read@r_pdata
  4616  0102  300A               	movlw	10
  4617  0103  24DB               	fcall	_cw_read
  4618  0104  0140               	movlb	0	; select bank0
  4619  0105  0831               	movf	?_cw_read+1,w
  4620  0106  00B7               	movwf	cw_update_config_info@ret+1
  4621  0107  0830               	movf	?_cw_read,w
  4622  0108  00B6               	movwf	cw_update_config_info@ret
  4623                           
  4624                           ;CW201x.c: 74: if(ret)
  4625  0109  0836               	movf	cw_update_config_info@ret,w
  4626  010A  0437               	iorwf	cw_update_config_info@ret+1,w
  4627  010B  1903               	btfsc	3,2
  4628  010C  290F               	goto	l1942
  4629                           
  4630                           ;CW201x.c: 75: {
  4631                           ;CW201x.c: 76: return 1;
  4632  010D  3001               	movlw	1
  4633  010E  0008               	return
  4634  010F                     l1942:	
  4635                           
  4636                           ;CW201x.c: 77: }
  4637                           ;CW201x.c: 78: if((reg_val & (0x3<<6)) == (0x3<<6))
  4638  010F  30C0               	movlw	192
  4639  0110  0539               	andwf	cw_update_config_info@reg_val,w
  4640  0111  00B4               	movwf	??_cw_update_config_info
  4641  0112  30C0               	movlw	192
  4642  0113  0634               	xorwf	??_cw_update_config_info,w
  4643  0114  1D03               	btfss	3,2
  4644  0115  2918               	goto	l1948
  4645                           
  4646                           ;CW201x.c: 79: {
  4647                           ;CW201x.c: 80: return 2;
  4648  0116  3002               	movlw	2
  4649  0117  0008               	return
  4650  0118                     l1948:	
  4651                           
  4652                           ;CW201x.c: 81: }
  4653                           ;CW201x.c: 83: for(i = 0; i < 64; i++)
  4654  0118  01B8               	clrf	cw_update_config_info@i
  4655  0119  3040               	movlw	64
  4656  011A  0238               	subwf	cw_update_config_info@i,w
  4657  011B  1803               	btfsc	3,0
  4658  011C  2942               	goto	l1968
  4659  011D                     l1954:	
  4660                           
  4661                           ;CW201x.c: 84: {
  4662                           ;CW201x.c: 85: reg_val = cw_bat_config_info[i];
  4663  011D  0838               	movf	cw_update_config_info@i,w
  4664  011E  3E9B               	addlw	low (cw_update_config_info@cw_bat_config_info| (0+32768))
  4665  011F  0084               	movwf	4
  4666  0120  3084               	movlw	high (cw_update_config_info@cw_bat_config_info| (0+32768))
  4667  0121  1803               	skipnc
  4668  0122  3E01               	addlw	1
  4669  0123  0085               	movwf	5
  4670  0124  0800               	movf	0,w	;code access
  4671  0125  00B4               	movwf	??_cw_update_config_info
  4672  0126  0834               	movf	??_cw_update_config_info,w
  4673  0127  00B9               	movwf	cw_update_config_info@reg_val
  4674                           
  4675                           ;CW201x.c: 86: ret = cw_write(0x10+i, &reg_val);
  4676  0128  3039               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4677  0129  00B4               	movwf	??_cw_update_config_info
  4678  012A  0834               	movf	??_cw_update_config_info,w
  4679  012B  00B0               	movwf	cw_write@w_pdata
  4680  012C  0838               	movf	cw_update_config_info@i,w
  4681  012D  3E10               	addlw	16
  4682  012E  2514               	fcall	_cw_write
  4683  012F  0140               	movlb	0	; select bank0
  4684  0130  0831               	movf	?_cw_write+1,w
  4685  0131  00B7               	movwf	cw_update_config_info@ret+1
  4686  0132  0830               	movf	?_cw_write,w
  4687  0133  00B6               	movwf	cw_update_config_info@ret
  4688                           
  4689                           ;CW201x.c: 87: if(ret)
  4690  0134  0836               	movf	cw_update_config_info@ret,w
  4691  0135  0437               	iorwf	cw_update_config_info@ret+1,w
  4692  0136  1903               	btfsc	3,2
  4693  0137  293A               	goto	l1964
  4694                           
  4695                           ;CW201x.c: 88: {
  4696                           ;CW201x.c: 89: return 1;
  4697  0138  3001               	movlw	1
  4698  0139  0008               	return
  4699  013A                     l1964:	
  4700  013A  3001               	movlw	1
  4701  013B  00B4               	movwf	??_cw_update_config_info
  4702  013C  0834               	movf	??_cw_update_config_info,w
  4703  013D  07B8               	addwf	cw_update_config_info@i,f
  4704  013E  3040               	movlw	64
  4705  013F  0238               	subwf	cw_update_config_info@i,w
  4706  0140  1C03               	skipc
  4707  0141  291D               	goto	l1954
  4708  0142                     l1968:	
  4709                           
  4710                           ;CW201x.c: 90: }
  4711                           ;CW201x.c: 91: }
  4712                           ;CW201x.c: 94: for(i = 0; i < 64; i++)
  4713  0142  01B8               	clrf	cw_update_config_info@i
  4714  0143  3040               	movlw	64
  4715  0144  0238               	subwf	cw_update_config_info@i,w
  4716  0145  1803               	btfsc	3,0
  4717  0146  296E               	goto	l1992
  4718  0147                     l1974:	
  4719                           
  4720                           ;CW201x.c: 95: {
  4721                           ;CW201x.c: 96: ret = cw_read(0x10+i, &reg_val);
  4722  0147  3039               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4723  0148  00B4               	movwf	??_cw_update_config_info
  4724  0149  0834               	movf	??_cw_update_config_info,w
  4725  014A  00B0               	movwf	cw_read@r_pdata
  4726  014B  0838               	movf	cw_update_config_info@i,w
  4727  014C  3E10               	addlw	16
  4728  014D  24DB               	fcall	_cw_read
  4729  014E  0140               	movlb	0	; select bank0
  4730  014F  0831               	movf	?_cw_read+1,w
  4731  0150  00B7               	movwf	cw_update_config_info@ret+1
  4732  0151  0830               	movf	?_cw_read,w
  4733  0152  00B6               	movwf	cw_update_config_info@ret
  4734                           
  4735                           ;CW201x.c: 97: if(ret)
  4736  0153  0836               	movf	cw_update_config_info@ret,w
  4737  0154  0437               	iorwf	cw_update_config_info@ret+1,w
  4738  0155  1903               	btfsc	3,2
  4739  0156  2959               	goto	l1982
  4740                           
  4741                           ;CW201x.c: 98: {
  4742                           ;CW201x.c: 99: return 1;
  4743  0157  3001               	movlw	1
  4744  0158  0008               	return
  4745  0159                     l1982:	
  4746                           
  4747                           ;CW201x.c: 100: }
  4748                           ;CW201x.c: 101: if(reg_val != cw_bat_config_info[i])
  4749  0159  0838               	movf	cw_update_config_info@i,w
  4750  015A  3E9B               	addlw	low (cw_update_config_info@cw_bat_config_info| (0+32768))
  4751  015B  0084               	movwf	4
  4752  015C  3084               	movlw	high (cw_update_config_info@cw_bat_config_info| (0+32768))
  4753  015D  1803               	skipnc
  4754  015E  3E01               	addlw	1
  4755  015F  0085               	movwf	5
  4756  0160  0800               	movf	0,w	;code access
  4757  0161  0639               	xorwf	cw_update_config_info@reg_val,w
  4758  0162  1903               	skipnz
  4759  0163  2966               	goto	l1988
  4760                           
  4761                           ;CW201x.c: 102: {
  4762                           ;CW201x.c: 103: return 3;
  4763  0164  3003               	movlw	3
  4764  0165  0008               	return
  4765  0166                     l1988:	
  4766  0166  3001               	movlw	1
  4767  0167  00B4               	movwf	??_cw_update_config_info
  4768  0168  0834               	movf	??_cw_update_config_info,w
  4769  0169  07B8               	addwf	cw_update_config_info@i,f
  4770  016A  3040               	movlw	64
  4771  016B  0238               	subwf	cw_update_config_info@i,w
  4772  016C  1C03               	skipc
  4773  016D  2947               	goto	l1974
  4774  016E                     l1992:	
  4775                           
  4776                           ;CW201x.c: 104: }
  4777                           ;CW201x.c: 105: }
  4778                           ;CW201x.c: 107: ret = cw_read(0x8, &reg_val);
  4779  016E  3039               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4780  016F  00B4               	movwf	??_cw_update_config_info
  4781  0170  0834               	movf	??_cw_update_config_info,w
  4782  0171  00B0               	movwf	cw_read@r_pdata
  4783  0172  3008               	movlw	8
  4784  0173  24DB               	fcall	_cw_read
  4785  0174  0140               	movlb	0	; select bank0
  4786  0175  0831               	movf	?_cw_read+1,w
  4787  0176  00B7               	movwf	cw_update_config_info@ret+1
  4788  0177  0830               	movf	?_cw_read,w
  4789  0178  00B6               	movwf	cw_update_config_info@ret
  4790                           
  4791                           ;CW201x.c: 108: if(ret)
  4792  0179  0836               	movf	cw_update_config_info@ret,w
  4793  017A  0437               	iorwf	cw_update_config_info@ret+1,w
  4794  017B  1903               	btfsc	3,2
  4795  017C  297F               	goto	l263
  4796                           
  4797                           ;CW201x.c: 109: {
  4798                           ;CW201x.c: 110: return 1;
  4799  017D  3001               	movlw	1
  4800  017E  0008               	return
  4801  017F                     l263:	
  4802                           
  4803                           ;CW201x.c: 111: }
  4804                           ;CW201x.c: 112: reg_val |= (0x1<<1);
  4805  017F  14B9               	bsf	cw_update_config_info@reg_val,1
  4806                           
  4807                           ;CW201x.c: 114: reg_val |= (0x0<<3);
  4808  0180  3007               	movlw	7
  4809  0181  00B4               	movwf	??_cw_update_config_info
  4810  0182  0834               	movf	??_cw_update_config_info,w
  4811  0183  05B9               	andwf	cw_update_config_info@reg_val,f
  4812                           
  4813                           ;CW201x.c: 115: ret = cw_write(0x8, &reg_val);
  4814  0184  3039               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4815  0185  00B4               	movwf	??_cw_update_config_info
  4816  0186  0834               	movf	??_cw_update_config_info,w
  4817  0187  00B0               	movwf	cw_write@w_pdata
  4818  0188  3008               	movlw	8
  4819  0189  2514               	fcall	_cw_write
  4820  018A  0140               	movlb	0	; select bank0
  4821  018B  0831               	movf	?_cw_write+1,w
  4822  018C  00B7               	movwf	cw_update_config_info@ret+1
  4823  018D  0830               	movf	?_cw_write,w
  4824  018E  00B6               	movwf	cw_update_config_info@ret
  4825                           
  4826                           ;CW201x.c: 116: if(ret)
  4827  018F  0836               	movf	cw_update_config_info@ret,w
  4828  0190  0437               	iorwf	cw_update_config_info@ret+1,w
  4829  0191  1903               	btfsc	3,2
  4830  0192  2995               	goto	l2010
  4831                           
  4832                           ;CW201x.c: 117: {
  4833                           ;CW201x.c: 118: return 1;
  4834  0193  3001               	movlw	1
  4835  0194  0008               	return
  4836  0195                     l2010:	
  4837                           
  4838                           ;CW201x.c: 119: }
  4839                           ;CW201x.c: 121: reset_val = (0x0<<6);
  4840  0195  01B5               	clrf	cw_update_config_info@reset_val
  4841                           
  4842                           ;CW201x.c: 122: reg_val = (0xf<<0);
  4843  0196  300F               	movlw	15
  4844  0197  00B4               	movwf	??_cw_update_config_info
  4845  0198  0834               	movf	??_cw_update_config_info,w
  4846  0199  00B9               	movwf	cw_update_config_info@reg_val
  4847                           
  4848                           ;CW201x.c: 123: ret = cw_write(0xA, &reg_val);
  4849  019A  3039               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4850  019B  00B4               	movwf	??_cw_update_config_info
  4851  019C  0834               	movf	??_cw_update_config_info,w
  4852  019D  00B0               	movwf	cw_write@w_pdata
  4853  019E  300A               	movlw	10
  4854  019F  2514               	fcall	_cw_write
  4855  01A0  0140               	movlb	0	; select bank0
  4856  01A1  0831               	movf	?_cw_write+1,w
  4857  01A2  00B7               	movwf	cw_update_config_info@ret+1
  4858  01A3  0830               	movf	?_cw_write,w
  4859  01A4  00B6               	movwf	cw_update_config_info@ret
  4860                           
  4861                           ;CW201x.c: 124: if(ret)
  4862  01A5  0836               	movf	cw_update_config_info@ret,w
  4863  01A6  0437               	iorwf	cw_update_config_info@ret+1,w
  4864  01A7  1903               	btfsc	3,2
  4865  01A8  29AB               	goto	l2022
  4866                           
  4867                           ;CW201x.c: 125: {
  4868                           ;CW201x.c: 126: return 1;
  4869  01A9  3001               	movlw	1
  4870  01AA  0008               	return
  4871  01AB                     l2022:	
  4872                           
  4873                           ;CW201x.c: 127: }
  4874                           ;CW201x.c: 128: CW_Delay100us();
  4875  01AB  2660               	fcall	_CW_Delay100us
  4876                           
  4877                           ;CW201x.c: 129: ret = cw_write(0xA, &reset_val);
  4878  01AC  3035               	movlw	(low (cw_update_config_info@reset_val| 0))& (0+255)
  4879  01AD  0140               	movlb	0	; select bank0
  4880  01AE  00B4               	movwf	??_cw_update_config_info
  4881  01AF  0834               	movf	??_cw_update_config_info,w
  4882  01B0  00B0               	movwf	cw_write@w_pdata
  4883  01B1  300A               	movlw	10
  4884  01B2  2514               	fcall	_cw_write
  4885  01B3  0140               	movlb	0	; select bank0
  4886  01B4  0831               	movf	?_cw_write+1,w
  4887  01B5  00B7               	movwf	cw_update_config_info@ret+1
  4888  01B6  0830               	movf	?_cw_write,w
  4889  01B7  00B6               	movwf	cw_update_config_info@ret
  4890                           
  4891                           ;CW201x.c: 130: if(ret)
  4892  01B8  0836               	movf	cw_update_config_info@ret,w
  4893  01B9  0437               	iorwf	cw_update_config_info@ret+1,w
  4894  01BA  1903               	btfsc	3,2
  4895  01BB  29BE               	goto	l2032
  4896                           
  4897                           ;CW201x.c: 131: {
  4898                           ;CW201x.c: 132: return 1;
  4899  01BC  3001               	movlw	1
  4900  01BD  0008               	return
  4901  01BE                     l2032:	
  4902                           
  4903                           ;CW201x.c: 133: }
  4904                           ;CW201x.c: 134: return 0;
  4905  01BE  3000               	movlw	0
  4906  01BF  0008               	return
  4907  01C0                     __end_of_cw_update_config_info:	
  4908                           
  4909                           	psect	text15
  4910  0514                     __ptext15:	
  4911 ;; *************** function _cw_write *****************
  4912 ;; Defined at:
  4913 ;;		line 222 in file "iic.c"
  4914 ;; Parameters:    Size  Location     Type
  4915 ;;  point_reg       1    wreg     unsigned char 
  4916 ;;  w_pdata         1   16[BANK0 ] PTR unsigned char 
  4917 ;;		 -> cw_por@reset_val(1), cw_init@reg_val(1), cw_update_config_info@reset_val(1), cw_update_config_info@reg_val(1), 
  4918 ;; Auto vars:     Size  Location     Type
  4919 ;;  point_reg       1   19[BANK0 ] unsigned char 
  4920 ;; Return value:  Size  Location     Type
  4921 ;;                  2   16[BANK0 ] int 
  4922 ;; Registers used:
  4923 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4924 ;; Tracked objects:
  4925 ;;		On entry : 0/0
  4926 ;;		On exit  : 0/0
  4927 ;;		Unchanged: 0/0
  4928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4929 ;;      Params:         0       3       0       0
  4930 ;;      Locals:         0       1       0       0
  4931 ;;      Temps:          0       0       0       0
  4932 ;;      Totals:         0       4       0       0
  4933 ;;Total ram usage:        4 bytes
  4934 ;; Hardware stack levels used:    1
  4935 ;; Hardware stack levels required when called:    6
  4936 ;; This function calls:
  4937 ;;		_start
  4938 ;;		_stop
  4939 ;;		_wait_r_ack
  4940 ;;		_write_byte
  4941 ;; This function is called by:
  4942 ;;		_cw_update_config_info
  4943 ;;		_cw_init
  4944 ;;		_cw_por
  4945 ;; This function uses a non-reentrant model
  4946 ;;
  4947                           
  4948                           
  4949                           ;psect for function _cw_write
  4950  0514                     _cw_write:	
  4951                           
  4952                           ;incstack = 0
  4953                           ; Regs used in _cw_write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4954                           ;cw_write@point_reg stored from wreg
  4955  0514  0140               	movlb	0	; select bank0
  4956  0515  00B3               	movwf	cw_write@point_reg
  4957                           
  4958                           ;iic.c: 224: start();
  4959  0516  2740               	fcall	_start
  4960                           
  4961                           ;iic.c: 225: write_byte(0xc4);
  4962  0517  30C4               	movlw	196
  4963  0518  26A2               	fcall	_write_byte
  4964                           
  4965                           ;iic.c: 226: if(wait_r_ack())
  4966  0519  2546               	fcall	_wait_r_ack
  4967  051A  0140               	movlb	0	; select bank0
  4968  051B  082A               	movf	?_wait_r_ack,w
  4969  051C  042B               	iorwf	?_wait_r_ack+1,w
  4970  051D  1903               	btfsc	3,2
  4971  051E  2D24               	goto	l1888
  4972                           
  4973                           ;iic.c: 227: {
  4974                           ;iic.c: 228: return 1;
  4975  051F  3001               	movlw	1
  4976  0520  00B0               	movwf	?_cw_write
  4977  0521  3000               	movlw	0
  4978  0522  00B1               	movwf	?_cw_write+1
  4979  0523  0008               	return
  4980  0524                     l1888:	
  4981                           
  4982                           ;iic.c: 229: }
  4983                           ;iic.c: 230: write_byte(point_reg);
  4984  0524  0833               	movf	cw_write@point_reg,w
  4985  0525  26A2               	fcall	_write_byte
  4986                           
  4987                           ;iic.c: 231: if(wait_r_ack())
  4988  0526  2546               	fcall	_wait_r_ack
  4989  0527  0140               	movlb	0	; select bank0
  4990  0528  082A               	movf	?_wait_r_ack,w
  4991  0529  042B               	iorwf	?_wait_r_ack+1,w
  4992  052A  1903               	btfsc	3,2
  4993  052B  2D31               	goto	l1894
  4994                           
  4995                           ;iic.c: 232: {
  4996                           ;iic.c: 233: return 1;
  4997  052C  3001               	movlw	1
  4998  052D  00B0               	movwf	?_cw_write
  4999  052E  3000               	movlw	0
  5000  052F  00B1               	movwf	?_cw_write+1
  5001  0530  0008               	return
  5002  0531                     l1894:	
  5003                           
  5004                           ;iic.c: 234: }
  5005                           ;iic.c: 235: write_byte(*w_pdata);
  5006  0531  0830               	movf	cw_write@w_pdata,w
  5007  0532  0086               	movwf	6
  5008  0533  0187               	clrf	7
  5009  0534  0801               	movf	1,w
  5010  0535  26A2               	fcall	_write_byte
  5011                           
  5012                           ;iic.c: 236: if(wait_r_ack())
  5013  0536  2546               	fcall	_wait_r_ack
  5014  0537  0140               	movlb	0	; select bank0
  5015  0538  082A               	movf	?_wait_r_ack,w
  5016  0539  042B               	iorwf	?_wait_r_ack+1,w
  5017  053A  1903               	btfsc	3,2
  5018  053B  2D41               	goto	l1902
  5019                           
  5020                           ;iic.c: 237: {
  5021                           ;iic.c: 238: return 1;
  5022  053C  3001               	movlw	1
  5023  053D  00B0               	movwf	?_cw_write
  5024  053E  3000               	movlw	0
  5025  053F  00B1               	movwf	?_cw_write+1
  5026  0540  0008               	return
  5027  0541                     l1902:	
  5028                           
  5029                           ;iic.c: 239: }
  5030                           ;iic.c: 240: stop();
  5031  0541  2728               	fcall	_stop
  5032                           
  5033                           ;iic.c: 241: return 0;
  5034  0542  0140               	movlb	0	; select bank0
  5035  0543  01B0               	clrf	?_cw_write
  5036  0544  01B1               	clrf	?_cw_write+1
  5037  0545  0008               	return
  5038  0546                     __end_of_cw_write:	
  5039                           
  5040                           	psect	text16
  5041  04DB                     __ptext16:	
  5042 ;; *************** function _cw_read *****************
  5043 ;; Defined at:
  5044 ;;		line 164 in file "iic.c"
  5045 ;; Parameters:    Size  Location     Type
  5046 ;;  point_reg       1    wreg     unsigned char 
  5047 ;;  r_pdata         1   16[BANK0 ] PTR unsigned char 
  5048 ;;		 -> cw_get_capacity@reg_val(1), cw_init@reg_val(1), cw_update_config_info@reg_val(1), 
  5049 ;; Auto vars:     Size  Location     Type
  5050 ;;  point_reg       1   19[BANK0 ] unsigned char 
  5051 ;; Return value:  Size  Location     Type
  5052 ;;                  2   16[BANK0 ] int 
  5053 ;; Registers used:
  5054 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5055 ;; Tracked objects:
  5056 ;;		On entry : 0/0
  5057 ;;		On exit  : 0/0
  5058 ;;		Unchanged: 0/0
  5059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5060 ;;      Params:         0       2       0       0
  5061 ;;      Locals:         0       1       0       0
  5062 ;;      Temps:          0       1       0       0
  5063 ;;      Totals:         0       4       0       0
  5064 ;;Total ram usage:        4 bytes
  5065 ;; Hardware stack levels used:    1
  5066 ;; Hardware stack levels required when called:    6
  5067 ;; This function calls:
  5068 ;;		_read_byte
  5069 ;;		_s_ack
  5070 ;;		_start
  5071 ;;		_stop
  5072 ;;		_wait_r_ack
  5073 ;;		_write_byte
  5074 ;; This function is called by:
  5075 ;;		_cw_update_config_info
  5076 ;;		_cw_init
  5077 ;;		_cw_get_capacity
  5078 ;; This function uses a non-reentrant model
  5079 ;;
  5080                           
  5081                           
  5082                           ;psect for function _cw_read
  5083  04DB                     _cw_read:	
  5084                           
  5085                           ;incstack = 0
  5086                           ; Regs used in _cw_read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5087                           ;cw_read@point_reg stored from wreg
  5088  04DB  0140               	movlb	0	; select bank0
  5089  04DC  00B3               	movwf	cw_read@point_reg
  5090                           
  5091                           ;iic.c: 166: start();
  5092  04DD  2740               	fcall	_start
  5093                           
  5094                           ;iic.c: 167: write_byte(0xc4);
  5095  04DE  30C4               	movlw	196
  5096  04DF  26A2               	fcall	_write_byte
  5097                           
  5098                           ;iic.c: 168: if(wait_r_ack())
  5099  04E0  2546               	fcall	_wait_r_ack
  5100  04E1  0140               	movlb	0	; select bank0
  5101  04E2  082A               	movf	?_wait_r_ack,w
  5102  04E3  042B               	iorwf	?_wait_r_ack+1,w
  5103  04E4  1903               	btfsc	3,2
  5104  04E5  2CEB               	goto	l1860
  5105                           
  5106                           ;iic.c: 169: {
  5107                           ;iic.c: 170: return 1;
  5108  04E6  3001               	movlw	1
  5109  04E7  00B0               	movwf	?_cw_read
  5110  04E8  3000               	movlw	0
  5111  04E9  00B1               	movwf	?_cw_read+1
  5112  04EA  0008               	return
  5113  04EB                     l1860:	
  5114                           
  5115                           ;iic.c: 171: }
  5116                           ;iic.c: 172: write_byte(point_reg);
  5117  04EB  0833               	movf	cw_read@point_reg,w
  5118  04EC  26A2               	fcall	_write_byte
  5119                           
  5120                           ;iic.c: 173: if(wait_r_ack())
  5121  04ED  2546               	fcall	_wait_r_ack
  5122  04EE  0140               	movlb	0	; select bank0
  5123  04EF  082A               	movf	?_wait_r_ack,w
  5124  04F0  042B               	iorwf	?_wait_r_ack+1,w
  5125  04F1  1903               	btfsc	3,2
  5126  04F2  2CF8               	goto	l1866
  5127                           
  5128                           ;iic.c: 174: {
  5129                           ;iic.c: 175: return 1;
  5130  04F3  3001               	movlw	1
  5131  04F4  00B0               	movwf	?_cw_read
  5132  04F5  3000               	movlw	0
  5133  04F6  00B1               	movwf	?_cw_read+1
  5134  04F7  0008               	return
  5135  04F8                     l1866:	
  5136                           
  5137                           ;iic.c: 176: }
  5138                           ;iic.c: 177: start();
  5139  04F8  2740               	fcall	_start
  5140                           
  5141                           ;iic.c: 178: write_byte(0xc5);
  5142  04F9  30C5               	movlw	197
  5143  04FA  26A2               	fcall	_write_byte
  5144                           
  5145                           ;iic.c: 179: if(wait_r_ack())
  5146  04FB  2546               	fcall	_wait_r_ack
  5147  04FC  0140               	movlb	0	; select bank0
  5148  04FD  082A               	movf	?_wait_r_ack,w
  5149  04FE  042B               	iorwf	?_wait_r_ack+1,w
  5150  04FF  1903               	btfsc	3,2
  5151  0500  2D06               	goto	l1872
  5152                           
  5153                           ;iic.c: 180: {
  5154                           ;iic.c: 181: return 1;
  5155  0501  3001               	movlw	1
  5156  0502  00B0               	movwf	?_cw_read
  5157  0503  3000               	movlw	0
  5158  0504  00B1               	movwf	?_cw_read+1
  5159  0505  0008               	return
  5160  0506                     l1872:	
  5161                           
  5162                           ;iic.c: 182: }
  5163                           ;iic.c: 183: *r_pdata = read_byte();
  5164  0506  25D8               	fcall	_read_byte
  5165  0507  0140               	movlb	0	; select bank0
  5166  0508  00B2               	movwf	??_cw_read
  5167  0509  0830               	movf	cw_read@r_pdata,w
  5168  050A  0086               	movwf	6
  5169  050B  0187               	clrf	7
  5170  050C  0832               	movf	??_cw_read,w
  5171  050D  0081               	movwf	1
  5172                           
  5173                           ;iic.c: 184: s_ack();
  5174  050E  274B               	fcall	_s_ack
  5175                           
  5176                           ;iic.c: 185: stop();
  5177  050F  2728               	fcall	_stop
  5178                           
  5179                           ;iic.c: 186: return 0;
  5180  0510  0140               	movlb	0	; select bank0
  5181  0511  01B0               	clrf	?_cw_read
  5182  0512  01B1               	clrf	?_cw_read+1
  5183  0513  0008               	return
  5184  0514                     __end_of_cw_read:	
  5185                           
  5186                           	psect	text17
  5187  06A2                     __ptext17:	
  5188 ;; *************** function _write_byte *****************
  5189 ;; Defined at:
  5190 ;;		line 126 in file "iic.c"
  5191 ;; Parameters:    Size  Location     Type
  5192 ;;  w_data          1    wreg     unsigned char 
  5193 ;; Auto vars:     Size  Location     Type
  5194 ;;  w_data          1    5[BANK0 ] unsigned char 
  5195 ;;  i               1    6[BANK0 ] unsigned char 
  5196 ;; Return value:  Size  Location     Type
  5197 ;;                  1    wreg      void 
  5198 ;; Registers used:
  5199 ;;		wreg, status,2, status,0, pclath, cstack
  5200 ;; Tracked objects:
  5201 ;;		On entry : 0/0
  5202 ;;		On exit  : 0/0
  5203 ;;		Unchanged: 0/0
  5204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5205 ;;      Params:         0       0       0       0
  5206 ;;      Locals:         0       2       0       0
  5207 ;;      Temps:          0       1       0       0
  5208 ;;      Totals:         0       3       0       0
  5209 ;;Total ram usage:        3 bytes
  5210 ;; Hardware stack levels used:    1
  5211 ;; Hardware stack levels required when called:    4
  5212 ;; This function calls:
  5213 ;;		_Delay10us
  5214 ;; This function is called by:
  5215 ;;		_cw_read
  5216 ;;		_cw_read_word
  5217 ;;		_cw_write
  5218 ;; This function uses a non-reentrant model
  5219 ;;
  5220                           
  5221                           
  5222                           ;psect for function _write_byte
  5223  06A2                     _write_byte:	
  5224                           
  5225                           ;incstack = 0
  5226                           ; Regs used in _write_byte: [wreg+status,2+status,0+pclath+cstack]
  5227                           ;write_byte@w_data stored from wreg
  5228  06A2  0140               	movlb	0	; select bank0
  5229  06A3  00A5               	movwf	write_byte@w_data
  5230                           
  5231                           ;iic.c: 128: unsigned char i;
  5232                           ;iic.c: 129: do { TRISCbits.TRISC1 = 0; } while(0);
  5233  06A4  1094               	bcf	20,1	;volatile
  5234                           
  5235                           ;iic.c: 130: for(i = 0; i < 8; i++)
  5236  06A5  01A6               	clrf	write_byte@i
  5237  06A6                     L4:	
  5238  06A6  3008               	movlw	8
  5239  06A7  0226               	subwf	write_byte@i,w
  5240  06A8  1803               	btfsc	3,0
  5241  06A9  0008               	return
  5242                           
  5243                           ;iic.c: 131: {
  5244                           ;iic.c: 132: LATCbits.LATC1 = (w_data & 0x80)?1:0;
  5245  06AA  1FA5               	btfss	write_byte@w_data,7
  5246  06AB  2EAF               	goto	u1400
  5247  06AC  0140               	movlb	0	; select bank0
  5248  06AD  149A               	bsf	26,1	;volatile
  5249  06AE  2EB1               	goto	l1790
  5250  06AF                     u1400:	
  5251  06AF  0140               	movlb	0	; select bank0
  5252  06B0  109A               	bcf	26,1	;volatile
  5253  06B1                     l1790:	
  5254                           
  5255                           ;iic.c: 133: Delay10us();
  5256  06B1  263F               	fcall	_Delay10us
  5257                           
  5258                           ;iic.c: 134: do { LATCbits.LATC0 = 1; } while(0);
  5259  06B2  0140               	movlb	0	; select bank0
  5260  06B3  141A               	bsf	26,0	;volatile
  5261                           
  5262                           ;iic.c: 135: Delay10us();
  5263  06B4  263F               	fcall	_Delay10us
  5264                           
  5265                           ;iic.c: 136: do { LATCbits.LATC0 = 0; } while(0);
  5266  06B5  0140               	movlb	0	; select bank0
  5267  06B6  101A               	bcf	26,0	;volatile
  5268                           
  5269                           ;iic.c: 137: Delay10us();
  5270  06B7  263F               	fcall	_Delay10us
  5271                           
  5272                           ;iic.c: 138: w_data = w_data << 1;
  5273  06B8  0140               	movlb	0	; select bank0
  5274  06B9  3525               	lslf	write_byte@w_data,w
  5275  06BA  00A4               	movwf	??_write_byte
  5276  06BB  0824               	movf	??_write_byte,w
  5277  06BC  00A5               	movwf	write_byte@w_data
  5278  06BD  3001               	movlw	1
  5279  06BE  00A4               	movwf	??_write_byte
  5280  06BF  0824               	movf	??_write_byte,w
  5281  06C0  07A6               	addwf	write_byte@i,f
  5282  06C1  2EA6               	goto	L4
  5283  06C2                     __end_of_write_byte:	
  5284                           
  5285                           	psect	text18
  5286  0546                     __ptext18:	
  5287 ;; *************** function _wait_r_ack *****************
  5288 ;; Defined at:
  5289 ;;		line 80 in file "iic.c"
  5290 ;; Parameters:    Size  Location     Type
  5291 ;;		None
  5292 ;; Auto vars:     Size  Location     Type
  5293 ;;  i               2   14[BANK0 ] unsigned int 
  5294 ;;  ack             2   12[BANK0 ] int 
  5295 ;; Return value:  Size  Location     Type
  5296 ;;                  2   10[BANK0 ] int 
  5297 ;; Registers used:
  5298 ;;		wreg, status,2, status,0, pclath, cstack
  5299 ;; Tracked objects:
  5300 ;;		On entry : 0/0
  5301 ;;		On exit  : 0/0
  5302 ;;		Unchanged: 0/0
  5303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5304 ;;      Params:         0       2       0       0
  5305 ;;      Locals:         0       4       0       0
  5306 ;;      Temps:          0       0       0       0
  5307 ;;      Totals:         0       6       0       0
  5308 ;;Total ram usage:        6 bytes
  5309 ;; Hardware stack levels used:    1
  5310 ;; Hardware stack levels required when called:    5
  5311 ;; This function calls:
  5312 ;;		_r_ack
  5313 ;;		_stop
  5314 ;; This function is called by:
  5315 ;;		_cw_read
  5316 ;;		_cw_read_word
  5317 ;;		_cw_write
  5318 ;; This function uses a non-reentrant model
  5319 ;;
  5320                           
  5321                           
  5322                           ;psect for function _wait_r_ack
  5323  0546                     _wait_r_ack:	
  5324                           
  5325                           ;iic.c: 82: int ack;
  5326                           ;iic.c: 83: unsigned int i;
  5327                           ;iic.c: 84: ack = 1;
  5328                           
  5329                           ;incstack = 0
  5330                           ; Regs used in _wait_r_ack: [wreg+status,2+status,0+pclath+cstack]
  5331  0546  3001               	movlw	1
  5332  0547  0140               	movlb	0	; select bank0
  5333  0548  00AC               	movwf	wait_r_ack@ack
  5334  0549  3000               	movlw	0
  5335  054A  00AD               	movwf	wait_r_ack@ack+1
  5336                           
  5337                           ;iic.c: 85: for(i = 0; i < 100; i++)
  5338  054B  01AE               	clrf	wait_r_ack@i
  5339  054C  01AF               	clrf	wait_r_ack@i+1
  5340  054D  3000               	movlw	0
  5341  054E  022F               	subwf	wait_r_ack@i+1,w
  5342  054F  3064               	movlw	100
  5343  0550  1903               	skipnz
  5344  0551  022E               	subwf	wait_r_ack@i,w
  5345  0552  1803               	btfsc	3,0
  5346  0553  2D75               	goto	l1774
  5347  0554                     l1758:	
  5348                           
  5349                           ;iic.c: 86: {
  5350                           ;iic.c: 87: ack = r_ack();
  5351  0554  26F4               	fcall	_r_ack
  5352  0555  0140               	movlb	0	; select bank0
  5353  0556  0825               	movf	?_r_ack+1,w
  5354  0557  00AD               	movwf	wait_r_ack@ack+1
  5355  0558  0824               	movf	?_r_ack,w
  5356  0559  00AC               	movwf	wait_r_ack@ack
  5357                           
  5358                           ;iic.c: 88: if(!ack)
  5359  055A  082C               	movf	wait_r_ack@ack,w
  5360  055B  042D               	iorwf	wait_r_ack@ack+1,w
  5361  055C  1903               	btfsc	3,2
  5362  055D  2D75               	goto	l1774
  5363                           
  5364                           ;iic.c: 91: }
  5365                           ;iic.c: 92: if(i == 99)
  5366                           
  5367                           ;iic.c: 89: {
  5368                           ;iic.c: 90: break;
  5369  055E  3063               	movlw	99
  5370  055F  062E               	xorwf	wait_r_ack@i,w
  5371  0560  042F               	iorwf	wait_r_ack@i+1,w
  5372  0561  1D03               	btfss	3,2
  5373  0562  2D6A               	goto	l1772
  5374                           
  5375                           ;iic.c: 93: {
  5376                           ;iic.c: 94: stop();
  5377  0563  2728               	fcall	_stop
  5378                           
  5379                           ;iic.c: 95: return 1;
  5380  0564  3001               	movlw	1
  5381  0565  0140               	movlb	0	; select bank0
  5382  0566  00AA               	movwf	?_wait_r_ack
  5383  0567  3000               	movlw	0
  5384  0568  00AB               	movwf	?_wait_r_ack+1
  5385  0569  0008               	return
  5386  056A                     l1772:	
  5387  056A  3001               	movlw	1
  5388  056B  07AE               	addwf	wait_r_ack@i,f
  5389  056C  3000               	movlw	0
  5390  056D  3DAF               	addwfc	wait_r_ack@i+1,f
  5391  056E  3000               	movlw	0
  5392  056F  022F               	subwf	wait_r_ack@i+1,w
  5393  0570  3064               	movlw	100
  5394  0571  1903               	skipnz
  5395  0572  022E               	subwf	wait_r_ack@i,w
  5396  0573  1C03               	skipc
  5397  0574  2D54               	goto	l1758
  5398  0575                     l1774:	
  5399                           
  5400                           ;iic.c: 96: }
  5401                           ;iic.c: 97: }
  5402                           ;iic.c: 98: return 0;
  5403  0575  01AA               	clrf	?_wait_r_ack
  5404  0576  01AB               	clrf	?_wait_r_ack+1
  5405  0577  0008               	return
  5406  0578                     __end_of_wait_r_ack:	
  5407                           
  5408                           	psect	text19
  5409  0728                     __ptext19:	
  5410 ;; *************** function _stop *****************
  5411 ;; Defined at:
  5412 ;;		line 54 in file "iic.c"
  5413 ;; Parameters:    Size  Location     Type
  5414 ;;		None
  5415 ;; Auto vars:     Size  Location     Type
  5416 ;;		None
  5417 ;; Return value:  Size  Location     Type
  5418 ;;                  1    wreg      void 
  5419 ;; Registers used:
  5420 ;;		wreg, status,2, status,0, pclath, cstack
  5421 ;; Tracked objects:
  5422 ;;		On entry : 0/0
  5423 ;;		On exit  : 0/0
  5424 ;;		Unchanged: 0/0
  5425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5426 ;;      Params:         0       0       0       0
  5427 ;;      Locals:         0       0       0       0
  5428 ;;      Temps:          0       0       0       0
  5429 ;;      Totals:         0       0       0       0
  5430 ;;Total ram usage:        0 bytes
  5431 ;; Hardware stack levels used:    1
  5432 ;; Hardware stack levels required when called:    4
  5433 ;; This function calls:
  5434 ;;		_Delay10us
  5435 ;; This function is called by:
  5436 ;;		_wait_r_ack
  5437 ;;		_cw_read
  5438 ;;		_cw_read_word
  5439 ;;		_cw_write
  5440 ;; This function uses a non-reentrant model
  5441 ;;
  5442                           
  5443                           
  5444                           ;psect for function _stop
  5445  0728                     _stop:	
  5446                           
  5447                           ;incstack = 0
  5448                           ; Regs used in _stop: [wreg+status,2+status,0+pclath+cstack]
  5449                           ;iic.c: 56: do { TRISCbits.TRISC1 = 0; } while(0);
  5450  0728  0140               	movlb	0	; select bank0
  5451  0729  1094               	bcf	20,1	;volatile
  5452                           
  5453                           ;iic.c: 57: do { LATCbits.LATC1 = 0; } while(0);
  5454  072A  109A               	bcf	26,1	;volatile
  5455                           
  5456                           ;iic.c: 58: Delay10us();
  5457  072B  263F               	fcall	_Delay10us
  5458                           
  5459                           ;iic.c: 59: do { LATCbits.LATC0 = 1; } while(0);
  5460  072C  0140               	movlb	0	; select bank0
  5461  072D  141A               	bsf	26,0	;volatile
  5462                           
  5463                           ;iic.c: 60: Delay10us();
  5464  072E  263F               	fcall	_Delay10us
  5465                           
  5466                           ;iic.c: 61: do { LATCbits.LATC1 = 1; } while(0);
  5467  072F  0140               	movlb	0	; select bank0
  5468  0730  149A               	bsf	26,1	;volatile
  5469                           
  5470                           ;iic.c: 62: Delay10us();
  5471  0731  263F               	fcall	_Delay10us
  5472                           
  5473                           ;iic.c: 64: Delay10us();
  5474  0732  263F               	fcall	_Delay10us
  5475  0733  0008               	return
  5476  0734                     __end_of_stop:	
  5477                           
  5478                           	psect	text20
  5479  06F4                     __ptext20:	
  5480 ;; *************** function _r_ack *****************
  5481 ;; Defined at:
  5482 ;;		line 67 in file "iic.c"
  5483 ;; Parameters:    Size  Location     Type
  5484 ;;		None
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;  ack             2    8[BANK0 ] int 
  5487 ;; Return value:  Size  Location     Type
  5488 ;;                  2    4[BANK0 ] int 
  5489 ;; Registers used:
  5490 ;;		wreg, status,2, status,0, pclath, cstack
  5491 ;; Tracked objects:
  5492 ;;		On entry : 0/0
  5493 ;;		On exit  : 0/0
  5494 ;;		Unchanged: 0/0
  5495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5496 ;;      Params:         0       2       0       0
  5497 ;;      Locals:         0       2       0       0
  5498 ;;      Temps:          0       2       0       0
  5499 ;;      Totals:         0       6       0       0
  5500 ;;Total ram usage:        6 bytes
  5501 ;; Hardware stack levels used:    1
  5502 ;; Hardware stack levels required when called:    4
  5503 ;; This function calls:
  5504 ;;		_Delay10us
  5505 ;; This function is called by:
  5506 ;;		_wait_r_ack
  5507 ;; This function uses a non-reentrant model
  5508 ;;
  5509                           
  5510                           
  5511                           ;psect for function _r_ack
  5512  06F4                     _r_ack:	
  5513                           
  5514                           ;incstack = 0
  5515                           ; Regs used in _r_ack: [wreg+status,2+status,0+pclath+cstack]
  5516                           ;iic.c: 69: int ack;
  5517                           ;iic.c: 70: do { TRISCbits.TRISC1 = 1; } while(0);
  5518  06F4  0140               	movlb	0	; select bank0
  5519  06F5  1494               	bsf	20,1	;volatile
  5520                           
  5521                           ;iic.c: 71: do { LATCbits.LATC0 = 1; } while(0);
  5522  06F6  141A               	bsf	26,0	;volatile
  5523                           
  5524                           ;iic.c: 72: Delay10us();
  5525  06F7  263F               	fcall	_Delay10us
  5526                           
  5527                           ;iic.c: 73: ack = PORTCbits.RC1;
  5528  06F8  0140               	movlb	0	; select bank0
  5529  06F9  0C0E               	rrf	14,w	;volatile
  5530  06FA  3901               	andlw	1
  5531  06FB  00A6               	movwf	??_r_ack
  5532  06FC  01A7               	clrf	??_r_ack+1
  5533  06FD  0826               	movf	??_r_ack,w
  5534  06FE  00A8               	movwf	r_ack@ack
  5535  06FF  0827               	movf	??_r_ack+1,w
  5536  0700  00A9               	movwf	r_ack@ack+1
  5537                           
  5538                           ;iic.c: 74: Delay10us();
  5539  0701  263F               	fcall	_Delay10us
  5540                           
  5541                           ;iic.c: 75: do { LATCbits.LATC0 = 0; } while(0);
  5542  0702  0140               	movlb	0	; select bank0
  5543  0703  101A               	bcf	26,0	;volatile
  5544                           
  5545                           ;iic.c: 76: Delay10us();
  5546  0704  263F               	fcall	_Delay10us
  5547                           
  5548                           ;iic.c: 77: return ack;
  5549  0705  0140               	movlb	0	; select bank0
  5550  0706  0829               	movf	r_ack@ack+1,w
  5551  0707  00A5               	movwf	?_r_ack+1
  5552  0708  0828               	movf	r_ack@ack,w
  5553  0709  00A4               	movwf	?_r_ack
  5554  070A  0008               	return
  5555  070B                     __end_of_r_ack:	
  5556                           
  5557                           	psect	text21
  5558  0740                     __ptext21:	
  5559 ;; *************** function _start *****************
  5560 ;; Defined at:
  5561 ;;		line 43 in file "iic.c"
  5562 ;; Parameters:    Size  Location     Type
  5563 ;;		None
  5564 ;; Auto vars:     Size  Location     Type
  5565 ;;		None
  5566 ;; Return value:  Size  Location     Type
  5567 ;;                  1    wreg      void 
  5568 ;; Registers used:
  5569 ;;		wreg, status,2, status,0, pclath, cstack
  5570 ;; Tracked objects:
  5571 ;;		On entry : 0/0
  5572 ;;		On exit  : 0/0
  5573 ;;		Unchanged: 0/0
  5574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5575 ;;      Params:         0       0       0       0
  5576 ;;      Locals:         0       0       0       0
  5577 ;;      Temps:          0       0       0       0
  5578 ;;      Totals:         0       0       0       0
  5579 ;;Total ram usage:        0 bytes
  5580 ;; Hardware stack levels used:    1
  5581 ;; Hardware stack levels required when called:    4
  5582 ;; This function calls:
  5583 ;;		_Delay10us
  5584 ;; This function is called by:
  5585 ;;		_cw_read
  5586 ;;		_cw_read_word
  5587 ;;		_cw_write
  5588 ;; This function uses a non-reentrant model
  5589 ;;
  5590                           
  5591                           
  5592                           ;psect for function _start
  5593  0740                     _start:	
  5594                           
  5595                           ;incstack = 0
  5596                           ; Regs used in _start: [wreg+status,2+status,0+pclath+cstack]
  5597                           ;iic.c: 45: do { TRISCbits.TRISC1 = 0; } while(0);
  5598  0740  0140               	movlb	0	; select bank0
  5599  0741  1094               	bcf	20,1	;volatile
  5600                           
  5601                           ;iic.c: 46: do { LATCbits.LATC1 = 1; } while(0);
  5602  0742  149A               	bsf	26,1	;volatile
  5603                           
  5604                           ;iic.c: 47: do { LATCbits.LATC0 = 1; } while(0);
  5605  0743  141A               	bsf	26,0	;volatile
  5606                           
  5607                           ;iic.c: 48: Delay10us();
  5608  0744  263F               	fcall	_Delay10us
  5609                           
  5610                           ;iic.c: 49: do { LATCbits.LATC1 = 0; } while(0);
  5611  0745  0140               	movlb	0	; select bank0
  5612  0746  109A               	bcf	26,1	;volatile
  5613                           
  5614                           ;iic.c: 50: Delay10us();
  5615  0747  263F               	fcall	_Delay10us
  5616                           
  5617                           ;iic.c: 51: do { LATCbits.LATC0 = 0; } while(0);
  5618  0748  0140               	movlb	0	; select bank0
  5619  0749  101A               	bcf	26,0	;volatile
  5620  074A  0008               	return
  5621  074B                     __end_of_start:	
  5622                           
  5623                           	psect	text22
  5624  074B                     __ptext22:	
  5625 ;; *************** function _s_ack *****************
  5626 ;; Defined at:
  5627 ;;		line 101 in file "iic.c"
  5628 ;; Parameters:    Size  Location     Type
  5629 ;;		None
  5630 ;; Auto vars:     Size  Location     Type
  5631 ;;		None
  5632 ;; Return value:  Size  Location     Type
  5633 ;;                  1    wreg      void 
  5634 ;; Registers used:
  5635 ;;		wreg, status,2, status,0, pclath, cstack
  5636 ;; Tracked objects:
  5637 ;;		On entry : 0/0
  5638 ;;		On exit  : 0/0
  5639 ;;		Unchanged: 0/0
  5640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5641 ;;      Params:         0       0       0       0
  5642 ;;      Locals:         0       0       0       0
  5643 ;;      Temps:          0       0       0       0
  5644 ;;      Totals:         0       0       0       0
  5645 ;;Total ram usage:        0 bytes
  5646 ;; Hardware stack levels used:    1
  5647 ;; Hardware stack levels required when called:    4
  5648 ;; This function calls:
  5649 ;;		_Delay10us
  5650 ;; This function is called by:
  5651 ;;		_cw_read
  5652 ;;		_cw_read_word
  5653 ;; This function uses a non-reentrant model
  5654 ;;
  5655                           
  5656                           
  5657                           ;psect for function _s_ack
  5658  074B                     _s_ack:	
  5659                           
  5660                           ;incstack = 0
  5661                           ; Regs used in _s_ack: [wreg+status,2+status,0+pclath+cstack]
  5662                           ;iic.c: 103: do { TRISCbits.TRISC1 = 0; } while(0);
  5663  074B  0140               	movlb	0	; select bank0
  5664  074C  1094               	bcf	20,1	;volatile
  5665                           
  5666                           ;iic.c: 104: do { LATCbits.LATC1 = 1; } while(0);
  5667  074D  149A               	bsf	26,1	;volatile
  5668                           
  5669                           ;iic.c: 105: Delay10us();
  5670  074E  263F               	fcall	_Delay10us
  5671                           
  5672                           ;iic.c: 106: do { LATCbits.LATC0 = 1; } while(0);
  5673  074F  0140               	movlb	0	; select bank0
  5674  0750  141A               	bsf	26,0	;volatile
  5675                           
  5676                           ;iic.c: 107: Delay10us();
  5677  0751  263F               	fcall	_Delay10us
  5678                           
  5679                           ;iic.c: 108: do { LATCbits.LATC0 = 0; } while(0);
  5680  0752  0140               	movlb	0	; select bank0
  5681  0753  101A               	bcf	26,0	;volatile
  5682                           
  5683                           ;iic.c: 109: Delay10us();
  5684  0754  263F               	fcall	_Delay10us
  5685  0755  0008               	return
  5686  0756                     __end_of_s_ack:	
  5687                           
  5688                           	psect	text23
  5689  05D8                     __ptext23:	
  5690 ;; *************** function _read_byte *****************
  5691 ;; Defined at:
  5692 ;;		line 142 in file "iic.c"
  5693 ;; Parameters:    Size  Location     Type
  5694 ;;		None
  5695 ;; Auto vars:     Size  Location     Type
  5696 ;;  r_data          1    6[BANK0 ] unsigned char 
  5697 ;;  i               1    5[BANK0 ] unsigned char 
  5698 ;; Return value:  Size  Location     Type
  5699 ;;                  1    wreg      unsigned char 
  5700 ;; Registers used:
  5701 ;;		wreg, status,2, status,0, pclath, cstack
  5702 ;; Tracked objects:
  5703 ;;		On entry : 0/0
  5704 ;;		On exit  : 0/0
  5705 ;;		Unchanged: 0/0
  5706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5707 ;;      Params:         0       0       0       0
  5708 ;;      Locals:         0       2       0       0
  5709 ;;      Temps:          0       1       0       0
  5710 ;;      Totals:         0       3       0       0
  5711 ;;Total ram usage:        3 bytes
  5712 ;; Hardware stack levels used:    1
  5713 ;; Hardware stack levels required when called:    4
  5714 ;; This function calls:
  5715 ;;		_Delay10us
  5716 ;; This function is called by:
  5717 ;;		_cw_read
  5718 ;;		_cw_read_word
  5719 ;; This function uses a non-reentrant model
  5720 ;;
  5721                           
  5722                           
  5723                           ;psect for function _read_byte
  5724  05D8                     _read_byte:	
  5725                           
  5726                           ;incstack = 0
  5727                           ; Regs used in _read_byte: [wreg+status,2+status,0+pclath+cstack]
  5728                           ;iic.c: 144: unsigned char i;
  5729                           ;iic.c: 145: unsigned char r_data;
  5730                           ;iic.c: 146: do { TRISCbits.TRISC1 = 1; } while(0);
  5731  05D8  0140               	movlb	0	; select bank0
  5732  05D9  1494               	bsf	20,1	;volatile
  5733                           
  5734                           ;iic.c: 147: for(i = 0; i < 8; i++)
  5735  05DA  01A5               	clrf	read_byte@i
  5736  05DB  3008               	movlw	8
  5737  05DC  0225               	subwf	read_byte@i,w
  5738  05DD  1803               	btfsc	3,0
  5739  05DE  2DFA               	goto	l1826
  5740  05DF                     l439:	
  5741                           ;iic.c: 148: {
  5742                           ;iic.c: 149: do { LATCbits.LATC0 = 1; } while(0);
  5743                           
  5744  05DF  141A               	bsf	26,0	;volatile
  5745                           
  5746                           ;iic.c: 150: Delay10us();
  5747  05E0  263F               	fcall	_Delay10us
  5748                           
  5749                           ;iic.c: 151: r_data = r_data << 1;
  5750  05E1  0140               	movlb	0	; select bank0
  5751  05E2  3526               	lslf	read_byte@r_data,w
  5752  05E3  00A4               	movwf	??_read_byte
  5753  05E4  0824               	movf	??_read_byte,w
  5754  05E5  00A6               	movwf	read_byte@r_data
  5755                           
  5756                           ;iic.c: 152: Delay10us();
  5757  05E6  263F               	fcall	_Delay10us
  5758                           
  5759                           ;iic.c: 153: if(PORTCbits.RC1)
  5760  05E7  0140               	movlb	0	; select bank0
  5761  05E8  1C8E               	btfss	14,1	;volatile
  5762  05E9  2DEF               	goto	l1818
  5763                           
  5764                           ;iic.c: 154: {
  5765                           ;iic.c: 155: r_data = r_data | 0x1;
  5766  05EA  0826               	movf	read_byte@r_data,w
  5767  05EB  3801               	iorlw	1
  5768  05EC  00A4               	movwf	??_read_byte
  5769  05ED  0824               	movf	??_read_byte,w
  5770  05EE  00A6               	movwf	read_byte@r_data
  5771  05EF                     l1818:	
  5772                           ;iic.c: 156: }
  5773                           ;iic.c: 157: do { LATCbits.LATC0 = 0; } while(0);
  5774                           
  5775  05EF  101A               	bcf	26,0	;volatile
  5776                           
  5777                           ;iic.c: 158: Delay10us();
  5778  05F0  263F               	fcall	_Delay10us
  5779  05F1  3001               	movlw	1
  5780  05F2  0140               	movlb	0	; select bank0
  5781  05F3  00A4               	movwf	??_read_byte
  5782  05F4  0824               	movf	??_read_byte,w
  5783  05F5  07A5               	addwf	read_byte@i,f
  5784  05F6  3008               	movlw	8
  5785  05F7  0225               	subwf	read_byte@i,w
  5786  05F8  1C03               	skipc
  5787  05F9  2DDF               	goto	l439
  5788  05FA                     l1826:	
  5789                           
  5790                           ;iic.c: 159: }
  5791                           ;iic.c: 160: return r_data;
  5792  05FA  0826               	movf	read_byte@r_data,w
  5793  05FB  0008               	return
  5794  05FC                     __end_of_read_byte:	
  5795                           
  5796                           	psect	text24
  5797  063F                     __ptext24:	
  5798 ;; *************** function _Delay10us *****************
  5799 ;; Defined at:
  5800 ;;		line 22 in file "iic.c"
  5801 ;; Parameters:    Size  Location     Type
  5802 ;;		None
  5803 ;; Auto vars:     Size  Location     Type
  5804 ;;  i               1    3[BANK0 ] unsigned char 
  5805 ;;  b               1    2[BANK0 ] unsigned char 
  5806 ;;  a               1    1[BANK0 ] unsigned char 
  5807 ;; Return value:  Size  Location     Type
  5808 ;;                  1    wreg      void 
  5809 ;; Registers used:
  5810 ;;		wreg, status,2, status,0
  5811 ;; Tracked objects:
  5812 ;;		On entry : 0/0
  5813 ;;		On exit  : 0/0
  5814 ;;		Unchanged: 0/0
  5815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5816 ;;      Params:         0       0       0       0
  5817 ;;      Locals:         0       3       0       0
  5818 ;;      Temps:          0       1       0       0
  5819 ;;      Totals:         0       4       0       0
  5820 ;;Total ram usage:        4 bytes
  5821 ;; Hardware stack levels used:    1
  5822 ;; Hardware stack levels required when called:    3
  5823 ;; This function calls:
  5824 ;;		Nothing
  5825 ;; This function is called by:
  5826 ;;		_start
  5827 ;;		_stop
  5828 ;;		_r_ack
  5829 ;;		_s_ack
  5830 ;;		_sn_ack
  5831 ;;		_write_byte
  5832 ;;		_read_byte
  5833 ;; This function uses a non-reentrant model
  5834 ;;
  5835                           
  5836                           
  5837                           ;psect for function _Delay10us
  5838  063F                     _Delay10us:	
  5839                           
  5840                           ;iic.c: 24: unsigned char a, b;
  5841                           ;iic.c: 25: unsigned char i;
  5842                           ;iic.c: 26: for(i = 0; i < 2; i++)
  5843                           
  5844                           ;incstack = 0
  5845                           ; Regs used in _Delay10us: [wreg+status,2+status,0]
  5846  063F  0140               	movlb	0	; select bank0
  5847  0640  01A3               	clrf	Delay10us@i
  5848  0641                     L5:	
  5849  0641  3002               	movlw	2
  5850  0642  0223               	subwf	Delay10us@i,w
  5851  0643  1803               	btfsc	3,0
  5852  0644  0008               	return
  5853                           
  5854                           ;iic.c: 27: {
  5855                           ;iic.c: 28: for(b = 1;b > 0;b --)
  5856  0645  01A2               	clrf	Delay10us@b
  5857  0646  0AA2               	incf	Delay10us@b,f
  5858  0647  0822               	movf	Delay10us@b,w
  5859  0648  1903               	btfsc	3,2
  5860  0649  2E5B               	goto	l1720
  5861  064A                     l1710:	
  5862                           
  5863                           ;iic.c: 29: {
  5864                           ;iic.c: 30: for(a = 7;a > 0;a --) ;
  5865  064A  3007               	movlw	7
  5866  064B  00A0               	movwf	??_Delay10us
  5867  064C  0820               	movf	??_Delay10us,w
  5868  064D  00A1               	movwf	Delay10us@a
  5869  064E  0821               	movf	Delay10us@a,w
  5870  064F  1903               	btfsc	3,2
  5871  0650  2E56               	goto	l1718
  5872  0651                     l1716:	
  5873  0651  3001               	movlw	1
  5874  0652  02A1               	subwf	Delay10us@a,f
  5875  0653  0821               	movf	Delay10us@a,w
  5876  0654  1D03               	btfss	3,2
  5877  0655  2E51               	goto	l1716
  5878  0656                     l1718:	
  5879  0656  3001               	movlw	1
  5880  0657  02A2               	subwf	Delay10us@b,f
  5881  0658  0822               	movf	Delay10us@b,w
  5882  0659  1D03               	btfss	3,2
  5883  065A  2E4A               	goto	l1710
  5884  065B                     l1720:	
  5885  065B  3001               	movlw	1
  5886  065C  00A0               	movwf	??_Delay10us
  5887  065D  0820               	movf	??_Delay10us,w
  5888  065E  07A3               	addwf	Delay10us@i,f
  5889  065F  2E41               	goto	L5
  5890  0660                     __end_of_Delay10us:	
  5891                           
  5892                           	psect	text25
  5893  0660                     __ptext25:	
  5894 ;; *************** function _CW_Delay100us *****************
  5895 ;; Defined at:
  5896 ;;		line 38 in file "CW201x.c"
  5897 ;; Parameters:    Size  Location     Type
  5898 ;;		None
  5899 ;; Auto vars:     Size  Location     Type
  5900 ;;  i               1    3[BANK0 ] unsigned char 
  5901 ;;  b               1    2[BANK0 ] unsigned char 
  5902 ;;  a               1    1[BANK0 ] unsigned char 
  5903 ;; Return value:  Size  Location     Type
  5904 ;;                  1    wreg      void 
  5905 ;; Registers used:
  5906 ;;		wreg, status,2, status,0
  5907 ;; Tracked objects:
  5908 ;;		On entry : 0/0
  5909 ;;		On exit  : 0/0
  5910 ;;		Unchanged: 0/0
  5911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5912 ;;      Params:         0       0       0       0
  5913 ;;      Locals:         0       3       0       0
  5914 ;;      Temps:          0       1       0       0
  5915 ;;      Totals:         0       4       0       0
  5916 ;;Total ram usage:        4 bytes
  5917 ;; Hardware stack levels used:    1
  5918 ;; Hardware stack levels required when called:    3
  5919 ;; This function calls:
  5920 ;;		Nothing
  5921 ;; This function is called by:
  5922 ;;		_cw_update_config_info
  5923 ;;		_cw_por
  5924 ;; This function uses a non-reentrant model
  5925 ;;
  5926                           
  5927                           
  5928                           ;psect for function _CW_Delay100us
  5929  0660                     _CW_Delay100us:	
  5930                           
  5931                           ;CW201x.c: 40: unsigned char a, b;
  5932                           ;CW201x.c: 41: unsigned char i;
  5933                           ;CW201x.c: 42: for(i = 0; i < 10; i++)
  5934                           
  5935                           ;incstack = 0
  5936                           ; Regs used in _CW_Delay100us: [wreg+status,2+status,0]
  5937  0660  0140               	movlb	0	; select bank0
  5938  0661  01A3               	clrf	CW_Delay100us@i
  5939  0662                     L6:	
  5940  0662  300A               	movlw	10
  5941  0663  0223               	subwf	CW_Delay100us@i,w
  5942  0664  1803               	btfsc	3,0
  5943  0665  0008               	return
  5944                           
  5945                           ;CW201x.c: 43: {
  5946                           ;CW201x.c: 44: for(b = 1;b > 0;b --)
  5947  0666  01A2               	clrf	CW_Delay100us@b
  5948  0667  0AA2               	incf	CW_Delay100us@b,f
  5949  0668  0822               	movf	CW_Delay100us@b,w
  5950  0669  1903               	btfsc	3,2
  5951  066A  2E7C               	goto	l1850
  5952  066B                     l1840:	
  5953                           
  5954                           ;CW201x.c: 45: {
  5955                           ;CW201x.c: 46: for(a = 7;a > 0;a --);
  5956  066B  3007               	movlw	7
  5957  066C  00A0               	movwf	??_CW_Delay100us
  5958  066D  0820               	movf	??_CW_Delay100us,w
  5959  066E  00A1               	movwf	CW_Delay100us@a
  5960  066F  0821               	movf	CW_Delay100us@a,w
  5961  0670  1903               	btfsc	3,2
  5962  0671  2E77               	goto	l1848
  5963  0672                     l1846:	
  5964  0672  3001               	movlw	1
  5965  0673  02A1               	subwf	CW_Delay100us@a,f
  5966  0674  0821               	movf	CW_Delay100us@a,w
  5967  0675  1D03               	btfss	3,2
  5968  0676  2E72               	goto	l1846
  5969  0677                     l1848:	
  5970  0677  3001               	movlw	1
  5971  0678  02A2               	subwf	CW_Delay100us@b,f
  5972  0679  0822               	movf	CW_Delay100us@b,w
  5973  067A  1D03               	btfss	3,2
  5974  067B  2E6B               	goto	l1840
  5975  067C                     l1850:	
  5976  067C  3001               	movlw	1
  5977  067D  00A0               	movwf	??_CW_Delay100us
  5978  067E  0820               	movf	??_CW_Delay100us,w
  5979  067F  07A3               	addwf	CW_Delay100us@i,f
  5980  0680  2E62               	goto	L6
  5981  0681                     __end_of_CW_Delay100us:	
  5982                           
  5983                           	psect	text26
  5984  05FC                     __ptext26:	
  5985 ;; *************** function _CW_Delay10ms *****************
  5986 ;; Defined at:
  5987 ;;		line 26 in file "CW201x.c"
  5988 ;; Parameters:    Size  Location     Type
  5989 ;;  c               2    0[BANK0 ] unsigned int 
  5990 ;; Auto vars:     Size  Location     Type
  5991 ;;  b               1    4[BANK0 ] unsigned char 
  5992 ;;  a               1    3[BANK0 ] unsigned char 
  5993 ;;  d               1    0        unsigned char 
  5994 ;; Return value:  Size  Location     Type
  5995 ;;                  1    wreg      void 
  5996 ;; Registers used:
  5997 ;;		wreg, status,2, status,0
  5998 ;; Tracked objects:
  5999 ;;		On entry : 0/0
  6000 ;;		On exit  : 0/0
  6001 ;;		Unchanged: 0/0
  6002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6003 ;;      Params:         0       2       0       0
  6004 ;;      Locals:         0       2       0       0
  6005 ;;      Temps:          0       1       0       0
  6006 ;;      Totals:         0       5       0       0
  6007 ;;Total ram usage:        5 bytes
  6008 ;; Hardware stack levels used:    1
  6009 ;; Hardware stack levels required when called:    3
  6010 ;; This function calls:
  6011 ;;		Nothing
  6012 ;; This function is called by:
  6013 ;;		_main
  6014 ;;		_cw_init
  6015 ;; This function uses a non-reentrant model
  6016 ;;
  6017                           
  6018                           
  6019                           ;psect for function _CW_Delay10ms
  6020  05FC                     _CW_Delay10ms:	
  6021                           
  6022                           ;CW201x.c: 28: unsigned char a, b, d;
  6023                           ;CW201x.c: 29: for (;c>0;c--)
  6024                           
  6025                           ;incstack = 0
  6026                           ; Regs used in _CW_Delay10ms: [wreg+status,2+status,0]
  6027  05FC  0140               	movlb	0	; select bank0
  6028  05FD                     L7:	
  6029  05FD  0820               	movf	CW_Delay10ms@c,w
  6030  05FE  0421               	iorwf	CW_Delay10ms@c+1,w
  6031  05FF  1903               	btfsc	3,2
  6032  0600  0008               	return
  6033                           
  6034                           ;CW201x.c: 30: {
  6035                           ;CW201x.c: 31: for(b=95;b>0;b--)
  6036  0601  305F               	movlw	95
  6037  0602  00A2               	movwf	??_CW_Delay10ms
  6038  0603  0822               	movf	??_CW_Delay10ms,w
  6039  0604  00A4               	movwf	CW_Delay10ms@b
  6040  0605  0824               	movf	CW_Delay10ms@b,w
  6041  0606  1903               	btfsc	3,2
  6042  0607  2E19               	goto	l1928
  6043  0608                     l1918:	
  6044                           
  6045                           ;CW201x.c: 32: {
  6046                           ;CW201x.c: 33: for(a=209;a>0;a--) ;
  6047  0608  30D1               	movlw	209
  6048  0609  00A2               	movwf	??_CW_Delay10ms
  6049  060A  0822               	movf	??_CW_Delay10ms,w
  6050  060B  00A3               	movwf	CW_Delay10ms@a
  6051  060C  0823               	movf	CW_Delay10ms@a,w
  6052  060D  1903               	btfsc	3,2
  6053  060E  2E14               	goto	l1926
  6054  060F                     l1924:	
  6055  060F  3001               	movlw	1
  6056  0610  02A3               	subwf	CW_Delay10ms@a,f
  6057  0611  0823               	movf	CW_Delay10ms@a,w
  6058  0612  1D03               	btfss	3,2
  6059  0613  2E0F               	goto	l1924
  6060  0614                     l1926:	
  6061  0614  3001               	movlw	1
  6062  0615  02A4               	subwf	CW_Delay10ms@b,f
  6063  0616  0824               	movf	CW_Delay10ms@b,w
  6064  0617  1D03               	btfss	3,2
  6065  0618  2E08               	goto	l1918
  6066  0619                     l1928:	
  6067  0619  3001               	movlw	1
  6068  061A  02A0               	subwf	CW_Delay10ms@c,f
  6069  061B  3000               	movlw	0
  6070  061C  3BA1               	subwfb	CW_Delay10ms@c+1,f
  6071  061D  2DFD               	goto	L7
  6072  061E                     __end_of_CW_Delay10ms:	
  6073                           
  6074                           	psect	text27
  6075  0772                     __ptext27:	
  6076 ;; *************** function _SYSTEM_Initialize *****************
  6077 ;; Defined at:
  6078 ;;		line 86 in file "mcc_generated_files/mcc.c"
  6079 ;; Parameters:    Size  Location     Type
  6080 ;;		None
  6081 ;; Auto vars:     Size  Location     Type
  6082 ;;		None
  6083 ;; Return value:  Size  Location     Type
  6084 ;;                  1    wreg      void 
  6085 ;; Registers used:
  6086 ;;		wreg, status,2, status,0, pclath, cstack
  6087 ;; Tracked objects:
  6088 ;;		On entry : 0/0
  6089 ;;		On exit  : 0/0
  6090 ;;		Unchanged: 0/0
  6091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6092 ;;      Params:         0       0       0       0
  6093 ;;      Locals:         0       0       0       0
  6094 ;;      Temps:          0       0       0       0
  6095 ;;      Totals:         0       0       0       0
  6096 ;;Total ram usage:        0 bytes
  6097 ;; Hardware stack levels used:    1
  6098 ;; Hardware stack levels required when called:    4
  6099 ;; This function calls:
  6100 ;;		_EUSART1_Initialize
  6101 ;;		_OSCILLATOR_Initialize
  6102 ;;		_PIN_MANAGER_Initialize
  6103 ;; This function is called by:
  6104 ;;		_main
  6105 ;; This function uses a non-reentrant model
  6106 ;;
  6107                           
  6108                           
  6109                           ;psect for function _SYSTEM_Initialize
  6110  0772                     _SYSTEM_Initialize:	
  6111                           
  6112                           ;mcc.c: 89: PIN_MANAGER_Initialize();
  6113                           
  6114                           ;incstack = 0
  6115                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6116  0772  25A8               	fcall	_PIN_MANAGER_Initialize
  6117                           
  6118                           ;mcc.c: 90: OSCILLATOR_Initialize();
  6119  0773  2734               	fcall	_OSCILLATOR_Initialize
  6120                           
  6121                           ;mcc.c: 91: EUSART1_Initialize();
  6122  0774  270B               	fcall	_EUSART1_Initialize
  6123  0775  0008               	return
  6124  0776                     __end_of_SYSTEM_Initialize:	
  6125                           
  6126                           	psect	text28
  6127  05A8                     __ptext28:	
  6128 ;; *************** function _PIN_MANAGER_Initialize *****************
  6129 ;; Defined at:
  6130 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  6131 ;; Parameters:    Size  Location     Type
  6132 ;;		None
  6133 ;; Auto vars:     Size  Location     Type
  6134 ;;  state           1    0[BANK0 ] unsigned char 
  6135 ;; Return value:  Size  Location     Type
  6136 ;;                  1    wreg      void 
  6137 ;; Registers used:
  6138 ;;		wreg, status,2, status,0
  6139 ;; Tracked objects:
  6140 ;;		On entry : 0/0
  6141 ;;		On exit  : 0/0
  6142 ;;		Unchanged: 0/0
  6143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6144 ;;      Params:         0       0       0       0
  6145 ;;      Locals:         0       1       0       0
  6146 ;;      Temps:          0       0       0       0
  6147 ;;      Totals:         0       1       0       0
  6148 ;;Total ram usage:        1 bytes
  6149 ;; Hardware stack levels used:    1
  6150 ;; Hardware stack levels required when called:    3
  6151 ;; This function calls:
  6152 ;;		Nothing
  6153 ;; This function is called by:
  6154 ;;		_SYSTEM_Initialize
  6155 ;; This function uses a non-reentrant model
  6156 ;;
  6157                           
  6158                           
  6159                           ;psect for function _PIN_MANAGER_Initialize
  6160  05A8                     _PIN_MANAGER_Initialize:	
  6161                           
  6162                           ;pin_manager.c: 56: LATA = 0x00;
  6163                           
  6164                           ;incstack = 0
  6165                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  6166  05A8  0140               	movlb	0	; select bank0
  6167  05A9  0198               	clrf	24	;volatile
  6168                           
  6169                           ;pin_manager.c: 57: LATC = 0x00;
  6170  05AA  019A               	clrf	26	;volatile
  6171                           
  6172                           ;pin_manager.c: 62: TRISA = 0x03;
  6173  05AB  3003               	movlw	3
  6174  05AC  0092               	movwf	18	;volatile
  6175                           
  6176                           ;pin_manager.c: 63: TRISC = 0x22;
  6177  05AD  3022               	movlw	34
  6178  05AE  0094               	movwf	20	;volatile
  6179                           
  6180                           ;pin_manager.c: 68: ANSELC = 0x1D;
  6181  05AF  301D               	movlw	29
  6182  05B0  017E               	movlb	62	; select bank62
  6183  05B1  00CE               	movwf	78	;volatile
  6184                           
  6185                           ;pin_manager.c: 69: ANSELA = 0x37;
  6186  05B2  3037               	movlw	55
  6187  05B3  00B8               	movwf	56	;volatile
  6188                           
  6189                           ;pin_manager.c: 74: WPUA = 0x00;
  6190  05B4  01B9               	clrf	57	;volatile
  6191                           
  6192                           ;pin_manager.c: 75: WPUC = 0x00;
  6193  05B5  01CF               	clrf	79	;volatile
  6194                           
  6195                           ;pin_manager.c: 80: ODCONA = 0x00;
  6196  05B6  01BA               	clrf	58	;volatile
  6197                           
  6198                           ;pin_manager.c: 81: ODCONC = 0x00;
  6199  05B7  01D0               	clrf	80	;volatile
  6200                           
  6201                           ;pin_manager.c: 88: bool state = GIE;
  6202  05B8  3000               	movlw	0
  6203  05B9  1B8B               	btfsc	11,7	;volatile
  6204  05BA  3001               	movlw	1
  6205  05BB  0140               	movlb	0	; select bank0
  6206  05BC  00A0               	movwf	PIN_MANAGER_Initialize@state
  6207                           
  6208                           ;pin_manager.c: 89: GIE = 0;
  6209  05BD  138B               	bcf	11,7	;volatile
  6210                           
  6211                           ;pin_manager.c: 90: PPSLOCK = 0x55;
  6212  05BE  3055               	movlw	85
  6213  05BF  017D               	movlb	61	; select bank61
  6214  05C0  008F               	movwf	15	;volatile
  6215                           
  6216                           ;pin_manager.c: 91: PPSLOCK = 0xAA;
  6217  05C1  30AA               	movlw	170
  6218  05C2  008F               	movwf	15	;volatile
  6219                           
  6220                           ;pin_manager.c: 92: PPSLOCKbits.PPSLOCKED = 0x00;
  6221  05C3  100F               	bcf	15,0	;volatile
  6222                           
  6223                           ;pin_manager.c: 94: RX1DTPPSbits.RX1DTPPS = 0x15;
  6224  05C4  084B               	movf	75,w	;volatile
  6225  05C5  39C0               	andlw	-64
  6226  05C6  3815               	iorlw	21
  6227  05C7  00CB               	movwf	75	;volatile
  6228                           
  6229                           ;pin_manager.c: 95: RC4PPS = 0x0F;
  6230  05C8  300F               	movlw	15
  6231  05C9  017E               	movlb	62	; select bank62
  6232  05CA  00A4               	movwf	36	;volatile
  6233                           
  6234                           ;pin_manager.c: 97: PPSLOCK = 0x55;
  6235  05CB  3055               	movlw	85
  6236  05CC  017D               	movlb	61	; select bank61
  6237  05CD  008F               	movwf	15	;volatile
  6238                           
  6239                           ;pin_manager.c: 98: PPSLOCK = 0xAA;
  6240  05CE  30AA               	movlw	170
  6241  05CF  008F               	movwf	15	;volatile
  6242                           
  6243                           ;pin_manager.c: 99: PPSLOCKbits.PPSLOCKED = 0x01;
  6244  05D0  140F               	bsf	15,0	;volatile
  6245                           
  6246                           ;pin_manager.c: 101: GIE = state;
  6247  05D1  0140               	movlb	0	; select bank0
  6248  05D2  1C20               	btfss	PIN_MANAGER_Initialize@state,0
  6249  05D3  2DD6               	goto	u2250
  6250  05D4  178B               	bsf	11,7	;volatile
  6251  05D5  0008               	return
  6252  05D6                     u2250:	
  6253  05D6  138B               	bcf	11,7	;volatile
  6254  05D7  0008               	return
  6255  05D8                     __end_of_PIN_MANAGER_Initialize:	
  6256                           
  6257                           	psect	text29
  6258  0734                     __ptext29:	
  6259 ;; *************** function _OSCILLATOR_Initialize *****************
  6260 ;; Defined at:
  6261 ;;		line 94 in file "mcc_generated_files/mcc.c"
  6262 ;; Parameters:    Size  Location     Type
  6263 ;;		None
  6264 ;; Auto vars:     Size  Location     Type
  6265 ;;		None
  6266 ;; Return value:  Size  Location     Type
  6267 ;;                  1    wreg      void 
  6268 ;; Registers used:
  6269 ;;		wreg, status,2
  6270 ;; Tracked objects:
  6271 ;;		On entry : 0/0
  6272 ;;		On exit  : 0/0
  6273 ;;		Unchanged: 0/0
  6274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6275 ;;      Params:         0       0       0       0
  6276 ;;      Locals:         0       0       0       0
  6277 ;;      Temps:          0       0       0       0
  6278 ;;      Totals:         0       0       0       0
  6279 ;;Total ram usage:        0 bytes
  6280 ;; Hardware stack levels used:    1
  6281 ;; Hardware stack levels required when called:    3
  6282 ;; This function calls:
  6283 ;;		Nothing
  6284 ;; This function is called by:
  6285 ;;		_SYSTEM_Initialize
  6286 ;; This function uses a non-reentrant model
  6287 ;;
  6288                           
  6289                           
  6290                           ;psect for function _OSCILLATOR_Initialize
  6291  0734                     _OSCILLATOR_Initialize:	
  6292                           
  6293                           ;mcc.c: 97: OSCCON1 = 0x10;
  6294                           
  6295                           ;incstack = 0
  6296                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6297  0734  3010               	movlw	16
  6298  0735  0151               	movlb	17	; select bank17
  6299  0736  008D               	movwf	13	;volatile
  6300                           
  6301                           ;mcc.c: 99: OSCCON3 = 0x00;
  6302  0737  018F               	clrf	15	;volatile
  6303                           
  6304                           ;mcc.c: 101: OSCEN = 0x00;
  6305  0738  0191               	clrf	17	;volatile
  6306                           
  6307                           ;mcc.c: 103: OSCFRQ = 0x05;
  6308  0739  3005               	movlw	5
  6309  073A  0093               	movwf	19	;volatile
  6310                           
  6311                           ;mcc.c: 105: OSCSTAT = 0x00;
  6312  073B  0190               	clrf	16	;volatile
  6313                           
  6314                           ;mcc.c: 107: OSCTUNE = 0x00;
  6315  073C  0192               	clrf	18	;volatile
  6316  073D                     l82:	
  6317                           ;mcc.c: 110: {
  6318                           
  6319                           ;mcc.c: 109: while(PLLR == 0)
  6320                           
  6321  073D  1810               	btfsc	16,0	;volatile
  6322  073E  0008               	return
  6323  073F  2F3D               	goto	l82
  6324  0740                     __end_of_OSCILLATOR_Initialize:	
  6325                           
  6326                           	psect	text30
  6327  070B                     __ptext30:	
  6328 ;; *************** function _EUSART1_Initialize *****************
  6329 ;; Defined at:
  6330 ;;		line 64 in file "mcc_generated_files/eusart1.c"
  6331 ;; Parameters:    Size  Location     Type
  6332 ;;		None
  6333 ;; Auto vars:     Size  Location     Type
  6334 ;;		None
  6335 ;; Return value:  Size  Location     Type
  6336 ;;                  1    wreg      void 
  6337 ;; Registers used:
  6338 ;;		wreg
  6339 ;; Tracked objects:
  6340 ;;		On entry : 0/0
  6341 ;;		On exit  : 0/0
  6342 ;;		Unchanged: 0/0
  6343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6344 ;;      Params:         0       0       0       0
  6345 ;;      Locals:         0       0       0       0
  6346 ;;      Temps:          0       0       0       0
  6347 ;;      Totals:         0       0       0       0
  6348 ;;Total ram usage:        0 bytes
  6349 ;; Hardware stack levels used:    1
  6350 ;; Hardware stack levels required when called:    3
  6351 ;; This function calls:
  6352 ;;		Nothing
  6353 ;; This function is called by:
  6354 ;;		_SYSTEM_Initialize
  6355 ;; This function uses a non-reentrant model
  6356 ;;
  6357                           
  6358                           
  6359                           ;psect for function _EUSART1_Initialize
  6360  070B                     _EUSART1_Initialize:	
  6361                           
  6362                           ;eusart1.c: 67: PIE3bits.RC1IE = 0;
  6363                           
  6364                           ;incstack = 0
  6365                           ; Regs used in _EUSART1_Initialize: [wreg]
  6366  070B  014E               	movlb	14	; select bank14
  6367  070C  1299               	bcf	25,5	;volatile
  6368                           
  6369                           ;eusart1.c: 68: PIE3bits.TX1IE = 0;
  6370  070D  1219               	bcf	25,4	;volatile
  6371                           
  6372                           ;eusart1.c: 73: BAUD1CON = 0x08;
  6373  070E  3008               	movlw	8
  6374  070F  0142               	movlb	2	; select bank2
  6375  0710  009F               	movwf	31	;volatile
  6376                           
  6377                           ;eusart1.c: 76: RC1STA = 0x90;
  6378  0711  3090               	movlw	144
  6379  0712  009D               	movwf	29	;volatile
  6380                           
  6381                           ;eusart1.c: 79: TX1STA = 0x24;
  6382  0713  3024               	movlw	36
  6383  0714  009E               	movwf	30	;volatile
  6384                           
  6385                           ;eusart1.c: 82: SP1BRGL = 0x40;
  6386  0715  3040               	movlw	64
  6387  0716  009B               	movwf	27	;volatile
  6388                           
  6389                           ;eusart1.c: 85: SP1BRGH = 0x03;
  6390  0717  3003               	movlw	3
  6391  0718  009C               	movwf	28	;volatile
  6392                           
  6393                           ;eusart1.c: 91: PIE3bits.RC1IE = 1;
  6394  0719  014E               	movlb	14	; select bank14
  6395  071A  1699               	bsf	25,5	;volatile
  6396  071B  0008               	return
  6397  071C                     __end_of_EUSART1_Initialize:	
  6398                           
  6399                           	psect	intentry
  6400  0004                     __pintentry:	
  6401 ;; *************** function _INTERRUPT_InterruptManager *****************
  6402 ;; Defined at:
  6403 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  6404 ;; Parameters:    Size  Location     Type
  6405 ;;		None
  6406 ;; Auto vars:     Size  Location     Type
  6407 ;;		None
  6408 ;; Return value:  Size  Location     Type
  6409 ;;                  1    wreg      void 
  6410 ;; Registers used:
  6411 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6412 ;; Tracked objects:
  6413 ;;		On entry : 0/0
  6414 ;;		On exit  : 0/0
  6415 ;;		Unchanged: 0/0
  6416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6417 ;;      Params:         0       0       0       0
  6418 ;;      Locals:         0       0       0       0
  6419 ;;      Temps:          1       0       0       0
  6420 ;;      Totals:         1       0       0       0
  6421 ;;Total ram usage:        1 bytes
  6422 ;; Hardware stack levels used:    1
  6423 ;; Hardware stack levels required when called:    2
  6424 ;; This function calls:
  6425 ;;		_EUSART1_Receive_ISR
  6426 ;; This function is called by:
  6427 ;;		Interrupt level 1
  6428 ;; This function uses a non-reentrant model
  6429 ;;
  6430                           
  6431  0004                     _INTERRUPT_InterruptManager:	
  6432                           
  6433                           ;incstack = 0
  6434  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  6435                           
  6436                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6437  0005  3180               	pagesel	$
  6438  0006  0140               	movlb	0	; select bank0
  6439  0007  087F               	movf	127,w
  6440  0008  00F7               	movwf	??_INTERRUPT_InterruptManager
  6441                           
  6442                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE3bits.RC1IE == 1 && PIR3bits.RC1
      +                          IF == 1)
  6443  0009  1F0B               	btfss	11,6	;volatile
  6444  000A  2810               	goto	i1l136
  6445  000B  014E               	movlb	14	; select bank14
  6446  000C  1A99               	btfsc	25,5	;volatile
  6447  000D  1E8F               	btfss	15,5	;volatile
  6448  000E  2810               	goto	i1l136
  6449                           
  6450                           ;interrupt_manager.c: 55: {
  6451                           ;interrupt_manager.c: 56: EUSART1_Receive_ISR();
  6452  000F  22E0               	fcall	_EUSART1_Receive_ISR
  6453  0010                     i1l136:	
  6454                           ;interrupt_manager.c: 58: else
  6455                           ;interrupt_manager.c: 59: {
  6456                           
  6457                           ;interrupt_manager.c: 57: }
  6458                           
  6459  0010  0877               	movf	??_INTERRUPT_InterruptManager,w
  6460  0011  0140               	movlb	0	; select bank0
  6461  0012  00FF               	movwf	127
  6462  0013  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6463  0014  0009               	retfie
  6464  0015                     __end_of_INTERRUPT_InterruptManager:	
  6465                           
  6466                           	psect	text32
  6467  02E0                     __ptext32:	
  6468 ;; *************** function _EUSART1_Receive_ISR *****************
  6469 ;; Defined at:
  6470 ;;		line 103 in file "mcc_generated_files/eusart1.c"
  6471 ;; Parameters:    Size  Location     Type
  6472 ;;		None
  6473 ;; Auto vars:     Size  Location     Type
  6474 ;;  dat             1    6[COMMON] unsigned char 
  6475 ;; Return value:  Size  Location     Type
  6476 ;;                  1    wreg      void 
  6477 ;; Registers used:
  6478 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6479 ;; Tracked objects:
  6480 ;;		On entry : 0/0
  6481 ;;		On exit  : 0/0
  6482 ;;		Unchanged: 0/0
  6483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6484 ;;      Params:         0       0       0       0
  6485 ;;      Locals:         1       0       0       0
  6486 ;;      Temps:          1       0       0       0
  6487 ;;      Totals:         2       0       0       0
  6488 ;;Total ram usage:        2 bytes
  6489 ;; Hardware stack levels used:    1
  6490 ;; Hardware stack levels required when called:    1
  6491 ;; This function calls:
  6492 ;;		_EUSART1_Write
  6493 ;;		i1_CW_Delay10ms
  6494 ;; This function is called by:
  6495 ;;		_INTERRUPT_InterruptManager
  6496 ;; This function uses a non-reentrant model
  6497 ;;
  6498                           
  6499                           
  6500                           ;psect for function _EUSART1_Receive_ISR
  6501  02E0                     _EUSART1_Receive_ISR:	
  6502                           
  6503                           ;eusart1.c: 105: unsigned char dat;
  6504                           ;eusart1.c: 106: if(1 == RC1STAbits.OERR)
  6505                           
  6506                           ;incstack = 0
  6507                           ; Regs used in _EUSART1_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6508  02E0  0142               	movlb	2	; select bank2
  6509  02E1  1C9D               	btfss	29,1	;volatile
  6510  02E2  2AE5               	goto	i1l2454
  6511                           
  6512                           ;eusart1.c: 107: {
  6513                           ;eusart1.c: 110: RC1STAbits.CREN = 0;
  6514  02E3  121D               	bcf	29,4	;volatile
  6515                           
  6516                           ;eusart1.c: 111: RC1STAbits.CREN = 1;
  6517  02E4  161D               	bsf	29,4	;volatile
  6518  02E5                     i1l2454:	
  6519                           
  6520                           ;eusart1.c: 112: }
  6521                           ;eusart1.c: 115: dat = RC1REG;
  6522  02E5  0819               	movf	25,w	;volatile
  6523  02E6  00F5               	movwf	??_EUSART1_Receive_ISR
  6524  02E7  0875               	movf	??_EUSART1_Receive_ISR,w
  6525  02E8  00F6               	movwf	EUSART1_Receive_ISR@dat
  6526                           
  6527                           ;eusart1.c: 117: if((dat == 'S') && (count == 0))
  6528  02E9  3053               	movlw	83
  6529  02EA  0676               	xorwf	EUSART1_Receive_ISR@dat,w
  6530  02EB  1D03               	btfss	3,2
  6531  02EC  2AF3               	goto	i1l2462
  6532  02ED  087A               	movf	_count,w
  6533  02EE  1D03               	btfss	3,2
  6534  02EF  2AF3               	goto	i1l2462
  6535                           
  6536                           ;eusart1.c: 118: {
  6537                           ;eusart1.c: 119: count = 1;
  6538  02F0  01FA               	clrf	_count
  6539  02F1  0AFA               	incf	_count,f
  6540                           
  6541                           ;eusart1.c: 120: }
  6542  02F2  0008               	return
  6543  02F3                     i1l2462:	
  6544                           
  6545                           ;eusart1.c: 121: else if(dat == 'E')
  6546  02F3  3045               	movlw	69
  6547  02F4  0676               	xorwf	EUSART1_Receive_ISR@dat,w
  6548  02F5  1D03               	btfss	3,2
  6549  02F6  2B25               	goto	i1l2476
  6550                           
  6551                           ;eusart1.c: 122: {
  6552                           ;eusart1.c: 123: count ++;
  6553  02F7  3001               	movlw	1
  6554  02F8  00F5               	movwf	??_EUSART1_Receive_ISR
  6555  02F9  0875               	movf	??_EUSART1_Receive_ISR,w
  6556  02FA  07FA               	addwf	_count,f
  6557                           
  6558                           ;eusart1.c: 124: if((count == 4) && (rxbuf[0] == 0xAA) && (rxbuf[1] == 0xAA))
  6559  02FB  3004               	movlw	4
  6560  02FC  067A               	xorwf	_count,w
  6561  02FD  1D03               	btfss	3,2
  6562  02FE  2B23               	goto	i1l2474
  6563  02FF  30AA               	movlw	170
  6564  0300  0140               	movlb	0	; select bank0
  6565  0301  0654               	xorwf	_rxbuf,w
  6566  0302  1D03               	btfss	3,2
  6567  0303  2B23               	goto	i1l2474
  6568  0304  30AA               	movlw	170
  6569  0305  0655               	xorwf	_rxbuf+1,w
  6570  0306  1D03               	btfss	3,2
  6571  0307  2B23               	goto	i1l2474
  6572                           
  6573                           ;eusart1.c: 125: {
  6574                           ;eusart1.c: 126: do { LATCbits.LATC3 = 1; } while(0);
  6575  0308  159A               	bsf	26,3	;volatile
  6576                           
  6577                           ;eusart1.c: 127: CW_Delay10ms(1);
  6578  0309  3001               	movlw	1
  6579  030A  00F0               	movwf	i1CW_Delay10ms@c
  6580  030B  3000               	movlw	0
  6581  030C  00F1               	movwf	i1CW_Delay10ms@c+1
  6582  030D  2681               	fcall	i1_CW_Delay10ms
  6583                           
  6584                           ;eusart1.c: 128: EUSART1_Write('S');
  6585  030E  3053               	movlw	83
  6586  030F  2760               	fcall	_EUSART1_Write
  6587                           
  6588                           ;eusart1.c: 129: EUSART1_Write(0xAA);
  6589  0310  30AA               	movlw	170
  6590  0311  2760               	fcall	_EUSART1_Write
  6591                           
  6592                           ;eusart1.c: 130: EUSART1_Write(0xAA);
  6593  0312  30AA               	movlw	170
  6594  0313  2760               	fcall	_EUSART1_Write
  6595                           
  6596                           ;eusart1.c: 131: EUSART1_Write(cw_bat.voltage);
  6597  0314  0140               	movlb	0	; select bank0
  6598  0315  0866               	movf	_cw_bat+3,w
  6599  0316  2760               	fcall	_EUSART1_Write
  6600                           
  6601                           ;eusart1.c: 132: EUSART1_Write(cw_bat.capacity);
  6602  0317  0140               	movlb	0	; select bank0
  6603  0318  0864               	movf	_cw_bat+1,w
  6604  0319  2760               	fcall	_EUSART1_Write
  6605                           
  6606                           ;eusart1.c: 133: EUSART1_Write('E');
  6607  031A  3045               	movlw	69
  6608  031B  2760               	fcall	_EUSART1_Write
  6609                           
  6610                           ;eusart1.c: 134: CW_Delay10ms(1);
  6611  031C  3001               	movlw	1
  6612  031D  00F0               	movwf	i1CW_Delay10ms@c
  6613  031E  3000               	movlw	0
  6614  031F  00F1               	movwf	i1CW_Delay10ms@c+1
  6615  0320  2681               	fcall	i1_CW_Delay10ms
  6616                           
  6617                           ;eusart1.c: 135: do { LATCbits.LATC3 = 0; } while(0);
  6618  0321  0140               	movlb	0	; select bank0
  6619  0322  119A               	bcf	26,3	;volatile
  6620  0323                     i1l2474:	
  6621                           
  6622                           ;eusart1.c: 136: }
  6623                           ;eusart1.c: 137: count = 0;
  6624  0323  01FA               	clrf	_count
  6625                           
  6626                           ;eusart1.c: 138: }
  6627  0324  0008               	return
  6628  0325                     i1l2476:	
  6629                           
  6630                           ;eusart1.c: 139: else if(count > 0)
  6631  0325  087A               	movf	_count,w
  6632  0326  1903               	btfsc	3,2
  6633  0327  0008               	return
  6634                           
  6635                           ;eusart1.c: 140: {
  6636                           ;eusart1.c: 141: rxbuf[count - 1] = dat;
  6637  0328  0876               	movf	EUSART1_Receive_ISR@dat,w
  6638  0329  00F5               	movwf	??_EUSART1_Receive_ISR
  6639  032A  087A               	movf	_count,w
  6640  032B  3EFF               	addlw	255
  6641  032C  3E54               	addlw	(low (_rxbuf| 0))& (0+255)
  6642  032D  0086               	movwf	6
  6643  032E  0187               	clrf	7
  6644  032F  0875               	movf	??_EUSART1_Receive_ISR,w
  6645  0330  0081               	movwf	1
  6646                           
  6647                           ;eusart1.c: 142: count ++;
  6648  0331  3001               	movlw	1
  6649  0332  00F5               	movwf	??_EUSART1_Receive_ISR
  6650  0333  0875               	movf	??_EUSART1_Receive_ISR,w
  6651  0334  07FA               	addwf	_count,f
  6652                           
  6653                           ;eusart1.c: 144: else ;
  6654                           
  6655                           ;eusart1.c: 143: }
  6656  0335  0008               	return
  6657  0336                     __end_of_EUSART1_Receive_ISR:	
  6658                           
  6659                           	psect	text33
  6660  0681                     __ptext33:	
  6661 ;; *************** function i1_CW_Delay10ms *****************
  6662 ;; Defined at:
  6663 ;;		line 26 in file "CW201x.c"
  6664 ;; Parameters:    Size  Location     Type
  6665 ;;  c               2    0[COMMON] unsigned int 
  6666 ;; Auto vars:     Size  Location     Type
  6667 ;;  CW_Delay10ms    1    4[COMMON] unsigned char 
  6668 ;;  CW_Delay10ms    1    3[COMMON] unsigned char 
  6669 ;;  CW_Delay10ms    1    0        unsigned char 
  6670 ;; Return value:  Size  Location     Type
  6671 ;;                  1    wreg      void 
  6672 ;; Registers used:
  6673 ;;		wreg, status,2, status,0
  6674 ;; Tracked objects:
  6675 ;;		On entry : 0/0
  6676 ;;		On exit  : 0/0
  6677 ;;		Unchanged: 0/0
  6678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6679 ;;      Params:         2       0       0       0
  6680 ;;      Locals:         2       0       0       0
  6681 ;;      Temps:          1       0       0       0
  6682 ;;      Totals:         5       0       0       0
  6683 ;;Total ram usage:        5 bytes
  6684 ;; Hardware stack levels used:    1
  6685 ;; This function calls:
  6686 ;;		Nothing
  6687 ;; This function is called by:
  6688 ;;		_EUSART1_Receive_ISR
  6689 ;; This function uses a non-reentrant model
  6690 ;;
  6691                           
  6692                           
  6693                           ;psect for function i1_CW_Delay10ms
  6694  0681                     i1_CW_Delay10ms:	
  6695                           
  6696                           ;CW201x.c: 28: unsigned char a, b, d;
  6697                           ;CW201x.c: 29: for (;c>0;c--)
  6698                           
  6699                           ;incstack = 0
  6700                           ; Regs used in i1_CW_Delay10ms: [wreg+status,2+status,0]
  6701  0681  0870               	movf	i1CW_Delay10ms@c,w
  6702  0682  0471               	iorwf	i1CW_Delay10ms@c+1,w
  6703  0683  1903               	btfsc	3,2
  6704  0684  0008               	return
  6705                           
  6706                           ;CW201x.c: 30: {
  6707                           ;CW201x.c: 31: for(b=95;b>0;b--)
  6708  0685  305F               	movlw	95
  6709  0686  00F2               	movwf	??i1_CW_Delay10ms
  6710  0687  0872               	movf	??i1_CW_Delay10ms,w
  6711  0688  00F4               	movwf	i1CW_Delay10ms@b
  6712  0689  0874               	movf	i1CW_Delay10ms@b,w
  6713  068A  1903               	btfsc	3,2
  6714  068B  2E9D               	goto	i1l2446
  6715  068C                     i1l2436:	
  6716                           
  6717                           ;CW201x.c: 32: {
  6718                           ;CW201x.c: 33: for(a=209;a>0;a--) ;
  6719  068C  30D1               	movlw	209
  6720  068D  00F2               	movwf	??i1_CW_Delay10ms
  6721  068E  0872               	movf	??i1_CW_Delay10ms,w
  6722  068F  00F3               	movwf	i1CW_Delay10ms@a
  6723  0690  0873               	movf	i1CW_Delay10ms@a,w
  6724  0691  1903               	btfsc	3,2
  6725  0692  2E98               	goto	i1l2444
  6726  0693                     i1l2442:	
  6727  0693  3001               	movlw	1
  6728  0694  02F3               	subwf	i1CW_Delay10ms@a,f
  6729  0695  0873               	movf	i1CW_Delay10ms@a,w
  6730  0696  1D03               	btfss	3,2
  6731  0697  2E93               	goto	i1l2442
  6732  0698                     i1l2444:	
  6733  0698  3001               	movlw	1
  6734  0699  02F4               	subwf	i1CW_Delay10ms@b,f
  6735  069A  0874               	movf	i1CW_Delay10ms@b,w
  6736  069B  1D03               	btfss	3,2
  6737  069C  2E8C               	goto	i1l2436
  6738  069D                     i1l2446:	
  6739  069D  3001               	movlw	1
  6740  069E  02F0               	subwf	i1CW_Delay10ms@c,f
  6741  069F  3000               	movlw	0
  6742  06A0  3BF1               	subwfb	i1CW_Delay10ms@c+1,f
  6743  06A1  2E81               	goto	i1_CW_Delay10ms
  6744  06A2                     __end_ofi1_CW_Delay10ms:	
  6745                           
  6746                           	psect	text34
  6747  0760                     __ptext34:	
  6748 ;; *************** function _EUSART1_Write *****************
  6749 ;; Defined at:
  6750 ;;		line 94 in file "mcc_generated_files/eusart1.c"
  6751 ;; Parameters:    Size  Location     Type
  6752 ;;  txData          1    wreg     unsigned char 
  6753 ;; Auto vars:     Size  Location     Type
  6754 ;;  txData          1    0[COMMON] unsigned char 
  6755 ;; Return value:  Size  Location     Type
  6756 ;;                  1    wreg      void 
  6757 ;; Registers used:
  6758 ;;		wreg
  6759 ;; Tracked objects:
  6760 ;;		On entry : 0/0
  6761 ;;		On exit  : 0/0
  6762 ;;		Unchanged: 0/0
  6763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6764 ;;      Params:         0       0       0       0
  6765 ;;      Locals:         1       0       0       0
  6766 ;;      Temps:          0       0       0       0
  6767 ;;      Totals:         1       0       0       0
  6768 ;;Total ram usage:        1 bytes
  6769 ;; Hardware stack levels used:    1
  6770 ;; This function calls:
  6771 ;;		Nothing
  6772 ;; This function is called by:
  6773 ;;		_EUSART1_Receive_ISR
  6774 ;; This function uses a non-reentrant model
  6775 ;;
  6776                           
  6777                           
  6778                           ;psect for function _EUSART1_Write
  6779  0760                     _EUSART1_Write:	
  6780                           
  6781                           ;incstack = 0
  6782                           ; Regs used in _EUSART1_Write: [wreg]
  6783                           ;EUSART1_Write@txData stored from wreg
  6784  0760  00F0               	movwf	EUSART1_Write@txData
  6785  0761                     i1l38:	
  6786                           ;eusart1.c: 97: {
  6787                           
  6788                           ;eusart1.c: 96: while(0 == PIR3bits.TX1IF)
  6789                           
  6790  0761  014E               	movlb	14	; select bank14
  6791  0762  1E0F               	btfss	15,4	;volatile
  6792  0763  2F61               	goto	i1l38
  6793                           
  6794                           ;eusart1.c: 98: }
  6795                           ;eusart1.c: 100: TX1REG = txData;
  6796  0764  0870               	movf	EUSART1_Write@txData,w
  6797  0765  0142               	movlb	2	; select bank2
  6798  0766  009A               	movwf	26	;volatile
  6799  0767  0008               	return
  6800  0768                     __end_of_EUSART1_Write:	
  6801  007E                     btemp	set	126	;btemp
  6802  007E                     int$flags	set	126
  6803  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    128
    Data        0
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     52      76
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    cw_write@w_pdata	PTR unsigned char  size(1) Largest target is 1
		 -> cw_por@reset_val(BANK0[1]), cw_init@reg_val(BANK0[1]), cw_update_config_info@reset_val(BANK0[1]), cw_update_config_info@reg_val(BANK0[1]), 

    cw_read_word@r_pdata	PTR unsigned char  size(1) Largest target is 2
		 -> cw_get_vol@reg_val(BANK0[2]), 

    cw_read@r_pdata	PTR unsigned char  size(1) Largest target is 1
		 -> cw_get_capacity@reg_val(BANK0[1]), cw_init@reg_val(BANK0[1]), cw_update_config_info@reg_val(BANK0[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Receive_ISR->i1_CW_Delay10ms

Critical Paths under _main in BANK0

    _cw_bat_work->_update_capacity
    _cw_bat_work->_update_vol
    _update_vol->_cw_get_vol
    _cw_get_vol->___lldiv
    _cw_read_word->_wait_r_ack
    _sn_ack->_Delay10us
    ___lldiv->___lmul
    _update_capacity->_cw_get_capacity
    _cw_get_capacity->_cw_por
    _cw_por->_cw_init
    _cw_bat_init->_cw_init
    _cw_init->_cw_update_config_info
    _cw_update_config_info->_cw_read
    _cw_update_config_info->_cw_write
    _cw_write->_wait_r_ack
    _cw_read->_wait_r_ack
    _write_byte->_Delay10us
    _wait_r_ack->_r_ack
    _stop->_Delay10us
    _r_ack->_Delay10us
    _start->_Delay10us
    _s_ack->_Delay10us
    _read_byte->_Delay10us
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   23826
                                             50 BANK0      2     2      0
                       _CW_Delay10ms
                  _SYSTEM_Initialize
                        _cw_bat_init
                        _cw_bat_work
 ---------------------------------------------------------------------------------
 (1) _cw_bat_work                                          0     0      0   14990
                    _update_capacity
                  _update_usb_online
                         _update_vol
 ---------------------------------------------------------------------------------
 (2) _update_vol                                           2     2      0    2726
                                             48 BANK0      2     2      0
                         _cw_get_vol
 ---------------------------------------------------------------------------------
 (3) _cw_get_vol                                          22    20      2    2659
                                             26 BANK0     22    20      2
                            ___lldiv
                             ___lmul
                       _cw_read_word
 ---------------------------------------------------------------------------------
 (4) _cw_read_word                                         7     4      3    1687
                                             16 BANK0      7     4      3
                          _read_byte
                              _s_ack
                             _sn_ack
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (5) _sn_ack                                               0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     220
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     290
                                             12 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _update_usb_online                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _update_capacity                                      3     3      0   12264
                                             47 BANK0      3     3      0
                    _cw_get_capacity
 ---------------------------------------------------------------------------------
 (3) _cw_get_capacity                                      9     7      2   12175
                                             39 BANK0      8     6      2
                             _cw_por
                            _cw_read
 ---------------------------------------------------------------------------------
 (4) _cw_por                                               7     5      2   10195
                                             32 BANK0      7     5      2
                      _CW_Delay100us
                            _cw_init
                           _cw_write
 ---------------------------------------------------------------------------------
 (1) _cw_bat_init                                          3     3      0    8470
                                             32 BANK0      3     3      0
                            _cw_init
 ---------------------------------------------------------------------------------
 (5) _cw_init                                              6     6      0    8401
                                             26 BANK0      6     6      0
                       _CW_Delay10ms
                            _cw_read
              _cw_update_config_info
                           _cw_write
 ---------------------------------------------------------------------------------
 (6) _cw_update_config_info                                6     6      0    4045
                                             20 BANK0      6     6      0
                      _CW_Delay100us
                            _cw_read
                           _cw_write
 ---------------------------------------------------------------------------------
 (5) _cw_write                                             4     1      3    1516
                                             16 BANK0      4     1      3
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (4) _cw_read                                              4     2      2    1842
                                             16 BANK0      4     2      2
                          _read_byte
                              _s_ack
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (5) _write_byte                                           3     3      0     229
                                              4 BANK0      3     3      0
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _wait_r_ack                                           6     4      2     391
                                             10 BANK0      6     4      2
                              _r_ack
                               _stop
 ---------------------------------------------------------------------------------
 (6) _stop                                                 0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (6) _r_ack                                                6     4      2     161
                                              4 BANK0      6     4      2
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _start                                                0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _s_ack                                                0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _read_byte                                            3     3      0     252
                                              4 BANK0      3     3      0
                          _Delay10us
 ---------------------------------------------------------------------------------
 (6) _Delay10us                                            4     4      0     138
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (7) _CW_Delay100us                                        4     4      0     138
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (6) _CW_Delay10ms                                         6     4      2     341
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      23
                 _EUSART1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          1     1      0     278
                                              7 COMMON     1     1      0
                _EUSART1_Receive_ISR
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Receive_ISR                                 2     2      0     278
                                              5 COMMON     2     2      0
                      _EUSART1_Write
                     i1_CW_Delay10ms
 ---------------------------------------------------------------------------------
 (13) i1_CW_Delay10ms                                      6     4      2     189
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (13) _EUSART1_Write                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CW_Delay10ms
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _cw_bat_init
     _cw_init
       _CW_Delay10ms
       _cw_read
         _read_byte
           _Delay10us
         _s_ack
           _Delay10us
         _start
           _Delay10us
         _stop
           _Delay10us
         _wait_r_ack
           _r_ack
             _Delay10us
           _stop
             _Delay10us
         _write_byte
           _Delay10us
       _cw_update_config_info
         _CW_Delay100us
         _cw_read
           _read_byte
             _Delay10us
           _s_ack
             _Delay10us
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us
         _cw_write
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us
       _cw_write
         _start
           _Delay10us
         _stop
           _Delay10us
         _wait_r_ack
           _r_ack
             _Delay10us
           _stop
             _Delay10us
         _write_byte
           _Delay10us
   _cw_bat_work
     _update_capacity
       _cw_get_capacity
         _cw_por
           _CW_Delay100us
           _cw_init
             _CW_Delay10ms
             _cw_read
               _read_byte
                 _Delay10us
               _s_ack
                 _Delay10us
               _start
                 _Delay10us
               _stop
                 _Delay10us
               _wait_r_ack
                 _r_ack
                   _Delay10us
                 _stop
                   _Delay10us
               _write_byte
                 _Delay10us
             _cw_update_config_info
               _CW_Delay100us
               _cw_read
                 _read_byte
                   _Delay10us
                 _s_ack
                   _Delay10us
                 _start
                   _Delay10us
                 _stop
                   _Delay10us
                 _wait_r_ack
                   _r_ack
                     _Delay10us
                   _stop
                     _Delay10us
                 _write_byte
                   _Delay10us
               _cw_write
                 _start
                   _Delay10us
                 _stop
                   _Delay10us
                 _wait_r_ack
                   _r_ack
                     _Delay10us
                   _stop
                     _Delay10us
                 _write_byte
                   _Delay10us
             _cw_write
               _start
                 _Delay10us
               _stop
                 _Delay10us
               _wait_r_ack
                 _r_ack
                   _Delay10us
                 _stop
                   _Delay10us
               _write_byte
                 _Delay10us
           _cw_write
             _start
               _Delay10us
             _stop
               _Delay10us
             _wait_r_ack
               _r_ack
                 _Delay10us
               _stop
                 _Delay10us
             _write_byte
               _Delay10us
         _cw_read
           _read_byte
             _Delay10us
           _s_ack
             _Delay10us
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us
     _update_usb_online
     _update_vol
       _cw_get_vol
         ___lldiv
           ___lmul (ARG)
         ___lmul
         _cw_read_word
           _read_byte
             _Delay10us
           _s_ack
             _Delay10us
           _sn_ack
             _Delay10us
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     _EUSART1_Write
     i1_CW_Delay10ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     34      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
ABS                  0      0      57      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      57      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Tue Aug 29 14:03:22 2017

                                    __CFG_CP$OFF 0000                                               l82 073D  
                                _update_capacity 061E                                      __CFG_LVP$ON 0000  
                                            l205 040A                                              l208 040C  
                                            l314 020D                                              l315 0219  
                                            l316 0225                                              l263 017F  
                                            l276 0070                                              l439 05DF  
                                            _GIE 005F                                     __CFG_BORV$LO 0000  
                                            wreg 0009                                    __CFG_BBEN$OFF 0000  
                                   __CFG_ZCD$OFF 0000                                    ?_cw_read_word 0030  
                                           l2010 0195                                    CW_Delay10ms@a 0023  
                                  CW_Delay10ms@b 0024                                             l2022 01AB  
                                  CW_Delay10ms@c 0020                                             l2032 01BE  
                                           l2120 00C1                                             l2104 00AA  
                                           l2114 00BC                                             l2132 00D8  
                                           l2140 00E4                                             l2300 044C  
                                           l2212 029E                                             l2150 00F9  
                                           l2054 0046                                             l2046 0035  
                                           l2302 044D                                             l2230 02AD  
                                           l2206 0291                                             l2240 0581  
                                           l2232 02DA                                             l2082 0080  
                                           l2066 005F                                             l2218 02AC  
                                           l2308 0452                                             l2260 0355  
                                           l2244 058B                                             l2228 02D4  
                                           l2332 01F3                                             l2324 01DB  
                                           l1710 064A                                             l2174 03A5  
                                           l1720 065B                                             l2096 0097  
                                           l2088 0085                                             l2424 075D  
                                           l2272 0380                                             l2344 0234  
                                           l2186 03BC                                             l2258 0347  
                                           l1716 0651                                             l2196 03CE  
                                           l2268 0375                                             l1718 0656  
                                           l1902 0541                                             l2286 042D  
                                           l2542 03EB                                             l1840 066B  
                                           l2544 03F5                                             l1850 067C  
                                           l1818 05EF                                             l1826 05FA  
                                           l2546 0400                                             l2538 03E0  
                                           l1924 060F                                             l1772 056A  
                                           l1860 04EB                                             l2548 0410  
                                           l1926 0614                                             l1918 0608  
                                           l1846 0672                                             l1774 0575  
                                           l1758 0554                                             l1790 06B1  
                                           l1942 010F                                             l2494 06D3  
                                           l1928 0619                                             l1848 0677  
                                           l1872 0506                                             l2488 06C4  
                                           l1866 04F8                                             l1954 011D  
                                           l1964 013A                                             l1948 0118  
                                           l1894 0531                                             l1982 0159  
                                           l1974 0147                                             l1888 0524  
                                           l1992 016E                                             l1968 0142  
                                           l1988 0166                                             u2015 02CD  
                                           u1400 06AF                                             u2105 0356  
                                           u2025 02B6                                             u2115 036A  
                                           u2125 0376                                             u2045 058C  
                                           _LATA 0018                                             u2055 0593  
                                           u2215 0213                                             _LATC 001A  
                                           u2305 0638                                             u2225 021F  
                                           u2250 05D6                                             u2085 034A  
                                           u2325 06ED                                             u2295 062F  
                                           i1l38 0761                                             _PLLR 4480  
                                           _WPUA 1F39                                             _WPUC 1F4F  
                                  _EUSART1_Write 0760                                    __CFG_FCMEN$ON 0000  
                                           _main 03D1                                             fsr0h 0005  
                                           fsr1h 0007                                             indf0 0000  
                                           fsr0l 0004                                             indf1 0001  
                                           fsr1l 0006                                             btemp 007E  
                                           _stop 0728                                    __CFG_BOREN$ON 0000  
                                           start 0015                                    __CFG_CSWEN$ON 0000  
                                 CW_Delay100us@a 0021                                   CW_Delay100us@b 0022  
                                 CW_Delay100us@i 0023                                 ?_cw_get_capacity 0047  
                     update_capacity@cw_capacity 0050                   __size_of_OSCILLATOR_Initialize 000C  
                  __end_of_OSCILLATOR_Initialize 0740                            _cw_update_config_info 00FB  
                                          ?_main 0070                                    __CFG_WDTE$OFF 0000  
                                __end_of___lldiv 0389                                            ?_stop 0070  
                                          i1l136 0010                                            _OSCEN 0891  
                                          _TRISA 0012                                            _TRISC 0014  
                            ___lmul@multiplicand 0024                                    __CFG_WRTB$OFF 0000  
                                  __CFG_WRTC$OFF 0000                                  __end_of_cw_init 00FB  
                                __end_of_cw_read 0514                                   ??_cw_read_word 0033  
                                          _count 007A                                            _r_ack 06F4  
                                          _s_ack 074B                                            _state 0079  
                                          _start 0740                                            _rxbuf 0054  
                                 ?_EUSART1_Write 0070                        cw_init@cw_bat_config_info 045B  
                                          status 0003                                            wtemp0 007E  
                                 __CFG_MCLRE$OFF 0000                          __end_of_update_capacity 063F  
                                __initialization 0016                       __end_of_EUSART1_Initialize 071C  
                                   __end_of_main 0416                               __size_of_Delay10us 0021  
                                   __end_of_stop 0734                                   __CFG_SAFEN$OFF 0000  
                               ??i1_CW_Delay10ms 0072                      ?_INTERRUPT_InterruptManager 0070  
                                 cw_bat_init@ret 0042                                           ??_main 0052  
                                         ??_stop 0024                                           ?_r_ack 0024  
                                         ?_s_ack 0070                                 cw_read@point_reg 0033  
                                         _CHARGE 0078                                           _ANSELA 1F38  
                                         _ANSELC 1F4E                                           ?_start 0070  
                                         _RC1REG 0119                                           _RC1STA 011D  
                                         _RC4PPS 1F24                                           _ODCONA 1F3A  
                                         _ODCONC 1F50                                           i1l2442 0693  
                                         i1l2444 0698                                           i1l2436 068C  
                                         i1l2446 069D                                           i1l2462 02F3  
                                         i1l2454 02E5                                           i1l2474 0323  
                                         i1l2476 0325                                   __CFG_WDTCCS$SC 0000  
                                         _OSCFRQ 0893                                           _TX1REG 011A  
                                         _TX1STA 011E                                  i1CW_Delay10ms@a 0073  
                                i1CW_Delay10ms@b 0074                                  i1CW_Delay10ms@c 0070  
                                cw_write@w_pdata 0030                                   __CFG_PWRTE$OFF 0000  
                                  cw_get_vol@F80 0069                             __size_of_cw_bat_init 001B  
                           __size_of_cw_bat_work 0004                                           ___lmul 0578  
                                  cw_get_vol@ret 0041                                   __CFG_STVREN$ON 0000  
                                      ??___lldiv 0034                                 __end_of_cw_write 0546  
                                         _cw_bat 0063                                           _cw_por 0389  
                         ?_cw_update_config_info 0070                                           _sn_ack 071C  
                                      ??_cw_init 003A                                        ??_cw_read 0032  
                                  ?_CW_Delay10ms 0020                                  ??_EUSART1_Write 0070  
                              __end_of_Delay10us 0660                                _SYSTEM_Initialize 0772  
                        __end_of__initialization 001F                               ?_SYSTEM_Initialize 0070  
                              _update_usb_online 0756                                 ?_update_capacity 0070  
                              cw_get_vol@ad_buff 004E                                   __pcstackCOMMON 0070  
                             ?_update_usb_online 0070                              ??_SYSTEM_Initialize 0021  
                           __end_of_cw_read_word 02E0                                    __end_of_r_ack 070B  
                                  __end_of_s_ack 0756                                    __end_of_start 074B  
                         __size_of_CW_Delay100us 0021                                   ??_CW_Delay10ms 0022  
                            ??_update_usb_online 0020                                cw_get_vol@reg_val 0043  
                    __end_of_EUSART1_Receive_ISR 0336                                  cw_bat_init@loop 0041  
                                        ??_r_ack 0026                                          ??_s_ack 0024  
                      __end_of_SYSTEM_Initialize 0776                                          ??_start 0024  
                                     __pbssBANK0 0054                        __end_of_update_usb_online 0760  
                             __size_of_read_byte 0024                                       __pmaintext 03D1  
                                        ?___lmul 0020                                  __CFG_PPS1WAY$ON 0000  
                                     __pintentry 0004                                          ?_cw_por 0040  
                                 ___lmul@product 0028                                          ?_sn_ack 0070  
                                        _SP1BRGH 011C                                          _SP1BRGL 011B  
                                        _OSCCON1 088D                                          _OSCCON3 088F  
                                        _OSCSTAT 0890                                          _OSCTUNE 0892  
                                        _PPSLOCK 1E8F                                       _cw_get_vol 01C0  
                                      ?_cw_write 0030                                    _CW_Delay100us 0660  
                           update_vol@cw_voltage 0050                                  __size_of___lmul 0030  
              __end_ofcw_init@cw_bat_config_info 049B                                          ___lldiv 0336  
                                __size_of_cw_por 0048                                  __size_of_sn_ack 000C  
                                        __ptext1 076E                                          __ptext2 06DD  
                                        __ptext3 01C0                                          __ptext4 0281  
                                        __ptext5 071C                                          __ptext6 0578  
                                        __ptext7 0336                                          __ptext8 0756  
                                        __ptext9 061E                                          _cw_init 0022  
                                        _cw_read 04DB                                  __CFG_WRTAPP$OFF 0000  
                         EUSART1_Receive_ISR@dat 0076                            _OSCILLATOR_Initialize 0734  
                              __end_of_read_byte 05FC                               _EUSART1_Initialize 070B  
                       __size_of_cw_get_capacity 0045                         ??_PIN_MANAGER_Initialize 0020  
                                __CFG_WRTSAF$OFF 0000                       __size_of_SYSTEM_Initialize 0004  
                                        clrloop0 0769                                          main@ret 0053  
                           end_of_initialization 001F                                 write_byte@w_data 0025  
                                 ?_CW_Delay100us 0070                              ?_EUSART1_Initialize 0070  
                                     ??_cw_write 0033                       __size_of_update_usb_online 000A  
                           __end_of_CW_Delay10ms 061E                            __size_of_cw_read_word 005F  
                                ___lldiv@divisor 002C                                  cw_por@reset_val 0044  
                                ___lldiv@counter 0039                                       _reset_loop 006B  
                   cw_update_config_info@reg_val 0039                          ??_cw_update_config_info 0034  
                                    wait_r_ack@i 002E                                       _wait_r_ack 0546  
                           ??_EUSART1_Initialize 0020                            __CFG_WDTCPS$WDTCPS_31 0000  
                                      _PORTCbits 000E                         cw_update_config_info@ret 0036  
                                      _TRISCbits 0014                                       _update_vol 06DD  
                                    ?_cw_get_vol 003A                              EUSART1_Write@txData 0070  
                               __CFG_FEXTOSC$OFF 0000                                     _cw_read_word 0281  
                                      _Delay10us 063F                                   cw_init@reg_val 003F  
                                  ??_cw_bat_init 0040                                    ??_cw_bat_work 0052  
                                     cw_init@ret 003D                                   cw_read@r_pdata 0030  
                             cw_get_vol@ad_value 0049                                   __end_of___lmul 05A8  
                                     _write_byte 06A2                                   __end_of_cw_por 03D1  
                         ?_OSCILLATOR_Initialize 0070                                   __end_of_sn_ack 0728  
                            start_initialization 0016                  __size_of_PIN_MANAGER_Initialize 0030  
                        __size_ofi1_CW_Delay10ms 0021                                  ??_CW_Delay100us 0020  
                          __end_of_EUSART1_Write 0768                       cw_get_capacity@cw_capacity 004B  
                              ??_cw_get_capacity 0049                                       ?_Delay10us 0070  
                               __CFG_LPBOREN$OFF 0000                                         ??___lmul 0028  
                            __end_of_cw_bat_init 06DD                              __size_of_cw_get_vol 00C1  
                                    ?_wait_r_ack 002A                              __end_of_cw_bat_work 0772  
                                       ??_cw_por 0042                                         ??_sn_ack 0024  
                                     read_byte@i 0025                         __size_of_update_capacity 0021  
                         cw_update_config_info@i 0038                           cw_get_capacity@reg_val 004E  
                                    __pbssCOMMON 0078                                        ___latbits 0000  
                                  __pcstackBANK0 0020                                      ?_update_vol 0070  
                          __size_of_CW_Delay10ms 0022                     __size_of_EUSART1_Receive_ISR 0056  
                              __size_of_cw_write 0032                           cw_get_vol@ad_value_max 0047  
                         cw_get_vol@ad_value_min 0045                              cw_read_word@r_pdata 0030  
                         _PIN_MANAGER_Initialize 05A8                                         ?___lldiv 002C  
                                    ?_write_byte 0070                     ??_INTERRUPT_InterruptManager 0077  
                          cw_read_word@point_reg 0035                                         ?_cw_init 0070  
                                       ?_cw_read 0030                                         _BAUD1CON 011F  
                                   _CW_Delay10ms 05FC                             __CFG_RSTOSC$HFINTPLL 0000  
                                 __size_of_r_ack 0017                                   __size_of_s_ack 000B  
                                      _read_byte 05D8                                   __size_of_start 000B  
                            __size_of_wait_r_ack 0032                                      ??_Delay10us 0020  
                                       _LATAbits 0018                                         _LATCbits 001A  
                                      clear_ram0 0768                                         _PIE3bits 0719  
                                    _cw_bat_init 06C2                                      _cw_bat_work 076E  
            __size_of_INTERRUPT_InterruptManager 0011                                         _PIR3bits 070F  
                              __CFG_BBSIZE$BB512 0000                              __size_of_update_vol 0017  
                 __size_of_cw_update_config_info 00C5                    __end_of_cw_update_config_info 01C0  
                                   _RX1DTPPSbits 1ECB                                      write_byte@i 0026  
                                 i1_CW_Delay10ms 0681                                     ??_cw_get_vol 003C  
                              ??_update_capacity 004F                                        cw_por@ret 0045  
                              ___lmul@multiplier 0020                                       ?_read_byte 0070  
                              cw_write@point_reg 0033                              __size_of_write_byte 0020  
                                read_byte@r_data 0026                          ??_OSCILLATOR_Initialize 0020  
                             __end_of_cw_get_vol 0281                                 __size_of___lldiv 0053  
                    __size_of_EUSART1_Initialize 0011                                  _cw_get_capacity 0416  
                         __end_ofi1_CW_Delay10ms 06A2                                 __size_of_cw_init 00D9  
                               __size_of_cw_read 0039                               cw_read_word@length 0031  
                                       __ptext10 0416                                         __ptext11 0389  
                                       __ptext20 06F4                                         __ptext12 06C2  
                                       __ptext21 0740                                         __ptext13 0022  
                                       __ptext30 070B                                         __ptext22 074B  
                                       __ptext14 00FB                                         __ptext23 05D8  
                                       __ptext15 0514                                         __ptext32 02E0  
                                       __ptext24 063F                                         __ptext16 04DB  
                                       __ptext33 0681                                         __ptext25 0660  
                                       __ptext17 06A2                                         __ptext34 0760  
                                       __ptext26 05FC                                         __ptext18 0546  
                                       __ptext27 0772                                         __ptext19 0728  
                                       __ptext28 05A8                                         __ptext29 0734  
                                       _cw_write 0514                               cw_get_capacity@ret 004C  
                                  __size_of_main 0045                                    __size_of_stop 000C  
                           __CFG_WDTCWS$WDTCWS_7 0000                                       Delay10us@a 0021  
                                     Delay10us@b 0022                                       Delay10us@i 0023  
                                     _RC1STAbits 011D                                         int$flags 007E  
                                   ??_wait_r_ack 002C               __end_of_INTERRUPT_InterruptManager 0015  
                     _INTERRUPT_InterruptManager 0004                                         cw_init@i 003C  
                            _EUSART1_Receive_ISR 02E0                   cw_update_config_info@reset_val 0035  
                    PIN_MANAGER_Initialize@state 0020                                         r_ack@ack 0028  
                                ?i1_CW_Delay10ms 0070                                    wait_r_ack@ack 002C  
                                     _INTCONbits 000B  __end_ofcw_update_config_info@cw_bat_config_info 04DB  
        cw_update_config_info@cw_bat_config_info 049B                                     ??_update_vol 0050  
                                    ??_read_byte 0024                                         intlevel1 0000  
                          __end_of_CW_Delay100us 0681                                cw_read_word@count 0036  
                           ?_EUSART1_Receive_ISR 0070                               __end_of_wait_r_ack 0578  
                               ___lldiv@dividend 0030                          ?_PIN_MANAGER_Initialize 0070  
                              __CFG_CLKOUTEN$OFF 0000                                      _PPSLOCKbits 1E8F  
                        __end_of_cw_get_capacity 045B                               __end_of_update_vol 06F4  
                         cw_get_vol@get_ad_times 004D                                     ??_write_byte 0024  
                         __size_of_EUSART1_Write 0008                                    __pstringtext1 045B  
                                  __pstringtext2 049B                                 ___lldiv@quotient 0035  
                          ??_EUSART1_Receive_ISR 0075                   __end_of_PIN_MANAGER_Initialize 05D8  
                             __end_of_write_byte 06C2                                     ?_cw_bat_init 0070  
                                   ?_cw_bat_work 0070  
