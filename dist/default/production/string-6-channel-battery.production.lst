

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Mon Aug 28 14:50:23 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F15323
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	dabs	1,0x7E,2
    37  0000                     
    38                           ; Version 1.43
    39                           ; Generated 25/07/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16F15323 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     	;# 
    73  0001                     	;# 
    74  0002                     	;# 
    75  0003                     	;# 
    76  0004                     	;# 
    77  0005                     	;# 
    78  0006                     	;# 
    79  0007                     	;# 
    80  0008                     	;# 
    81  0009                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  000C                     	;# 
    85  000E                     	;# 
    86  0012                     	;# 
    87  0014                     	;# 
    88  0018                     	;# 
    89  001A                     	;# 
    90  009B                     	;# 
    91  009B                     	;# 
    92  009C                     	;# 
    93  009D                     	;# 
    94  009E                     	;# 
    95  009F                     	;# 
    96  0119                     	;# 
    97  0119                     	;# 
    98  0119                     	;# 
    99  011A                     	;# 
   100  011A                     	;# 
   101  011A                     	;# 
   102  011B                     	;# 
   103  011B                     	;# 
   104  011B                     	;# 
   105  011B                     	;# 
   106  011B                     	;# 
   107  011C                     	;# 
   108  011C                     	;# 
   109  011C                     	;# 
   110  011D                     	;# 
   111  011D                     	;# 
   112  011D                     	;# 
   113  011E                     	;# 
   114  011E                     	;# 
   115  011E                     	;# 
   116  011F                     	;# 
   117  011F                     	;# 
   118  011F                     	;# 
   119  011F                     	;# 
   120  011F                     	;# 
   121  018C                     	;# 
   122  018D                     	;# 
   123  018E                     	;# 
   124  018F                     	;# 
   125  0190                     	;# 
   126  0191                     	;# 
   127  0192                     	;# 
   128  020C                     	;# 
   129  020C                     	;# 
   130  020D                     	;# 
   131  020E                     	;# 
   132  020F                     	;# 
   133  020F                     	;# 
   134  0210                     	;# 
   135  0210                     	;# 
   136  0211                     	;# 
   137  0211                     	;# 
   138  028C                     	;# 
   139  028C                     	;# 
   140  028D                     	;# 
   141  028D                     	;# 
   142  028E                     	;# 
   143  028F                     	;# 
   144  0290                     	;# 
   145  0291                     	;# 
   146  030C                     	;# 
   147  030C                     	;# 
   148  030D                     	;# 
   149  030E                     	;# 
   150  030F                     	;# 
   151  0310                     	;# 
   152  0310                     	;# 
   153  0311                     	;# 
   154  0312                     	;# 
   155  0313                     	;# 
   156  0314                     	;# 
   157  0315                     	;# 
   158  0316                     	;# 
   159  0318                     	;# 
   160  0319                     	;# 
   161  031A                     	;# 
   162  031C                     	;# 
   163  031D                     	;# 
   164  031E                     	;# 
   165  038C                     	;# 
   166  038D                     	;# 
   167  038E                     	;# 
   168  058C                     	;# 
   169  058C                     	;# 
   170  058D                     	;# 
   171  058E                     	;# 
   172  058F                     	;# 
   173  058F                     	;# 
   174  0590                     	;# 
   175  0591                     	;# 
   176  0592                     	;# 
   177  0593                     	;# 
   178  059C                     	;# 
   179  059C                     	;# 
   180  059D                     	;# 
   181  059D                     	;# 
   182  059E                     	;# 
   183  059F                     	;# 
   184  060C                     	;# 
   185  060D                     	;# 
   186  060E                     	;# 
   187  060F                     	;# 
   188  0610                     	;# 
   189  0611                     	;# 
   190  0612                     	;# 
   191  0613                     	;# 
   192  0614                     	;# 
   193  070C                     	;# 
   194  070D                     	;# 
   195  070E                     	;# 
   196  070F                     	;# 
   197  0710                     	;# 
   198  0711                     	;# 
   199  0712                     	;# 
   200  0713                     	;# 
   201  0716                     	;# 
   202  0717                     	;# 
   203  0718                     	;# 
   204  0719                     	;# 
   205  071A                     	;# 
   206  071B                     	;# 
   207  071C                     	;# 
   208  071D                     	;# 
   209  0796                     	;# 
   210  0797                     	;# 
   211  0798                     	;# 
   212  0799                     	;# 
   213  079A                     	;# 
   214  079B                     	;# 
   215  080C                     	;# 
   216  080D                     	;# 
   217  080E                     	;# 
   218  080F                     	;# 
   219  0810                     	;# 
   220  0811                     	;# 
   221  0812                     	;# 
   222  0813                     	;# 
   223  0814                     	;# 
   224  081A                     	;# 
   225  081A                     	;# 
   226  081B                     	;# 
   227  081C                     	;# 
   228  081C                     	;# 
   229  081D                     	;# 
   230  081E                     	;# 
   231  081F                     	;# 
   232  088C                     	;# 
   233  088D                     	;# 
   234  088E                     	;# 
   235  088F                     	;# 
   236  0890                     	;# 
   237  0891                     	;# 
   238  0892                     	;# 
   239  0893                     	;# 
   240  0895                     	;# 
   241  0896                     	;# 
   242  090C                     	;# 
   243  090E                     	;# 
   244  090F                     	;# 
   245  091F                     	;# 
   246  098F                     	;# 
   247  098F                     	;# 
   248  0990                     	;# 
   249  0991                     	;# 
   250  0992                     	;# 
   251  0993                     	;# 
   252  0994                     	;# 
   253  0995                     	;# 
   254  0996                     	;# 
   255  0997                     	;# 
   256  1E0F                     	;# 
   257  1E10                     	;# 
   258  1E11                     	;# 
   259  1E12                     	;# 
   260  1E13                     	;# 
   261  1E14                     	;# 
   262  1E15                     	;# 
   263  1E16                     	;# 
   264  1E17                     	;# 
   265  1E18                     	;# 
   266  1E19                     	;# 
   267  1E1A                     	;# 
   268  1E1B                     	;# 
   269  1E1C                     	;# 
   270  1E1D                     	;# 
   271  1E1E                     	;# 
   272  1E1F                     	;# 
   273  1E20                     	;# 
   274  1E21                     	;# 
   275  1E22                     	;# 
   276  1E23                     	;# 
   277  1E24                     	;# 
   278  1E25                     	;# 
   279  1E26                     	;# 
   280  1E27                     	;# 
   281  1E28                     	;# 
   282  1E29                     	;# 
   283  1E2A                     	;# 
   284  1E2B                     	;# 
   285  1E2C                     	;# 
   286  1E2D                     	;# 
   287  1E2E                     	;# 
   288  1E2F                     	;# 
   289  1E30                     	;# 
   290  1E31                     	;# 
   291  1E32                     	;# 
   292  1E33                     	;# 
   293  1E34                     	;# 
   294  1E35                     	;# 
   295  1E36                     	;# 
   296  1E37                     	;# 
   297  1E8F                     	;# 
   298  1E90                     	;# 
   299  1E91                     	;# 
   300  1E92                     	;# 
   301  1E93                     	;# 
   302  1E9C                     	;# 
   303  1EA1                     	;# 
   304  1EA2                     	;# 
   305  1EB1                     	;# 
   306  1EBB                     	;# 
   307  1EBC                     	;# 
   308  1EBD                     	;# 
   309  1EBE                     	;# 
   310  1EC3                     	;# 
   311  1EC5                     	;# 
   312  1EC6                     	;# 
   313  1EC7                     	;# 
   314  1ECB                     	;# 
   315  1ECC                     	;# 
   316  1F10                     	;# 
   317  1F11                     	;# 
   318  1F12                     	;# 
   319  1F13                     	;# 
   320  1F14                     	;# 
   321  1F15                     	;# 
   322  1F20                     	;# 
   323  1F21                     	;# 
   324  1F22                     	;# 
   325  1F23                     	;# 
   326  1F24                     	;# 
   327  1F25                     	;# 
   328  1F38                     	;# 
   329  1F39                     	;# 
   330  1F3A                     	;# 
   331  1F3B                     	;# 
   332  1F3C                     	;# 
   333  1F3D                     	;# 
   334  1F3E                     	;# 
   335  1F3F                     	;# 
   336  1F4E                     	;# 
   337  1F4F                     	;# 
   338  1F50                     	;# 
   339  1F51                     	;# 
   340  1F52                     	;# 
   341  1F53                     	;# 
   342  1F54                     	;# 
   343  1F55                     	;# 
   344  1FE4                     	;# 
   345  1FE5                     	;# 
   346  1FE6                     	;# 
   347  1FE7                     	;# 
   348  1FE8                     	;# 
   349  1FE8                     	;# 
   350  1FE9                     	;# 
   351  1FEA                     	;# 
   352  1FEA                     	;# 
   353  1FEB                     	;# 
   354  1FED                     	;# 
   355  1FEE                     	;# 
   356  1FEF                     	;# 
   357  0000                     	;# 
   358  0001                     	;# 
   359  0002                     	;# 
   360  0003                     	;# 
   361  0004                     	;# 
   362  0005                     	;# 
   363  0006                     	;# 
   364  0007                     	;# 
   365  0008                     	;# 
   366  0009                     	;# 
   367  000A                     	;# 
   368  000B                     	;# 
   369  000C                     	;# 
   370  000E                     	;# 
   371  0012                     	;# 
   372  0014                     	;# 
   373  0018                     	;# 
   374  001A                     	;# 
   375  009B                     	;# 
   376  009B                     	;# 
   377  009C                     	;# 
   378  009D                     	;# 
   379  009E                     	;# 
   380  009F                     	;# 
   381  0119                     	;# 
   382  0119                     	;# 
   383  0119                     	;# 
   384  011A                     	;# 
   385  011A                     	;# 
   386  011A                     	;# 
   387  011B                     	;# 
   388  011B                     	;# 
   389  011B                     	;# 
   390  011B                     	;# 
   391  011B                     	;# 
   392  011C                     	;# 
   393  011C                     	;# 
   394  011C                     	;# 
   395  011D                     	;# 
   396  011D                     	;# 
   397  011D                     	;# 
   398  011E                     	;# 
   399  011E                     	;# 
   400  011E                     	;# 
   401  011F                     	;# 
   402  011F                     	;# 
   403  011F                     	;# 
   404  011F                     	;# 
   405  011F                     	;# 
   406  018C                     	;# 
   407  018D                     	;# 
   408  018E                     	;# 
   409  018F                     	;# 
   410  0190                     	;# 
   411  0191                     	;# 
   412  0192                     	;# 
   413  020C                     	;# 
   414  020C                     	;# 
   415  020D                     	;# 
   416  020E                     	;# 
   417  020F                     	;# 
   418  020F                     	;# 
   419  0210                     	;# 
   420  0210                     	;# 
   421  0211                     	;# 
   422  0211                     	;# 
   423  028C                     	;# 
   424  028C                     	;# 
   425  028D                     	;# 
   426  028D                     	;# 
   427  028E                     	;# 
   428  028F                     	;# 
   429  0290                     	;# 
   430  0291                     	;# 
   431  030C                     	;# 
   432  030C                     	;# 
   433  030D                     	;# 
   434  030E                     	;# 
   435  030F                     	;# 
   436  0310                     	;# 
   437  0310                     	;# 
   438  0311                     	;# 
   439  0312                     	;# 
   440  0313                     	;# 
   441  0314                     	;# 
   442  0315                     	;# 
   443  0316                     	;# 
   444  0318                     	;# 
   445  0319                     	;# 
   446  031A                     	;# 
   447  031C                     	;# 
   448  031D                     	;# 
   449  031E                     	;# 
   450  038C                     	;# 
   451  038D                     	;# 
   452  038E                     	;# 
   453  058C                     	;# 
   454  058C                     	;# 
   455  058D                     	;# 
   456  058E                     	;# 
   457  058F                     	;# 
   458  058F                     	;# 
   459  0590                     	;# 
   460  0591                     	;# 
   461  0592                     	;# 
   462  0593                     	;# 
   463  059C                     	;# 
   464  059C                     	;# 
   465  059D                     	;# 
   466  059D                     	;# 
   467  059E                     	;# 
   468  059F                     	;# 
   469  060C                     	;# 
   470  060D                     	;# 
   471  060E                     	;# 
   472  060F                     	;# 
   473  0610                     	;# 
   474  0611                     	;# 
   475  0612                     	;# 
   476  0613                     	;# 
   477  0614                     	;# 
   478  070C                     	;# 
   479  070D                     	;# 
   480  070E                     	;# 
   481  070F                     	;# 
   482  0710                     	;# 
   483  0711                     	;# 
   484  0712                     	;# 
   485  0713                     	;# 
   486  0716                     	;# 
   487  0717                     	;# 
   488  0718                     	;# 
   489  0719                     	;# 
   490  071A                     	;# 
   491  071B                     	;# 
   492  071C                     	;# 
   493  071D                     	;# 
   494  0796                     	;# 
   495  0797                     	;# 
   496  0798                     	;# 
   497  0799                     	;# 
   498  079A                     	;# 
   499  079B                     	;# 
   500  080C                     	;# 
   501  080D                     	;# 
   502  080E                     	;# 
   503  080F                     	;# 
   504  0810                     	;# 
   505  0811                     	;# 
   506  0812                     	;# 
   507  0813                     	;# 
   508  0814                     	;# 
   509  081A                     	;# 
   510  081A                     	;# 
   511  081B                     	;# 
   512  081C                     	;# 
   513  081C                     	;# 
   514  081D                     	;# 
   515  081E                     	;# 
   516  081F                     	;# 
   517  088C                     	;# 
   518  088D                     	;# 
   519  088E                     	;# 
   520  088F                     	;# 
   521  0890                     	;# 
   522  0891                     	;# 
   523  0892                     	;# 
   524  0893                     	;# 
   525  0895                     	;# 
   526  0896                     	;# 
   527  090C                     	;# 
   528  090E                     	;# 
   529  090F                     	;# 
   530  091F                     	;# 
   531  098F                     	;# 
   532  098F                     	;# 
   533  0990                     	;# 
   534  0991                     	;# 
   535  0992                     	;# 
   536  0993                     	;# 
   537  0994                     	;# 
   538  0995                     	;# 
   539  0996                     	;# 
   540  0997                     	;# 
   541  1E0F                     	;# 
   542  1E10                     	;# 
   543  1E11                     	;# 
   544  1E12                     	;# 
   545  1E13                     	;# 
   546  1E14                     	;# 
   547  1E15                     	;# 
   548  1E16                     	;# 
   549  1E17                     	;# 
   550  1E18                     	;# 
   551  1E19                     	;# 
   552  1E1A                     	;# 
   553  1E1B                     	;# 
   554  1E1C                     	;# 
   555  1E1D                     	;# 
   556  1E1E                     	;# 
   557  1E1F                     	;# 
   558  1E20                     	;# 
   559  1E21                     	;# 
   560  1E22                     	;# 
   561  1E23                     	;# 
   562  1E24                     	;# 
   563  1E25                     	;# 
   564  1E26                     	;# 
   565  1E27                     	;# 
   566  1E28                     	;# 
   567  1E29                     	;# 
   568  1E2A                     	;# 
   569  1E2B                     	;# 
   570  1E2C                     	;# 
   571  1E2D                     	;# 
   572  1E2E                     	;# 
   573  1E2F                     	;# 
   574  1E30                     	;# 
   575  1E31                     	;# 
   576  1E32                     	;# 
   577  1E33                     	;# 
   578  1E34                     	;# 
   579  1E35                     	;# 
   580  1E36                     	;# 
   581  1E37                     	;# 
   582  1E8F                     	;# 
   583  1E90                     	;# 
   584  1E91                     	;# 
   585  1E92                     	;# 
   586  1E93                     	;# 
   587  1E9C                     	;# 
   588  1EA1                     	;# 
   589  1EA2                     	;# 
   590  1EB1                     	;# 
   591  1EBB                     	;# 
   592  1EBC                     	;# 
   593  1EBD                     	;# 
   594  1EBE                     	;# 
   595  1EC3                     	;# 
   596  1EC5                     	;# 
   597  1EC6                     	;# 
   598  1EC7                     	;# 
   599  1ECB                     	;# 
   600  1ECC                     	;# 
   601  1F10                     	;# 
   602  1F11                     	;# 
   603  1F12                     	;# 
   604  1F13                     	;# 
   605  1F14                     	;# 
   606  1F15                     	;# 
   607  1F20                     	;# 
   608  1F21                     	;# 
   609  1F22                     	;# 
   610  1F23                     	;# 
   611  1F24                     	;# 
   612  1F25                     	;# 
   613  1F38                     	;# 
   614  1F39                     	;# 
   615  1F3A                     	;# 
   616  1F3B                     	;# 
   617  1F3C                     	;# 
   618  1F3D                     	;# 
   619  1F3E                     	;# 
   620  1F3F                     	;# 
   621  1F4E                     	;# 
   622  1F4F                     	;# 
   623  1F50                     	;# 
   624  1F51                     	;# 
   625  1F52                     	;# 
   626  1F53                     	;# 
   627  1F54                     	;# 
   628  1F55                     	;# 
   629  1FE4                     	;# 
   630  1FE5                     	;# 
   631  1FE6                     	;# 
   632  1FE7                     	;# 
   633  1FE8                     	;# 
   634  1FE8                     	;# 
   635  1FE9                     	;# 
   636  1FEA                     	;# 
   637  1FEA                     	;# 
   638  1FEB                     	;# 
   639  1FED                     	;# 
   640  1FEE                     	;# 
   641  1FEF                     	;# 
   642  0000                     	;# 
   643  0001                     	;# 
   644  0002                     	;# 
   645  0003                     	;# 
   646  0004                     	;# 
   647  0005                     	;# 
   648  0006                     	;# 
   649  0007                     	;# 
   650  0008                     	;# 
   651  0009                     	;# 
   652  000A                     	;# 
   653  000B                     	;# 
   654  000C                     	;# 
   655  000E                     	;# 
   656  0012                     	;# 
   657  0014                     	;# 
   658  0018                     	;# 
   659  001A                     	;# 
   660  009B                     	;# 
   661  009B                     	;# 
   662  009C                     	;# 
   663  009D                     	;# 
   664  009E                     	;# 
   665  009F                     	;# 
   666  0119                     	;# 
   667  0119                     	;# 
   668  0119                     	;# 
   669  011A                     	;# 
   670  011A                     	;# 
   671  011A                     	;# 
   672  011B                     	;# 
   673  011B                     	;# 
   674  011B                     	;# 
   675  011B                     	;# 
   676  011B                     	;# 
   677  011C                     	;# 
   678  011C                     	;# 
   679  011C                     	;# 
   680  011D                     	;# 
   681  011D                     	;# 
   682  011D                     	;# 
   683  011E                     	;# 
   684  011E                     	;# 
   685  011E                     	;# 
   686  011F                     	;# 
   687  011F                     	;# 
   688  011F                     	;# 
   689  011F                     	;# 
   690  011F                     	;# 
   691  018C                     	;# 
   692  018D                     	;# 
   693  018E                     	;# 
   694  018F                     	;# 
   695  0190                     	;# 
   696  0191                     	;# 
   697  0192                     	;# 
   698  020C                     	;# 
   699  020C                     	;# 
   700  020D                     	;# 
   701  020E                     	;# 
   702  020F                     	;# 
   703  020F                     	;# 
   704  0210                     	;# 
   705  0210                     	;# 
   706  0211                     	;# 
   707  0211                     	;# 
   708  028C                     	;# 
   709  028C                     	;# 
   710  028D                     	;# 
   711  028D                     	;# 
   712  028E                     	;# 
   713  028F                     	;# 
   714  0290                     	;# 
   715  0291                     	;# 
   716  030C                     	;# 
   717  030C                     	;# 
   718  030D                     	;# 
   719  030E                     	;# 
   720  030F                     	;# 
   721  0310                     	;# 
   722  0310                     	;# 
   723  0311                     	;# 
   724  0312                     	;# 
   725  0313                     	;# 
   726  0314                     	;# 
   727  0315                     	;# 
   728  0316                     	;# 
   729  0318                     	;# 
   730  0319                     	;# 
   731  031A                     	;# 
   732  031C                     	;# 
   733  031D                     	;# 
   734  031E                     	;# 
   735  038C                     	;# 
   736  038D                     	;# 
   737  038E                     	;# 
   738  058C                     	;# 
   739  058C                     	;# 
   740  058D                     	;# 
   741  058E                     	;# 
   742  058F                     	;# 
   743  058F                     	;# 
   744  0590                     	;# 
   745  0591                     	;# 
   746  0592                     	;# 
   747  0593                     	;# 
   748  059C                     	;# 
   749  059C                     	;# 
   750  059D                     	;# 
   751  059D                     	;# 
   752  059E                     	;# 
   753  059F                     	;# 
   754  060C                     	;# 
   755  060D                     	;# 
   756  060E                     	;# 
   757  060F                     	;# 
   758  0610                     	;# 
   759  0611                     	;# 
   760  0612                     	;# 
   761  0613                     	;# 
   762  0614                     	;# 
   763  070C                     	;# 
   764  070D                     	;# 
   765  070E                     	;# 
   766  070F                     	;# 
   767  0710                     	;# 
   768  0711                     	;# 
   769  0712                     	;# 
   770  0713                     	;# 
   771  0716                     	;# 
   772  0717                     	;# 
   773  0718                     	;# 
   774  0719                     	;# 
   775  071A                     	;# 
   776  071B                     	;# 
   777  071C                     	;# 
   778  071D                     	;# 
   779  0796                     	;# 
   780  0797                     	;# 
   781  0798                     	;# 
   782  0799                     	;# 
   783  079A                     	;# 
   784  079B                     	;# 
   785  080C                     	;# 
   786  080D                     	;# 
   787  080E                     	;# 
   788  080F                     	;# 
   789  0810                     	;# 
   790  0811                     	;# 
   791  0812                     	;# 
   792  0813                     	;# 
   793  0814                     	;# 
   794  081A                     	;# 
   795  081A                     	;# 
   796  081B                     	;# 
   797  081C                     	;# 
   798  081C                     	;# 
   799  081D                     	;# 
   800  081E                     	;# 
   801  081F                     	;# 
   802  088C                     	;# 
   803  088D                     	;# 
   804  088E                     	;# 
   805  088F                     	;# 
   806  0890                     	;# 
   807  0891                     	;# 
   808  0892                     	;# 
   809  0893                     	;# 
   810  0895                     	;# 
   811  0896                     	;# 
   812  090C                     	;# 
   813  090E                     	;# 
   814  090F                     	;# 
   815  091F                     	;# 
   816  098F                     	;# 
   817  098F                     	;# 
   818  0990                     	;# 
   819  0991                     	;# 
   820  0992                     	;# 
   821  0993                     	;# 
   822  0994                     	;# 
   823  0995                     	;# 
   824  0996                     	;# 
   825  0997                     	;# 
   826  1E0F                     	;# 
   827  1E10                     	;# 
   828  1E11                     	;# 
   829  1E12                     	;# 
   830  1E13                     	;# 
   831  1E14                     	;# 
   832  1E15                     	;# 
   833  1E16                     	;# 
   834  1E17                     	;# 
   835  1E18                     	;# 
   836  1E19                     	;# 
   837  1E1A                     	;# 
   838  1E1B                     	;# 
   839  1E1C                     	;# 
   840  1E1D                     	;# 
   841  1E1E                     	;# 
   842  1E1F                     	;# 
   843  1E20                     	;# 
   844  1E21                     	;# 
   845  1E22                     	;# 
   846  1E23                     	;# 
   847  1E24                     	;# 
   848  1E25                     	;# 
   849  1E26                     	;# 
   850  1E27                     	;# 
   851  1E28                     	;# 
   852  1E29                     	;# 
   853  1E2A                     	;# 
   854  1E2B                     	;# 
   855  1E2C                     	;# 
   856  1E2D                     	;# 
   857  1E2E                     	;# 
   858  1E2F                     	;# 
   859  1E30                     	;# 
   860  1E31                     	;# 
   861  1E32                     	;# 
   862  1E33                     	;# 
   863  1E34                     	;# 
   864  1E35                     	;# 
   865  1E36                     	;# 
   866  1E37                     	;# 
   867  1E8F                     	;# 
   868  1E90                     	;# 
   869  1E91                     	;# 
   870  1E92                     	;# 
   871  1E93                     	;# 
   872  1E9C                     	;# 
   873  1EA1                     	;# 
   874  1EA2                     	;# 
   875  1EB1                     	;# 
   876  1EBB                     	;# 
   877  1EBC                     	;# 
   878  1EBD                     	;# 
   879  1EBE                     	;# 
   880  1EC3                     	;# 
   881  1EC5                     	;# 
   882  1EC6                     	;# 
   883  1EC7                     	;# 
   884  1ECB                     	;# 
   885  1ECC                     	;# 
   886  1F10                     	;# 
   887  1F11                     	;# 
   888  1F12                     	;# 
   889  1F13                     	;# 
   890  1F14                     	;# 
   891  1F15                     	;# 
   892  1F20                     	;# 
   893  1F21                     	;# 
   894  1F22                     	;# 
   895  1F23                     	;# 
   896  1F24                     	;# 
   897  1F25                     	;# 
   898  1F38                     	;# 
   899  1F39                     	;# 
   900  1F3A                     	;# 
   901  1F3B                     	;# 
   902  1F3C                     	;# 
   903  1F3D                     	;# 
   904  1F3E                     	;# 
   905  1F3F                     	;# 
   906  1F4E                     	;# 
   907  1F4F                     	;# 
   908  1F50                     	;# 
   909  1F51                     	;# 
   910  1F52                     	;# 
   911  1F53                     	;# 
   912  1F54                     	;# 
   913  1F55                     	;# 
   914  1FE4                     	;# 
   915  1FE5                     	;# 
   916  1FE6                     	;# 
   917  1FE7                     	;# 
   918  1FE8                     	;# 
   919  1FE8                     	;# 
   920  1FE9                     	;# 
   921  1FEA                     	;# 
   922  1FEA                     	;# 
   923  1FEB                     	;# 
   924  1FED                     	;# 
   925  1FEE                     	;# 
   926  1FEF                     	;# 
   927  0000                     	;# 
   928  0001                     	;# 
   929  0002                     	;# 
   930  0003                     	;# 
   931  0004                     	;# 
   932  0005                     	;# 
   933  0006                     	;# 
   934  0007                     	;# 
   935  0008                     	;# 
   936  0009                     	;# 
   937  000A                     	;# 
   938  000B                     	;# 
   939  000C                     	;# 
   940  000E                     	;# 
   941  0012                     	;# 
   942  0014                     	;# 
   943  0018                     	;# 
   944  001A                     	;# 
   945  009B                     	;# 
   946  009B                     	;# 
   947  009C                     	;# 
   948  009D                     	;# 
   949  009E                     	;# 
   950  009F                     	;# 
   951  0119                     	;# 
   952  0119                     	;# 
   953  0119                     	;# 
   954  011A                     	;# 
   955  011A                     	;# 
   956  011A                     	;# 
   957  011B                     	;# 
   958  011B                     	;# 
   959  011B                     	;# 
   960  011B                     	;# 
   961  011B                     	;# 
   962  011C                     	;# 
   963  011C                     	;# 
   964  011C                     	;# 
   965  011D                     	;# 
   966  011D                     	;# 
   967  011D                     	;# 
   968  011E                     	;# 
   969  011E                     	;# 
   970  011E                     	;# 
   971  011F                     	;# 
   972  011F                     	;# 
   973  011F                     	;# 
   974  011F                     	;# 
   975  011F                     	;# 
   976  018C                     	;# 
   977  018D                     	;# 
   978  018E                     	;# 
   979  018F                     	;# 
   980  0190                     	;# 
   981  0191                     	;# 
   982  0192                     	;# 
   983  020C                     	;# 
   984  020C                     	;# 
   985  020D                     	;# 
   986  020E                     	;# 
   987  020F                     	;# 
   988  020F                     	;# 
   989  0210                     	;# 
   990  0210                     	;# 
   991  0211                     	;# 
   992  0211                     	;# 
   993  028C                     	;# 
   994  028C                     	;# 
   995  028D                     	;# 
   996  028D                     	;# 
   997  028E                     	;# 
   998  028F                     	;# 
   999  0290                     	;# 
  1000  0291                     	;# 
  1001  030C                     	;# 
  1002  030C                     	;# 
  1003  030D                     	;# 
  1004  030E                     	;# 
  1005  030F                     	;# 
  1006  0310                     	;# 
  1007  0310                     	;# 
  1008  0311                     	;# 
  1009  0312                     	;# 
  1010  0313                     	;# 
  1011  0314                     	;# 
  1012  0315                     	;# 
  1013  0316                     	;# 
  1014  0318                     	;# 
  1015  0319                     	;# 
  1016  031A                     	;# 
  1017  031C                     	;# 
  1018  031D                     	;# 
  1019  031E                     	;# 
  1020  038C                     	;# 
  1021  038D                     	;# 
  1022  038E                     	;# 
  1023  058C                     	;# 
  1024  058C                     	;# 
  1025  058D                     	;# 
  1026  058E                     	;# 
  1027  058F                     	;# 
  1028  058F                     	;# 
  1029  0590                     	;# 
  1030  0591                     	;# 
  1031  0592                     	;# 
  1032  0593                     	;# 
  1033  059C                     	;# 
  1034  059C                     	;# 
  1035  059D                     	;# 
  1036  059D                     	;# 
  1037  059E                     	;# 
  1038  059F                     	;# 
  1039  060C                     	;# 
  1040  060D                     	;# 
  1041  060E                     	;# 
  1042  060F                     	;# 
  1043  0610                     	;# 
  1044  0611                     	;# 
  1045  0612                     	;# 
  1046  0613                     	;# 
  1047  0614                     	;# 
  1048  070C                     	;# 
  1049  070D                     	;# 
  1050  070E                     	;# 
  1051  070F                     	;# 
  1052  0710                     	;# 
  1053  0711                     	;# 
  1054  0712                     	;# 
  1055  0713                     	;# 
  1056  0716                     	;# 
  1057  0717                     	;# 
  1058  0718                     	;# 
  1059  0719                     	;# 
  1060  071A                     	;# 
  1061  071B                     	;# 
  1062  071C                     	;# 
  1063  071D                     	;# 
  1064  0796                     	;# 
  1065  0797                     	;# 
  1066  0798                     	;# 
  1067  0799                     	;# 
  1068  079A                     	;# 
  1069  079B                     	;# 
  1070  080C                     	;# 
  1071  080D                     	;# 
  1072  080E                     	;# 
  1073  080F                     	;# 
  1074  0810                     	;# 
  1075  0811                     	;# 
  1076  0812                     	;# 
  1077  0813                     	;# 
  1078  0814                     	;# 
  1079  081A                     	;# 
  1080  081A                     	;# 
  1081  081B                     	;# 
  1082  081C                     	;# 
  1083  081C                     	;# 
  1084  081D                     	;# 
  1085  081E                     	;# 
  1086  081F                     	;# 
  1087  088C                     	;# 
  1088  088D                     	;# 
  1089  088E                     	;# 
  1090  088F                     	;# 
  1091  0890                     	;# 
  1092  0891                     	;# 
  1093  0892                     	;# 
  1094  0893                     	;# 
  1095  0895                     	;# 
  1096  0896                     	;# 
  1097  090C                     	;# 
  1098  090E                     	;# 
  1099  090F                     	;# 
  1100  091F                     	;# 
  1101  098F                     	;# 
  1102  098F                     	;# 
  1103  0990                     	;# 
  1104  0991                     	;# 
  1105  0992                     	;# 
  1106  0993                     	;# 
  1107  0994                     	;# 
  1108  0995                     	;# 
  1109  0996                     	;# 
  1110  0997                     	;# 
  1111  1E0F                     	;# 
  1112  1E10                     	;# 
  1113  1E11                     	;# 
  1114  1E12                     	;# 
  1115  1E13                     	;# 
  1116  1E14                     	;# 
  1117  1E15                     	;# 
  1118  1E16                     	;# 
  1119  1E17                     	;# 
  1120  1E18                     	;# 
  1121  1E19                     	;# 
  1122  1E1A                     	;# 
  1123  1E1B                     	;# 
  1124  1E1C                     	;# 
  1125  1E1D                     	;# 
  1126  1E1E                     	;# 
  1127  1E1F                     	;# 
  1128  1E20                     	;# 
  1129  1E21                     	;# 
  1130  1E22                     	;# 
  1131  1E23                     	;# 
  1132  1E24                     	;# 
  1133  1E25                     	;# 
  1134  1E26                     	;# 
  1135  1E27                     	;# 
  1136  1E28                     	;# 
  1137  1E29                     	;# 
  1138  1E2A                     	;# 
  1139  1E2B                     	;# 
  1140  1E2C                     	;# 
  1141  1E2D                     	;# 
  1142  1E2E                     	;# 
  1143  1E2F                     	;# 
  1144  1E30                     	;# 
  1145  1E31                     	;# 
  1146  1E32                     	;# 
  1147  1E33                     	;# 
  1148  1E34                     	;# 
  1149  1E35                     	;# 
  1150  1E36                     	;# 
  1151  1E37                     	;# 
  1152  1E8F                     	;# 
  1153  1E90                     	;# 
  1154  1E91                     	;# 
  1155  1E92                     	;# 
  1156  1E93                     	;# 
  1157  1E9C                     	;# 
  1158  1EA1                     	;# 
  1159  1EA2                     	;# 
  1160  1EB1                     	;# 
  1161  1EBB                     	;# 
  1162  1EBC                     	;# 
  1163  1EBD                     	;# 
  1164  1EBE                     	;# 
  1165  1EC3                     	;# 
  1166  1EC5                     	;# 
  1167  1EC6                     	;# 
  1168  1EC7                     	;# 
  1169  1ECB                     	;# 
  1170  1ECC                     	;# 
  1171  1F10                     	;# 
  1172  1F11                     	;# 
  1173  1F12                     	;# 
  1174  1F13                     	;# 
  1175  1F14                     	;# 
  1176  1F15                     	;# 
  1177  1F20                     	;# 
  1178  1F21                     	;# 
  1179  1F22                     	;# 
  1180  1F23                     	;# 
  1181  1F24                     	;# 
  1182  1F25                     	;# 
  1183  1F38                     	;# 
  1184  1F39                     	;# 
  1185  1F3A                     	;# 
  1186  1F3B                     	;# 
  1187  1F3C                     	;# 
  1188  1F3D                     	;# 
  1189  1F3E                     	;# 
  1190  1F3F                     	;# 
  1191  1F4E                     	;# 
  1192  1F4F                     	;# 
  1193  1F50                     	;# 
  1194  1F51                     	;# 
  1195  1F52                     	;# 
  1196  1F53                     	;# 
  1197  1F54                     	;# 
  1198  1F55                     	;# 
  1199  1FE4                     	;# 
  1200  1FE5                     	;# 
  1201  1FE6                     	;# 
  1202  1FE7                     	;# 
  1203  1FE8                     	;# 
  1204  1FE8                     	;# 
  1205  1FE9                     	;# 
  1206  1FEA                     	;# 
  1207  1FEA                     	;# 
  1208  1FEB                     	;# 
  1209  1FED                     	;# 
  1210  1FEE                     	;# 
  1211  1FEF                     	;# 
  1212  0000                     	;# 
  1213  0001                     	;# 
  1214  0002                     	;# 
  1215  0003                     	;# 
  1216  0004                     	;# 
  1217  0005                     	;# 
  1218  0006                     	;# 
  1219  0007                     	;# 
  1220  0008                     	;# 
  1221  0009                     	;# 
  1222  000A                     	;# 
  1223  000B                     	;# 
  1224  000C                     	;# 
  1225  000E                     	;# 
  1226  0012                     	;# 
  1227  0014                     	;# 
  1228  0018                     	;# 
  1229  001A                     	;# 
  1230  009B                     	;# 
  1231  009B                     	;# 
  1232  009C                     	;# 
  1233  009D                     	;# 
  1234  009E                     	;# 
  1235  009F                     	;# 
  1236  0119                     	;# 
  1237  0119                     	;# 
  1238  0119                     	;# 
  1239  011A                     	;# 
  1240  011A                     	;# 
  1241  011A                     	;# 
  1242  011B                     	;# 
  1243  011B                     	;# 
  1244  011B                     	;# 
  1245  011B                     	;# 
  1246  011B                     	;# 
  1247  011C                     	;# 
  1248  011C                     	;# 
  1249  011C                     	;# 
  1250  011D                     	;# 
  1251  011D                     	;# 
  1252  011D                     	;# 
  1253  011E                     	;# 
  1254  011E                     	;# 
  1255  011E                     	;# 
  1256  011F                     	;# 
  1257  011F                     	;# 
  1258  011F                     	;# 
  1259  011F                     	;# 
  1260  011F                     	;# 
  1261  018C                     	;# 
  1262  018D                     	;# 
  1263  018E                     	;# 
  1264  018F                     	;# 
  1265  0190                     	;# 
  1266  0191                     	;# 
  1267  0192                     	;# 
  1268  020C                     	;# 
  1269  020C                     	;# 
  1270  020D                     	;# 
  1271  020E                     	;# 
  1272  020F                     	;# 
  1273  020F                     	;# 
  1274  0210                     	;# 
  1275  0210                     	;# 
  1276  0211                     	;# 
  1277  0211                     	;# 
  1278  028C                     	;# 
  1279  028C                     	;# 
  1280  028D                     	;# 
  1281  028D                     	;# 
  1282  028E                     	;# 
  1283  028F                     	;# 
  1284  0290                     	;# 
  1285  0291                     	;# 
  1286  030C                     	;# 
  1287  030C                     	;# 
  1288  030D                     	;# 
  1289  030E                     	;# 
  1290  030F                     	;# 
  1291  0310                     	;# 
  1292  0310                     	;# 
  1293  0311                     	;# 
  1294  0312                     	;# 
  1295  0313                     	;# 
  1296  0314                     	;# 
  1297  0315                     	;# 
  1298  0316                     	;# 
  1299  0318                     	;# 
  1300  0319                     	;# 
  1301  031A                     	;# 
  1302  031C                     	;# 
  1303  031D                     	;# 
  1304  031E                     	;# 
  1305  038C                     	;# 
  1306  038D                     	;# 
  1307  038E                     	;# 
  1308  058C                     	;# 
  1309  058C                     	;# 
  1310  058D                     	;# 
  1311  058E                     	;# 
  1312  058F                     	;# 
  1313  058F                     	;# 
  1314  0590                     	;# 
  1315  0591                     	;# 
  1316  0592                     	;# 
  1317  0593                     	;# 
  1318  059C                     	;# 
  1319  059C                     	;# 
  1320  059D                     	;# 
  1321  059D                     	;# 
  1322  059E                     	;# 
  1323  059F                     	;# 
  1324  060C                     	;# 
  1325  060D                     	;# 
  1326  060E                     	;# 
  1327  060F                     	;# 
  1328  0610                     	;# 
  1329  0611                     	;# 
  1330  0612                     	;# 
  1331  0613                     	;# 
  1332  0614                     	;# 
  1333  070C                     	;# 
  1334  070D                     	;# 
  1335  070E                     	;# 
  1336  070F                     	;# 
  1337  0710                     	;# 
  1338  0711                     	;# 
  1339  0712                     	;# 
  1340  0713                     	;# 
  1341  0716                     	;# 
  1342  0717                     	;# 
  1343  0718                     	;# 
  1344  0719                     	;# 
  1345  071A                     	;# 
  1346  071B                     	;# 
  1347  071C                     	;# 
  1348  071D                     	;# 
  1349  0796                     	;# 
  1350  0797                     	;# 
  1351  0798                     	;# 
  1352  0799                     	;# 
  1353  079A                     	;# 
  1354  079B                     	;# 
  1355  080C                     	;# 
  1356  080D                     	;# 
  1357  080E                     	;# 
  1358  080F                     	;# 
  1359  0810                     	;# 
  1360  0811                     	;# 
  1361  0812                     	;# 
  1362  0813                     	;# 
  1363  0814                     	;# 
  1364  081A                     	;# 
  1365  081A                     	;# 
  1366  081B                     	;# 
  1367  081C                     	;# 
  1368  081C                     	;# 
  1369  081D                     	;# 
  1370  081E                     	;# 
  1371  081F                     	;# 
  1372  088C                     	;# 
  1373  088D                     	;# 
  1374  088E                     	;# 
  1375  088F                     	;# 
  1376  0890                     	;# 
  1377  0891                     	;# 
  1378  0892                     	;# 
  1379  0893                     	;# 
  1380  0895                     	;# 
  1381  0896                     	;# 
  1382  090C                     	;# 
  1383  090E                     	;# 
  1384  090F                     	;# 
  1385  091F                     	;# 
  1386  098F                     	;# 
  1387  098F                     	;# 
  1388  0990                     	;# 
  1389  0991                     	;# 
  1390  0992                     	;# 
  1391  0993                     	;# 
  1392  0994                     	;# 
  1393  0995                     	;# 
  1394  0996                     	;# 
  1395  0997                     	;# 
  1396  1E0F                     	;# 
  1397  1E10                     	;# 
  1398  1E11                     	;# 
  1399  1E12                     	;# 
  1400  1E13                     	;# 
  1401  1E14                     	;# 
  1402  1E15                     	;# 
  1403  1E16                     	;# 
  1404  1E17                     	;# 
  1405  1E18                     	;# 
  1406  1E19                     	;# 
  1407  1E1A                     	;# 
  1408  1E1B                     	;# 
  1409  1E1C                     	;# 
  1410  1E1D                     	;# 
  1411  1E1E                     	;# 
  1412  1E1F                     	;# 
  1413  1E20                     	;# 
  1414  1E21                     	;# 
  1415  1E22                     	;# 
  1416  1E23                     	;# 
  1417  1E24                     	;# 
  1418  1E25                     	;# 
  1419  1E26                     	;# 
  1420  1E27                     	;# 
  1421  1E28                     	;# 
  1422  1E29                     	;# 
  1423  1E2A                     	;# 
  1424  1E2B                     	;# 
  1425  1E2C                     	;# 
  1426  1E2D                     	;# 
  1427  1E2E                     	;# 
  1428  1E2F                     	;# 
  1429  1E30                     	;# 
  1430  1E31                     	;# 
  1431  1E32                     	;# 
  1432  1E33                     	;# 
  1433  1E34                     	;# 
  1434  1E35                     	;# 
  1435  1E36                     	;# 
  1436  1E37                     	;# 
  1437  1E8F                     	;# 
  1438  1E90                     	;# 
  1439  1E91                     	;# 
  1440  1E92                     	;# 
  1441  1E93                     	;# 
  1442  1E9C                     	;# 
  1443  1EA1                     	;# 
  1444  1EA2                     	;# 
  1445  1EB1                     	;# 
  1446  1EBB                     	;# 
  1447  1EBC                     	;# 
  1448  1EBD                     	;# 
  1449  1EBE                     	;# 
  1450  1EC3                     	;# 
  1451  1EC5                     	;# 
  1452  1EC6                     	;# 
  1453  1EC7                     	;# 
  1454  1ECB                     	;# 
  1455  1ECC                     	;# 
  1456  1F10                     	;# 
  1457  1F11                     	;# 
  1458  1F12                     	;# 
  1459  1F13                     	;# 
  1460  1F14                     	;# 
  1461  1F15                     	;# 
  1462  1F20                     	;# 
  1463  1F21                     	;# 
  1464  1F22                     	;# 
  1465  1F23                     	;# 
  1466  1F24                     	;# 
  1467  1F25                     	;# 
  1468  1F38                     	;# 
  1469  1F39                     	;# 
  1470  1F3A                     	;# 
  1471  1F3B                     	;# 
  1472  1F3C                     	;# 
  1473  1F3D                     	;# 
  1474  1F3E                     	;# 
  1475  1F3F                     	;# 
  1476  1F4E                     	;# 
  1477  1F4F                     	;# 
  1478  1F50                     	;# 
  1479  1F51                     	;# 
  1480  1F52                     	;# 
  1481  1F53                     	;# 
  1482  1F54                     	;# 
  1483  1F55                     	;# 
  1484  1FE4                     	;# 
  1485  1FE5                     	;# 
  1486  1FE6                     	;# 
  1487  1FE7                     	;# 
  1488  1FE8                     	;# 
  1489  1FE8                     	;# 
  1490  1FE9                     	;# 
  1491  1FEA                     	;# 
  1492  1FEA                     	;# 
  1493  1FEB                     	;# 
  1494  1FED                     	;# 
  1495  1FEE                     	;# 
  1496  1FEF                     	;# 
  1497                           
  1498                           	psect	idataBANK1
  1499  060E                     __pidataBANK1:	
  1500                           
  1501                           ;initializer for CW201x@cw_bat_config_info
  1502  060E  3414               	retlw	20
  1503  060F  34A6               	retlw	166
  1504  0610  3470               	retlw	112
  1505  0611  346C               	retlw	108
  1506  0612  346C               	retlw	108
  1507  0613  3467               	retlw	103
  1508  0614  3464               	retlw	100
  1509  0615  3462               	retlw	98
  1510  0616  3460               	retlw	96
  1511  0617  345C               	retlw	92
  1512  0618  3459               	retlw	89
  1513  0619  344E               	retlw	78
  1514  061A  3450               	retlw	80
  1515  061B  3442               	retlw	66
  1516  061C  342E               	retlw	46
  1517  061D  3426               	retlw	38
  1518  061E  3425               	retlw	37
  1519  061F  3424               	retlw	36
  1520  0620  3427               	retlw	39
  1521  0621  342E               	retlw	46
  1522  0622  3441               	retlw	65
  1523  0623  345A               	retlw	90
  1524  0624  346D               	retlw	109
  1525  0625  344C               	retlw	76
  1526  0626  3439               	retlw	57
  1527  0627  34D7               	retlw	215
  1528  0628  3406               	retlw	6
  1529  0629  3466               	retlw	102
  1530  062A  3400               	retlw	0
  1531  062B  3401               	retlw	1
  1532  062C  3405               	retlw	5
  1533  062D  3434               	retlw	52
  1534  062E  3461               	retlw	97
  1535  062F  3476               	retlw	118
  1536  0630  3479               	retlw	121
  1537  0631  347D               	retlw	125
  1538  0632  3442               	retlw	66
  1539  0633  341E               	retlw	30
  1540  0634  34A4               	retlw	164
  1541  0635  3400               	retlw	0
  1542  0636  3427               	retlw	39
  1543  0637  345A               	retlw	90
  1544  0638  3452               	retlw	82
  1545  0639  3487               	retlw	135
  1546  063A  348F               	retlw	143
  1547  063B  3491               	retlw	145
  1548  063C  3494               	retlw	148
  1549  063D  3452               	retlw	82
  1550  063E  3482               	retlw	130
  1551  063F  348C               	retlw	140
  1552  0640  3492               	retlw	146
  1553  0641  3496               	retlw	150
  1554  0642  342B               	retlw	43
  1555  0643  3459               	retlw	89
  1556  0644  346E               	retlw	110
  1557  0645  34CB               	retlw	203
  1558  0646  342F               	retlw	47
  1559  0647  347D               	retlw	125
  1560  0648  3472               	retlw	114
  1561  0649  34A5               	retlw	165
  1562  064A  34B5               	retlw	181
  1563  064B  34C1               	retlw	193
  1564  064C  3494               	retlw	148
  1565  064D  3499               	retlw	153
  1566                           
  1567                           	psect	idataBANK2
  1568  05CE                     __pidataBANK2:	
  1569                           ;initializer for _cw_bat_config_info
  1570                           
  1571  05CE  3414               	retlw	20
  1572  05CF  34A6               	retlw	166
  1573  05D0  3470               	retlw	112
  1574  05D1  346C               	retlw	108
  1575  05D2  346C               	retlw	108
  1576  05D3  3467               	retlw	103
  1577  05D4  3464               	retlw	100
  1578  05D5  3462               	retlw	98
  1579  05D6  3460               	retlw	96
  1580  05D7  345C               	retlw	92
  1581  05D8  3459               	retlw	89
  1582  05D9  344E               	retlw	78
  1583  05DA  3450               	retlw	80
  1584  05DB  3442               	retlw	66
  1585  05DC  342E               	retlw	46
  1586  05DD  3426               	retlw	38
  1587  05DE  3425               	retlw	37
  1588  05DF  3424               	retlw	36
  1589  05E0  3427               	retlw	39
  1590  05E1  342E               	retlw	46
  1591  05E2  3441               	retlw	65
  1592  05E3  345A               	retlw	90
  1593  05E4  346D               	retlw	109
  1594  05E5  344C               	retlw	76
  1595  05E6  3439               	retlw	57
  1596  05E7  34D7               	retlw	215
  1597  05E8  3406               	retlw	6
  1598  05E9  3466               	retlw	102
  1599  05EA  3400               	retlw	0
  1600  05EB  3401               	retlw	1
  1601  05EC  3405               	retlw	5
  1602  05ED  3434               	retlw	52
  1603  05EE  3461               	retlw	97
  1604  05EF  3476               	retlw	118
  1605  05F0  3479               	retlw	121
  1606  05F1  347D               	retlw	125
  1607  05F2  3442               	retlw	66
  1608  05F3  341E               	retlw	30
  1609  05F4  34A4               	retlw	164
  1610  05F5  3400               	retlw	0
  1611  05F6  3427               	retlw	39
  1612  05F7  345A               	retlw	90
  1613  05F8  3452               	retlw	82
  1614  05F9  3487               	retlw	135
  1615  05FA  348F               	retlw	143
  1616  05FB  3491               	retlw	145
  1617  05FC  3494               	retlw	148
  1618  05FD  3452               	retlw	82
  1619  05FE  3482               	retlw	130
  1620  05FF  348C               	retlw	140
  1621  0600  3492               	retlw	146
  1622  0601  3496               	retlw	150
  1623  0602  342B               	retlw	43
  1624  0603  3459               	retlw	89
  1625  0604  346E               	retlw	110
  1626  0605  34CB               	retlw	203
  1627  0606  342F               	retlw	47
  1628  0607  347D               	retlw	125
  1629  0608  3472               	retlw	114
  1630  0609  34A5               	retlw	165
  1631  060A  34B5               	retlw	181
  1632  060B  34C1               	retlw	193
  1633  060C  3494               	retlw	148
  1634  060D  3499               	retlw	153
  1635  000E                     _PORTCbits	set	14
  1636  001A                     _LATCbits	set	26
  1637  0014                     _TRISCbits	set	20
  1638  0014                     _TRISC	set	20
  1639  0012                     _TRISA	set	18
  1640  001A                     _LATC	set	26
  1641  0018                     _LATA	set	24
  1642  005F                     _GIE	set	95
  1643  011A                     _TX1REG	set	282
  1644  0119                     _RC1REG	set	281
  1645  011D                     _RC1STAbits	set	285
  1646  011C                     _SP1BRGH	set	284
  1647  011B                     _SP1BRGL	set	283
  1648  011E                     _TX1STA	set	286
  1649  011D                     _RC1STA	set	285
  1650  011F                     _BAUD1CON	set	287
  1651  070F                     _PIR3bits	set	1807
  1652  0892                     _OSCTUNE	set	2194
  1653  0890                     _OSCSTAT	set	2192
  1654  0893                     _OSCFRQ	set	2195
  1655  0891                     _OSCEN	set	2193
  1656  088F                     _OSCCON3	set	2191
  1657  088D                     _OSCCON1	set	2189
  1658  4480                     _PLLR	set	17536
  1659  1ECB                     _RX1DTPPSbits	set	7883
  1660  1E8F                     _PPSLOCKbits	set	7823
  1661  1E8F                     _PPSLOCK	set	7823
  1662  1F24                     _RC4PPS	set	7972
  1663  1F50                     _ODCONC	set	8016
  1664  1F3A                     _ODCONA	set	7994
  1665  1F4F                     _WPUC	set	8015
  1666  1F39                     _WPUA	set	7993
  1667  1F38                     _ANSELA	set	7992
  1668  1F4E                     _ANSELC	set	8014
  1669                           
  1670                           ; #config settings
  1671  0000                     
  1672                           	psect	cinit
  1673  07E4                     start_initialization:	
  1674  07E4                     __initialization:	
  1675                           
  1676                           ; Initialize objects allocated to BANK1
  1677  07E4  300E               	movlw	low __pidataBANK1
  1678  07E5  0084               	movwf	4
  1679  07E6  3086               	movlw	(high __pidataBANK1)| (0+128)
  1680  07E7  0085               	movwf	5
  1681  07E8  30A0               	movlw	low __pdataBANK1
  1682  07E9  0086               	movwf	6
  1683  07EA  3000               	movlw	high __pdataBANK1
  1684  07EB  0087               	movwf	7
  1685  07EC  3040               	movlw	64
  1686  07ED  238E               	fcall	init_ram
  1687                           
  1688                           ; Initialize objects allocated to BANK2
  1689  07EE  30CE               	movlw	low __pidataBANK2
  1690  07EF  0084               	movwf	4
  1691  07F0  3085               	movlw	(high __pidataBANK2)| (0+128)
  1692  07F1  0085               	movwf	5
  1693  07F2  3020               	movlw	low __pdataBANK2
  1694  07F3  0086               	movwf	6
  1695  07F4  3001               	movlw	high __pdataBANK2
  1696  07F5  0087               	movwf	7
  1697  07F6  3040               	movlw	64
  1698  07F7  238E               	fcall	init_ram
  1699                           
  1700                           ; Clear objects allocated to BANK0
  1701  07F8  3038               	movlw	low __pbssBANK0
  1702  07F9  0084               	movwf	4
  1703  07FA  3000               	movlw	high __pbssBANK0
  1704  07FB  0085               	movwf	5
  1705  07FC  3012               	movlw	18
  1706  07FD  2388               	fcall	clear_ram0
  1707  07FE                     end_of_initialization:	
  1708                           ;End of C runtime variable initialization code
  1709                           
  1710  07FE                     __end_of__initialization:	
  1711  07FE  0140               	movlb	0
  1712  07FF  2BDF               	ljmp	_main	;jump to C main() function
  1713                           
  1714                           	psect	bssBANK0
  1715  0038                     __pbssBANK0:	
  1716  0038                     _cw_bat:	
  1717  0038                     	ds	6
  1718  003E                     cw_get_vol@F83:	
  1719  003E                     	ds	2
  1720  0040                     _allow_charger_always_zero:	
  1721  0040                     	ds	2
  1722  0042                     _allow_no_charger_full:	
  1723  0042                     	ds	2
  1724  0044                     _no_charger_full_jump:	
  1725  0044                     	ds	2
  1726  0046                     _CHARGE:	
  1727  0046                     	ds	2
  1728  0048                     _reset_loop:	
  1729  0048                     	ds	1
  1730  0049                     _if_quickstart:	
  1731  0049                     	ds	1
  1732                           
  1733                           	psect	dataBANK1
  1734  00A0                     __pdataBANK1:	
  1735  00A0                     CW201x@cw_bat_config_info:	
  1736  00A0                     	ds	64
  1737                           
  1738                           	psect	dataBANK2
  1739  0120                     __pdataBANK2:	
  1740  0120                     _cw_bat_config_info:	
  1741  0120                     	ds	64
  1742                           
  1743                           	psect	inittext
  1744  038E                     init_ram:	
  1745  038E  00FE               	movwf	126
  1746  038F                     initloop:	
  1747  038F  0012               	moviw fsr0++
  1748  0390  001E               	movwi fsr1++
  1749  0391  0BFE               	decfsz	126,f
  1750  0392  2B8F               	goto	initloop
  1751  0393  3400               	retlw	0
  1752                           
  1753                           	psect	clrtext
  1754  0388                     clear_ram0:	
  1755                           ;	Called with FSR0 containing the base address, and
  1756                           ;	WREG with the size to clear
  1757                           
  1758  0388  0064               	clrwdt	;clear the watchdog before getting into this loop
  1759  0389                     clrloop0:	
  1760  0389  0180               	clrf	0	;clear RAM location pointed to by FSR
  1761  038A  3101               	addfsr 0,1
  1762  038B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1763  038C  2B89               	goto	clrloop0	;have we reached the end yet?
  1764  038D  3400               	retlw	0	;all done for this memory range, return
  1765                           
  1766                           	psect	cstackCOMMON
  1767  0070                     __pcstackCOMMON:	
  1768  0070                     ?_PIN_MANAGER_Initialize:	
  1769  0070                     ??_PIN_MANAGER_Initialize:	
  1770                           ; 1 bytes @ 0x0
  1771                           
  1772  0070                     ?_OSCILLATOR_Initialize:	
  1773                           ; 1 bytes @ 0x0
  1774                           
  1775  0070                     ??_OSCILLATOR_Initialize:	
  1776                           ; 1 bytes @ 0x0
  1777                           
  1778  0070                     ?_cw_bat_init:	
  1779                           ; 1 bytes @ 0x0
  1780                           
  1781  0070                     ?_EUSART1_Initialize:	
  1782                           ; 1 bytes @ 0x0
  1783                           
  1784  0070                     ??_EUSART1_Initialize:	
  1785                           ; 1 bytes @ 0x0
  1786                           
  1787  0070                     ?_EUSART1_Write:	
  1788                           ; 1 bytes @ 0x0
  1789                           
  1790  0070                     ??_EUSART1_Write:	
  1791                           ; 1 bytes @ 0x0
  1792                           
  1793  0070                     ?_SYSTEM_Initialize:	
  1794                           ; 1 bytes @ 0x0
  1795                           
  1796  0070                     ?_delay:	
  1797                           ; 1 bytes @ 0x0
  1798                           
  1799  0070                     ??_delay:	
  1800                           ; 1 bytes @ 0x0
  1801                           
  1802  0070                     ?_main:	
  1803                           ; 1 bytes @ 0x0
  1804                           
  1805  0070                     ?_CW_Delay10ms:	
  1806                           ; 1 bytes @ 0x0
  1807                           
  1808  0070                     ?_CW_Delay10us:	
  1809                           ; 1 bytes @ 0x0
  1810                           
  1811  0070                     ??_CW_Delay10us:	
  1812                           ; 1 bytes @ 0x0
  1813                           
  1814  0070                     ?_cw_update_config_info:	
  1815                           ; 1 bytes @ 0x0
  1816                           
  1817  0070                     ?_cw_init:	
  1818                           ; 1 bytes @ 0x0
  1819                           
  1820  0070                     ?_I2C_Delay10us:	
  1821                           ; 1 bytes @ 0x0
  1822                           
  1823  0070                     ??_I2C_Delay10us:	
  1824                           ; 1 bytes @ 0x0
  1825                           
  1826  0070                     ?_start:	
  1827                           ; 1 bytes @ 0x0
  1828                           
  1829  0070                     ?_stop:	
  1830                           ; 1 bytes @ 0x0
  1831                           
  1832  0070                     ?_s_ack:	
  1833                           ; 1 bytes @ 0x0
  1834                           
  1835  0070                     ?_write_byte:	
  1836                           ; 1 bytes @ 0x0
  1837                           
  1838  0070                     ?_read_byte:	
  1839                           ; 1 bytes @ 0x0
  1840                           
  1841  0070                     EUSART1_Write@txData:	
  1842                           ; 1 bytes @ 0x0
  1843                           
  1844  0070                     PIN_MANAGER_Initialize@state:	
  1845                           ; 1 bytes @ 0x0
  1846                           
  1847  0070                     CW_Delay10ms@c:	
  1848                           ; 1 bytes @ 0x0
  1849                           
  1850                           
  1851                           ; 2 bytes @ 0x0
  1852  0070                     	ds	1
  1853  0071                     ??_SYSTEM_Initialize:	
  1854  0071                     CW_Delay10us@us:	
  1855                           ; 1 bytes @ 0x1
  1856                           
  1857  0071                     I2C_Delay10us@us:	
  1858                           ; 1 bytes @ 0x1
  1859                           
  1860  0071                     delay@c:	
  1861                           ; 1 bytes @ 0x1
  1862                           
  1863                           
  1864                           ; 2 bytes @ 0x1
  1865  0071                     	ds	1
  1866  0072                     ??_CW_Delay10ms:	
  1867  0072                     CW_Delay10us@i:	
  1868                           ; 1 bytes @ 0x2
  1869                           
  1870  0072                     I2C_Delay10us@i:	
  1871                           ; 1 bytes @ 0x2
  1872                           
  1873                           
  1874                           ; 1 bytes @ 0x2
  1875  0072                     	ds	1
  1876  0073                     delay@a:	
  1877  0073                     CW_Delay10ms@a:	
  1878                           ; 1 bytes @ 0x3
  1879                           
  1880  0073                     CW_Delay10us@a:	
  1881                           ; 1 bytes @ 0x3
  1882                           
  1883  0073                     I2C_Delay10us@a:	
  1884                           ; 1 bytes @ 0x3
  1885                           
  1886                           
  1887                           ; 1 bytes @ 0x3
  1888  0073                     	ds	1
  1889  0074                     delay@b:	
  1890  0074                     CW_Delay10ms@b:	
  1891                           ; 1 bytes @ 0x4
  1892                           
  1893  0074                     CW_Delay10us@b:	
  1894                           ; 1 bytes @ 0x4
  1895                           
  1896  0074                     I2C_Delay10us@b:	
  1897                           ; 1 bytes @ 0x4
  1898                           
  1899                           
  1900                           ; 1 bytes @ 0x4
  1901  0074                     	ds	1
  1902  0075                     ??_start:	
  1903  0075                     ??_stop:	
  1904                           ; 1 bytes @ 0x5
  1905                           
  1906  0075                     ??_s_ack:	
  1907                           ; 1 bytes @ 0x5
  1908                           
  1909  0075                     ??_write_byte:	
  1910                           ; 1 bytes @ 0x5
  1911                           
  1912  0075                     ??_read_byte:	
  1913                           ; 1 bytes @ 0x5
  1914                           
  1915  0075                     ?_r_ack:	
  1916                           ; 1 bytes @ 0x5
  1917                           
  1918                           
  1919                           ; 2 bytes @ 0x5
  1920  0075                     	ds	1
  1921  0076                     write_byte@w_data:	
  1922  0076                     read_byte@i:	
  1923                           ; 1 bytes @ 0x6
  1924                           
  1925                           
  1926                           ; 1 bytes @ 0x6
  1927  0076                     	ds	1
  1928  0077                     ??_r_ack:	
  1929  0077                     write_byte@i:	
  1930                           ; 1 bytes @ 0x7
  1931                           
  1932  0077                     read_byte@r_data:	
  1933                           ; 1 bytes @ 0x7
  1934                           
  1935                           
  1936                           ; 1 bytes @ 0x7
  1937  0077                     	ds	2
  1938  0079                     r_ack@ack:	
  1939                           
  1940                           ; 2 bytes @ 0x9
  1941  0079                     	ds	2
  1942  007B                     ?_wait_r_ack:	
  1943                           
  1944                           ; 2 bytes @ 0xB
  1945  007B                     	ds	2
  1946  007D                     ??_cw_read:	
  1947  007D                     ??_cw_write:	
  1948                           ; 1 bytes @ 0xD
  1949                           
  1950  007D                     ??_wait_r_ack:	
  1951                           ; 1 bytes @ 0xD
  1952                           
  1953  007D                     cw_write@point_reg:	
  1954                           ; 1 bytes @ 0xD
  1955                           
  1956                           
  1957                           ; 1 bytes @ 0xD
  1958  007D                     	ds	1
  1959                           
  1960                           	psect	cstackBANK0
  1961  0020                     __pcstackBANK0:	
  1962  0020                     wait_r_ack@ack:	
  1963                           
  1964                           ; 2 bytes @ 0x0
  1965  0020                     	ds	2
  1966  0022                     wait_r_ack@i:	
  1967                           
  1968                           ; 2 bytes @ 0x2
  1969  0022                     	ds	2
  1970  0024                     ?_cw_read:	
  1971  0024                     ?_cw_write:	
  1972                           ; 2 bytes @ 0x4
  1973                           
  1974  0024                     cw_read@r_pdata:	
  1975                           ; 2 bytes @ 0x4
  1976                           
  1977  0024                     cw_write@w_pdata:	
  1978                           ; 1 bytes @ 0x4
  1979                           
  1980                           
  1981                           ; 1 bytes @ 0x4
  1982  0024                     	ds	2
  1983  0026                     cw_read@point_reg:	
  1984                           
  1985                           ; 1 bytes @ 0x6
  1986  0026                     	ds	1
  1987  0027                     ??_cw_update_config_info:	
  1988                           
  1989                           ; 1 bytes @ 0x7
  1990  0027                     	ds	1
  1991  0028                     cw_update_config_info@reset_val:	
  1992                           
  1993                           ; 1 bytes @ 0x8
  1994  0028                     	ds	1
  1995  0029                     cw_update_config_info@ret:	
  1996                           
  1997                           ; 2 bytes @ 0x9
  1998  0029                     	ds	2
  1999  002B                     cw_update_config_info@i:	
  2000                           
  2001                           ; 1 bytes @ 0xB
  2002  002B                     	ds	1
  2003  002C                     cw_update_config_info@reg_val:	
  2004                           
  2005                           ; 1 bytes @ 0xC
  2006  002C                     	ds	1
  2007  002D                     ??_cw_init:	
  2008                           
  2009                           ; 1 bytes @ 0xD
  2010  002D                     	ds	2
  2011  002F                     cw_init@i:	
  2012                           
  2013                           ; 1 bytes @ 0xF
  2014  002F                     	ds	1
  2015  0030                     cw_init@ret:	
  2016                           
  2017                           ; 2 bytes @ 0x10
  2018  0030                     	ds	2
  2019  0032                     cw_init@reg_val:	
  2020                           
  2021                           ; 1 bytes @ 0x12
  2022  0032                     	ds	1
  2023  0033                     ??_cw_bat_init:	
  2024                           
  2025                           ; 1 bytes @ 0x13
  2026  0033                     	ds	1
  2027  0034                     cw_bat_init@loop:	
  2028                           
  2029                           ; 1 bytes @ 0x14
  2030  0034                     	ds	1
  2031  0035                     cw_bat_init@ret:	
  2032                           
  2033                           ; 1 bytes @ 0x15
  2034  0035                     	ds	1
  2035  0036                     ??_main:	
  2036                           
  2037                           ; 1 bytes @ 0x16
  2038  0036                     	ds	1
  2039  0037                     main@ret:	
  2040                           
  2041                           ; 1 bytes @ 0x17
  2042  0037                     	ds	1
  2043                           
  2044                           	psect	maintext
  2045  03DF                     __pmaintext:	
  2046 ;;
  2047 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2048 ;;
  2049 ;; *************** function _main *****************
  2050 ;; Defined at:
  2051 ;;		line 65 in file "main.c"
  2052 ;; Parameters:    Size  Location     Type
  2053 ;;		None
  2054 ;; Auto vars:     Size  Location     Type
  2055 ;;  ret             1   23[BANK0 ] unsigned char 
  2056 ;;  send_char       1    0        unsigned char 
  2057 ;; Return value:  Size  Location     Type
  2058 ;;                  1    wreg      void 
  2059 ;; Registers used:
  2060 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2061 ;; Tracked objects:
  2062 ;;		On entry : B3F/0
  2063 ;;		On exit  : 0/0
  2064 ;;		Unchanged: 0/0
  2065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2066 ;;      Params:         0       0       0       0
  2067 ;;      Locals:         0       1       0       0
  2068 ;;      Temps:          0       1       0       0
  2069 ;;      Totals:         0       2       0       0
  2070 ;;Total ram usage:        2 bytes
  2071 ;; Hardware stack levels required when called:    7
  2072 ;; This function calls:
  2073 ;;		_EUSART1_Write
  2074 ;;		_SYSTEM_Initialize
  2075 ;;		_cw_bat_init
  2076 ;;		_delay
  2077 ;; This function is called by:
  2078 ;;		Startup code after reset
  2079 ;; This function uses a non-reentrant model
  2080 ;;
  2081                           
  2082                           
  2083                           ;psect for function _main
  2084  03DF                     _main:	
  2085                           
  2086                           ;main.c: 68: unsigned char ret = 0;
  2087                           
  2088                           ;incstack = 0
  2089                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2090  03DF  0140               	movlb	0	; select bank0
  2091  03E0  01B7               	clrf	main@ret
  2092                           
  2093                           ;main.c: 69: uint8_t send_char;
  2094                           ;main.c: 70: SYSTEM_Initialize();
  2095  03E1  2384               	fcall	_SYSTEM_Initialize
  2096                           
  2097                           ;main.c: 72: do { TRISCbits.TRISC0 = 0; } while(0);
  2098  03E2  0140               	movlb	0	; select bank0
  2099  03E3  1014               	bcf	20,0	;volatile
  2100  03E4                     L1:	
  2101                           
  2102                           ;main.c: 74: ret = cw_bat_init();
  2103  03E4  240D               	fcall	_cw_bat_init
  2104  03E5  0140               	movlb	0	; select bank0
  2105  03E6  00B6               	movwf	??_main
  2106  03E7  0836               	movf	??_main,w
  2107  03E8  00B7               	movwf	main@ret
  2108                           
  2109                           ;main.c: 75: EUSART1_Write(ret);
  2110  03E9  0837               	movf	main@ret,w
  2111  03EA  2394               	fcall	_EUSART1_Write
  2112                           
  2113                           ;main.c: 92: {
  2114                           ;main.c: 94: do { LATCbits.LATC2 = 0; } while(0);
  2115                           
  2116                           ;main.c: 91: while (1)
  2117  03EB  0140               	movlb	0	; select bank0
  2118  03EC  111A               	bcf	26,2	;volatile
  2119                           
  2120                           ;main.c: 95: delay();
  2121  03ED  24D6               	fcall	_delay
  2122                           
  2123                           ;main.c: 96: do { LATCbits.LATC2 = 1; } while(0);
  2124  03EE  0140               	movlb	0	; select bank0
  2125  03EF  151A               	bsf	26,2	;volatile
  2126                           
  2127                           ;main.c: 97: delay();
  2128  03F0  24D6               	fcall	_delay
  2129                           
  2130                           ;main.c: 98: do { LATCbits.LATC3 = 1; } while(0);
  2131  03F1  0140               	movlb	0	; select bank0
  2132  03F2  159A               	bsf	26,3	;volatile
  2133  03F3  2BE4               	goto	L1
  2134  03F4                     __end_of_main:	
  2135                           ;main.c: 105: EUSART1_Write(ret);
  2136                           
  2137                           ;main.c: 104: ret = cw_bat_init();
  2138                           
  2139                           
  2140                           	psect	text1
  2141  04D6                     __ptext1:	
  2142 ;; *************** function _delay *****************
  2143 ;; Defined at:
  2144 ;;		line 52 in file "main.c"
  2145 ;; Parameters:    Size  Location     Type
  2146 ;;		None
  2147 ;; Auto vars:     Size  Location     Type
  2148 ;;  c               2    1[COMMON] int 
  2149 ;;  b               1    4[COMMON] unsigned char 
  2150 ;;  a               1    3[COMMON] unsigned char 
  2151 ;;  d               1    0        unsigned char 
  2152 ;; Return value:  Size  Location     Type
  2153 ;;                  1    wreg      void 
  2154 ;; Registers used:
  2155 ;;		wreg, status,2, status,0
  2156 ;; Tracked objects:
  2157 ;;		On entry : 0/0
  2158 ;;		On exit  : 0/0
  2159 ;;		Unchanged: 0/0
  2160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2161 ;;      Params:         0       0       0       0
  2162 ;;      Locals:         4       0       0       0
  2163 ;;      Temps:          1       0       0       0
  2164 ;;      Totals:         5       0       0       0
  2165 ;;Total ram usage:        5 bytes
  2166 ;; Hardware stack levels used:    1
  2167 ;; This function calls:
  2168 ;;		Nothing
  2169 ;; This function is called by:
  2170 ;;		_main
  2171 ;; This function uses a non-reentrant model
  2172 ;;
  2173                           
  2174                           
  2175                           ;psect for function _delay
  2176  04D6                     _delay:	
  2177                           
  2178                           ;main.c: 54: unsigned char a, b, d;
  2179                           ;main.c: 55: int c = 100;
  2180                           
  2181                           ;incstack = 0
  2182                           ; Regs used in _delay: [wreg+status,2+status,0]
  2183  04D6  3064               	movlw	100
  2184  04D7  00F1               	movwf	delay@c
  2185  04D8  3000               	movlw	0
  2186  04D9  00F2               	movwf	delay@c+1
  2187  04DA                     L2:	
  2188                           
  2189                           ;main.c: 56: for (;c>0;c--)
  2190  04DA  0872               	movf	delay@c+1,w
  2191  04DB  3A80               	xorlw	128
  2192  04DC  00F0               	movwf	??_delay
  2193  04DD  3080               	movlw	128
  2194  04DE  0270               	subwf	??_delay,w
  2195  04DF  1D03               	skipz
  2196  04E0  2CE3               	goto	u2405
  2197  04E1  3001               	movlw	1
  2198  04E2  0271               	subwf	delay@c,w
  2199  04E3                     u2405:	
  2200  04E3  1C03               	btfss	3,0
  2201  04E4  0008               	return
  2202                           
  2203                           ;main.c: 57: {
  2204                           ;main.c: 58: for(b=95;b>0;b--)
  2205  04E5  305F               	movlw	95
  2206  04E6  00F0               	movwf	??_delay
  2207  04E7  0870               	movf	??_delay,w
  2208  04E8  00F4               	movwf	delay@b
  2209  04E9  0874               	movf	delay@b,w
  2210  04EA  1903               	btfsc	3,2
  2211  04EB  2CFD               	goto	l2402
  2212  04EC                     l2392:	
  2213                           
  2214                           ;main.c: 59: {
  2215                           ;main.c: 60: for(a=209;a>0;a--) ;
  2216  04EC  30D1               	movlw	209
  2217  04ED  00F0               	movwf	??_delay
  2218  04EE  0870               	movf	??_delay,w
  2219  04EF  00F3               	movwf	delay@a
  2220  04F0  0873               	movf	delay@a,w
  2221  04F1  1903               	btfsc	3,2
  2222  04F2  2CF8               	goto	l2400
  2223  04F3                     l2398:	
  2224  04F3  3001               	movlw	1
  2225  04F4  02F3               	subwf	delay@a,f
  2226  04F5  0873               	movf	delay@a,w
  2227  04F6  1D03               	btfss	3,2
  2228  04F7  2CF3               	goto	l2398
  2229  04F8                     l2400:	
  2230  04F8  3001               	movlw	1
  2231  04F9  02F4               	subwf	delay@b,f
  2232  04FA  0874               	movf	delay@b,w
  2233  04FB  1D03               	btfss	3,2
  2234  04FC  2CEC               	goto	l2392
  2235  04FD                     l2402:	
  2236  04FD  30FF               	movlw	255
  2237  04FE  07F1               	addwf	delay@c,f
  2238  04FF  30FF               	movlw	255
  2239  0500  3DF2               	addwfc	delay@c+1,f
  2240  0501  2CDA               	goto	L2
  2241  0502                     __end_of_delay:	
  2242                           
  2243                           	psect	text2
  2244  040D                     __ptext2:	
  2245 ;; *************** function _cw_bat_init *****************
  2246 ;; Defined at:
  2247 ;;		line 560 in file "CW201x.c"
  2248 ;; Parameters:    Size  Location     Type
  2249 ;;		None
  2250 ;; Auto vars:     Size  Location     Type
  2251 ;;  ret             1   21[BANK0 ] unsigned char 
  2252 ;;  loop            1   20[BANK0 ] unsigned char 
  2253 ;; Return value:  Size  Location     Type
  2254 ;;                  1    wreg      unsigned char 
  2255 ;; Registers used:
  2256 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2257 ;; Tracked objects:
  2258 ;;		On entry : 0/0
  2259 ;;		On exit  : 0/0
  2260 ;;		Unchanged: 0/0
  2261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2262 ;;      Params:         0       0       0       0
  2263 ;;      Locals:         0       2       0       0
  2264 ;;      Temps:          0       1       0       0
  2265 ;;      Totals:         0       3       0       0
  2266 ;;Total ram usage:        3 bytes
  2267 ;; Hardware stack levels used:    1
  2268 ;; Hardware stack levels required when called:    6
  2269 ;; This function calls:
  2270 ;;		_cw_init
  2271 ;; This function is called by:
  2272 ;;		_main
  2273 ;; This function uses a non-reentrant model
  2274 ;;
  2275                           
  2276                           
  2277                           ;psect for function _cw_bat_init
  2278  040D                     _cw_bat_init:	
  2279                           
  2280                           ;CW201x.c: 562: unsigned char ret;
  2281                           ;CW201x.c: 563: unsigned char loop = 0;
  2282                           
  2283                           ;incstack = 0
  2284                           ; Regs used in _cw_bat_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2285  040D  0140               	movlb	0	; select bank0
  2286  040E  01B4               	clrf	cw_bat_init@loop
  2287  040F                     l2408:	
  2288                           ;CW201x.c: 567: while((loop++ < 200) && (ret != 0))
  2289                           
  2290                           ;CW201x.c: 566: ret = cw_init();
  2291                           
  2292                           
  2293                           ;CW201x.c: 568: {
  2294                           ;CW201x.c: 569: ret = cw_init();
  2295  040F  270E               	fcall	_cw_init
  2296  0410  0140               	movlb	0	; select bank0
  2297  0411  00B3               	movwf	??_cw_bat_init
  2298  0412  0833               	movf	??_cw_bat_init,w
  2299  0413  00B5               	movwf	cw_bat_init@ret
  2300  0414  0834               	movf	cw_bat_init@loop,w
  2301  0415  0AB4               	incf	cw_bat_init@loop,f
  2302  0416  00B3               	movwf	??_cw_bat_init
  2303  0417  30C8               	movlw	200
  2304  0418  0233               	subwf	??_cw_bat_init,w
  2305  0419  1803               	skipnc
  2306  041A  2C1E               	goto	l2414
  2307  041B  0835               	movf	cw_bat_init@ret,w
  2308  041C  1D03               	btfss	3,2
  2309  041D  2C0F               	goto	l2408
  2310  041E                     l2414:	
  2311                           
  2312                           ;CW201x.c: 570: }
  2313                           ;CW201x.c: 572: cw_bat.usb_online = 0;
  2314  041E  01B8               	clrf	_cw_bat
  2315                           
  2316                           ;CW201x.c: 573: cw_bat.capacity = 2;
  2317  041F  3002               	movlw	2
  2318  0420  00B9               	movwf	_cw_bat+1
  2319  0421  3000               	movlw	0
  2320  0422  00BA               	movwf	_cw_bat+2
  2321                           
  2322                           ;CW201x.c: 574: cw_bat.voltage = 0;
  2323  0423  01BB               	clrf	_cw_bat+3
  2324  0424  01BC               	clrf	_cw_bat+4
  2325                           
  2326                           ;CW201x.c: 578: cw_bat.alt = 0;
  2327  0425  01BD               	clrf	_cw_bat+5
  2328                           
  2329                           ;CW201x.c: 580: return ret;
  2330  0426  0835               	movf	cw_bat_init@ret,w
  2331  0427  0008               	return
  2332  0428                     __end_of_cw_bat_init:	
  2333                           
  2334                           	psect	text3
  2335  070E                     __ptext3:	
  2336 ;; *************** function _cw_init *****************
  2337 ;; Defined at:
  2338 ;;		line 126 in file "CW201x.c"
  2339 ;; Parameters:    Size  Location     Type
  2340 ;;		None
  2341 ;; Auto vars:     Size  Location     Type
  2342 ;;  ret             2   16[BANK0 ] unsigned int 
  2343 ;;  reg_val         1   18[BANK0 ] unsigned char 
  2344 ;;  i               1   15[BANK0 ] unsigned char 
  2345 ;; Return value:  Size  Location     Type
  2346 ;;                  1    wreg      unsigned char 
  2347 ;; Registers used:
  2348 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2349 ;; Tracked objects:
  2350 ;;		On entry : 0/0
  2351 ;;		On exit  : 0/0
  2352 ;;		Unchanged: 0/0
  2353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2354 ;;      Params:         0       0       0       0
  2355 ;;      Locals:         0       4       0       0
  2356 ;;      Temps:          0       2       0       0
  2357 ;;      Totals:         0       6       0       0
  2358 ;;Total ram usage:        6 bytes
  2359 ;; Hardware stack levels used:    1
  2360 ;; Hardware stack levels required when called:    5
  2361 ;; This function calls:
  2362 ;;		_CW_Delay10ms
  2363 ;;		_cw_read
  2364 ;;		_cw_update_config_info
  2365 ;;		_cw_write
  2366 ;; This function is called by:
  2367 ;;		_cw_bat_init
  2368 ;;		_cw_por
  2369 ;; This function uses a non-reentrant model
  2370 ;;
  2371                           
  2372                           
  2373                           ;psect for function _cw_init
  2374  070E                     _cw_init:	
  2375                           
  2376                           ;CW201x.c: 128: unsigned ret;
  2377                           ;CW201x.c: 129: unsigned char i;
  2378                           ;CW201x.c: 130: unsigned char reg_val = (0x0<<6);
  2379                           
  2380                           ;incstack = 0
  2381                           ; Regs used in _cw_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2382  070E  0140               	movlb	0	; select bank0
  2383  070F  01B2               	clrf	cw_init@reg_val
  2384                           
  2385                           ;CW201x.c: 133: ret = cw_write(0xA, &reg_val);
  2386  0710  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  2387  0711  00AD               	movwf	??_cw_init
  2388  0712  082D               	movf	??_cw_init,w
  2389  0713  00A4               	movwf	cw_write@w_pdata
  2390  0714  300A               	movlw	10
  2391  0715  2562               	fcall	_cw_write
  2392  0716  0140               	movlb	0	; select bank0
  2393  0717  0825               	movf	?_cw_write+1,w
  2394  0718  00B1               	movwf	cw_init@ret+1
  2395  0719  0824               	movf	?_cw_write,w
  2396  071A  00B0               	movwf	cw_init@ret
  2397                           
  2398                           ;CW201x.c: 134: if(ret)
  2399  071B  0830               	movf	cw_init@ret,w
  2400  071C  0431               	iorwf	cw_init@ret+1,w
  2401  071D  1903               	btfsc	3,2
  2402  071E  2F21               	goto	l2096
  2403                           
  2404                           ;CW201x.c: 135: {
  2405                           ;CW201x.c: 136: return 1;
  2406  071F  3001               	movlw	1
  2407  0720  0008               	return
  2408  0721                     l2096:	
  2409                           
  2410                           ;CW201x.c: 137: }
  2411                           ;CW201x.c: 140: ret = cw_read(0x8, &reg_val);
  2412  0721  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  2413  0722  00AD               	movwf	??_cw_init
  2414  0723  082D               	movf	??_cw_init,w
  2415  0724  00A4               	movwf	cw_read@r_pdata
  2416  0725  3008               	movlw	8
  2417  0726  2594               	fcall	_cw_read
  2418  0727  0140               	movlb	0	; select bank0
  2419  0728  0825               	movf	?_cw_read+1,w
  2420  0729  00B1               	movwf	cw_init@ret+1
  2421  072A  0824               	movf	?_cw_read,w
  2422  072B  00B0               	movwf	cw_init@ret
  2423                           
  2424                           ;CW201x.c: 141: if(ret)
  2425  072C  0830               	movf	cw_init@ret,w
  2426  072D  0431               	iorwf	cw_init@ret+1,w
  2427  072E  1903               	btfsc	3,2
  2428  072F  2F32               	goto	l2104
  2429                           
  2430                           ;CW201x.c: 142: {
  2431                           ;CW201x.c: 143: return 1;
  2432  0730  3001               	movlw	1
  2433  0731  0008               	return
  2434  0732                     l2104:	
  2435                           
  2436                           ;CW201x.c: 144: }
  2437                           ;CW201x.c: 145: if((reg_val & 0xf8) != (0x0<<3))
  2438  0732  0832               	movf	cw_init@reg_val,w
  2439  0733  39F8               	andlw	248
  2440  0734  1903               	btfsc	3,2
  2441  0735  2F4B               	goto	l2116
  2442                           
  2443                           ;CW201x.c: 149: reg_val |= (0x0<<3);
  2444  0736  3007               	movlw	7
  2445  0737  00AD               	movwf	??_cw_init
  2446  0738  082D               	movf	??_cw_init,w
  2447  0739  05B2               	andwf	cw_init@reg_val,f
  2448                           
  2449                           ;CW201x.c: 150: ret = cw_write(0x8, &reg_val);
  2450  073A  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  2451  073B  00AD               	movwf	??_cw_init
  2452  073C  082D               	movf	??_cw_init,w
  2453  073D  00A4               	movwf	cw_write@w_pdata
  2454  073E  3008               	movlw	8
  2455  073F  2562               	fcall	_cw_write
  2456  0740  0140               	movlb	0	; select bank0
  2457  0741  0825               	movf	?_cw_write+1,w
  2458  0742  00B1               	movwf	cw_init@ret+1
  2459  0743  0824               	movf	?_cw_write,w
  2460  0744  00B0               	movwf	cw_init@ret
  2461                           
  2462                           ;CW201x.c: 151: if(ret)
  2463  0745  0830               	movf	cw_init@ret,w
  2464  0746  0431               	iorwf	cw_init@ret+1,w
  2465  0747  1903               	btfsc	3,2
  2466  0748  2F4B               	goto	l2116
  2467                           
  2468                           ;CW201x.c: 152: {
  2469                           ;CW201x.c: 153: return 1;
  2470  0749  3001               	movlw	1
  2471  074A  0008               	return
  2472  074B                     l2116:	
  2473                           
  2474                           ;CW201x.c: 154: }
  2475                           ;CW201x.c: 155: }
  2476                           ;CW201x.c: 158: ret = cw_read(0x8, &reg_val);
  2477  074B  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  2478  074C  00AD               	movwf	??_cw_init
  2479  074D  082D               	movf	??_cw_init,w
  2480  074E  00A4               	movwf	cw_read@r_pdata
  2481  074F  3008               	movlw	8
  2482  0750  2594               	fcall	_cw_read
  2483  0751  0140               	movlb	0	; select bank0
  2484  0752  0825               	movf	?_cw_read+1,w
  2485  0753  00B1               	movwf	cw_init@ret+1
  2486  0754  0824               	movf	?_cw_read,w
  2487  0755  00B0               	movwf	cw_init@ret
  2488                           
  2489                           ;CW201x.c: 159: if(ret)
  2490  0756  0830               	movf	cw_init@ret,w
  2491  0757  0431               	iorwf	cw_init@ret+1,w
  2492  0758  1903               	btfsc	3,2
  2493  0759  2F5C               	goto	l201
  2494                           
  2495                           ;CW201x.c: 160: {
  2496                           ;CW201x.c: 161: return 1;
  2497  075A  3001               	movlw	1
  2498  075B  0008               	return
  2499  075C                     l201:	
  2500                           
  2501                           ;CW201x.c: 162: }
  2502                           ;CW201x.c: 163: if(!(reg_val & (0x1<<1)))
  2503  075C  18B2               	btfsc	cw_init@reg_val,1
  2504  075D  2F6C               	goto	l2132
  2505                           
  2506                           ;CW201x.c: 164: {
  2507                           ;CW201x.c: 166: ret = cw_update_config_info();
  2508  075E  264E               	fcall	_cw_update_config_info
  2509  075F  0140               	movlb	0	; select bank0
  2510  0760  00AD               	movwf	??_cw_init
  2511  0761  01AE               	clrf	??_cw_init+1
  2512  0762  082D               	movf	??_cw_init,w
  2513  0763  00B0               	movwf	cw_init@ret
  2514  0764  082E               	movf	??_cw_init+1,w
  2515  0765  00B1               	movwf	cw_init@ret+1
  2516                           
  2517                           ;CW201x.c: 167: if(ret)
  2518  0766  0830               	movf	cw_init@ret,w
  2519  0767  0431               	iorwf	cw_init@ret+1,w
  2520  0768  1903               	btfsc	3,2
  2521  0769  2FA5               	goto	l2164
  2522                           
  2523                           ;CW201x.c: 168: {
  2524                           ;CW201x.c: 169: return ret;
  2525  076A  0830               	movf	cw_init@ret,w
  2526  076B  0008               	return
  2527  076C                     l2132:	
  2528                           ;CW201x.c: 170: }
  2529                           ;CW201x.c: 171: }
  2530                           
  2531                           
  2532                           ;CW201x.c: 172: else
  2533                           ;CW201x.c: 173: {
  2534                           ;CW201x.c: 174: for(i = 0; i < 64; i++)
  2535  076C  01AF               	clrf	cw_init@i
  2536  076D  3040               	movlw	64
  2537  076E  022F               	subwf	cw_init@i,w
  2538  076F  1803               	btfsc	3,0
  2539  0770  2F93               	goto	l2154
  2540  0771                     l2138:	
  2541                           
  2542                           ;CW201x.c: 175: {
  2543                           ;CW201x.c: 176: ret = cw_read(0x10 +i, &reg_val);
  2544  0771  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  2545  0772  00AD               	movwf	??_cw_init
  2546  0773  082D               	movf	??_cw_init,w
  2547  0774  00A4               	movwf	cw_read@r_pdata
  2548  0775  082F               	movf	cw_init@i,w
  2549  0776  3E10               	addlw	16
  2550  0777  2594               	fcall	_cw_read
  2551  0778  0140               	movlb	0	; select bank0
  2552  0779  0825               	movf	?_cw_read+1,w
  2553  077A  00B1               	movwf	cw_init@ret+1
  2554  077B  0824               	movf	?_cw_read,w
  2555  077C  00B0               	movwf	cw_init@ret
  2556                           
  2557                           ;CW201x.c: 177: if(ret)
  2558  077D  0830               	movf	cw_init@ret,w
  2559  077E  0431               	iorwf	cw_init@ret+1,w
  2560  077F  1903               	btfsc	3,2
  2561  0780  2F83               	goto	l2146
  2562                           
  2563                           ;CW201x.c: 178: {
  2564                           ;CW201x.c: 179: return 1;
  2565  0781  3001               	movlw	1
  2566  0782  0008               	return
  2567  0783                     l2146:	
  2568                           
  2569                           ;CW201x.c: 180: }
  2570                           ;CW201x.c: 181: if(cw_bat_config_info[i] != reg_val)
  2571  0783  082F               	movf	cw_init@i,w
  2572  0784  3EA0               	addlw	(low (CW201x@cw_bat_config_info| 0))& (0+255)
  2573  0785  0086               	movwf	6
  2574  0786  0187               	clrf	7
  2575  0787  0801               	movf	1,w
  2576  0788  0632               	xorwf	cw_init@reg_val,w
  2577  0789  1D03               	btfss	3,2
  2578  078A  2F93               	goto	l2154
  2579                           
  2580                           ;CW201x.c: 182: {
  2581                           ;CW201x.c: 183: break;
  2582  078B  3001               	movlw	1
  2583  078C  00AD               	movwf	??_cw_init
  2584  078D  082D               	movf	??_cw_init,w
  2585  078E  07AF               	addwf	cw_init@i,f
  2586  078F  3040               	movlw	64
  2587  0790  022F               	subwf	cw_init@i,w
  2588  0791  1C03               	skipc
  2589  0792  2F71               	goto	l2138
  2590  0793                     l2154:	
  2591                           
  2592                           ;CW201x.c: 184: }
  2593                           ;CW201x.c: 185: }
  2594                           ;CW201x.c: 186: if(i != 64)
  2595  0793  3040               	movlw	64
  2596  0794  062F               	xorwf	cw_init@i,w
  2597  0795  1903               	btfsc	3,2
  2598  0796  2FA5               	goto	l2164
  2599                           
  2600                           ;CW201x.c: 187: {
  2601                           ;CW201x.c: 189: ret = cw_update_config_info();
  2602  0797  264E               	fcall	_cw_update_config_info
  2603  0798  0140               	movlb	0	; select bank0
  2604  0799  00AD               	movwf	??_cw_init
  2605  079A  01AE               	clrf	??_cw_init+1
  2606  079B  082D               	movf	??_cw_init,w
  2607  079C  00B0               	movwf	cw_init@ret
  2608  079D  082E               	movf	??_cw_init+1,w
  2609  079E  00B1               	movwf	cw_init@ret+1
  2610                           
  2611                           ;CW201x.c: 190: if(ret)
  2612  079F  0830               	movf	cw_init@ret,w
  2613  07A0  0431               	iorwf	cw_init@ret+1,w
  2614  07A1  1903               	btfsc	3,2
  2615  07A2  2FA5               	goto	l2164
  2616                           
  2617                           ;CW201x.c: 191: {
  2618                           ;CW201x.c: 192: return ret;
  2619  07A3  0830               	movf	cw_init@ret,w
  2620  07A4  0008               	return
  2621  07A5                     l2164:	
  2622                           
  2623                           ;CW201x.c: 193: }
  2624                           ;CW201x.c: 194: }
  2625                           ;CW201x.c: 195: }
  2626                           ;CW201x.c: 197: for (i = 0; i < 30; i++) {
  2627  07A5  01AF               	clrf	cw_init@i
  2628  07A6  301E               	movlw	30
  2629  07A7  022F               	subwf	cw_init@i,w
  2630  07A8  1803               	btfsc	3,0
  2631  07A9  2FCD               	goto	l2190
  2632  07AA                     l2170:	
  2633                           
  2634                           ;CW201x.c: 198: CW_Delay10ms(10);
  2635  07AA  300A               	movlw	10
  2636  07AB  00F0               	movwf	CW_Delay10ms@c
  2637  07AC  3000               	movlw	0
  2638  07AD  00F1               	movwf	CW_Delay10ms@c+1
  2639  07AE  2428               	fcall	_CW_Delay10ms
  2640                           
  2641                           ;CW201x.c: 199: ret = cw_read(0x4, &reg_val);
  2642  07AF  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  2643  07B0  0140               	movlb	0	; select bank0
  2644  07B1  00AD               	movwf	??_cw_init
  2645  07B2  082D               	movf	??_cw_init,w
  2646  07B3  00A4               	movwf	cw_read@r_pdata
  2647  07B4  3004               	movlw	4
  2648  07B5  2594               	fcall	_cw_read
  2649  07B6  0140               	movlb	0	; select bank0
  2650  07B7  0825               	movf	?_cw_read+1,w
  2651  07B8  00B1               	movwf	cw_init@ret+1
  2652  07B9  0824               	movf	?_cw_read,w
  2653  07BA  00B0               	movwf	cw_init@ret
  2654                           
  2655                           ;CW201x.c: 200: if (ret)
  2656  07BB  0830               	movf	cw_init@ret,w
  2657  07BC  0431               	iorwf	cw_init@ret+1,w
  2658  07BD  1903               	btfsc	3,2
  2659  07BE  2FC1               	goto	l2182
  2660                           
  2661                           ;CW201x.c: 201: return 1;
  2662  07BF  3001               	movlw	1
  2663  07C0  0008               	return
  2664  07C1                     l2182:	
  2665                           
  2666                           ;CW201x.c: 202: else if (reg_val <= 100)
  2667  07C1  3065               	movlw	101
  2668  07C2  0232               	subwf	cw_init@reg_val,w
  2669  07C3  1C03               	btfss	3,0
  2670  07C4  2FCD               	goto	l2190
  2671                           
  2672                           ;CW201x.c: 203: break;
  2673  07C5  3001               	movlw	1
  2674  07C6  00AD               	movwf	??_cw_init
  2675  07C7  082D               	movf	??_cw_init,w
  2676  07C8  07AF               	addwf	cw_init@i,f
  2677  07C9  301E               	movlw	30
  2678  07CA  022F               	subwf	cw_init@i,w
  2679  07CB  1C03               	skipc
  2680  07CC  2FAA               	goto	l2170
  2681  07CD                     l2190:	
  2682                           
  2683                           ;CW201x.c: 204: }
  2684                           ;CW201x.c: 206: if (i >=30){
  2685  07CD  301E               	movlw	30
  2686  07CE  022F               	subwf	cw_init@i,w
  2687  07CF  1C03               	skipc
  2688  07D0  2FE2               	goto	l2200
  2689                           
  2690                           ;CW201x.c: 207: reg_val = (0x3<<6);
  2691  07D1  30C0               	movlw	192
  2692  07D2  00AD               	movwf	??_cw_init
  2693  07D3  082D               	movf	??_cw_init,w
  2694  07D4  00B2               	movwf	cw_init@reg_val
  2695                           
  2696                           ;CW201x.c: 208: ret = cw_write(0xA, &reg_val);
  2697  07D5  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  2698  07D6  00AD               	movwf	??_cw_init
  2699  07D7  082D               	movf	??_cw_init,w
  2700  07D8  00A4               	movwf	cw_write@w_pdata
  2701  07D9  300A               	movlw	10
  2702  07DA  2562               	fcall	_cw_write
  2703  07DB  0140               	movlb	0	; select bank0
  2704  07DC  0825               	movf	?_cw_write+1,w
  2705  07DD  00B1               	movwf	cw_init@ret+1
  2706  07DE  0824               	movf	?_cw_write,w
  2707  07DF  00B0               	movwf	cw_init@ret
  2708                           
  2709                           ;CW201x.c: 210: return 4;
  2710  07E0  3004               	movlw	4
  2711  07E1  0008               	return
  2712  07E2                     l2200:	
  2713                           
  2714                           ;CW201x.c: 211: }
  2715                           ;CW201x.c: 212: return 0;
  2716  07E2  3000               	movlw	0
  2717  07E3  0008               	return
  2718  07E4                     __end_of_cw_init:	
  2719                           
  2720                           	psect	text4
  2721  064E                     __ptext4:	
  2722 ;; *************** function _cw_update_config_info *****************
  2723 ;; Defined at:
  2724 ;;		line 53 in file "CW201x.c"
  2725 ;; Parameters:    Size  Location     Type
  2726 ;;		None
  2727 ;; Auto vars:     Size  Location     Type
  2728 ;;  ret             2    9[BANK0 ] int 
  2729 ;;  reg_val         1   12[BANK0 ] unsigned char 
  2730 ;;  i               1   11[BANK0 ] unsigned char 
  2731 ;;  reset_val       1    8[BANK0 ] unsigned char 
  2732 ;; Return value:  Size  Location     Type
  2733 ;;                  1    wreg      unsigned char 
  2734 ;; Registers used:
  2735 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2736 ;; Tracked objects:
  2737 ;;		On entry : 0/0
  2738 ;;		On exit  : 0/0
  2739 ;;		Unchanged: 0/0
  2740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2741 ;;      Params:         0       0       0       0
  2742 ;;      Locals:         0       5       0       0
  2743 ;;      Temps:          0       1       0       0
  2744 ;;      Totals:         0       6       0       0
  2745 ;;Total ram usage:        6 bytes
  2746 ;; Hardware stack levels used:    1
  2747 ;; Hardware stack levels required when called:    4
  2748 ;; This function calls:
  2749 ;;		_CW_Delay10us
  2750 ;;		_cw_read
  2751 ;;		_cw_write
  2752 ;; This function is called by:
  2753 ;;		_cw_init
  2754 ;; This function uses a non-reentrant model
  2755 ;;
  2756                           
  2757                           
  2758                           ;psect for function _cw_update_config_info
  2759  064E                     _cw_update_config_info:	
  2760                           
  2761                           ;CW201x.c: 55: int ret = 0;
  2762                           
  2763                           ;incstack = 0
  2764                           ; Regs used in _cw_update_config_info: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  2765  064E  0140               	movlb	0	; select bank0
  2766  064F  01A9               	clrf	cw_update_config_info@ret
  2767  0650  01AA               	clrf	cw_update_config_info@ret+1
  2768                           
  2769                           ;CW201x.c: 56: unsigned char i;
  2770                           ;CW201x.c: 57: unsigned char reset_val;
  2771                           ;CW201x.c: 58: unsigned char reg_val;
  2772                           ;CW201x.c: 60: ret = cw_read(0xA, &reg_val);
  2773  0651  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  2774  0652  00A7               	movwf	??_cw_update_config_info
  2775  0653  0827               	movf	??_cw_update_config_info,w
  2776  0654  00A4               	movwf	cw_read@r_pdata
  2777  0655  300A               	movlw	10
  2778  0656  2594               	fcall	_cw_read
  2779  0657  0140               	movlb	0	; select bank0
  2780  0658  0825               	movf	?_cw_read+1,w
  2781  0659  00AA               	movwf	cw_update_config_info@ret+1
  2782  065A  0824               	movf	?_cw_read,w
  2783  065B  00A9               	movwf	cw_update_config_info@ret
  2784                           
  2785                           ;CW201x.c: 61: if(ret)
  2786  065C  0829               	movf	cw_update_config_info@ret,w
  2787  065D  042A               	iorwf	cw_update_config_info@ret+1,w
  2788  065E  1903               	btfsc	3,2
  2789  065F  2E62               	goto	l1914
  2790                           
  2791                           ;CW201x.c: 62: {
  2792                           ;CW201x.c: 63: return 1;
  2793  0660  3001               	movlw	1
  2794  0661  0008               	return
  2795  0662                     l1914:	
  2796                           
  2797                           ;CW201x.c: 64: }
  2798                           ;CW201x.c: 65: if((reg_val & (0x3<<6)) == (0x3<<6))
  2799  0662  30C0               	movlw	192
  2800  0663  052C               	andwf	cw_update_config_info@reg_val,w
  2801  0664  00A7               	movwf	??_cw_update_config_info
  2802  0665  30C0               	movlw	192
  2803  0666  0627               	xorwf	??_cw_update_config_info,w
  2804  0667  1D03               	btfss	3,2
  2805  0668  2E6B               	goto	l1920
  2806                           
  2807                           ;CW201x.c: 66: {
  2808                           ;CW201x.c: 67: return 2;
  2809  0669  3002               	movlw	2
  2810  066A  0008               	return
  2811  066B                     l1920:	
  2812                           
  2813                           ;CW201x.c: 68: }
  2814                           ;CW201x.c: 70: for(i = 0; i < 64; i++)
  2815  066B  01AB               	clrf	cw_update_config_info@i
  2816  066C  3040               	movlw	64
  2817  066D  022B               	subwf	cw_update_config_info@i,w
  2818  066E  1803               	btfsc	3,0
  2819  066F  2E92               	goto	l1940
  2820  0670                     l1926:	
  2821                           
  2822                           ;CW201x.c: 71: {
  2823                           ;CW201x.c: 72: reg_val = cw_bat_config_info[i];
  2824  0670  082B               	movf	cw_update_config_info@i,w
  2825  0671  3EA0               	addlw	(low (CW201x@cw_bat_config_info| 0))& (0+255)
  2826  0672  0086               	movwf	6
  2827  0673  0187               	clrf	7
  2828  0674  0801               	movf	1,w
  2829  0675  00A7               	movwf	??_cw_update_config_info
  2830  0676  0827               	movf	??_cw_update_config_info,w
  2831  0677  00AC               	movwf	cw_update_config_info@reg_val
  2832                           
  2833                           ;CW201x.c: 73: ret = cw_write(0x10+i, &reg_val);
  2834  0678  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  2835  0679  00A7               	movwf	??_cw_update_config_info
  2836  067A  0827               	movf	??_cw_update_config_info,w
  2837  067B  00A4               	movwf	cw_write@w_pdata
  2838  067C  082B               	movf	cw_update_config_info@i,w
  2839  067D  3E10               	addlw	16
  2840  067E  2562               	fcall	_cw_write
  2841  067F  0140               	movlb	0	; select bank0
  2842  0680  0825               	movf	?_cw_write+1,w
  2843  0681  00AA               	movwf	cw_update_config_info@ret+1
  2844  0682  0824               	movf	?_cw_write,w
  2845  0683  00A9               	movwf	cw_update_config_info@ret
  2846                           
  2847                           ;CW201x.c: 74: if(ret)
  2848  0684  0829               	movf	cw_update_config_info@ret,w
  2849  0685  042A               	iorwf	cw_update_config_info@ret+1,w
  2850  0686  1903               	btfsc	3,2
  2851  0687  2E8A               	goto	l1936
  2852                           
  2853                           ;CW201x.c: 75: {
  2854                           ;CW201x.c: 76: return 1;
  2855  0688  3001               	movlw	1
  2856  0689  0008               	return
  2857  068A                     l1936:	
  2858  068A  3001               	movlw	1
  2859  068B  00A7               	movwf	??_cw_update_config_info
  2860  068C  0827               	movf	??_cw_update_config_info,w
  2861  068D  07AB               	addwf	cw_update_config_info@i,f
  2862  068E  3040               	movlw	64
  2863  068F  022B               	subwf	cw_update_config_info@i,w
  2864  0690  1C03               	skipc
  2865  0691  2E70               	goto	l1926
  2866  0692                     l1940:	
  2867                           
  2868                           ;CW201x.c: 77: }
  2869                           ;CW201x.c: 78: }
  2870                           ;CW201x.c: 81: for(i = 0; i < 64; i++)
  2871  0692  01AB               	clrf	cw_update_config_info@i
  2872  0693  3040               	movlw	64
  2873  0694  022B               	subwf	cw_update_config_info@i,w
  2874  0695  1803               	btfsc	3,0
  2875  0696  2EBB               	goto	l1964
  2876  0697                     l1946:	
  2877                           
  2878                           ;CW201x.c: 82: {
  2879                           ;CW201x.c: 83: ret = cw_read(0x10+i, &reg_val);
  2880  0697  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  2881  0698  00A7               	movwf	??_cw_update_config_info
  2882  0699  0827               	movf	??_cw_update_config_info,w
  2883  069A  00A4               	movwf	cw_read@r_pdata
  2884  069B  082B               	movf	cw_update_config_info@i,w
  2885  069C  3E10               	addlw	16
  2886  069D  2594               	fcall	_cw_read
  2887  069E  0140               	movlb	0	; select bank0
  2888  069F  0825               	movf	?_cw_read+1,w
  2889  06A0  00AA               	movwf	cw_update_config_info@ret+1
  2890  06A1  0824               	movf	?_cw_read,w
  2891  06A2  00A9               	movwf	cw_update_config_info@ret
  2892                           
  2893                           ;CW201x.c: 84: if(ret)
  2894  06A3  0829               	movf	cw_update_config_info@ret,w
  2895  06A4  042A               	iorwf	cw_update_config_info@ret+1,w
  2896  06A5  1903               	btfsc	3,2
  2897  06A6  2EA9               	goto	l1954
  2898                           
  2899                           ;CW201x.c: 85: {
  2900                           ;CW201x.c: 86: return 1;
  2901  06A7  3001               	movlw	1
  2902  06A8  0008               	return
  2903  06A9                     l1954:	
  2904                           
  2905                           ;CW201x.c: 87: }
  2906                           ;CW201x.c: 88: if(reg_val != cw_bat_config_info[i])
  2907  06A9  082B               	movf	cw_update_config_info@i,w
  2908  06AA  3EA0               	addlw	(low (CW201x@cw_bat_config_info| 0))& (0+255)
  2909  06AB  0086               	movwf	6
  2910  06AC  0187               	clrf	7
  2911  06AD  0801               	movf	1,w
  2912  06AE  062C               	xorwf	cw_update_config_info@reg_val,w
  2913  06AF  1903               	skipnz
  2914  06B0  2EB3               	goto	l1960
  2915                           
  2916                           ;CW201x.c: 89: {
  2917                           ;CW201x.c: 90: return 3;
  2918  06B1  3003               	movlw	3
  2919  06B2  0008               	return
  2920  06B3                     l1960:	
  2921  06B3  3001               	movlw	1
  2922  06B4  00A7               	movwf	??_cw_update_config_info
  2923  06B5  0827               	movf	??_cw_update_config_info,w
  2924  06B6  07AB               	addwf	cw_update_config_info@i,f
  2925  06B7  3040               	movlw	64
  2926  06B8  022B               	subwf	cw_update_config_info@i,w
  2927  06B9  1C03               	skipc
  2928  06BA  2E97               	goto	l1946
  2929  06BB                     l1964:	
  2930                           
  2931                           ;CW201x.c: 91: }
  2932                           ;CW201x.c: 92: }
  2933                           ;CW201x.c: 94: ret = cw_read(0x8, &reg_val);
  2934  06BB  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  2935  06BC  00A7               	movwf	??_cw_update_config_info
  2936  06BD  0827               	movf	??_cw_update_config_info,w
  2937  06BE  00A4               	movwf	cw_read@r_pdata
  2938  06BF  3008               	movlw	8
  2939  06C0  2594               	fcall	_cw_read
  2940  06C1  0140               	movlb	0	; select bank0
  2941  06C2  0825               	movf	?_cw_read+1,w
  2942  06C3  00AA               	movwf	cw_update_config_info@ret+1
  2943  06C4  0824               	movf	?_cw_read,w
  2944  06C5  00A9               	movwf	cw_update_config_info@ret
  2945                           
  2946                           ;CW201x.c: 95: if(ret)
  2947  06C6  0829               	movf	cw_update_config_info@ret,w
  2948  06C7  042A               	iorwf	cw_update_config_info@ret+1,w
  2949  06C8  1903               	btfsc	3,2
  2950  06C9  2ECC               	goto	l190
  2951                           
  2952                           ;CW201x.c: 96: {
  2953                           ;CW201x.c: 97: return 1;
  2954  06CA  3001               	movlw	1
  2955  06CB  0008               	return
  2956  06CC                     l190:	
  2957                           
  2958                           ;CW201x.c: 98: }
  2959                           ;CW201x.c: 99: reg_val |= (0x1<<1);
  2960  06CC  14AC               	bsf	cw_update_config_info@reg_val,1
  2961                           
  2962                           ;CW201x.c: 101: reg_val |= (0x0<<3);
  2963  06CD  3007               	movlw	7
  2964  06CE  00A7               	movwf	??_cw_update_config_info
  2965  06CF  0827               	movf	??_cw_update_config_info,w
  2966  06D0  05AC               	andwf	cw_update_config_info@reg_val,f
  2967                           
  2968                           ;CW201x.c: 102: ret = cw_write(0x8, &reg_val);
  2969  06D1  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  2970  06D2  00A7               	movwf	??_cw_update_config_info
  2971  06D3  0827               	movf	??_cw_update_config_info,w
  2972  06D4  00A4               	movwf	cw_write@w_pdata
  2973  06D5  3008               	movlw	8
  2974  06D6  2562               	fcall	_cw_write
  2975  06D7  0140               	movlb	0	; select bank0
  2976  06D8  0825               	movf	?_cw_write+1,w
  2977  06D9  00AA               	movwf	cw_update_config_info@ret+1
  2978  06DA  0824               	movf	?_cw_write,w
  2979  06DB  00A9               	movwf	cw_update_config_info@ret
  2980                           
  2981                           ;CW201x.c: 103: if(ret)
  2982  06DC  0829               	movf	cw_update_config_info@ret,w
  2983  06DD  042A               	iorwf	cw_update_config_info@ret+1,w
  2984  06DE  1903               	btfsc	3,2
  2985  06DF  2EE2               	goto	l1982
  2986                           
  2987                           ;CW201x.c: 104: {
  2988                           ;CW201x.c: 105: return 1;
  2989  06E0  3001               	movlw	1
  2990  06E1  0008               	return
  2991  06E2                     l1982:	
  2992                           
  2993                           ;CW201x.c: 106: }
  2994                           ;CW201x.c: 108: reset_val = (0x0<<6);
  2995  06E2  01A8               	clrf	cw_update_config_info@reset_val
  2996                           
  2997                           ;CW201x.c: 109: reg_val = (0xf<<0);
  2998  06E3  300F               	movlw	15
  2999  06E4  00A7               	movwf	??_cw_update_config_info
  3000  06E5  0827               	movf	??_cw_update_config_info,w
  3001  06E6  00AC               	movwf	cw_update_config_info@reg_val
  3002                           
  3003                           ;CW201x.c: 110: ret = cw_write(0xA, &reg_val);
  3004  06E7  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  3005  06E8  00A7               	movwf	??_cw_update_config_info
  3006  06E9  0827               	movf	??_cw_update_config_info,w
  3007  06EA  00A4               	movwf	cw_write@w_pdata
  3008  06EB  300A               	movlw	10
  3009  06EC  2562               	fcall	_cw_write
  3010  06ED  0140               	movlb	0	; select bank0
  3011  06EE  0825               	movf	?_cw_write+1,w
  3012  06EF  00AA               	movwf	cw_update_config_info@ret+1
  3013  06F0  0824               	movf	?_cw_write,w
  3014  06F1  00A9               	movwf	cw_update_config_info@ret
  3015                           
  3016                           ;CW201x.c: 111: if(ret)
  3017  06F2  0829               	movf	cw_update_config_info@ret,w
  3018  06F3  042A               	iorwf	cw_update_config_info@ret+1,w
  3019  06F4  1903               	btfsc	3,2
  3020  06F5  2EF8               	goto	l1994
  3021                           
  3022                           ;CW201x.c: 112: {
  3023                           ;CW201x.c: 113: return 1;
  3024  06F6  3001               	movlw	1
  3025  06F7  0008               	return
  3026  06F8                     l1994:	
  3027                           
  3028                           ;CW201x.c: 114: }
  3029                           ;CW201x.c: 115: CW_Delay10us(10);
  3030  06F8  300A               	movlw	10
  3031  06F9  2449               	fcall	_CW_Delay10us
  3032                           
  3033                           ;CW201x.c: 116: ret = cw_write(0xA, &reset_val);
  3034  06FA  3028               	movlw	(low (cw_update_config_info@reset_val| 0))& (0+255)
  3035  06FB  0140               	movlb	0	; select bank0
  3036  06FC  00A7               	movwf	??_cw_update_config_info
  3037  06FD  0827               	movf	??_cw_update_config_info,w
  3038  06FE  00A4               	movwf	cw_write@w_pdata
  3039  06FF  300A               	movlw	10
  3040  0700  2562               	fcall	_cw_write
  3041  0701  0140               	movlb	0	; select bank0
  3042  0702  0825               	movf	?_cw_write+1,w
  3043  0703  00AA               	movwf	cw_update_config_info@ret+1
  3044  0704  0824               	movf	?_cw_write,w
  3045  0705  00A9               	movwf	cw_update_config_info@ret
  3046                           
  3047                           ;CW201x.c: 117: if(ret)
  3048  0706  0829               	movf	cw_update_config_info@ret,w
  3049  0707  042A               	iorwf	cw_update_config_info@ret+1,w
  3050  0708  1903               	btfsc	3,2
  3051  0709  2F0C               	goto	l2004
  3052                           
  3053                           ;CW201x.c: 118: {
  3054                           ;CW201x.c: 119: return 1;
  3055  070A  3001               	movlw	1
  3056  070B  0008               	return
  3057  070C                     l2004:	
  3058                           
  3059                           ;CW201x.c: 120: }
  3060                           ;CW201x.c: 121: return 0;
  3061  070C  3000               	movlw	0
  3062  070D  0008               	return
  3063  070E                     __end_of_cw_update_config_info:	
  3064                           
  3065                           	psect	text5
  3066  0562                     __ptext5:	
  3067 ;; *************** function _cw_write *****************
  3068 ;; Defined at:
  3069 ;;		line 224 in file "iic.c"
  3070 ;; Parameters:    Size  Location     Type
  3071 ;;  point_reg       1    wreg     unsigned char 
  3072 ;;  w_pdata         1    4[BANK0 ] PTR unsigned char 
  3073 ;;		 -> cw_por@reset_val(1), cw_init@reg_val(1), cw_update_config_info@reset_val(1), cw_update_config_info@reg_val(1), 
  3074 ;; Auto vars:     Size  Location     Type
  3075 ;;  point_reg       1   13[COMMON] unsigned char 
  3076 ;; Return value:  Size  Location     Type
  3077 ;;                  2    4[BANK0 ] int 
  3078 ;; Registers used:
  3079 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3080 ;; Tracked objects:
  3081 ;;		On entry : 0/0
  3082 ;;		On exit  : 0/0
  3083 ;;		Unchanged: 0/0
  3084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3085 ;;      Params:         0       3       0       0
  3086 ;;      Locals:         1       0       0       0
  3087 ;;      Temps:          0       0       0       0
  3088 ;;      Totals:         1       3       0       0
  3089 ;;Total ram usage:        4 bytes
  3090 ;; Hardware stack levels used:    1
  3091 ;; Hardware stack levels required when called:    3
  3092 ;; This function calls:
  3093 ;;		_start
  3094 ;;		_stop
  3095 ;;		_wait_r_ack
  3096 ;;		_write_byte
  3097 ;; This function is called by:
  3098 ;;		_cw_update_config_info
  3099 ;;		_cw_init
  3100 ;;		_cw_por
  3101 ;; This function uses a non-reentrant model
  3102 ;;
  3103                           
  3104                           
  3105                           ;psect for function _cw_write
  3106  0562                     _cw_write:	
  3107                           
  3108                           ;incstack = 0
  3109                           ; Regs used in _cw_write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3110                           ;cw_write@point_reg stored from wreg
  3111  0562  00FD               	movwf	cw_write@point_reg
  3112                           
  3113                           ;iic.c: 226: start();
  3114  0563  23B4               	fcall	_start
  3115                           
  3116                           ;iic.c: 227: write_byte(0xc4);
  3117  0564  30C4               	movlw	196
  3118  0565  248B               	fcall	_write_byte
  3119                           
  3120                           ;iic.c: 228: if(wait_r_ack())
  3121  0566  2530               	fcall	_wait_r_ack
  3122  0567  087B               	movf	?_wait_r_ack,w
  3123  0568  047C               	iorwf	?_wait_r_ack+1,w
  3124  0569  1903               	btfsc	3,2
  3125  056A  2D71               	goto	l1860
  3126                           
  3127                           ;iic.c: 229: {
  3128                           ;iic.c: 230: return 1;
  3129  056B  3001               	movlw	1
  3130  056C  0140               	movlb	0	; select bank0
  3131  056D  00A4               	movwf	?_cw_write
  3132  056E  3000               	movlw	0
  3133  056F  00A5               	movwf	?_cw_write+1
  3134  0570  0008               	return
  3135  0571                     l1860:	
  3136                           
  3137                           ;iic.c: 231: }
  3138                           ;iic.c: 232: write_byte(point_reg);
  3139  0571  087D               	movf	cw_write@point_reg,w
  3140  0572  248B               	fcall	_write_byte
  3141                           
  3142                           ;iic.c: 233: if(wait_r_ack())
  3143  0573  2530               	fcall	_wait_r_ack
  3144  0574  087B               	movf	?_wait_r_ack,w
  3145  0575  047C               	iorwf	?_wait_r_ack+1,w
  3146  0576  1903               	btfsc	3,2
  3147  0577  2D7E               	goto	l1866
  3148                           
  3149                           ;iic.c: 234: {
  3150                           ;iic.c: 235: return 1;
  3151  0578  3001               	movlw	1
  3152  0579  0140               	movlb	0	; select bank0
  3153  057A  00A4               	movwf	?_cw_write
  3154  057B  3000               	movlw	0
  3155  057C  00A5               	movwf	?_cw_write+1
  3156  057D  0008               	return
  3157  057E                     l1866:	
  3158                           
  3159                           ;iic.c: 236: }
  3160                           ;iic.c: 237: write_byte(*w_pdata);
  3161  057E  0140               	movlb	0	; select bank0
  3162  057F  0824               	movf	cw_write@w_pdata,w
  3163  0580  0086               	movwf	6
  3164  0581  0187               	clrf	7
  3165  0582  0801               	movf	1,w
  3166  0583  248B               	fcall	_write_byte
  3167                           
  3168                           ;iic.c: 238: if(wait_r_ack())
  3169  0584  2530               	fcall	_wait_r_ack
  3170  0585  087B               	movf	?_wait_r_ack,w
  3171  0586  047C               	iorwf	?_wait_r_ack+1,w
  3172  0587  1903               	btfsc	3,2
  3173  0588  2D8F               	goto	l1874
  3174                           
  3175                           ;iic.c: 239: {
  3176                           ;iic.c: 240: return 1;
  3177  0589  3001               	movlw	1
  3178  058A  0140               	movlb	0	; select bank0
  3179  058B  00A4               	movwf	?_cw_write
  3180  058C  3000               	movlw	0
  3181  058D  00A5               	movwf	?_cw_write+1
  3182  058E  0008               	return
  3183  058F                     l1874:	
  3184                           
  3185                           ;iic.c: 241: }
  3186                           ;iic.c: 242: stop();
  3187  058F  23CF               	fcall	_stop
  3188                           
  3189                           ;iic.c: 243: return 0;
  3190  0590  0140               	movlb	0	; select bank0
  3191  0591  01A4               	clrf	?_cw_write
  3192  0592  01A5               	clrf	?_cw_write+1
  3193  0593  0008               	return
  3194  0594                     __end_of_cw_write:	
  3195                           
  3196                           	psect	text6
  3197  0594                     __ptext6:	
  3198 ;; *************** function _cw_read *****************
  3199 ;; Defined at:
  3200 ;;		line 166 in file "iic.c"
  3201 ;; Parameters:    Size  Location     Type
  3202 ;;  point_reg       1    wreg     unsigned char 
  3203 ;;  r_pdata         1    4[BANK0 ] PTR unsigned char 
  3204 ;;		 -> cw_get_capacity@reg_val(1), cw_init@reg_val(1), cw_update_config_info@reg_val(1), 
  3205 ;; Auto vars:     Size  Location     Type
  3206 ;;  point_reg       1    6[BANK0 ] unsigned char 
  3207 ;; Return value:  Size  Location     Type
  3208 ;;                  2    4[BANK0 ] int 
  3209 ;; Registers used:
  3210 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3211 ;; Tracked objects:
  3212 ;;		On entry : 0/0
  3213 ;;		On exit  : 0/0
  3214 ;;		Unchanged: 0/0
  3215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3216 ;;      Params:         0       2       0       0
  3217 ;;      Locals:         0       1       0       0
  3218 ;;      Temps:          1       0       0       0
  3219 ;;      Totals:         1       3       0       0
  3220 ;;Total ram usage:        4 bytes
  3221 ;; Hardware stack levels used:    1
  3222 ;; Hardware stack levels required when called:    3
  3223 ;; This function calls:
  3224 ;;		_read_byte
  3225 ;;		_s_ack
  3226 ;;		_start
  3227 ;;		_stop
  3228 ;;		_wait_r_ack
  3229 ;;		_write_byte
  3230 ;; This function is called by:
  3231 ;;		_cw_update_config_info
  3232 ;;		_cw_init
  3233 ;;		_cw_get_capacity
  3234 ;; This function uses a non-reentrant model
  3235 ;;
  3236                           
  3237                           
  3238                           ;psect for function _cw_read
  3239  0594                     _cw_read:	
  3240                           
  3241                           ;incstack = 0
  3242                           ; Regs used in _cw_read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3243                           ;cw_read@point_reg stored from wreg
  3244  0594  0140               	movlb	0	; select bank0
  3245  0595  00A6               	movwf	cw_read@point_reg
  3246                           
  3247                           ;iic.c: 168: start();
  3248  0596  23B4               	fcall	_start
  3249                           
  3250                           ;iic.c: 169: write_byte(0xc4);
  3251  0597  30C4               	movlw	196
  3252  0598  248B               	fcall	_write_byte
  3253                           
  3254                           ;iic.c: 170: if(wait_r_ack())
  3255  0599  2530               	fcall	_wait_r_ack
  3256  059A  087B               	movf	?_wait_r_ack,w
  3257  059B  047C               	iorwf	?_wait_r_ack+1,w
  3258  059C  1903               	btfsc	3,2
  3259  059D  2DA4               	goto	l1832
  3260                           
  3261                           ;iic.c: 171: {
  3262                           ;iic.c: 172: return 1;
  3263  059E  3001               	movlw	1
  3264  059F  0140               	movlb	0	; select bank0
  3265  05A0  00A4               	movwf	?_cw_read
  3266  05A1  3000               	movlw	0
  3267  05A2  00A5               	movwf	?_cw_read+1
  3268  05A3  0008               	return
  3269  05A4                     l1832:	
  3270                           
  3271                           ;iic.c: 173: }
  3272                           ;iic.c: 174: write_byte(point_reg);
  3273  05A4  0140               	movlb	0	; select bank0
  3274  05A5  0826               	movf	cw_read@point_reg,w
  3275  05A6  248B               	fcall	_write_byte
  3276                           
  3277                           ;iic.c: 175: if(wait_r_ack())
  3278  05A7  2530               	fcall	_wait_r_ack
  3279  05A8  087B               	movf	?_wait_r_ack,w
  3280  05A9  047C               	iorwf	?_wait_r_ack+1,w
  3281  05AA  1903               	btfsc	3,2
  3282  05AB  2DB2               	goto	l1838
  3283                           
  3284                           ;iic.c: 176: {
  3285                           ;iic.c: 177: return 1;
  3286  05AC  3001               	movlw	1
  3287  05AD  0140               	movlb	0	; select bank0
  3288  05AE  00A4               	movwf	?_cw_read
  3289  05AF  3000               	movlw	0
  3290  05B0  00A5               	movwf	?_cw_read+1
  3291  05B1  0008               	return
  3292  05B2                     l1838:	
  3293                           
  3294                           ;iic.c: 178: }
  3295                           ;iic.c: 179: start();
  3296  05B2  23B4               	fcall	_start
  3297                           
  3298                           ;iic.c: 180: write_byte(0xc5);
  3299  05B3  30C5               	movlw	197
  3300  05B4  248B               	fcall	_write_byte
  3301                           
  3302                           ;iic.c: 181: if(wait_r_ack())
  3303  05B5  2530               	fcall	_wait_r_ack
  3304  05B6  087B               	movf	?_wait_r_ack,w
  3305  05B7  047C               	iorwf	?_wait_r_ack+1,w
  3306  05B8  1903               	btfsc	3,2
  3307  05B9  2DC0               	goto	l1844
  3308                           
  3309                           ;iic.c: 182: {
  3310                           ;iic.c: 183: return 1;
  3311  05BA  3001               	movlw	1
  3312  05BB  0140               	movlb	0	; select bank0
  3313  05BC  00A4               	movwf	?_cw_read
  3314  05BD  3000               	movlw	0
  3315  05BE  00A5               	movwf	?_cw_read+1
  3316  05BF  0008               	return
  3317  05C0                     l1844:	
  3318                           
  3319                           ;iic.c: 184: }
  3320                           ;iic.c: 185: *r_pdata = read_byte();
  3321  05C0  24B0               	fcall	_read_byte
  3322  05C1  00FD               	movwf	??_cw_read
  3323  05C2  0140               	movlb	0	; select bank0
  3324  05C3  0824               	movf	cw_read@r_pdata,w
  3325  05C4  0086               	movwf	6
  3326  05C5  0187               	clrf	7
  3327  05C6  087D               	movf	??_cw_read,w
  3328  05C7  0081               	movwf	1
  3329                           
  3330                           ;iic.c: 186: s_ack();
  3331  05C8  23C1               	fcall	_s_ack
  3332                           
  3333                           ;iic.c: 187: stop();
  3334  05C9  23CF               	fcall	_stop
  3335                           
  3336                           ;iic.c: 188: return 0;
  3337  05CA  0140               	movlb	0	; select bank0
  3338  05CB  01A4               	clrf	?_cw_read
  3339  05CC  01A5               	clrf	?_cw_read+1
  3340  05CD  0008               	return
  3341  05CE                     __end_of_cw_read:	
  3342                           
  3343                           	psect	text7
  3344  048B                     __ptext7:	
  3345 ;; *************** function _write_byte *****************
  3346 ;; Defined at:
  3347 ;;		line 128 in file "iic.c"
  3348 ;; Parameters:    Size  Location     Type
  3349 ;;  w_data          1    wreg     unsigned char 
  3350 ;; Auto vars:     Size  Location     Type
  3351 ;;  w_data          1    6[COMMON] unsigned char 
  3352 ;;  i               1    7[COMMON] unsigned char 
  3353 ;; Return value:  Size  Location     Type
  3354 ;;                  1    wreg      void 
  3355 ;; Registers used:
  3356 ;;		wreg, status,2, status,0, pclath, cstack
  3357 ;; Tracked objects:
  3358 ;;		On entry : 0/0
  3359 ;;		On exit  : 0/0
  3360 ;;		Unchanged: 0/0
  3361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3362 ;;      Params:         0       0       0       0
  3363 ;;      Locals:         2       0       0       0
  3364 ;;      Temps:          1       0       0       0
  3365 ;;      Totals:         3       0       0       0
  3366 ;;Total ram usage:        3 bytes
  3367 ;; Hardware stack levels used:    1
  3368 ;; Hardware stack levels required when called:    1
  3369 ;; This function calls:
  3370 ;;		_I2C_Delay10us
  3371 ;; This function is called by:
  3372 ;;		_cw_read
  3373 ;;		_cw_write
  3374 ;;		_cw_read_word
  3375 ;; This function uses a non-reentrant model
  3376 ;;
  3377                           
  3378                           
  3379                           ;psect for function _write_byte
  3380  048B                     _write_byte:	
  3381                           
  3382                           ;incstack = 0
  3383                           ; Regs used in _write_byte: [wreg+status,2+status,0+pclath+cstack]
  3384                           ;write_byte@w_data stored from wreg
  3385  048B  00F6               	movwf	write_byte@w_data
  3386                           
  3387                           ;iic.c: 130: unsigned char i;
  3388                           ;iic.c: 131: do { TRISCbits.TRISC1 = 0; } while(0);
  3389  048C  0140               	movlb	0	; select bank0
  3390  048D  1094               	bcf	20,1	;volatile
  3391                           
  3392                           ;iic.c: 132: for(i = 0; i < 8; i++)
  3393  048E  01F7               	clrf	write_byte@i
  3394  048F                     L4:	
  3395  048F  3008               	movlw	8
  3396  0490  0277               	subwf	write_byte@i,w
  3397  0491  1803               	btfsc	3,0
  3398  0492  0008               	return
  3399                           
  3400                           ;iic.c: 133: {
  3401                           ;iic.c: 134: LATCbits.LATC1 = w_data & 0x80;
  3402  0493  0876               	movf	write_byte@w_data,w
  3403  0494  3980               	andlw	128
  3404  0495  00F5               	movwf	??_write_byte
  3405  0496  0DF5               	rlf	??_write_byte,f
  3406  0497  0140               	movlb	0	; select bank0
  3407  0498  081A               	movf	26,w	;volatile
  3408  0499  0675               	xorwf	??_write_byte,w
  3409  049A  39FD               	andlw	-3
  3410  049B  0675               	xorwf	??_write_byte,w
  3411  049C  009A               	movwf	26	;volatile
  3412                           
  3413                           ;iic.c: 135: I2C_Delay10us(5);
  3414  049D  3005               	movlw	5
  3415  049E  246A               	fcall	_I2C_Delay10us
  3416                           
  3417                           ;iic.c: 136: do { LATCbits.LATC0 = 1; } while(0);
  3418  049F  0140               	movlb	0	; select bank0
  3419  04A0  141A               	bsf	26,0	;volatile
  3420                           
  3421                           ;iic.c: 137: I2C_Delay10us(5);
  3422  04A1  3005               	movlw	5
  3423  04A2  246A               	fcall	_I2C_Delay10us
  3424                           
  3425                           ;iic.c: 138: do { LATCbits.LATC0 = 0; } while(0);
  3426  04A3  0140               	movlb	0	; select bank0
  3427  04A4  101A               	bcf	26,0	;volatile
  3428                           
  3429                           ;iic.c: 139: I2C_Delay10us(5);
  3430  04A5  3005               	movlw	5
  3431  04A6  246A               	fcall	_I2C_Delay10us
  3432                           
  3433                           ;iic.c: 140: w_data = w_data << 1;
  3434  04A7  3576               	lslf	write_byte@w_data,w
  3435  04A8  00F5               	movwf	??_write_byte
  3436  04A9  0875               	movf	??_write_byte,w
  3437  04AA  00F6               	movwf	write_byte@w_data
  3438  04AB  3001               	movlw	1
  3439  04AC  00F5               	movwf	??_write_byte
  3440  04AD  0875               	movf	??_write_byte,w
  3441  04AE  07F7               	addwf	write_byte@i,f
  3442  04AF  2C8F               	goto	L4
  3443  04B0                     __end_of_write_byte:	
  3444                           
  3445                           	psect	text8
  3446  0530                     __ptext8:	
  3447 ;; *************** function _wait_r_ack *****************
  3448 ;; Defined at:
  3449 ;;		line 82 in file "iic.c"
  3450 ;; Parameters:    Size  Location     Type
  3451 ;;		None
  3452 ;; Auto vars:     Size  Location     Type
  3453 ;;  i               2    2[BANK0 ] unsigned int 
  3454 ;;  ack             2    0[BANK0 ] int 
  3455 ;; Return value:  Size  Location     Type
  3456 ;;                  2   11[COMMON] int 
  3457 ;; Registers used:
  3458 ;;		wreg, status,2, status,0, pclath, cstack
  3459 ;; Tracked objects:
  3460 ;;		On entry : 0/0
  3461 ;;		On exit  : 0/0
  3462 ;;		Unchanged: 0/0
  3463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3464 ;;      Params:         2       0       0       0
  3465 ;;      Locals:         0       4       0       0
  3466 ;;      Temps:          0       0       0       0
  3467 ;;      Totals:         2       4       0       0
  3468 ;;Total ram usage:        6 bytes
  3469 ;; Hardware stack levels used:    1
  3470 ;; Hardware stack levels required when called:    2
  3471 ;; This function calls:
  3472 ;;		_r_ack
  3473 ;;		_stop
  3474 ;; This function is called by:
  3475 ;;		_cw_read
  3476 ;;		_cw_write
  3477 ;;		_cw_read_word
  3478 ;; This function uses a non-reentrant model
  3479 ;;
  3480                           
  3481                           
  3482                           ;psect for function _wait_r_ack
  3483  0530                     _wait_r_ack:	
  3484                           
  3485                           ;iic.c: 84: int ack;
  3486                           ;iic.c: 85: unsigned int i;
  3487                           ;iic.c: 86: ack = 1;
  3488                           
  3489                           ;incstack = 0
  3490                           ; Regs used in _wait_r_ack: [wreg+status,2+status,0+pclath+cstack]
  3491  0530  3001               	movlw	1
  3492  0531  0140               	movlb	0	; select bank0
  3493  0532  00A0               	movwf	wait_r_ack@ack
  3494  0533  3000               	movlw	0
  3495  0534  00A1               	movwf	wait_r_ack@ack+1
  3496                           
  3497                           ;iic.c: 87: for(i = 0; i < 100; i++)
  3498  0535  01A2               	clrf	wait_r_ack@i
  3499  0536  01A3               	clrf	wait_r_ack@i+1
  3500  0537  3000               	movlw	0
  3501  0538  0223               	subwf	wait_r_ack@i+1,w
  3502  0539  3064               	movlw	100
  3503  053A  1903               	skipnz
  3504  053B  0222               	subwf	wait_r_ack@i,w
  3505  053C  1803               	btfsc	3,0
  3506  053D  2D5F               	goto	l1744
  3507  053E                     l1728:	
  3508                           
  3509                           ;iic.c: 88: {
  3510                           ;iic.c: 89: ack = r_ack();
  3511  053E  23F4               	fcall	_r_ack
  3512  053F  0876               	movf	?_r_ack+1,w
  3513  0540  0140               	movlb	0	; select bank0
  3514  0541  00A1               	movwf	wait_r_ack@ack+1
  3515  0542  0875               	movf	?_r_ack,w
  3516  0543  00A0               	movwf	wait_r_ack@ack
  3517                           
  3518                           ;iic.c: 90: if(!ack)
  3519  0544  0820               	movf	wait_r_ack@ack,w
  3520  0545  0421               	iorwf	wait_r_ack@ack+1,w
  3521  0546  1903               	btfsc	3,2
  3522  0547  2D5F               	goto	l1744
  3523                           
  3524                           ;iic.c: 93: }
  3525                           ;iic.c: 94: if(i == 99)
  3526                           
  3527                           ;iic.c: 91: {
  3528                           ;iic.c: 92: break;
  3529  0548  3063               	movlw	99
  3530  0549  0622               	xorwf	wait_r_ack@i,w
  3531  054A  0423               	iorwf	wait_r_ack@i+1,w
  3532  054B  1D03               	btfss	3,2
  3533  054C  2D53               	goto	l1742
  3534                           
  3535                           ;iic.c: 95: {
  3536                           ;iic.c: 96: stop();
  3537  054D  23CF               	fcall	_stop
  3538                           
  3539                           ;iic.c: 97: return 1;
  3540  054E  3001               	movlw	1
  3541  054F  00FB               	movwf	?_wait_r_ack
  3542  0550  3000               	movlw	0
  3543  0551  00FC               	movwf	?_wait_r_ack+1
  3544  0552  0008               	return
  3545  0553                     l1742:	
  3546  0553  3001               	movlw	1
  3547  0554  0140               	movlb	0	; select bank0
  3548  0555  07A2               	addwf	wait_r_ack@i,f
  3549  0556  3000               	movlw	0
  3550  0557  3DA3               	addwfc	wait_r_ack@i+1,f
  3551  0558  3000               	movlw	0
  3552  0559  0223               	subwf	wait_r_ack@i+1,w
  3553  055A  3064               	movlw	100
  3554  055B  1903               	skipnz
  3555  055C  0222               	subwf	wait_r_ack@i,w
  3556  055D  1C03               	skipc
  3557  055E  2D3E               	goto	l1728
  3558  055F                     l1744:	
  3559                           
  3560                           ;iic.c: 98: }
  3561                           ;iic.c: 99: }
  3562                           ;iic.c: 100: return 0;
  3563  055F  01FB               	clrf	?_wait_r_ack
  3564  0560  01FC               	clrf	?_wait_r_ack+1
  3565  0561  0008               	return
  3566  0562                     __end_of_wait_r_ack:	
  3567                           
  3568                           	psect	text9
  3569  03CF                     __ptext9:	
  3570 ;; *************** function _stop *****************
  3571 ;; Defined at:
  3572 ;;		line 56 in file "iic.c"
  3573 ;; Parameters:    Size  Location     Type
  3574 ;;		None
  3575 ;; Auto vars:     Size  Location     Type
  3576 ;;		None
  3577 ;; Return value:  Size  Location     Type
  3578 ;;                  1    wreg      void 
  3579 ;; Registers used:
  3580 ;;		wreg, status,2, status,0, pclath, cstack
  3581 ;; Tracked objects:
  3582 ;;		On entry : 0/0
  3583 ;;		On exit  : 0/0
  3584 ;;		Unchanged: 0/0
  3585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3586 ;;      Params:         0       0       0       0
  3587 ;;      Locals:         0       0       0       0
  3588 ;;      Temps:          0       0       0       0
  3589 ;;      Totals:         0       0       0       0
  3590 ;;Total ram usage:        0 bytes
  3591 ;; Hardware stack levels used:    1
  3592 ;; Hardware stack levels required when called:    1
  3593 ;; This function calls:
  3594 ;;		_I2C_Delay10us
  3595 ;; This function is called by:
  3596 ;;		_wait_r_ack
  3597 ;;		_cw_read
  3598 ;;		_cw_write
  3599 ;;		_cw_read_word
  3600 ;; This function uses a non-reentrant model
  3601 ;;
  3602                           
  3603                           
  3604                           ;psect for function _stop
  3605  03CF                     _stop:	
  3606                           
  3607                           ;incstack = 0
  3608                           ; Regs used in _stop: [wreg+status,2+status,0+pclath+cstack]
  3609                           ;iic.c: 58: do { TRISCbits.TRISC1 = 0; } while(0);
  3610  03CF  0140               	movlb	0	; select bank0
  3611  03D0  1094               	bcf	20,1	;volatile
  3612                           
  3613                           ;iic.c: 59: do { LATCbits.LATC1 = 0; } while(0);
  3614  03D1  109A               	bcf	26,1	;volatile
  3615                           
  3616                           ;iic.c: 60: I2C_Delay10us(5);
  3617  03D2  3005               	movlw	5
  3618  03D3  246A               	fcall	_I2C_Delay10us
  3619                           
  3620                           ;iic.c: 61: do { LATCbits.LATC0 = 1; } while(0);
  3621  03D4  0140               	movlb	0	; select bank0
  3622  03D5  141A               	bsf	26,0	;volatile
  3623                           
  3624                           ;iic.c: 62: I2C_Delay10us(5);
  3625  03D6  3005               	movlw	5
  3626  03D7  246A               	fcall	_I2C_Delay10us
  3627                           
  3628                           ;iic.c: 63: do { LATCbits.LATC1 = 1; } while(0);
  3629  03D8  0140               	movlb	0	; select bank0
  3630  03D9  149A               	bsf	26,1	;volatile
  3631                           
  3632                           ;iic.c: 64: I2C_Delay10us(5);
  3633  03DA  3005               	movlw	5
  3634  03DB  246A               	fcall	_I2C_Delay10us
  3635                           
  3636                           ;iic.c: 66: I2C_Delay10us(5);
  3637  03DC  3005               	movlw	5
  3638  03DD  246A               	fcall	_I2C_Delay10us
  3639  03DE  0008               	return
  3640  03DF                     __end_of_stop:	
  3641                           
  3642                           	psect	text10
  3643  03F4                     __ptext10:	
  3644 ;; *************** function _r_ack *****************
  3645 ;; Defined at:
  3646 ;;		line 69 in file "iic.c"
  3647 ;; Parameters:    Size  Location     Type
  3648 ;;		None
  3649 ;; Auto vars:     Size  Location     Type
  3650 ;;  ack             2    9[COMMON] int 
  3651 ;; Return value:  Size  Location     Type
  3652 ;;                  2    5[COMMON] int 
  3653 ;; Registers used:
  3654 ;;		wreg, status,2, status,0, pclath, cstack
  3655 ;; Tracked objects:
  3656 ;;		On entry : 0/0
  3657 ;;		On exit  : 0/0
  3658 ;;		Unchanged: 0/0
  3659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3660 ;;      Params:         2       0       0       0
  3661 ;;      Locals:         2       0       0       0
  3662 ;;      Temps:          2       0       0       0
  3663 ;;      Totals:         6       0       0       0
  3664 ;;Total ram usage:        6 bytes
  3665 ;; Hardware stack levels used:    1
  3666 ;; Hardware stack levels required when called:    1
  3667 ;; This function calls:
  3668 ;;		_I2C_Delay10us
  3669 ;; This function is called by:
  3670 ;;		_wait_r_ack
  3671 ;; This function uses a non-reentrant model
  3672 ;;
  3673                           
  3674                           
  3675                           ;psect for function _r_ack
  3676  03F4                     _r_ack:	
  3677                           
  3678                           ;incstack = 0
  3679                           ; Regs used in _r_ack: [wreg+status,2+status,0+pclath+cstack]
  3680                           ;iic.c: 71: int ack;
  3681                           ;iic.c: 72: do { TRISCbits.TRISC1 = 1; } while(0);
  3682  03F4  0140               	movlb	0	; select bank0
  3683  03F5  1494               	bsf	20,1	;volatile
  3684                           
  3685                           ;iic.c: 73: do { LATCbits.LATC0 = 1; } while(0);
  3686  03F6  141A               	bsf	26,0	;volatile
  3687                           
  3688                           ;iic.c: 74: I2C_Delay10us(5);
  3689  03F7  3005               	movlw	5
  3690  03F8  246A               	fcall	_I2C_Delay10us
  3691                           
  3692                           ;iic.c: 75: ack = PORTCbits.RC1;
  3693  03F9  0140               	movlb	0	; select bank0
  3694  03FA  0C0E               	rrf	14,w	;volatile
  3695  03FB  3901               	andlw	1
  3696  03FC  00F7               	movwf	??_r_ack
  3697  03FD  01F8               	clrf	??_r_ack+1
  3698  03FE  0877               	movf	??_r_ack,w
  3699  03FF  00F9               	movwf	r_ack@ack
  3700  0400  0878               	movf	??_r_ack+1,w
  3701  0401  00FA               	movwf	r_ack@ack+1
  3702                           
  3703                           ;iic.c: 76: I2C_Delay10us(5);
  3704  0402  3005               	movlw	5
  3705  0403  246A               	fcall	_I2C_Delay10us
  3706                           
  3707                           ;iic.c: 77: do { LATCbits.LATC0 = 0; } while(0);
  3708  0404  0140               	movlb	0	; select bank0
  3709  0405  101A               	bcf	26,0	;volatile
  3710                           
  3711                           ;iic.c: 78: I2C_Delay10us(5);
  3712  0406  3005               	movlw	5
  3713  0407  246A               	fcall	_I2C_Delay10us
  3714                           
  3715                           ;iic.c: 79: return ack;
  3716  0408  087A               	movf	r_ack@ack+1,w
  3717  0409  00F6               	movwf	?_r_ack+1
  3718  040A  0879               	movf	r_ack@ack,w
  3719  040B  00F5               	movwf	?_r_ack
  3720  040C  0008               	return
  3721  040D                     __end_of_r_ack:	
  3722                           
  3723                           	psect	text11
  3724  03B4                     __ptext11:	
  3725 ;; *************** function _start *****************
  3726 ;; Defined at:
  3727 ;;		line 45 in file "iic.c"
  3728 ;; Parameters:    Size  Location     Type
  3729 ;;		None
  3730 ;; Auto vars:     Size  Location     Type
  3731 ;;		None
  3732 ;; Return value:  Size  Location     Type
  3733 ;;                  1    wreg      void 
  3734 ;; Registers used:
  3735 ;;		wreg, status,2, status,0, pclath, cstack
  3736 ;; Tracked objects:
  3737 ;;		On entry : 0/0
  3738 ;;		On exit  : 0/0
  3739 ;;		Unchanged: 0/0
  3740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3741 ;;      Params:         0       0       0       0
  3742 ;;      Locals:         0       0       0       0
  3743 ;;      Temps:          0       0       0       0
  3744 ;;      Totals:         0       0       0       0
  3745 ;;Total ram usage:        0 bytes
  3746 ;; Hardware stack levels used:    1
  3747 ;; Hardware stack levels required when called:    1
  3748 ;; This function calls:
  3749 ;;		_I2C_Delay10us
  3750 ;; This function is called by:
  3751 ;;		_cw_read
  3752 ;;		_cw_write
  3753 ;;		_cw_read_word
  3754 ;; This function uses a non-reentrant model
  3755 ;;
  3756                           
  3757                           
  3758                           ;psect for function _start
  3759  03B4                     _start:	
  3760                           
  3761                           ;incstack = 0
  3762                           ; Regs used in _start: [wreg+status,2+status,0+pclath+cstack]
  3763                           ;iic.c: 47: do { TRISCbits.TRISC1 = 0; } while(0);
  3764  03B4  0140               	movlb	0	; select bank0
  3765  03B5  1094               	bcf	20,1	;volatile
  3766                           
  3767                           ;iic.c: 48: do { LATCbits.LATC1 = 1; } while(0);
  3768  03B6  149A               	bsf	26,1	;volatile
  3769                           
  3770                           ;iic.c: 49: do { LATCbits.LATC0 = 1; } while(0);
  3771  03B7  141A               	bsf	26,0	;volatile
  3772                           
  3773                           ;iic.c: 50: I2C_Delay10us(5);
  3774  03B8  3005               	movlw	5
  3775  03B9  246A               	fcall	_I2C_Delay10us
  3776                           
  3777                           ;iic.c: 51: do { LATCbits.LATC1 = 0; } while(0);
  3778  03BA  0140               	movlb	0	; select bank0
  3779  03BB  109A               	bcf	26,1	;volatile
  3780                           
  3781                           ;iic.c: 52: I2C_Delay10us(5);
  3782  03BC  3005               	movlw	5
  3783  03BD  246A               	fcall	_I2C_Delay10us
  3784                           
  3785                           ;iic.c: 53: do { LATCbits.LATC0 = 0; } while(0);
  3786  03BE  0140               	movlb	0	; select bank0
  3787  03BF  101A               	bcf	26,0	;volatile
  3788  03C0  0008               	return
  3789  03C1                     __end_of_start:	
  3790                           
  3791                           	psect	text12
  3792  03C1                     __ptext12:	
  3793 ;; *************** function _s_ack *****************
  3794 ;; Defined at:
  3795 ;;		line 103 in file "iic.c"
  3796 ;; Parameters:    Size  Location     Type
  3797 ;;		None
  3798 ;; Auto vars:     Size  Location     Type
  3799 ;;		None
  3800 ;; Return value:  Size  Location     Type
  3801 ;;                  1    wreg      void 
  3802 ;; Registers used:
  3803 ;;		wreg, status,2, status,0, pclath, cstack
  3804 ;; Tracked objects:
  3805 ;;		On entry : 0/0
  3806 ;;		On exit  : 0/0
  3807 ;;		Unchanged: 0/0
  3808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3809 ;;      Params:         0       0       0       0
  3810 ;;      Locals:         0       0       0       0
  3811 ;;      Temps:          0       0       0       0
  3812 ;;      Totals:         0       0       0       0
  3813 ;;Total ram usage:        0 bytes
  3814 ;; Hardware stack levels used:    1
  3815 ;; Hardware stack levels required when called:    1
  3816 ;; This function calls:
  3817 ;;		_I2C_Delay10us
  3818 ;; This function is called by:
  3819 ;;		_cw_read
  3820 ;;		_cw_read_word
  3821 ;; This function uses a non-reentrant model
  3822 ;;
  3823                           
  3824                           
  3825                           ;psect for function _s_ack
  3826  03C1                     _s_ack:	
  3827                           
  3828                           ;incstack = 0
  3829                           ; Regs used in _s_ack: [wreg+status,2+status,0+pclath+cstack]
  3830                           ;iic.c: 105: do { TRISCbits.TRISC1 = 0; } while(0);
  3831  03C1  0140               	movlb	0	; select bank0
  3832  03C2  1094               	bcf	20,1	;volatile
  3833                           
  3834                           ;iic.c: 106: do { LATCbits.LATC1 = 1; } while(0);
  3835  03C3  149A               	bsf	26,1	;volatile
  3836                           
  3837                           ;iic.c: 107: I2C_Delay10us(5);
  3838  03C4  3005               	movlw	5
  3839  03C5  246A               	fcall	_I2C_Delay10us
  3840                           
  3841                           ;iic.c: 108: do { LATCbits.LATC0 = 1; } while(0);
  3842  03C6  0140               	movlb	0	; select bank0
  3843  03C7  141A               	bsf	26,0	;volatile
  3844                           
  3845                           ;iic.c: 109: I2C_Delay10us(5);
  3846  03C8  3005               	movlw	5
  3847  03C9  246A               	fcall	_I2C_Delay10us
  3848                           
  3849                           ;iic.c: 110: do { LATCbits.LATC0 = 0; } while(0);
  3850  03CA  0140               	movlb	0	; select bank0
  3851  03CB  101A               	bcf	26,0	;volatile
  3852                           
  3853                           ;iic.c: 111: I2C_Delay10us(5);
  3854  03CC  3005               	movlw	5
  3855  03CD  246A               	fcall	_I2C_Delay10us
  3856  03CE  0008               	return
  3857  03CF                     __end_of_s_ack:	
  3858                           
  3859                           	psect	text13
  3860  04B0                     __ptext13:	
  3861 ;; *************** function _read_byte *****************
  3862 ;; Defined at:
  3863 ;;		line 144 in file "iic.c"
  3864 ;; Parameters:    Size  Location     Type
  3865 ;;		None
  3866 ;; Auto vars:     Size  Location     Type
  3867 ;;  r_data          1    7[COMMON] unsigned char 
  3868 ;;  i               1    6[COMMON] unsigned char 
  3869 ;; Return value:  Size  Location     Type
  3870 ;;                  1    wreg      unsigned char 
  3871 ;; Registers used:
  3872 ;;		wreg, status,2, status,0, pclath, cstack
  3873 ;; Tracked objects:
  3874 ;;		On entry : 0/0
  3875 ;;		On exit  : 0/0
  3876 ;;		Unchanged: 0/0
  3877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3878 ;;      Params:         0       0       0       0
  3879 ;;      Locals:         2       0       0       0
  3880 ;;      Temps:          1       0       0       0
  3881 ;;      Totals:         3       0       0       0
  3882 ;;Total ram usage:        3 bytes
  3883 ;; Hardware stack levels used:    1
  3884 ;; Hardware stack levels required when called:    1
  3885 ;; This function calls:
  3886 ;;		_I2C_Delay10us
  3887 ;; This function is called by:
  3888 ;;		_cw_read
  3889 ;;		_cw_read_word
  3890 ;; This function uses a non-reentrant model
  3891 ;;
  3892                           
  3893                           
  3894                           ;psect for function _read_byte
  3895  04B0                     _read_byte:	
  3896                           
  3897                           ;incstack = 0
  3898                           ; Regs used in _read_byte: [wreg+status,2+status,0+pclath+cstack]
  3899                           ;iic.c: 146: unsigned char i;
  3900                           ;iic.c: 147: unsigned char r_data;
  3901                           ;iic.c: 148: do { TRISCbits.TRISC1 = 1; } while(0);
  3902  04B0  0140               	movlb	0	; select bank0
  3903  04B1  1494               	bsf	20,1	;volatile
  3904                           
  3905                           ;iic.c: 149: for(i = 0; i < 8; i++)
  3906  04B2  01F6               	clrf	read_byte@i
  3907  04B3  3008               	movlw	8
  3908  04B4  0276               	subwf	read_byte@i,w
  3909  04B5  1803               	btfsc	3,0
  3910  04B6  2CD4               	goto	l1802
  3911  04B7                     l401:	
  3912                           ;iic.c: 150: {
  3913                           ;iic.c: 151: do { LATCbits.LATC0 = 1; } while(0);
  3914                           
  3915  04B7  0140               	movlb	0	; select bank0
  3916  04B8  141A               	bsf	26,0	;volatile
  3917                           
  3918                           ;iic.c: 152: I2C_Delay10us(5);
  3919  04B9  3005               	movlw	5
  3920  04BA  246A               	fcall	_I2C_Delay10us
  3921                           
  3922                           ;iic.c: 153: r_data = r_data << 1;
  3923  04BB  3577               	lslf	read_byte@r_data,w
  3924  04BC  00F5               	movwf	??_read_byte
  3925  04BD  0875               	movf	??_read_byte,w
  3926  04BE  00F7               	movwf	read_byte@r_data
  3927                           
  3928                           ;iic.c: 154: I2C_Delay10us(5);
  3929  04BF  3005               	movlw	5
  3930  04C0  246A               	fcall	_I2C_Delay10us
  3931                           
  3932                           ;iic.c: 155: if(PORTCbits.RC1)
  3933  04C1  0140               	movlb	0	; select bank0
  3934  04C2  1C8E               	btfss	14,1	;volatile
  3935  04C3  2CC9               	goto	l1794
  3936                           
  3937                           ;iic.c: 156: {
  3938                           ;iic.c: 157: r_data = r_data | 0x1;
  3939  04C4  0877               	movf	read_byte@r_data,w
  3940  04C5  3801               	iorlw	1
  3941  04C6  00F5               	movwf	??_read_byte
  3942  04C7  0875               	movf	??_read_byte,w
  3943  04C8  00F7               	movwf	read_byte@r_data
  3944  04C9                     l1794:	
  3945                           ;iic.c: 158: }
  3946                           ;iic.c: 159: do { LATCbits.LATC0 = 0; } while(0);
  3947                           
  3948  04C9  101A               	bcf	26,0	;volatile
  3949                           
  3950                           ;iic.c: 160: I2C_Delay10us(5);
  3951  04CA  3005               	movlw	5
  3952  04CB  246A               	fcall	_I2C_Delay10us
  3953  04CC  3001               	movlw	1
  3954  04CD  00F5               	movwf	??_read_byte
  3955  04CE  0875               	movf	??_read_byte,w
  3956  04CF  07F6               	addwf	read_byte@i,f
  3957  04D0  3008               	movlw	8
  3958  04D1  0276               	subwf	read_byte@i,w
  3959  04D2  1C03               	skipc
  3960  04D3  2CB7               	goto	l401
  3961  04D4                     l1802:	
  3962                           
  3963                           ;iic.c: 161: }
  3964                           ;iic.c: 162: return r_data;
  3965  04D4  0877               	movf	read_byte@r_data,w
  3966  04D5  0008               	return
  3967  04D6                     __end_of_read_byte:	
  3968                           
  3969                           	psect	text14
  3970  046A                     __ptext14:	
  3971 ;; *************** function _I2C_Delay10us *****************
  3972 ;; Defined at:
  3973 ;;		line 24 in file "iic.c"
  3974 ;; Parameters:    Size  Location     Type
  3975 ;;  us              1    wreg     unsigned char 
  3976 ;; Auto vars:     Size  Location     Type
  3977 ;;  us              1    1[COMMON] unsigned char 
  3978 ;;  b               1    4[COMMON] unsigned char 
  3979 ;;  a               1    3[COMMON] unsigned char 
  3980 ;;  i               1    2[COMMON] unsigned char 
  3981 ;; Return value:  Size  Location     Type
  3982 ;;                  1    wreg      void 
  3983 ;; Registers used:
  3984 ;;		wreg, status,2, status,0
  3985 ;; Tracked objects:
  3986 ;;		On entry : 0/0
  3987 ;;		On exit  : 0/0
  3988 ;;		Unchanged: 0/0
  3989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3990 ;;      Params:         0       0       0       0
  3991 ;;      Locals:         4       0       0       0
  3992 ;;      Temps:          1       0       0       0
  3993 ;;      Totals:         5       0       0       0
  3994 ;;Total ram usage:        5 bytes
  3995 ;; Hardware stack levels used:    1
  3996 ;; This function calls:
  3997 ;;		Nothing
  3998 ;; This function is called by:
  3999 ;;		_start
  4000 ;;		_stop
  4001 ;;		_r_ack
  4002 ;;		_s_ack
  4003 ;;		_write_byte
  4004 ;;		_read_byte
  4005 ;;		_sn_ack
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           
  4010                           ;psect for function _I2C_Delay10us
  4011  046A                     _I2C_Delay10us:	
  4012                           
  4013                           ;incstack = 0
  4014                           ; Regs used in _I2C_Delay10us: [wreg+status,2+status,0]
  4015                           ;I2C_Delay10us@us stored from wreg
  4016  046A  00F1               	movwf	I2C_Delay10us@us
  4017                           
  4018                           ;iic.c: 26: unsigned char a, b;
  4019                           ;iic.c: 27: unsigned char i;
  4020                           ;iic.c: 28: for(i = 0; i < us; i++)
  4021  046B  01F2               	clrf	I2C_Delay10us@i
  4022  046C                     l1692:	
  4023  046C  0871               	movf	I2C_Delay10us@us,w
  4024  046D  0272               	subwf	I2C_Delay10us@i,w
  4025  046E  1803               	btfsc	3,0
  4026  046F  0008               	return
  4027                           
  4028                           ;iic.c: 29: {
  4029                           ;iic.c: 30: for(b = 1;b > 0;b --)
  4030  0470  01F4               	clrf	I2C_Delay10us@b
  4031  0471  0AF4               	incf	I2C_Delay10us@b,f
  4032  0472  0874               	movf	I2C_Delay10us@b,w
  4033  0473  1903               	btfsc	3,2
  4034  0474  2C86               	goto	l1690
  4035  0475                     l1680:	
  4036                           
  4037                           ;iic.c: 31: {
  4038                           ;iic.c: 32: for(a = 7;a > 0;a --) ;
  4039  0475  3007               	movlw	7
  4040  0476  00F0               	movwf	??_I2C_Delay10us
  4041  0477  0870               	movf	??_I2C_Delay10us,w
  4042  0478  00F3               	movwf	I2C_Delay10us@a
  4043  0479  0873               	movf	I2C_Delay10us@a,w
  4044  047A  1903               	btfsc	3,2
  4045  047B  2C81               	goto	l1688
  4046  047C                     l1686:	
  4047  047C  3001               	movlw	1
  4048  047D  02F3               	subwf	I2C_Delay10us@a,f
  4049  047E  0873               	movf	I2C_Delay10us@a,w
  4050  047F  1D03               	btfss	3,2
  4051  0480  2C7C               	goto	l1686
  4052  0481                     l1688:	
  4053  0481  3001               	movlw	1
  4054  0482  02F4               	subwf	I2C_Delay10us@b,f
  4055  0483  0874               	movf	I2C_Delay10us@b,w
  4056  0484  1D03               	btfss	3,2
  4057  0485  2C75               	goto	l1680
  4058  0486                     l1690:	
  4059  0486  3001               	movlw	1
  4060  0487  00F0               	movwf	??_I2C_Delay10us
  4061  0488  0870               	movf	??_I2C_Delay10us,w
  4062  0489  07F2               	addwf	I2C_Delay10us@i,f
  4063  048A  2C6C               	goto	l1692
  4064  048B                     __end_of_I2C_Delay10us:	
  4065                           
  4066                           	psect	text15
  4067  0449                     __ptext15:	
  4068 ;; *************** function _CW_Delay10us *****************
  4069 ;; Defined at:
  4070 ;;		line 38 in file "CW201x.c"
  4071 ;; Parameters:    Size  Location     Type
  4072 ;;  us              1    wreg     unsigned char 
  4073 ;; Auto vars:     Size  Location     Type
  4074 ;;  us              1    1[COMMON] unsigned char 
  4075 ;;  b               1    4[COMMON] unsigned char 
  4076 ;;  a               1    3[COMMON] unsigned char 
  4077 ;;  i               1    2[COMMON] unsigned char 
  4078 ;; Return value:  Size  Location     Type
  4079 ;;                  1    wreg      void 
  4080 ;; Registers used:
  4081 ;;		wreg, status,2, status,0
  4082 ;; Tracked objects:
  4083 ;;		On entry : 0/0
  4084 ;;		On exit  : 0/0
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4087 ;;      Params:         0       0       0       0
  4088 ;;      Locals:         4       0       0       0
  4089 ;;      Temps:          1       0       0       0
  4090 ;;      Totals:         5       0       0       0
  4091 ;;Total ram usage:        5 bytes
  4092 ;; Hardware stack levels used:    1
  4093 ;; This function calls:
  4094 ;;		Nothing
  4095 ;; This function is called by:
  4096 ;;		_cw_update_config_info
  4097 ;;		_cw_por
  4098 ;; This function uses a non-reentrant model
  4099 ;;
  4100                           
  4101                           
  4102                           ;psect for function _CW_Delay10us
  4103  0449                     _CW_Delay10us:	
  4104                           
  4105                           ;incstack = 0
  4106                           ; Regs used in _CW_Delay10us: [wreg+status,2+status,0]
  4107                           ;CW_Delay10us@us stored from wreg
  4108  0449  00F1               	movwf	CW_Delay10us@us
  4109                           
  4110                           ;CW201x.c: 40: unsigned char a, b;
  4111                           ;CW201x.c: 41: unsigned char i;
  4112                           ;CW201x.c: 42: for(i = 0; i < us; i++)
  4113  044A  01F2               	clrf	CW_Delay10us@i
  4114  044B                     l1824:	
  4115  044B  0871               	movf	CW_Delay10us@us,w
  4116  044C  0272               	subwf	CW_Delay10us@i,w
  4117  044D  1803               	btfsc	3,0
  4118  044E  0008               	return
  4119                           
  4120                           ;CW201x.c: 43: {
  4121                           ;CW201x.c: 44: for(b = 1;b > 0;b --)
  4122  044F  01F4               	clrf	CW_Delay10us@b
  4123  0450  0AF4               	incf	CW_Delay10us@b,f
  4124  0451  0874               	movf	CW_Delay10us@b,w
  4125  0452  1903               	btfsc	3,2
  4126  0453  2C65               	goto	l1822
  4127  0454                     l1812:	
  4128                           
  4129                           ;CW201x.c: 45: {
  4130                           ;CW201x.c: 46: for(a = 7;a > 0;a --);
  4131  0454  3007               	movlw	7
  4132  0455  00F0               	movwf	??_CW_Delay10us
  4133  0456  0870               	movf	??_CW_Delay10us,w
  4134  0457  00F3               	movwf	CW_Delay10us@a
  4135  0458  0873               	movf	CW_Delay10us@a,w
  4136  0459  1903               	btfsc	3,2
  4137  045A  2C60               	goto	l1820
  4138  045B                     l1818:	
  4139  045B  3001               	movlw	1
  4140  045C  02F3               	subwf	CW_Delay10us@a,f
  4141  045D  0873               	movf	CW_Delay10us@a,w
  4142  045E  1D03               	btfss	3,2
  4143  045F  2C5B               	goto	l1818
  4144  0460                     l1820:	
  4145  0460  3001               	movlw	1
  4146  0461  02F4               	subwf	CW_Delay10us@b,f
  4147  0462  0874               	movf	CW_Delay10us@b,w
  4148  0463  1D03               	btfss	3,2
  4149  0464  2C54               	goto	l1812
  4150  0465                     l1822:	
  4151  0465  3001               	movlw	1
  4152  0466  00F0               	movwf	??_CW_Delay10us
  4153  0467  0870               	movf	??_CW_Delay10us,w
  4154  0468  07F2               	addwf	CW_Delay10us@i,f
  4155  0469  2C4B               	goto	l1824
  4156  046A                     __end_of_CW_Delay10us:	
  4157                           
  4158                           	psect	text16
  4159  0428                     __ptext16:	
  4160 ;; *************** function _CW_Delay10ms *****************
  4161 ;; Defined at:
  4162 ;;		line 26 in file "CW201x.c"
  4163 ;; Parameters:    Size  Location     Type
  4164 ;;  c               2    0[COMMON] unsigned int 
  4165 ;; Auto vars:     Size  Location     Type
  4166 ;;  b               1    4[COMMON] unsigned char 
  4167 ;;  a               1    3[COMMON] unsigned char 
  4168 ;;  d               1    0        unsigned char 
  4169 ;; Return value:  Size  Location     Type
  4170 ;;                  1    wreg      void 
  4171 ;; Registers used:
  4172 ;;		wreg, status,2, status,0
  4173 ;; Tracked objects:
  4174 ;;		On entry : 0/0
  4175 ;;		On exit  : 0/0
  4176 ;;		Unchanged: 0/0
  4177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4178 ;;      Params:         2       0       0       0
  4179 ;;      Locals:         2       0       0       0
  4180 ;;      Temps:          1       0       0       0
  4181 ;;      Totals:         5       0       0       0
  4182 ;;Total ram usage:        5 bytes
  4183 ;; Hardware stack levels used:    1
  4184 ;; This function calls:
  4185 ;;		Nothing
  4186 ;; This function is called by:
  4187 ;;		_cw_init
  4188 ;; This function uses a non-reentrant model
  4189 ;;
  4190                           
  4191                           
  4192                           ;psect for function _CW_Delay10ms
  4193  0428                     _CW_Delay10ms:	
  4194                           
  4195                           ;CW201x.c: 28: unsigned char a, b, d;
  4196                           ;CW201x.c: 29: for (;c>0;c--)
  4197                           
  4198                           ;incstack = 0
  4199                           ; Regs used in _CW_Delay10ms: [wreg+status,2+status,0]
  4200  0428  0870               	movf	CW_Delay10ms@c,w
  4201  0429  0471               	iorwf	CW_Delay10ms@c+1,w
  4202  042A  1903               	btfsc	3,2
  4203  042B  0008               	return
  4204                           
  4205                           ;CW201x.c: 30: {
  4206                           ;CW201x.c: 31: for(b=95;b>0;b--)
  4207  042C  305F               	movlw	95
  4208  042D  00F2               	movwf	??_CW_Delay10ms
  4209  042E  0872               	movf	??_CW_Delay10ms,w
  4210  042F  00F4               	movwf	CW_Delay10ms@b
  4211  0430  0874               	movf	CW_Delay10ms@b,w
  4212  0431  1903               	btfsc	3,2
  4213  0432  2C44               	goto	l1900
  4214  0433                     l1890:	
  4215                           
  4216                           ;CW201x.c: 32: {
  4217                           ;CW201x.c: 33: for(a=209;a>0;a--) ;
  4218  0433  30D1               	movlw	209
  4219  0434  00F2               	movwf	??_CW_Delay10ms
  4220  0435  0872               	movf	??_CW_Delay10ms,w
  4221  0436  00F3               	movwf	CW_Delay10ms@a
  4222  0437  0873               	movf	CW_Delay10ms@a,w
  4223  0438  1903               	btfsc	3,2
  4224  0439  2C3F               	goto	l1898
  4225  043A                     l1896:	
  4226  043A  3001               	movlw	1
  4227  043B  02F3               	subwf	CW_Delay10ms@a,f
  4228  043C  0873               	movf	CW_Delay10ms@a,w
  4229  043D  1D03               	btfss	3,2
  4230  043E  2C3A               	goto	l1896
  4231  043F                     l1898:	
  4232  043F  3001               	movlw	1
  4233  0440  02F4               	subwf	CW_Delay10ms@b,f
  4234  0441  0874               	movf	CW_Delay10ms@b,w
  4235  0442  1D03               	btfss	3,2
  4236  0443  2C33               	goto	l1890
  4237  0444                     l1900:	
  4238  0444  3001               	movlw	1
  4239  0445  02F0               	subwf	CW_Delay10ms@c,f
  4240  0446  3000               	movlw	0
  4241  0447  3BF1               	subwfb	CW_Delay10ms@c+1,f
  4242  0448  2C28               	goto	_CW_Delay10ms
  4243  0449                     __end_of_CW_Delay10ms:	
  4244                           
  4245                           	psect	text17
  4246  0384                     __ptext17:	
  4247 ;; *************** function _SYSTEM_Initialize *****************
  4248 ;; Defined at:
  4249 ;;		line 86 in file "mcc_generated_files/mcc.c"
  4250 ;; Parameters:    Size  Location     Type
  4251 ;;		None
  4252 ;; Auto vars:     Size  Location     Type
  4253 ;;		None
  4254 ;; Return value:  Size  Location     Type
  4255 ;;                  1    wreg      void 
  4256 ;; Registers used:
  4257 ;;		wreg, status,2, status,0, pclath, cstack
  4258 ;; Tracked objects:
  4259 ;;		On entry : 0/0
  4260 ;;		On exit  : 0/0
  4261 ;;		Unchanged: 0/0
  4262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4263 ;;      Params:         0       0       0       0
  4264 ;;      Locals:         0       0       0       0
  4265 ;;      Temps:          0       0       0       0
  4266 ;;      Totals:         0       0       0       0
  4267 ;;Total ram usage:        0 bytes
  4268 ;; Hardware stack levels used:    1
  4269 ;; Hardware stack levels required when called:    1
  4270 ;; This function calls:
  4271 ;;		_EUSART1_Initialize
  4272 ;;		_OSCILLATOR_Initialize
  4273 ;;		_PIN_MANAGER_Initialize
  4274 ;; This function is called by:
  4275 ;;		_main
  4276 ;; This function uses a non-reentrant model
  4277 ;;
  4278                           
  4279                           
  4280                           ;psect for function _SYSTEM_Initialize
  4281  0384                     _SYSTEM_Initialize:	
  4282                           
  4283                           ;mcc.c: 89: PIN_MANAGER_Initialize();
  4284                           
  4285                           ;incstack = 0
  4286                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4287  0384  2502               	fcall	_PIN_MANAGER_Initialize
  4288                           
  4289                           ;mcc.c: 90: OSCILLATOR_Initialize();
  4290  0385  23A8               	fcall	_OSCILLATOR_Initialize
  4291                           
  4292                           ;mcc.c: 91: EUSART1_Initialize();
  4293  0386  239C               	fcall	_EUSART1_Initialize
  4294  0387  0008               	return
  4295  0388                     __end_of_SYSTEM_Initialize:	
  4296                           
  4297                           	psect	text18
  4298  0502                     __ptext18:	
  4299 ;; *************** function _PIN_MANAGER_Initialize *****************
  4300 ;; Defined at:
  4301 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;		None
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;  state           1    0[COMMON] unsigned char 
  4306 ;; Return value:  Size  Location     Type
  4307 ;;                  1    wreg      void 
  4308 ;; Registers used:
  4309 ;;		wreg, status,2, status,0
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4315 ;;      Params:         0       0       0       0
  4316 ;;      Locals:         1       0       0       0
  4317 ;;      Temps:          0       0       0       0
  4318 ;;      Totals:         1       0       0       0
  4319 ;;Total ram usage:        1 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; This function calls:
  4322 ;;		Nothing
  4323 ;; This function is called by:
  4324 ;;		_SYSTEM_Initialize
  4325 ;; This function uses a non-reentrant model
  4326 ;;
  4327                           
  4328                           
  4329                           ;psect for function _PIN_MANAGER_Initialize
  4330  0502                     _PIN_MANAGER_Initialize:	
  4331                           
  4332                           ;pin_manager.c: 56: LATA = 0x00;
  4333                           
  4334                           ;incstack = 0
  4335                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  4336  0502  0140               	movlb	0	; select bank0
  4337  0503  0198               	clrf	24	;volatile
  4338                           
  4339                           ;pin_manager.c: 57: LATC = 0x00;
  4340  0504  019A               	clrf	26	;volatile
  4341                           
  4342                           ;pin_manager.c: 62: TRISA = 0x03;
  4343  0505  3003               	movlw	3
  4344  0506  0092               	movwf	18	;volatile
  4345                           
  4346                           ;pin_manager.c: 63: TRISC = 0x22;
  4347  0507  3022               	movlw	34
  4348  0508  0094               	movwf	20	;volatile
  4349                           
  4350                           ;pin_manager.c: 68: ANSELC = 0x1D;
  4351  0509  301D               	movlw	29
  4352  050A  017E               	movlb	62	; select bank62
  4353  050B  00CE               	movwf	78	;volatile
  4354                           
  4355                           ;pin_manager.c: 69: ANSELA = 0x37;
  4356  050C  3037               	movlw	55
  4357  050D  00B8               	movwf	56	;volatile
  4358                           
  4359                           ;pin_manager.c: 74: WPUA = 0x00;
  4360  050E  01B9               	clrf	57	;volatile
  4361                           
  4362                           ;pin_manager.c: 75: WPUC = 0x00;
  4363  050F  01CF               	clrf	79	;volatile
  4364                           
  4365                           ;pin_manager.c: 80: ODCONA = 0x00;
  4366  0510  01BA               	clrf	58	;volatile
  4367                           
  4368                           ;pin_manager.c: 81: ODCONC = 0x00;
  4369  0511  01D0               	clrf	80	;volatile
  4370                           
  4371                           ;pin_manager.c: 88: bool state = GIE;
  4372  0512  3000               	movlw	0
  4373  0513  1B8B               	btfsc	11,7	;volatile
  4374  0514  3001               	movlw	1
  4375  0515  00F0               	movwf	PIN_MANAGER_Initialize@state
  4376                           
  4377                           ;pin_manager.c: 89: GIE = 0;
  4378  0516  138B               	bcf	11,7	;volatile
  4379                           
  4380                           ;pin_manager.c: 90: PPSLOCK = 0x55;
  4381  0517  3055               	movlw	85
  4382  0518  017D               	movlb	61	; select bank61
  4383  0519  008F               	movwf	15	;volatile
  4384                           
  4385                           ;pin_manager.c: 91: PPSLOCK = 0xAA;
  4386  051A  30AA               	movlw	170
  4387  051B  008F               	movwf	15	;volatile
  4388                           
  4389                           ;pin_manager.c: 92: PPSLOCKbits.PPSLOCKED = 0x00;
  4390  051C  100F               	bcf	15,0	;volatile
  4391                           
  4392                           ;pin_manager.c: 94: RX1DTPPSbits.RX1DTPPS = 0x15;
  4393  051D  084B               	movf	75,w	;volatile
  4394  051E  39C0               	andlw	-64
  4395  051F  3815               	iorlw	21
  4396  0520  00CB               	movwf	75	;volatile
  4397                           
  4398                           ;pin_manager.c: 95: RC4PPS = 0x0F;
  4399  0521  300F               	movlw	15
  4400  0522  017E               	movlb	62	; select bank62
  4401  0523  00A4               	movwf	36	;volatile
  4402                           
  4403                           ;pin_manager.c: 97: PPSLOCK = 0x55;
  4404  0524  3055               	movlw	85
  4405  0525  017D               	movlb	61	; select bank61
  4406  0526  008F               	movwf	15	;volatile
  4407                           
  4408                           ;pin_manager.c: 98: PPSLOCK = 0xAA;
  4409  0527  30AA               	movlw	170
  4410  0528  008F               	movwf	15	;volatile
  4411                           
  4412                           ;pin_manager.c: 99: PPSLOCKbits.PPSLOCKED = 0x01;
  4413  0529  140F               	bsf	15,0	;volatile
  4414                           
  4415                           ;pin_manager.c: 101: GIE = state;
  4416  052A  1C70               	btfss	PIN_MANAGER_Initialize@state,0
  4417  052B  2D2E               	goto	u1780
  4418  052C  178B               	bsf	11,7	;volatile
  4419  052D  0008               	return
  4420  052E                     u1780:	
  4421  052E  138B               	bcf	11,7	;volatile
  4422  052F  0008               	return
  4423  0530                     __end_of_PIN_MANAGER_Initialize:	
  4424                           
  4425                           	psect	text19
  4426  03A8                     __ptext19:	
  4427 ;; *************** function _OSCILLATOR_Initialize *****************
  4428 ;; Defined at:
  4429 ;;		line 94 in file "mcc_generated_files/mcc.c"
  4430 ;; Parameters:    Size  Location     Type
  4431 ;;		None
  4432 ;; Auto vars:     Size  Location     Type
  4433 ;;		None
  4434 ;; Return value:  Size  Location     Type
  4435 ;;                  1    wreg      void 
  4436 ;; Registers used:
  4437 ;;		wreg, status,2
  4438 ;; Tracked objects:
  4439 ;;		On entry : 0/0
  4440 ;;		On exit  : 0/0
  4441 ;;		Unchanged: 0/0
  4442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4443 ;;      Params:         0       0       0       0
  4444 ;;      Locals:         0       0       0       0
  4445 ;;      Temps:          0       0       0       0
  4446 ;;      Totals:         0       0       0       0
  4447 ;;Total ram usage:        0 bytes
  4448 ;; Hardware stack levels used:    1
  4449 ;; This function calls:
  4450 ;;		Nothing
  4451 ;; This function is called by:
  4452 ;;		_SYSTEM_Initialize
  4453 ;; This function uses a non-reentrant model
  4454 ;;
  4455                           
  4456                           
  4457                           ;psect for function _OSCILLATOR_Initialize
  4458  03A8                     _OSCILLATOR_Initialize:	
  4459                           
  4460                           ;mcc.c: 97: OSCCON1 = 0x10;
  4461                           
  4462                           ;incstack = 0
  4463                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4464  03A8  3010               	movlw	16
  4465  03A9  0151               	movlb	17	; select bank17
  4466  03AA  008D               	movwf	13	;volatile
  4467                           
  4468                           ;mcc.c: 99: OSCCON3 = 0x00;
  4469  03AB  018F               	clrf	15	;volatile
  4470                           
  4471                           ;mcc.c: 101: OSCEN = 0x00;
  4472  03AC  0191               	clrf	17	;volatile
  4473                           
  4474                           ;mcc.c: 103: OSCFRQ = 0x05;
  4475  03AD  3005               	movlw	5
  4476  03AE  0093               	movwf	19	;volatile
  4477                           
  4478                           ;mcc.c: 105: OSCSTAT = 0x00;
  4479  03AF  0190               	clrf	16	;volatile
  4480                           
  4481                           ;mcc.c: 107: OSCTUNE = 0x00;
  4482  03B0  0192               	clrf	18	;volatile
  4483  03B1                     l60:	
  4484                           ;mcc.c: 110: {
  4485                           
  4486                           ;mcc.c: 109: while(PLLR == 0)
  4487                           
  4488  03B1  1810               	btfsc	16,0	;volatile
  4489  03B2  0008               	return
  4490  03B3  2BB1               	goto	l60
  4491  03B4                     __end_of_OSCILLATOR_Initialize:	
  4492                           
  4493                           	psect	text20
  4494  039C                     __ptext20:	
  4495 ;; *************** function _EUSART1_Initialize *****************
  4496 ;; Defined at:
  4497 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  4498 ;; Parameters:    Size  Location     Type
  4499 ;;		None
  4500 ;; Auto vars:     Size  Location     Type
  4501 ;;		None
  4502 ;; Return value:  Size  Location     Type
  4503 ;;                  1    wreg      void 
  4504 ;; Registers used:
  4505 ;;		wreg
  4506 ;; Tracked objects:
  4507 ;;		On entry : 0/0
  4508 ;;		On exit  : 0/0
  4509 ;;		Unchanged: 0/0
  4510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4511 ;;      Params:         0       0       0       0
  4512 ;;      Locals:         0       0       0       0
  4513 ;;      Temps:          0       0       0       0
  4514 ;;      Totals:         0       0       0       0
  4515 ;;Total ram usage:        0 bytes
  4516 ;; Hardware stack levels used:    1
  4517 ;; This function calls:
  4518 ;;		Nothing
  4519 ;; This function is called by:
  4520 ;;		_SYSTEM_Initialize
  4521 ;; This function uses a non-reentrant model
  4522 ;;
  4523                           
  4524                           
  4525                           ;psect for function _EUSART1_Initialize
  4526  039C                     _EUSART1_Initialize:	
  4527                           
  4528                           ;eusart1.c: 60: BAUD1CON = 0x08;
  4529                           
  4530                           ;incstack = 0
  4531                           ; Regs used in _EUSART1_Initialize: [wreg]
  4532  039C  3008               	movlw	8
  4533  039D  0142               	movlb	2	; select bank2
  4534  039E  009F               	movwf	31	;volatile
  4535                           
  4536                           ;eusart1.c: 63: RC1STA = 0x90;
  4537  039F  3090               	movlw	144
  4538  03A0  009D               	movwf	29	;volatile
  4539                           
  4540                           ;eusart1.c: 66: TX1STA = 0x24;
  4541  03A1  3024               	movlw	36
  4542  03A2  009E               	movwf	30	;volatile
  4543                           
  4544                           ;eusart1.c: 69: SP1BRGL = 0x40;
  4545  03A3  3040               	movlw	64
  4546  03A4  009B               	movwf	27	;volatile
  4547                           
  4548                           ;eusart1.c: 72: SP1BRGH = 0x03;
  4549  03A5  3003               	movlw	3
  4550  03A6  009C               	movwf	28	;volatile
  4551  03A7  0008               	return
  4552  03A8                     __end_of_EUSART1_Initialize:	
  4553                           
  4554                           	psect	text21
  4555  0394                     __ptext21:	
  4556 ;; *************** function _EUSART1_Write *****************
  4557 ;; Defined at:
  4558 ;;		line 96 in file "mcc_generated_files/eusart1.c"
  4559 ;; Parameters:    Size  Location     Type
  4560 ;;  txData          1    wreg     unsigned char 
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;  txData          1    0[COMMON] unsigned char 
  4563 ;; Return value:  Size  Location     Type
  4564 ;;                  1    wreg      void 
  4565 ;; Registers used:
  4566 ;;		wreg
  4567 ;; Tracked objects:
  4568 ;;		On entry : 0/0
  4569 ;;		On exit  : 0/0
  4570 ;;		Unchanged: 0/0
  4571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4572 ;;      Params:         0       0       0       0
  4573 ;;      Locals:         1       0       0       0
  4574 ;;      Temps:          0       0       0       0
  4575 ;;      Totals:         1       0       0       0
  4576 ;;Total ram usage:        1 bytes
  4577 ;; Hardware stack levels used:    1
  4578 ;; This function calls:
  4579 ;;		Nothing
  4580 ;; This function is called by:
  4581 ;;		_main
  4582 ;; This function uses a non-reentrant model
  4583 ;;
  4584                           
  4585                           
  4586                           ;psect for function _EUSART1_Write
  4587  0394                     _EUSART1_Write:	
  4588                           
  4589                           ;incstack = 0
  4590                           ; Regs used in _EUSART1_Write: [wreg]
  4591                           ;EUSART1_Write@txData stored from wreg
  4592  0394  00F0               	movwf	EUSART1_Write@txData
  4593  0395                     l31:	
  4594                           ;eusart1.c: 99: {
  4595                           
  4596                           ;eusart1.c: 98: while(0 == PIR3bits.TX1IF)
  4597                           
  4598  0395  014E               	movlb	14	; select bank14
  4599  0396  1E0F               	btfss	15,4	;volatile
  4600  0397  2B95               	goto	l31
  4601                           
  4602                           ;eusart1.c: 100: }
  4603                           ;eusart1.c: 102: TX1REG = txData;
  4604  0398  0870               	movf	EUSART1_Write@txData,w
  4605  0399  0142               	movlb	2	; select bank2
  4606  039A  009A               	movwf	26	;volatile
  4607  039B  0008               	return
  4608  039C                     __end_of_EUSART1_Write:	
  4609  007E                     btemp	set	126	;btemp
  4610  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        128
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     24      42
    BANK1            80      0      64
    BANK2            80      0      64

Pointer List with Targets:

    cw_write@w_pdata	PTR unsigned char  size(1) Largest target is 1
		 -> cw_por@reset_val(COMMON[1]), cw_init@reg_val(BANK0[1]), cw_update_config_info@reset_val(BANK0[1]), cw_update_config_info@reg_val(BANK0[1]), 

    cw_read@r_pdata	PTR unsigned char  size(1) Largest target is 1
		 -> cw_get_capacity@reg_val(COMMON[1]), cw_init@reg_val(BANK0[1]), cw_update_config_info@reg_val(BANK0[1]), 


Critical Paths under _main in COMMON

    _cw_init->_cw_read
    _cw_init->_cw_write
    _cw_update_config_info->_cw_read
    _cw_update_config_info->_cw_write
    _cw_write->_wait_r_ack
    _cw_read->_wait_r_ack
    _write_byte->_I2C_Delay10us
    _wait_r_ack->_r_ack
    _stop->_I2C_Delay10us
    _r_ack->_I2C_Delay10us
    _start->_I2C_Delay10us
    _s_ack->_I2C_Delay10us
    _read_byte->_I2C_Delay10us
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize

Critical Paths under _main in BANK0

    _main->_cw_bat_init
    _cw_bat_init->_cw_init
    _cw_init->_cw_update_config_info
    _cw_update_config_info->_cw_read
    _cw_update_config_info->_cw_write
    _cw_write->_wait_r_ack
    _cw_read->_wait_r_ack

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    8560
                                             22 BANK0      2     2      0
                      _EUSART1_Write
                  _SYSTEM_Initialize
                        _cw_bat_init
                              _delay
 ---------------------------------------------------------------------------------
 (1) _delay                                                6     6      0     138
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _cw_bat_init                                          3     3      0    8330
                                             19 BANK0      3     3      0
                            _cw_init
 ---------------------------------------------------------------------------------
 (2) _cw_init                                              6     6      0    8261
                                             13 BANK0      6     6      0
                       _CW_Delay10ms
                            _cw_read
              _cw_update_config_info
                           _cw_write
 ---------------------------------------------------------------------------------
 (3) _cw_update_config_info                                6     6      0    4045
                                              7 BANK0      6     6      0
                       _CW_Delay10us
                            _cw_read
                           _cw_write
 ---------------------------------------------------------------------------------
 (3) _cw_write                                             4     1      3    1516
                                             13 COMMON     1     1      0
                                              4 BANK0      3     0      3
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (4) _cw_read                                              4     2      2    1842
                                             13 COMMON     1     1      0
                                              4 BANK0      3     1      2
                          _read_byte
                              _s_ack
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (4) _write_byte                                           3     3      0     229
                                              5 COMMON     3     3      0
                      _I2C_Delay10us
 ---------------------------------------------------------------------------------
 (4) _wait_r_ack                                           6     4      2     391
                                             11 COMMON     2     0      2
                                              0 BANK0      4     4      0
                              _r_ack
                               _stop
 ---------------------------------------------------------------------------------
 (5) _stop                                                 0     0      0     138
                      _I2C_Delay10us
 ---------------------------------------------------------------------------------
 (5) _r_ack                                                6     4      2     161
                                              5 COMMON     6     4      2
                      _I2C_Delay10us
 ---------------------------------------------------------------------------------
 (4) _start                                                0     0      0     138
                      _I2C_Delay10us
 ---------------------------------------------------------------------------------
 (5) _s_ack                                                0     0      0     138
                      _I2C_Delay10us
 ---------------------------------------------------------------------------------
 (5) _read_byte                                            3     3      0     252
                                              5 COMMON     3     3      0
                      _I2C_Delay10us
 ---------------------------------------------------------------------------------
 (5) _I2C_Delay10us                                        5     5      0     138
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (4) _CW_Delay10us                                         5     5      0     138
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (3) _CW_Delay10ms                                         6     4      2     201
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      23
                 _EUSART1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Write                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART1_Write
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _cw_bat_init
     _cw_init
       _CW_Delay10ms
       _cw_read
         _read_byte
           _I2C_Delay10us
         _s_ack
           _I2C_Delay10us
         _start
           _I2C_Delay10us
         _stop
           _I2C_Delay10us
         _wait_r_ack
           _r_ack
             _I2C_Delay10us
           _stop
             _I2C_Delay10us
         _write_byte
           _I2C_Delay10us
       _cw_update_config_info
         _CW_Delay10us
         _cw_read
           _read_byte
             _I2C_Delay10us
           _s_ack
             _I2C_Delay10us
           _start
             _I2C_Delay10us
           _stop
             _I2C_Delay10us
           _wait_r_ack
             _r_ack
               _I2C_Delay10us
             _stop
               _I2C_Delay10us
           _write_byte
             _I2C_Delay10us
         _cw_write
           _start
             _I2C_Delay10us
           _stop
             _I2C_Delay10us
           _wait_r_ack
             _r_ack
               _I2C_Delay10us
             _stop
               _I2C_Delay10us
           _write_byte
             _I2C_Delay10us
       _cw_write
         _start
           _I2C_Delay10us
         _stop
           _I2C_Delay10us
         _wait_r_ack
           _r_ack
             _I2C_Delay10us
           _stop
             _I2C_Delay10us
         _write_byte
           _I2C_Delay10us
   _delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     18      2A       5       52.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      40       7       80.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      40       9       80.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
ABS                  0      0      B8      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      B8      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Mon Aug 28 14:50:23 2017

                    __CFG_CP$OFF 0000                               l31 0395                               l60 03B1  
                    __CFG_LVP$ON 0000                              l201 075C                              l401 04B7  
                            l190 06CC                              _GIE 005F                     __CFG_BORV$LO 0000  
                            wreg 0009                    __CFG_BBEN$OFF 0000                     __CFG_ZCD$OFF 0000  
                           l2004 070C                    CW_Delay10ms@a 0073                    CW_Delay10ms@b 0074  
                  CW_Delay10ms@c 0070                             l2200 07E2                             l2104 0732  
                           l2132 076C                             l2116 074B                             l2400 04F8  
                           l2170 07AA                             l2146 0783                             l2154 0793  
                           l2138 0771                             l2402 04FD                             l2164 07A5  
                           l2182 07C1                             l2190 07CD                             l2414 041E  
                           l2096 0721                             l2408 040F                             l1802 04D4  
                           l1900 0444                             l1820 0460                             l1812 0454  
                           l1822 0465                             l1742 0553                             l1824 044B  
                           l1680 0475                             l1744 055F                             l1728 053E  
                           l1832 05A4                             l1920 066B                             l2392 04EC  
                           l1818 045B                             l1690 0486                             l1914 0662  
                           l1692 046C                             l1844 05C0                             l1860 0571  
                           l1940 0692                             l1686 047C                             l1838 05B2  
                           l1926 0670                             l2398 04F3                             l1688 0481  
                           l1960 06B3                             l1936 068A                             l1890 0433  
                           l1794 04C9                             l1874 058F                             l1866 057E  
                           l1954 06A9                             l1946 0697                             l1964 06BB  
                           l1982 06E2                             l1896 043A                             l1898 043F  
                           l1994 06F8                    CW_Delay10us@a 0073                    CW_Delay10us@b 0074  
                  CW_Delay10us@i 0072                             _LATA 0018                             _LATC 001A  
                           u2405 04E3                             u1780 052E                             _PLLR 4480  
                           _WPUA 1F39                             _WPUC 1F4F                    _EUSART1_Write 0394  
                  __CFG_FCMEN$ON 0000                             _main 03DF                             fsr0h 0005  
                           fsr1h 0007                             indf0 0000                             fsr0l 0004  
                           indf1 0001                             fsr1l 0006                             btemp 007E  
                           _stop 03CF           __size_of_I2C_Delay10us 0021                    __CFG_BOREN$ON 0000  
                           start 0001                    __CFG_CSWEN$ON 0000   __size_of_OSCILLATOR_Initialize 000C  
  __end_of_OSCILLATOR_Initialize 03B4            _cw_update_config_info 064E                            ?_main 0070  
                  __CFG_WDTE$OFF 0000                   CW_Delay10us@us 0071                            ?_stop 0070  
                          _OSCEN 0891                            _TRISA 0012                            _TRISC 0014  
                  __CFG_WRTB$OFF 0000                    __CFG_WRTC$OFF 0000                  __end_of_cw_init 07E4  
                __end_of_cw_read 05CE                            _delay 04D6                            _r_ack 03F4  
                          _s_ack 03C1                            _start 03B4                   ?_EUSART1_Write 0070  
                          status 0003                            wtemp0 007E                   __CFG_MCLRE$OFF 0000  
                __initialization 07E4       __end_of_EUSART1_Initialize 03A8                     __end_of_main 03F4  
                   __end_of_stop 03DF                   __CFG_SAFEN$OFF 0000                   cw_bat_init@ret 0035  
                         ??_main 0036                    _I2C_Delay10us 046A                           ??_stop 0075  
                 I2C_Delay10us@a 0073                   I2C_Delay10us@b 0074                   I2C_Delay10us@i 0072  
                         ?_delay 0070                           ?_r_ack 0075                           ?_s_ack 0070  
               cw_read@point_reg 0026                           _CHARGE 0046                           _ANSELA 1F38  
                         _ANSELC 1F4E                           ?_start 0070                           _RC1REG 0119  
                         _RC1STA 011D                           _RC4PPS 1F24                           _ODCONA 1F3A  
                         _ODCONC 1F50                   __CFG_WDTCCS$SC 0000                           _OSCFRQ 0893  
                         _TX1REG 011A                           _TX1STA 011E                  cw_write@w_pdata 0024  
                 __CFG_PWRTE$OFF 0000                    cw_get_vol@F83 003E             __size_of_cw_bat_init 001B  
                 __CFG_STVREN$ON 0000                 __end_of_cw_write 0594                           _cw_bat 0038  
         ?_cw_update_config_info 0070                           delay@a 0073                           delay@b 0074  
                         delay@c 0071                   ?_I2C_Delay10us 0070                        ??_cw_init 002D  
                      ??_cw_read 007D                    ?_CW_Delay10ms 0070                    ?_CW_Delay10us 0070  
                ??_EUSART1_Write 0070                _SYSTEM_Initialize 0384          __end_of__initialization 07FE  
             ?_SYSTEM_Initialize 0070             _no_charger_full_jump 0044                   __pcstackCOMMON 0070  
                   __pidataBANK1 060E                     __pidataBANK2 05CE              ??_SYSTEM_Initialize 0071  
                  __end_of_delay 0502                    __end_of_r_ack 040D                    __end_of_s_ack 03CF  
                  __end_of_start 03C1                   ??_CW_Delay10ms 0072                   ??_CW_Delay10us 0070  
                        ??_delay 0070                  cw_bat_init@loop 0034                          ??_r_ack 0077  
                        ??_s_ack 0075        __end_of_SYSTEM_Initialize 0388                          ??_start 0075  
                     __pbssBANK0 0038                  I2C_Delay10us@us 0071               __size_of_read_byte 0026  
                     __pmaintext 03DF                  __CFG_PPS1WAY$ON 0000                  ??_I2C_Delay10us 0070  
                        _SP1BRGH 011C                          _SP1BRGL 011B                          _OSCCON1 088D  
                        _OSCCON3 088F                          _OSCSTAT 0890                          _OSCTUNE 0892  
                        _PPSLOCK 1E8F                        ?_cw_write 0024                          __ptext1 04D6  
                        __ptext2 040D                          __ptext3 070E                          __ptext4 064E  
                        __ptext5 0562                          __ptext6 0594                          __ptext7 048B  
                        __ptext8 0530                          __ptext9 03CF                          _cw_init 070E  
                        _cw_read 0594                  __CFG_WRTAPP$OFF 0000            _OSCILLATOR_Initialize 03A8  
              __end_of_read_byte 04D6               _EUSART1_Initialize 039C         ??_PIN_MANAGER_Initialize 0070  
                __CFG_WRTSAF$OFF 0000       __size_of_SYSTEM_Initialize 0004                          clrloop0 0389  
                        main@ret 0037             end_of_initialization 07FE                 write_byte@w_data 0076  
            ?_EUSART1_Initialize 0070                       ??_cw_write 007D                          init_ram 038E  
                        initloop 038F             __end_of_CW_Delay10ms 0449             __end_of_CW_Delay10us 046A  
                     _reset_loop 0048     cw_update_config_info@reg_val 002C          ??_cw_update_config_info 0027  
                    wait_r_ack@i 0022                       _wait_r_ack 0530             ??_EUSART1_Initialize 0070  
          __CFG_WDTCPS$WDTCPS_31 0000                        _PORTCbits 000E         cw_update_config_info@ret 0029  
                      _TRISCbits 0014              EUSART1_Write@txData 0070                 __CFG_FEXTOSC$OFF 0000  
                 cw_init@reg_val 0032                    ??_cw_bat_init 0033                       cw_init@ret 0030  
                 cw_read@r_pdata 0024                       _write_byte 048B           ?_OSCILLATOR_Initialize 0070  
            start_initialization 07E4  __size_of_PIN_MANAGER_Initialize 002E            __end_of_EUSART1_Write 039C  
               __CFG_LPBOREN$OFF 0000              __end_of_cw_bat_init 0428                      ?_wait_r_ack 007B  
                    __pdataBANK1 00A0                      __pdataBANK2 0120                       read_byte@i 0076  
         cw_update_config_info@i 002B                        ___latbits 0000                    __pcstackBANK0 0020  
          __size_of_CW_Delay10ms 0021            __size_of_CW_Delay10us 0021        _allow_charger_always_zero 0040  
              __size_of_cw_write 0032           _PIN_MANAGER_Initialize 0502                      ?_write_byte 0070  
          __end_of_I2C_Delay10us 048B                         ?_cw_init 0070                         ?_cw_read 0024  
                       _BAUD1CON 011F                     _CW_Delay10ms 0428                     _CW_Delay10us 0449  
                 __size_of_delay 002C             __CFG_RSTOSC$HFINTPLL 0000                   __size_of_r_ack 0019  
                 __size_of_s_ack 000E                        _read_byte 04B0                   __size_of_start 000D  
            __size_of_wait_r_ack 0032                         _LATCbits 001A                        clear_ram0 0388  
                    _cw_bat_init 040D                         _PIR3bits 070F                __CFG_BBSIZE$BB512 0000  
 __size_of_cw_update_config_info 00C0    __end_of_cw_update_config_info 070E                     _RX1DTPPSbits 1ECB  
                    write_byte@i 0077                       ?_read_byte 0070                cw_write@point_reg 007D  
            __size_of_write_byte 0025                  read_byte@r_data 0077          ??_OSCILLATOR_Initialize 0070  
    __size_of_EUSART1_Initialize 000C                 __size_of_cw_init 00D6                 __size_of_cw_read 003A  
             _cw_bat_config_info 0120                         __ptext10 03F4                         __ptext11 03B4  
                       __ptext20 039C                         __ptext12 03C1                         __ptext21 0394  
                       __ptext13 04B0                         __ptext14 046A                         __ptext15 0449  
                       __ptext16 0428                         __ptext17 0384                         __ptext18 0502  
                       __ptext19 03A8                         _cw_write 0562            _allow_no_charger_full 0042  
                  __size_of_main 0015                    __size_of_stop 0010             __CFG_WDTCWS$WDTCWS_7 0000  
                     _RC1STAbits 011D                     ??_wait_r_ack 007D                         cw_init@i 002F  
 cw_update_config_info@reset_val 0028      PIN_MANAGER_Initialize@state 0070                         r_ack@ack 0079  
                  wait_r_ack@ack 0020                      ??_read_byte 0075               __end_of_wait_r_ack 0562  
        ?_PIN_MANAGER_Initialize 0070                __CFG_CLKOUTEN$OFF 0000                      _PPSLOCKbits 1E8F  
       CW201x@cw_bat_config_info 00A0                    _if_quickstart 0049                     ??_write_byte 0075  
         __size_of_EUSART1_Write 0008   __end_of_PIN_MANAGER_Initialize 0530               __end_of_write_byte 04B0  
                   ?_cw_bat_init 0070  
