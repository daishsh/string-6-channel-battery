

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Mon Aug 28 22:07:42 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F15323
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	dabs	1,0x7E,2
    47  0000                     
    48                           ; Version 1.43
    49                           ; Generated 25/07/2017 GMT
    50                           ; 
    51                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC16F15323 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     	;# 
    83  0001                     	;# 
    84  0002                     	;# 
    85  0003                     	;# 
    86  0004                     	;# 
    87  0005                     	;# 
    88  0006                     	;# 
    89  0007                     	;# 
    90  0008                     	;# 
    91  0009                     	;# 
    92  000A                     	;# 
    93  000B                     	;# 
    94  000C                     	;# 
    95  000E                     	;# 
    96  0012                     	;# 
    97  0014                     	;# 
    98  0018                     	;# 
    99  001A                     	;# 
   100  009B                     	;# 
   101  009B                     	;# 
   102  009C                     	;# 
   103  009D                     	;# 
   104  009E                     	;# 
   105  009F                     	;# 
   106  0119                     	;# 
   107  0119                     	;# 
   108  0119                     	;# 
   109  011A                     	;# 
   110  011A                     	;# 
   111  011A                     	;# 
   112  011B                     	;# 
   113  011B                     	;# 
   114  011B                     	;# 
   115  011B                     	;# 
   116  011B                     	;# 
   117  011C                     	;# 
   118  011C                     	;# 
   119  011C                     	;# 
   120  011D                     	;# 
   121  011D                     	;# 
   122  011D                     	;# 
   123  011E                     	;# 
   124  011E                     	;# 
   125  011E                     	;# 
   126  011F                     	;# 
   127  011F                     	;# 
   128  011F                     	;# 
   129  011F                     	;# 
   130  011F                     	;# 
   131  018C                     	;# 
   132  018D                     	;# 
   133  018E                     	;# 
   134  018F                     	;# 
   135  0190                     	;# 
   136  0191                     	;# 
   137  0192                     	;# 
   138  020C                     	;# 
   139  020C                     	;# 
   140  020D                     	;# 
   141  020E                     	;# 
   142  020F                     	;# 
   143  020F                     	;# 
   144  0210                     	;# 
   145  0210                     	;# 
   146  0211                     	;# 
   147  0211                     	;# 
   148  028C                     	;# 
   149  028C                     	;# 
   150  028D                     	;# 
   151  028D                     	;# 
   152  028E                     	;# 
   153  028F                     	;# 
   154  0290                     	;# 
   155  0291                     	;# 
   156  030C                     	;# 
   157  030C                     	;# 
   158  030D                     	;# 
   159  030E                     	;# 
   160  030F                     	;# 
   161  0310                     	;# 
   162  0310                     	;# 
   163  0311                     	;# 
   164  0312                     	;# 
   165  0313                     	;# 
   166  0314                     	;# 
   167  0315                     	;# 
   168  0316                     	;# 
   169  0318                     	;# 
   170  0319                     	;# 
   171  031A                     	;# 
   172  031C                     	;# 
   173  031D                     	;# 
   174  031E                     	;# 
   175  038C                     	;# 
   176  038D                     	;# 
   177  038E                     	;# 
   178  058C                     	;# 
   179  058C                     	;# 
   180  058D                     	;# 
   181  058E                     	;# 
   182  058F                     	;# 
   183  058F                     	;# 
   184  0590                     	;# 
   185  0591                     	;# 
   186  0592                     	;# 
   187  0593                     	;# 
   188  059C                     	;# 
   189  059C                     	;# 
   190  059D                     	;# 
   191  059D                     	;# 
   192  059E                     	;# 
   193  059F                     	;# 
   194  060C                     	;# 
   195  060D                     	;# 
   196  060E                     	;# 
   197  060F                     	;# 
   198  0610                     	;# 
   199  0611                     	;# 
   200  0612                     	;# 
   201  0613                     	;# 
   202  0614                     	;# 
   203  070C                     	;# 
   204  070D                     	;# 
   205  070E                     	;# 
   206  070F                     	;# 
   207  0710                     	;# 
   208  0711                     	;# 
   209  0712                     	;# 
   210  0713                     	;# 
   211  0716                     	;# 
   212  0717                     	;# 
   213  0718                     	;# 
   214  0719                     	;# 
   215  071A                     	;# 
   216  071B                     	;# 
   217  071C                     	;# 
   218  071D                     	;# 
   219  0796                     	;# 
   220  0797                     	;# 
   221  0798                     	;# 
   222  0799                     	;# 
   223  079A                     	;# 
   224  079B                     	;# 
   225  080C                     	;# 
   226  080D                     	;# 
   227  080E                     	;# 
   228  080F                     	;# 
   229  0810                     	;# 
   230  0811                     	;# 
   231  0812                     	;# 
   232  0813                     	;# 
   233  0814                     	;# 
   234  081A                     	;# 
   235  081A                     	;# 
   236  081B                     	;# 
   237  081C                     	;# 
   238  081C                     	;# 
   239  081D                     	;# 
   240  081E                     	;# 
   241  081F                     	;# 
   242  088C                     	;# 
   243  088D                     	;# 
   244  088E                     	;# 
   245  088F                     	;# 
   246  0890                     	;# 
   247  0891                     	;# 
   248  0892                     	;# 
   249  0893                     	;# 
   250  0895                     	;# 
   251  0896                     	;# 
   252  090C                     	;# 
   253  090E                     	;# 
   254  090F                     	;# 
   255  091F                     	;# 
   256  098F                     	;# 
   257  098F                     	;# 
   258  0990                     	;# 
   259  0991                     	;# 
   260  0992                     	;# 
   261  0993                     	;# 
   262  0994                     	;# 
   263  0995                     	;# 
   264  0996                     	;# 
   265  0997                     	;# 
   266  1E0F                     	;# 
   267  1E10                     	;# 
   268  1E11                     	;# 
   269  1E12                     	;# 
   270  1E13                     	;# 
   271  1E14                     	;# 
   272  1E15                     	;# 
   273  1E16                     	;# 
   274  1E17                     	;# 
   275  1E18                     	;# 
   276  1E19                     	;# 
   277  1E1A                     	;# 
   278  1E1B                     	;# 
   279  1E1C                     	;# 
   280  1E1D                     	;# 
   281  1E1E                     	;# 
   282  1E1F                     	;# 
   283  1E20                     	;# 
   284  1E21                     	;# 
   285  1E22                     	;# 
   286  1E23                     	;# 
   287  1E24                     	;# 
   288  1E25                     	;# 
   289  1E26                     	;# 
   290  1E27                     	;# 
   291  1E28                     	;# 
   292  1E29                     	;# 
   293  1E2A                     	;# 
   294  1E2B                     	;# 
   295  1E2C                     	;# 
   296  1E2D                     	;# 
   297  1E2E                     	;# 
   298  1E2F                     	;# 
   299  1E30                     	;# 
   300  1E31                     	;# 
   301  1E32                     	;# 
   302  1E33                     	;# 
   303  1E34                     	;# 
   304  1E35                     	;# 
   305  1E36                     	;# 
   306  1E37                     	;# 
   307  1E8F                     	;# 
   308  1E90                     	;# 
   309  1E91                     	;# 
   310  1E92                     	;# 
   311  1E93                     	;# 
   312  1E9C                     	;# 
   313  1EA1                     	;# 
   314  1EA2                     	;# 
   315  1EB1                     	;# 
   316  1EBB                     	;# 
   317  1EBC                     	;# 
   318  1EBD                     	;# 
   319  1EBE                     	;# 
   320  1EC3                     	;# 
   321  1EC5                     	;# 
   322  1EC6                     	;# 
   323  1EC7                     	;# 
   324  1ECB                     	;# 
   325  1ECC                     	;# 
   326  1F10                     	;# 
   327  1F11                     	;# 
   328  1F12                     	;# 
   329  1F13                     	;# 
   330  1F14                     	;# 
   331  1F15                     	;# 
   332  1F20                     	;# 
   333  1F21                     	;# 
   334  1F22                     	;# 
   335  1F23                     	;# 
   336  1F24                     	;# 
   337  1F25                     	;# 
   338  1F38                     	;# 
   339  1F39                     	;# 
   340  1F3A                     	;# 
   341  1F3B                     	;# 
   342  1F3C                     	;# 
   343  1F3D                     	;# 
   344  1F3E                     	;# 
   345  1F3F                     	;# 
   346  1F4E                     	;# 
   347  1F4F                     	;# 
   348  1F50                     	;# 
   349  1F51                     	;# 
   350  1F52                     	;# 
   351  1F53                     	;# 
   352  1F54                     	;# 
   353  1F55                     	;# 
   354  1FE4                     	;# 
   355  1FE5                     	;# 
   356  1FE6                     	;# 
   357  1FE7                     	;# 
   358  1FE8                     	;# 
   359  1FE8                     	;# 
   360  1FE9                     	;# 
   361  1FEA                     	;# 
   362  1FEA                     	;# 
   363  1FEB                     	;# 
   364  1FED                     	;# 
   365  1FEE                     	;# 
   366  1FEF                     	;# 
   367  0000                     	;# 
   368  0001                     	;# 
   369  0002                     	;# 
   370  0003                     	;# 
   371  0004                     	;# 
   372  0005                     	;# 
   373  0006                     	;# 
   374  0007                     	;# 
   375  0008                     	;# 
   376  0009                     	;# 
   377  000A                     	;# 
   378  000B                     	;# 
   379  000C                     	;# 
   380  000E                     	;# 
   381  0012                     	;# 
   382  0014                     	;# 
   383  0018                     	;# 
   384  001A                     	;# 
   385  009B                     	;# 
   386  009B                     	;# 
   387  009C                     	;# 
   388  009D                     	;# 
   389  009E                     	;# 
   390  009F                     	;# 
   391  0119                     	;# 
   392  0119                     	;# 
   393  0119                     	;# 
   394  011A                     	;# 
   395  011A                     	;# 
   396  011A                     	;# 
   397  011B                     	;# 
   398  011B                     	;# 
   399  011B                     	;# 
   400  011B                     	;# 
   401  011B                     	;# 
   402  011C                     	;# 
   403  011C                     	;# 
   404  011C                     	;# 
   405  011D                     	;# 
   406  011D                     	;# 
   407  011D                     	;# 
   408  011E                     	;# 
   409  011E                     	;# 
   410  011E                     	;# 
   411  011F                     	;# 
   412  011F                     	;# 
   413  011F                     	;# 
   414  011F                     	;# 
   415  011F                     	;# 
   416  018C                     	;# 
   417  018D                     	;# 
   418  018E                     	;# 
   419  018F                     	;# 
   420  0190                     	;# 
   421  0191                     	;# 
   422  0192                     	;# 
   423  020C                     	;# 
   424  020C                     	;# 
   425  020D                     	;# 
   426  020E                     	;# 
   427  020F                     	;# 
   428  020F                     	;# 
   429  0210                     	;# 
   430  0210                     	;# 
   431  0211                     	;# 
   432  0211                     	;# 
   433  028C                     	;# 
   434  028C                     	;# 
   435  028D                     	;# 
   436  028D                     	;# 
   437  028E                     	;# 
   438  028F                     	;# 
   439  0290                     	;# 
   440  0291                     	;# 
   441  030C                     	;# 
   442  030C                     	;# 
   443  030D                     	;# 
   444  030E                     	;# 
   445  030F                     	;# 
   446  0310                     	;# 
   447  0310                     	;# 
   448  0311                     	;# 
   449  0312                     	;# 
   450  0313                     	;# 
   451  0314                     	;# 
   452  0315                     	;# 
   453  0316                     	;# 
   454  0318                     	;# 
   455  0319                     	;# 
   456  031A                     	;# 
   457  031C                     	;# 
   458  031D                     	;# 
   459  031E                     	;# 
   460  038C                     	;# 
   461  038D                     	;# 
   462  038E                     	;# 
   463  058C                     	;# 
   464  058C                     	;# 
   465  058D                     	;# 
   466  058E                     	;# 
   467  058F                     	;# 
   468  058F                     	;# 
   469  0590                     	;# 
   470  0591                     	;# 
   471  0592                     	;# 
   472  0593                     	;# 
   473  059C                     	;# 
   474  059C                     	;# 
   475  059D                     	;# 
   476  059D                     	;# 
   477  059E                     	;# 
   478  059F                     	;# 
   479  060C                     	;# 
   480  060D                     	;# 
   481  060E                     	;# 
   482  060F                     	;# 
   483  0610                     	;# 
   484  0611                     	;# 
   485  0612                     	;# 
   486  0613                     	;# 
   487  0614                     	;# 
   488  070C                     	;# 
   489  070D                     	;# 
   490  070E                     	;# 
   491  070F                     	;# 
   492  0710                     	;# 
   493  0711                     	;# 
   494  0712                     	;# 
   495  0713                     	;# 
   496  0716                     	;# 
   497  0717                     	;# 
   498  0718                     	;# 
   499  0719                     	;# 
   500  071A                     	;# 
   501  071B                     	;# 
   502  071C                     	;# 
   503  071D                     	;# 
   504  0796                     	;# 
   505  0797                     	;# 
   506  0798                     	;# 
   507  0799                     	;# 
   508  079A                     	;# 
   509  079B                     	;# 
   510  080C                     	;# 
   511  080D                     	;# 
   512  080E                     	;# 
   513  080F                     	;# 
   514  0810                     	;# 
   515  0811                     	;# 
   516  0812                     	;# 
   517  0813                     	;# 
   518  0814                     	;# 
   519  081A                     	;# 
   520  081A                     	;# 
   521  081B                     	;# 
   522  081C                     	;# 
   523  081C                     	;# 
   524  081D                     	;# 
   525  081E                     	;# 
   526  081F                     	;# 
   527  088C                     	;# 
   528  088D                     	;# 
   529  088E                     	;# 
   530  088F                     	;# 
   531  0890                     	;# 
   532  0891                     	;# 
   533  0892                     	;# 
   534  0893                     	;# 
   535  0895                     	;# 
   536  0896                     	;# 
   537  090C                     	;# 
   538  090E                     	;# 
   539  090F                     	;# 
   540  091F                     	;# 
   541  098F                     	;# 
   542  098F                     	;# 
   543  0990                     	;# 
   544  0991                     	;# 
   545  0992                     	;# 
   546  0993                     	;# 
   547  0994                     	;# 
   548  0995                     	;# 
   549  0996                     	;# 
   550  0997                     	;# 
   551  1E0F                     	;# 
   552  1E10                     	;# 
   553  1E11                     	;# 
   554  1E12                     	;# 
   555  1E13                     	;# 
   556  1E14                     	;# 
   557  1E15                     	;# 
   558  1E16                     	;# 
   559  1E17                     	;# 
   560  1E18                     	;# 
   561  1E19                     	;# 
   562  1E1A                     	;# 
   563  1E1B                     	;# 
   564  1E1C                     	;# 
   565  1E1D                     	;# 
   566  1E1E                     	;# 
   567  1E1F                     	;# 
   568  1E20                     	;# 
   569  1E21                     	;# 
   570  1E22                     	;# 
   571  1E23                     	;# 
   572  1E24                     	;# 
   573  1E25                     	;# 
   574  1E26                     	;# 
   575  1E27                     	;# 
   576  1E28                     	;# 
   577  1E29                     	;# 
   578  1E2A                     	;# 
   579  1E2B                     	;# 
   580  1E2C                     	;# 
   581  1E2D                     	;# 
   582  1E2E                     	;# 
   583  1E2F                     	;# 
   584  1E30                     	;# 
   585  1E31                     	;# 
   586  1E32                     	;# 
   587  1E33                     	;# 
   588  1E34                     	;# 
   589  1E35                     	;# 
   590  1E36                     	;# 
   591  1E37                     	;# 
   592  1E8F                     	;# 
   593  1E90                     	;# 
   594  1E91                     	;# 
   595  1E92                     	;# 
   596  1E93                     	;# 
   597  1E9C                     	;# 
   598  1EA1                     	;# 
   599  1EA2                     	;# 
   600  1EB1                     	;# 
   601  1EBB                     	;# 
   602  1EBC                     	;# 
   603  1EBD                     	;# 
   604  1EBE                     	;# 
   605  1EC3                     	;# 
   606  1EC5                     	;# 
   607  1EC6                     	;# 
   608  1EC7                     	;# 
   609  1ECB                     	;# 
   610  1ECC                     	;# 
   611  1F10                     	;# 
   612  1F11                     	;# 
   613  1F12                     	;# 
   614  1F13                     	;# 
   615  1F14                     	;# 
   616  1F15                     	;# 
   617  1F20                     	;# 
   618  1F21                     	;# 
   619  1F22                     	;# 
   620  1F23                     	;# 
   621  1F24                     	;# 
   622  1F25                     	;# 
   623  1F38                     	;# 
   624  1F39                     	;# 
   625  1F3A                     	;# 
   626  1F3B                     	;# 
   627  1F3C                     	;# 
   628  1F3D                     	;# 
   629  1F3E                     	;# 
   630  1F3F                     	;# 
   631  1F4E                     	;# 
   632  1F4F                     	;# 
   633  1F50                     	;# 
   634  1F51                     	;# 
   635  1F52                     	;# 
   636  1F53                     	;# 
   637  1F54                     	;# 
   638  1F55                     	;# 
   639  1FE4                     	;# 
   640  1FE5                     	;# 
   641  1FE6                     	;# 
   642  1FE7                     	;# 
   643  1FE8                     	;# 
   644  1FE8                     	;# 
   645  1FE9                     	;# 
   646  1FEA                     	;# 
   647  1FEA                     	;# 
   648  1FEB                     	;# 
   649  1FED                     	;# 
   650  1FEE                     	;# 
   651  1FEF                     	;# 
   652  0000                     	;# 
   653  0001                     	;# 
   654  0002                     	;# 
   655  0003                     	;# 
   656  0004                     	;# 
   657  0005                     	;# 
   658  0006                     	;# 
   659  0007                     	;# 
   660  0008                     	;# 
   661  0009                     	;# 
   662  000A                     	;# 
   663  000B                     	;# 
   664  000C                     	;# 
   665  000E                     	;# 
   666  0012                     	;# 
   667  0014                     	;# 
   668  0018                     	;# 
   669  001A                     	;# 
   670  009B                     	;# 
   671  009B                     	;# 
   672  009C                     	;# 
   673  009D                     	;# 
   674  009E                     	;# 
   675  009F                     	;# 
   676  0119                     	;# 
   677  0119                     	;# 
   678  0119                     	;# 
   679  011A                     	;# 
   680  011A                     	;# 
   681  011A                     	;# 
   682  011B                     	;# 
   683  011B                     	;# 
   684  011B                     	;# 
   685  011B                     	;# 
   686  011B                     	;# 
   687  011C                     	;# 
   688  011C                     	;# 
   689  011C                     	;# 
   690  011D                     	;# 
   691  011D                     	;# 
   692  011D                     	;# 
   693  011E                     	;# 
   694  011E                     	;# 
   695  011E                     	;# 
   696  011F                     	;# 
   697  011F                     	;# 
   698  011F                     	;# 
   699  011F                     	;# 
   700  011F                     	;# 
   701  018C                     	;# 
   702  018D                     	;# 
   703  018E                     	;# 
   704  018F                     	;# 
   705  0190                     	;# 
   706  0191                     	;# 
   707  0192                     	;# 
   708  020C                     	;# 
   709  020C                     	;# 
   710  020D                     	;# 
   711  020E                     	;# 
   712  020F                     	;# 
   713  020F                     	;# 
   714  0210                     	;# 
   715  0210                     	;# 
   716  0211                     	;# 
   717  0211                     	;# 
   718  028C                     	;# 
   719  028C                     	;# 
   720  028D                     	;# 
   721  028D                     	;# 
   722  028E                     	;# 
   723  028F                     	;# 
   724  0290                     	;# 
   725  0291                     	;# 
   726  030C                     	;# 
   727  030C                     	;# 
   728  030D                     	;# 
   729  030E                     	;# 
   730  030F                     	;# 
   731  0310                     	;# 
   732  0310                     	;# 
   733  0311                     	;# 
   734  0312                     	;# 
   735  0313                     	;# 
   736  0314                     	;# 
   737  0315                     	;# 
   738  0316                     	;# 
   739  0318                     	;# 
   740  0319                     	;# 
   741  031A                     	;# 
   742  031C                     	;# 
   743  031D                     	;# 
   744  031E                     	;# 
   745  038C                     	;# 
   746  038D                     	;# 
   747  038E                     	;# 
   748  058C                     	;# 
   749  058C                     	;# 
   750  058D                     	;# 
   751  058E                     	;# 
   752  058F                     	;# 
   753  058F                     	;# 
   754  0590                     	;# 
   755  0591                     	;# 
   756  0592                     	;# 
   757  0593                     	;# 
   758  059C                     	;# 
   759  059C                     	;# 
   760  059D                     	;# 
   761  059D                     	;# 
   762  059E                     	;# 
   763  059F                     	;# 
   764  060C                     	;# 
   765  060D                     	;# 
   766  060E                     	;# 
   767  060F                     	;# 
   768  0610                     	;# 
   769  0611                     	;# 
   770  0612                     	;# 
   771  0613                     	;# 
   772  0614                     	;# 
   773  070C                     	;# 
   774  070D                     	;# 
   775  070E                     	;# 
   776  070F                     	;# 
   777  0710                     	;# 
   778  0711                     	;# 
   779  0712                     	;# 
   780  0713                     	;# 
   781  0716                     	;# 
   782  0717                     	;# 
   783  0718                     	;# 
   784  0719                     	;# 
   785  071A                     	;# 
   786  071B                     	;# 
   787  071C                     	;# 
   788  071D                     	;# 
   789  0796                     	;# 
   790  0797                     	;# 
   791  0798                     	;# 
   792  0799                     	;# 
   793  079A                     	;# 
   794  079B                     	;# 
   795  080C                     	;# 
   796  080D                     	;# 
   797  080E                     	;# 
   798  080F                     	;# 
   799  0810                     	;# 
   800  0811                     	;# 
   801  0812                     	;# 
   802  0813                     	;# 
   803  0814                     	;# 
   804  081A                     	;# 
   805  081A                     	;# 
   806  081B                     	;# 
   807  081C                     	;# 
   808  081C                     	;# 
   809  081D                     	;# 
   810  081E                     	;# 
   811  081F                     	;# 
   812  088C                     	;# 
   813  088D                     	;# 
   814  088E                     	;# 
   815  088F                     	;# 
   816  0890                     	;# 
   817  0891                     	;# 
   818  0892                     	;# 
   819  0893                     	;# 
   820  0895                     	;# 
   821  0896                     	;# 
   822  090C                     	;# 
   823  090E                     	;# 
   824  090F                     	;# 
   825  091F                     	;# 
   826  098F                     	;# 
   827  098F                     	;# 
   828  0990                     	;# 
   829  0991                     	;# 
   830  0992                     	;# 
   831  0993                     	;# 
   832  0994                     	;# 
   833  0995                     	;# 
   834  0996                     	;# 
   835  0997                     	;# 
   836  1E0F                     	;# 
   837  1E10                     	;# 
   838  1E11                     	;# 
   839  1E12                     	;# 
   840  1E13                     	;# 
   841  1E14                     	;# 
   842  1E15                     	;# 
   843  1E16                     	;# 
   844  1E17                     	;# 
   845  1E18                     	;# 
   846  1E19                     	;# 
   847  1E1A                     	;# 
   848  1E1B                     	;# 
   849  1E1C                     	;# 
   850  1E1D                     	;# 
   851  1E1E                     	;# 
   852  1E1F                     	;# 
   853  1E20                     	;# 
   854  1E21                     	;# 
   855  1E22                     	;# 
   856  1E23                     	;# 
   857  1E24                     	;# 
   858  1E25                     	;# 
   859  1E26                     	;# 
   860  1E27                     	;# 
   861  1E28                     	;# 
   862  1E29                     	;# 
   863  1E2A                     	;# 
   864  1E2B                     	;# 
   865  1E2C                     	;# 
   866  1E2D                     	;# 
   867  1E2E                     	;# 
   868  1E2F                     	;# 
   869  1E30                     	;# 
   870  1E31                     	;# 
   871  1E32                     	;# 
   872  1E33                     	;# 
   873  1E34                     	;# 
   874  1E35                     	;# 
   875  1E36                     	;# 
   876  1E37                     	;# 
   877  1E8F                     	;# 
   878  1E90                     	;# 
   879  1E91                     	;# 
   880  1E92                     	;# 
   881  1E93                     	;# 
   882  1E9C                     	;# 
   883  1EA1                     	;# 
   884  1EA2                     	;# 
   885  1EB1                     	;# 
   886  1EBB                     	;# 
   887  1EBC                     	;# 
   888  1EBD                     	;# 
   889  1EBE                     	;# 
   890  1EC3                     	;# 
   891  1EC5                     	;# 
   892  1EC6                     	;# 
   893  1EC7                     	;# 
   894  1ECB                     	;# 
   895  1ECC                     	;# 
   896  1F10                     	;# 
   897  1F11                     	;# 
   898  1F12                     	;# 
   899  1F13                     	;# 
   900  1F14                     	;# 
   901  1F15                     	;# 
   902  1F20                     	;# 
   903  1F21                     	;# 
   904  1F22                     	;# 
   905  1F23                     	;# 
   906  1F24                     	;# 
   907  1F25                     	;# 
   908  1F38                     	;# 
   909  1F39                     	;# 
   910  1F3A                     	;# 
   911  1F3B                     	;# 
   912  1F3C                     	;# 
   913  1F3D                     	;# 
   914  1F3E                     	;# 
   915  1F3F                     	;# 
   916  1F4E                     	;# 
   917  1F4F                     	;# 
   918  1F50                     	;# 
   919  1F51                     	;# 
   920  1F52                     	;# 
   921  1F53                     	;# 
   922  1F54                     	;# 
   923  1F55                     	;# 
   924  1FE4                     	;# 
   925  1FE5                     	;# 
   926  1FE6                     	;# 
   927  1FE7                     	;# 
   928  1FE8                     	;# 
   929  1FE8                     	;# 
   930  1FE9                     	;# 
   931  1FEA                     	;# 
   932  1FEA                     	;# 
   933  1FEB                     	;# 
   934  1FED                     	;# 
   935  1FEE                     	;# 
   936  1FEF                     	;# 
   937  0000                     	;# 
   938  0001                     	;# 
   939  0002                     	;# 
   940  0003                     	;# 
   941  0004                     	;# 
   942  0005                     	;# 
   943  0006                     	;# 
   944  0007                     	;# 
   945  0008                     	;# 
   946  0009                     	;# 
   947  000A                     	;# 
   948  000B                     	;# 
   949  000C                     	;# 
   950  000E                     	;# 
   951  0012                     	;# 
   952  0014                     	;# 
   953  0018                     	;# 
   954  001A                     	;# 
   955  009B                     	;# 
   956  009B                     	;# 
   957  009C                     	;# 
   958  009D                     	;# 
   959  009E                     	;# 
   960  009F                     	;# 
   961  0119                     	;# 
   962  0119                     	;# 
   963  0119                     	;# 
   964  011A                     	;# 
   965  011A                     	;# 
   966  011A                     	;# 
   967  011B                     	;# 
   968  011B                     	;# 
   969  011B                     	;# 
   970  011B                     	;# 
   971  011B                     	;# 
   972  011C                     	;# 
   973  011C                     	;# 
   974  011C                     	;# 
   975  011D                     	;# 
   976  011D                     	;# 
   977  011D                     	;# 
   978  011E                     	;# 
   979  011E                     	;# 
   980  011E                     	;# 
   981  011F                     	;# 
   982  011F                     	;# 
   983  011F                     	;# 
   984  011F                     	;# 
   985  011F                     	;# 
   986  018C                     	;# 
   987  018D                     	;# 
   988  018E                     	;# 
   989  018F                     	;# 
   990  0190                     	;# 
   991  0191                     	;# 
   992  0192                     	;# 
   993  020C                     	;# 
   994  020C                     	;# 
   995  020D                     	;# 
   996  020E                     	;# 
   997  020F                     	;# 
   998  020F                     	;# 
   999  0210                     	;# 
  1000  0210                     	;# 
  1001  0211                     	;# 
  1002  0211                     	;# 
  1003  028C                     	;# 
  1004  028C                     	;# 
  1005  028D                     	;# 
  1006  028D                     	;# 
  1007  028E                     	;# 
  1008  028F                     	;# 
  1009  0290                     	;# 
  1010  0291                     	;# 
  1011  030C                     	;# 
  1012  030C                     	;# 
  1013  030D                     	;# 
  1014  030E                     	;# 
  1015  030F                     	;# 
  1016  0310                     	;# 
  1017  0310                     	;# 
  1018  0311                     	;# 
  1019  0312                     	;# 
  1020  0313                     	;# 
  1021  0314                     	;# 
  1022  0315                     	;# 
  1023  0316                     	;# 
  1024  0318                     	;# 
  1025  0319                     	;# 
  1026  031A                     	;# 
  1027  031C                     	;# 
  1028  031D                     	;# 
  1029  031E                     	;# 
  1030  038C                     	;# 
  1031  038D                     	;# 
  1032  038E                     	;# 
  1033  058C                     	;# 
  1034  058C                     	;# 
  1035  058D                     	;# 
  1036  058E                     	;# 
  1037  058F                     	;# 
  1038  058F                     	;# 
  1039  0590                     	;# 
  1040  0591                     	;# 
  1041  0592                     	;# 
  1042  0593                     	;# 
  1043  059C                     	;# 
  1044  059C                     	;# 
  1045  059D                     	;# 
  1046  059D                     	;# 
  1047  059E                     	;# 
  1048  059F                     	;# 
  1049  060C                     	;# 
  1050  060D                     	;# 
  1051  060E                     	;# 
  1052  060F                     	;# 
  1053  0610                     	;# 
  1054  0611                     	;# 
  1055  0612                     	;# 
  1056  0613                     	;# 
  1057  0614                     	;# 
  1058  070C                     	;# 
  1059  070D                     	;# 
  1060  070E                     	;# 
  1061  070F                     	;# 
  1062  0710                     	;# 
  1063  0711                     	;# 
  1064  0712                     	;# 
  1065  0713                     	;# 
  1066  0716                     	;# 
  1067  0717                     	;# 
  1068  0718                     	;# 
  1069  0719                     	;# 
  1070  071A                     	;# 
  1071  071B                     	;# 
  1072  071C                     	;# 
  1073  071D                     	;# 
  1074  0796                     	;# 
  1075  0797                     	;# 
  1076  0798                     	;# 
  1077  0799                     	;# 
  1078  079A                     	;# 
  1079  079B                     	;# 
  1080  080C                     	;# 
  1081  080D                     	;# 
  1082  080E                     	;# 
  1083  080F                     	;# 
  1084  0810                     	;# 
  1085  0811                     	;# 
  1086  0812                     	;# 
  1087  0813                     	;# 
  1088  0814                     	;# 
  1089  081A                     	;# 
  1090  081A                     	;# 
  1091  081B                     	;# 
  1092  081C                     	;# 
  1093  081C                     	;# 
  1094  081D                     	;# 
  1095  081E                     	;# 
  1096  081F                     	;# 
  1097  088C                     	;# 
  1098  088D                     	;# 
  1099  088E                     	;# 
  1100  088F                     	;# 
  1101  0890                     	;# 
  1102  0891                     	;# 
  1103  0892                     	;# 
  1104  0893                     	;# 
  1105  0895                     	;# 
  1106  0896                     	;# 
  1107  090C                     	;# 
  1108  090E                     	;# 
  1109  090F                     	;# 
  1110  091F                     	;# 
  1111  098F                     	;# 
  1112  098F                     	;# 
  1113  0990                     	;# 
  1114  0991                     	;# 
  1115  0992                     	;# 
  1116  0993                     	;# 
  1117  0994                     	;# 
  1118  0995                     	;# 
  1119  0996                     	;# 
  1120  0997                     	;# 
  1121  1E0F                     	;# 
  1122  1E10                     	;# 
  1123  1E11                     	;# 
  1124  1E12                     	;# 
  1125  1E13                     	;# 
  1126  1E14                     	;# 
  1127  1E15                     	;# 
  1128  1E16                     	;# 
  1129  1E17                     	;# 
  1130  1E18                     	;# 
  1131  1E19                     	;# 
  1132  1E1A                     	;# 
  1133  1E1B                     	;# 
  1134  1E1C                     	;# 
  1135  1E1D                     	;# 
  1136  1E1E                     	;# 
  1137  1E1F                     	;# 
  1138  1E20                     	;# 
  1139  1E21                     	;# 
  1140  1E22                     	;# 
  1141  1E23                     	;# 
  1142  1E24                     	;# 
  1143  1E25                     	;# 
  1144  1E26                     	;# 
  1145  1E27                     	;# 
  1146  1E28                     	;# 
  1147  1E29                     	;# 
  1148  1E2A                     	;# 
  1149  1E2B                     	;# 
  1150  1E2C                     	;# 
  1151  1E2D                     	;# 
  1152  1E2E                     	;# 
  1153  1E2F                     	;# 
  1154  1E30                     	;# 
  1155  1E31                     	;# 
  1156  1E32                     	;# 
  1157  1E33                     	;# 
  1158  1E34                     	;# 
  1159  1E35                     	;# 
  1160  1E36                     	;# 
  1161  1E37                     	;# 
  1162  1E8F                     	;# 
  1163  1E90                     	;# 
  1164  1E91                     	;# 
  1165  1E92                     	;# 
  1166  1E93                     	;# 
  1167  1E9C                     	;# 
  1168  1EA1                     	;# 
  1169  1EA2                     	;# 
  1170  1EB1                     	;# 
  1171  1EBB                     	;# 
  1172  1EBC                     	;# 
  1173  1EBD                     	;# 
  1174  1EBE                     	;# 
  1175  1EC3                     	;# 
  1176  1EC5                     	;# 
  1177  1EC6                     	;# 
  1178  1EC7                     	;# 
  1179  1ECB                     	;# 
  1180  1ECC                     	;# 
  1181  1F10                     	;# 
  1182  1F11                     	;# 
  1183  1F12                     	;# 
  1184  1F13                     	;# 
  1185  1F14                     	;# 
  1186  1F15                     	;# 
  1187  1F20                     	;# 
  1188  1F21                     	;# 
  1189  1F22                     	;# 
  1190  1F23                     	;# 
  1191  1F24                     	;# 
  1192  1F25                     	;# 
  1193  1F38                     	;# 
  1194  1F39                     	;# 
  1195  1F3A                     	;# 
  1196  1F3B                     	;# 
  1197  1F3C                     	;# 
  1198  1F3D                     	;# 
  1199  1F3E                     	;# 
  1200  1F3F                     	;# 
  1201  1F4E                     	;# 
  1202  1F4F                     	;# 
  1203  1F50                     	;# 
  1204  1F51                     	;# 
  1205  1F52                     	;# 
  1206  1F53                     	;# 
  1207  1F54                     	;# 
  1208  1F55                     	;# 
  1209  1FE4                     	;# 
  1210  1FE5                     	;# 
  1211  1FE6                     	;# 
  1212  1FE7                     	;# 
  1213  1FE8                     	;# 
  1214  1FE8                     	;# 
  1215  1FE9                     	;# 
  1216  1FEA                     	;# 
  1217  1FEA                     	;# 
  1218  1FEB                     	;# 
  1219  1FED                     	;# 
  1220  1FEE                     	;# 
  1221  1FEF                     	;# 
  1222  0000                     	;# 
  1223  0001                     	;# 
  1224  0002                     	;# 
  1225  0003                     	;# 
  1226  0004                     	;# 
  1227  0005                     	;# 
  1228  0006                     	;# 
  1229  0007                     	;# 
  1230  0008                     	;# 
  1231  0009                     	;# 
  1232  000A                     	;# 
  1233  000B                     	;# 
  1234  000C                     	;# 
  1235  000E                     	;# 
  1236  0012                     	;# 
  1237  0014                     	;# 
  1238  0018                     	;# 
  1239  001A                     	;# 
  1240  009B                     	;# 
  1241  009B                     	;# 
  1242  009C                     	;# 
  1243  009D                     	;# 
  1244  009E                     	;# 
  1245  009F                     	;# 
  1246  0119                     	;# 
  1247  0119                     	;# 
  1248  0119                     	;# 
  1249  011A                     	;# 
  1250  011A                     	;# 
  1251  011A                     	;# 
  1252  011B                     	;# 
  1253  011B                     	;# 
  1254  011B                     	;# 
  1255  011B                     	;# 
  1256  011B                     	;# 
  1257  011C                     	;# 
  1258  011C                     	;# 
  1259  011C                     	;# 
  1260  011D                     	;# 
  1261  011D                     	;# 
  1262  011D                     	;# 
  1263  011E                     	;# 
  1264  011E                     	;# 
  1265  011E                     	;# 
  1266  011F                     	;# 
  1267  011F                     	;# 
  1268  011F                     	;# 
  1269  011F                     	;# 
  1270  011F                     	;# 
  1271  018C                     	;# 
  1272  018D                     	;# 
  1273  018E                     	;# 
  1274  018F                     	;# 
  1275  0190                     	;# 
  1276  0191                     	;# 
  1277  0192                     	;# 
  1278  020C                     	;# 
  1279  020C                     	;# 
  1280  020D                     	;# 
  1281  020E                     	;# 
  1282  020F                     	;# 
  1283  020F                     	;# 
  1284  0210                     	;# 
  1285  0210                     	;# 
  1286  0211                     	;# 
  1287  0211                     	;# 
  1288  028C                     	;# 
  1289  028C                     	;# 
  1290  028D                     	;# 
  1291  028D                     	;# 
  1292  028E                     	;# 
  1293  028F                     	;# 
  1294  0290                     	;# 
  1295  0291                     	;# 
  1296  030C                     	;# 
  1297  030C                     	;# 
  1298  030D                     	;# 
  1299  030E                     	;# 
  1300  030F                     	;# 
  1301  0310                     	;# 
  1302  0310                     	;# 
  1303  0311                     	;# 
  1304  0312                     	;# 
  1305  0313                     	;# 
  1306  0314                     	;# 
  1307  0315                     	;# 
  1308  0316                     	;# 
  1309  0318                     	;# 
  1310  0319                     	;# 
  1311  031A                     	;# 
  1312  031C                     	;# 
  1313  031D                     	;# 
  1314  031E                     	;# 
  1315  038C                     	;# 
  1316  038D                     	;# 
  1317  038E                     	;# 
  1318  058C                     	;# 
  1319  058C                     	;# 
  1320  058D                     	;# 
  1321  058E                     	;# 
  1322  058F                     	;# 
  1323  058F                     	;# 
  1324  0590                     	;# 
  1325  0591                     	;# 
  1326  0592                     	;# 
  1327  0593                     	;# 
  1328  059C                     	;# 
  1329  059C                     	;# 
  1330  059D                     	;# 
  1331  059D                     	;# 
  1332  059E                     	;# 
  1333  059F                     	;# 
  1334  060C                     	;# 
  1335  060D                     	;# 
  1336  060E                     	;# 
  1337  060F                     	;# 
  1338  0610                     	;# 
  1339  0611                     	;# 
  1340  0612                     	;# 
  1341  0613                     	;# 
  1342  0614                     	;# 
  1343  070C                     	;# 
  1344  070D                     	;# 
  1345  070E                     	;# 
  1346  070F                     	;# 
  1347  0710                     	;# 
  1348  0711                     	;# 
  1349  0712                     	;# 
  1350  0713                     	;# 
  1351  0716                     	;# 
  1352  0717                     	;# 
  1353  0718                     	;# 
  1354  0719                     	;# 
  1355  071A                     	;# 
  1356  071B                     	;# 
  1357  071C                     	;# 
  1358  071D                     	;# 
  1359  0796                     	;# 
  1360  0797                     	;# 
  1361  0798                     	;# 
  1362  0799                     	;# 
  1363  079A                     	;# 
  1364  079B                     	;# 
  1365  080C                     	;# 
  1366  080D                     	;# 
  1367  080E                     	;# 
  1368  080F                     	;# 
  1369  0810                     	;# 
  1370  0811                     	;# 
  1371  0812                     	;# 
  1372  0813                     	;# 
  1373  0814                     	;# 
  1374  081A                     	;# 
  1375  081A                     	;# 
  1376  081B                     	;# 
  1377  081C                     	;# 
  1378  081C                     	;# 
  1379  081D                     	;# 
  1380  081E                     	;# 
  1381  081F                     	;# 
  1382  088C                     	;# 
  1383  088D                     	;# 
  1384  088E                     	;# 
  1385  088F                     	;# 
  1386  0890                     	;# 
  1387  0891                     	;# 
  1388  0892                     	;# 
  1389  0893                     	;# 
  1390  0895                     	;# 
  1391  0896                     	;# 
  1392  090C                     	;# 
  1393  090E                     	;# 
  1394  090F                     	;# 
  1395  091F                     	;# 
  1396  098F                     	;# 
  1397  098F                     	;# 
  1398  0990                     	;# 
  1399  0991                     	;# 
  1400  0992                     	;# 
  1401  0993                     	;# 
  1402  0994                     	;# 
  1403  0995                     	;# 
  1404  0996                     	;# 
  1405  0997                     	;# 
  1406  1E0F                     	;# 
  1407  1E10                     	;# 
  1408  1E11                     	;# 
  1409  1E12                     	;# 
  1410  1E13                     	;# 
  1411  1E14                     	;# 
  1412  1E15                     	;# 
  1413  1E16                     	;# 
  1414  1E17                     	;# 
  1415  1E18                     	;# 
  1416  1E19                     	;# 
  1417  1E1A                     	;# 
  1418  1E1B                     	;# 
  1419  1E1C                     	;# 
  1420  1E1D                     	;# 
  1421  1E1E                     	;# 
  1422  1E1F                     	;# 
  1423  1E20                     	;# 
  1424  1E21                     	;# 
  1425  1E22                     	;# 
  1426  1E23                     	;# 
  1427  1E24                     	;# 
  1428  1E25                     	;# 
  1429  1E26                     	;# 
  1430  1E27                     	;# 
  1431  1E28                     	;# 
  1432  1E29                     	;# 
  1433  1E2A                     	;# 
  1434  1E2B                     	;# 
  1435  1E2C                     	;# 
  1436  1E2D                     	;# 
  1437  1E2E                     	;# 
  1438  1E2F                     	;# 
  1439  1E30                     	;# 
  1440  1E31                     	;# 
  1441  1E32                     	;# 
  1442  1E33                     	;# 
  1443  1E34                     	;# 
  1444  1E35                     	;# 
  1445  1E36                     	;# 
  1446  1E37                     	;# 
  1447  1E8F                     	;# 
  1448  1E90                     	;# 
  1449  1E91                     	;# 
  1450  1E92                     	;# 
  1451  1E93                     	;# 
  1452  1E9C                     	;# 
  1453  1EA1                     	;# 
  1454  1EA2                     	;# 
  1455  1EB1                     	;# 
  1456  1EBB                     	;# 
  1457  1EBC                     	;# 
  1458  1EBD                     	;# 
  1459  1EBE                     	;# 
  1460  1EC3                     	;# 
  1461  1EC5                     	;# 
  1462  1EC6                     	;# 
  1463  1EC7                     	;# 
  1464  1ECB                     	;# 
  1465  1ECC                     	;# 
  1466  1F10                     	;# 
  1467  1F11                     	;# 
  1468  1F12                     	;# 
  1469  1F13                     	;# 
  1470  1F14                     	;# 
  1471  1F15                     	;# 
  1472  1F20                     	;# 
  1473  1F21                     	;# 
  1474  1F22                     	;# 
  1475  1F23                     	;# 
  1476  1F24                     	;# 
  1477  1F25                     	;# 
  1478  1F38                     	;# 
  1479  1F39                     	;# 
  1480  1F3A                     	;# 
  1481  1F3B                     	;# 
  1482  1F3C                     	;# 
  1483  1F3D                     	;# 
  1484  1F3E                     	;# 
  1485  1F3F                     	;# 
  1486  1F4E                     	;# 
  1487  1F4F                     	;# 
  1488  1F50                     	;# 
  1489  1F51                     	;# 
  1490  1F52                     	;# 
  1491  1F53                     	;# 
  1492  1F54                     	;# 
  1493  1F55                     	;# 
  1494  1FE4                     	;# 
  1495  1FE5                     	;# 
  1496  1FE6                     	;# 
  1497  1FE7                     	;# 
  1498  1FE8                     	;# 
  1499  1FE8                     	;# 
  1500  1FE9                     	;# 
  1501  1FEA                     	;# 
  1502  1FEA                     	;# 
  1503  1FEB                     	;# 
  1504  1FED                     	;# 
  1505  1FEE                     	;# 
  1506  1FEF                     	;# 
  1507                           
  1508                           	psect	idataBANK1
  1509  03C1                     __pidataBANK1:	
  1510                           
  1511                           ;initializer for CW201x@cw_bat_config_info
  1512  03C1  3414               	retlw	20
  1513  03C2  34A6               	retlw	166
  1514  03C3  3470               	retlw	112
  1515  03C4  346C               	retlw	108
  1516  03C5  346C               	retlw	108
  1517  03C6  3467               	retlw	103
  1518  03C7  3464               	retlw	100
  1519  03C8  3462               	retlw	98
  1520  03C9  3460               	retlw	96
  1521  03CA  345C               	retlw	92
  1522  03CB  3459               	retlw	89
  1523  03CC  344E               	retlw	78
  1524  03CD  3450               	retlw	80
  1525  03CE  3442               	retlw	66
  1526  03CF  342E               	retlw	46
  1527  03D0  3426               	retlw	38
  1528  03D1  3425               	retlw	37
  1529  03D2  3424               	retlw	36
  1530  03D3  3427               	retlw	39
  1531  03D4  342E               	retlw	46
  1532  03D5  3441               	retlw	65
  1533  03D6  345A               	retlw	90
  1534  03D7  346D               	retlw	109
  1535  03D8  344C               	retlw	76
  1536  03D9  3439               	retlw	57
  1537  03DA  34D7               	retlw	215
  1538  03DB  3406               	retlw	6
  1539  03DC  3466               	retlw	102
  1540  03DD  3400               	retlw	0
  1541  03DE  3401               	retlw	1
  1542  03DF  3405               	retlw	5
  1543  03E0  3434               	retlw	52
  1544  03E1  3461               	retlw	97
  1545  03E2  3476               	retlw	118
  1546  03E3  3479               	retlw	121
  1547  03E4  347D               	retlw	125
  1548  03E5  3442               	retlw	66
  1549  03E6  341E               	retlw	30
  1550  03E7  34A4               	retlw	164
  1551  03E8  3400               	retlw	0
  1552  03E9  3427               	retlw	39
  1553  03EA  345A               	retlw	90
  1554  03EB  3452               	retlw	82
  1555  03EC  3487               	retlw	135
  1556  03ED  348F               	retlw	143
  1557  03EE  3491               	retlw	145
  1558  03EF  3494               	retlw	148
  1559  03F0  3452               	retlw	82
  1560  03F1  3482               	retlw	130
  1561  03F2  348C               	retlw	140
  1562  03F3  3492               	retlw	146
  1563  03F4  3496               	retlw	150
  1564  03F5  342B               	retlw	43
  1565  03F6  3459               	retlw	89
  1566  03F7  346E               	retlw	110
  1567  03F8  34CB               	retlw	203
  1568  03F9  342F               	retlw	47
  1569  03FA  347D               	retlw	125
  1570  03FB  3472               	retlw	114
  1571  03FC  34A5               	retlw	165
  1572  03FD  34B5               	retlw	181
  1573  03FE  34C1               	retlw	193
  1574  03FF  3494               	retlw	148
  1575  0400  3499               	retlw	153
  1576                           
  1577                           	psect	idataBANK2
  1578  0381                     __pidataBANK2:	
  1579                           ;initializer for _cw_bat_config_info
  1580                           
  1581  0381  3414               	retlw	20
  1582  0382  34A6               	retlw	166
  1583  0383  3470               	retlw	112
  1584  0384  346C               	retlw	108
  1585  0385  346C               	retlw	108
  1586  0386  3467               	retlw	103
  1587  0387  3464               	retlw	100
  1588  0388  3462               	retlw	98
  1589  0389  3460               	retlw	96
  1590  038A  345C               	retlw	92
  1591  038B  3459               	retlw	89
  1592  038C  344E               	retlw	78
  1593  038D  3450               	retlw	80
  1594  038E  3442               	retlw	66
  1595  038F  342E               	retlw	46
  1596  0390  3426               	retlw	38
  1597  0391  3425               	retlw	37
  1598  0392  3424               	retlw	36
  1599  0393  3427               	retlw	39
  1600  0394  342E               	retlw	46
  1601  0395  3441               	retlw	65
  1602  0396  345A               	retlw	90
  1603  0397  346D               	retlw	109
  1604  0398  344C               	retlw	76
  1605  0399  3439               	retlw	57
  1606  039A  34D7               	retlw	215
  1607  039B  3406               	retlw	6
  1608  039C  3466               	retlw	102
  1609  039D  3400               	retlw	0
  1610  039E  3401               	retlw	1
  1611  039F  3405               	retlw	5
  1612  03A0  3434               	retlw	52
  1613  03A1  3461               	retlw	97
  1614  03A2  3476               	retlw	118
  1615  03A3  3479               	retlw	121
  1616  03A4  347D               	retlw	125
  1617  03A5  3442               	retlw	66
  1618  03A6  341E               	retlw	30
  1619  03A7  34A4               	retlw	164
  1620  03A8  3400               	retlw	0
  1621  03A9  3427               	retlw	39
  1622  03AA  345A               	retlw	90
  1623  03AB  3452               	retlw	82
  1624  03AC  3487               	retlw	135
  1625  03AD  348F               	retlw	143
  1626  03AE  3491               	retlw	145
  1627  03AF  3494               	retlw	148
  1628  03B0  3452               	retlw	82
  1629  03B1  3482               	retlw	130
  1630  03B2  348C               	retlw	140
  1631  03B3  3492               	retlw	146
  1632  03B4  3496               	retlw	150
  1633  03B5  342B               	retlw	43
  1634  03B6  3459               	retlw	89
  1635  03B7  346E               	retlw	110
  1636  03B8  34CB               	retlw	203
  1637  03B9  342F               	retlw	47
  1638  03BA  347D               	retlw	125
  1639  03BB  3472               	retlw	114
  1640  03BC  34A5               	retlw	165
  1641  03BD  34B5               	retlw	181
  1642  03BE  34C1               	retlw	193
  1643  03BF  3494               	retlw	148
  1644  03C0  3499               	retlw	153
  1645  000E                     _PORTCbits	set	14
  1646  0014                     _TRISCbits	set	20
  1647  0018                     _LATAbits	set	24
  1648  001A                     _LATCbits	set	26
  1649  0014                     _TRISC	set	20
  1650  0012                     _TRISA	set	18
  1651  001A                     _LATC	set	26
  1652  0018                     _LATA	set	24
  1653  005F                     _GIE	set	95
  1654  011A                     _TX1REG	set	282
  1655  0119                     _RC1REG	set	281
  1656  011D                     _RC1STAbits	set	285
  1657  011C                     _SP1BRGH	set	284
  1658  011B                     _SP1BRGL	set	283
  1659  011E                     _TX1STA	set	286
  1660  011D                     _RC1STA	set	285
  1661  011F                     _BAUD1CON	set	287
  1662  070F                     _PIR3bits	set	1807
  1663  0892                     _OSCTUNE	set	2194
  1664  0890                     _OSCSTAT	set	2192
  1665  0893                     _OSCFRQ	set	2195
  1666  0891                     _OSCEN	set	2193
  1667  088F                     _OSCCON3	set	2191
  1668  088D                     _OSCCON1	set	2189
  1669  4480                     _PLLR	set	17536
  1670  1ECB                     _RX1DTPPSbits	set	7883
  1671  1E8F                     _PPSLOCKbits	set	7823
  1672  1E8F                     _PPSLOCK	set	7823
  1673  1F24                     _RC4PPS	set	7972
  1674  1F50                     _ODCONC	set	8016
  1675  1F3A                     _ODCONA	set	7994
  1676  1F4F                     _WPUC	set	8015
  1677  1F39                     _WPUA	set	7993
  1678  1F38                     _ANSELA	set	7992
  1679  1F4E                     _ANSELC	set	8014
  1680                           
  1681                           ; #config settings
  1682  0000                     
  1683                           	psect	cinit
  1684  07E4                     start_initialization:	
  1685  07E4                     __initialization:	
  1686                           
  1687                           ; Initialize objects allocated to BANK1
  1688  07E4  30C1               	movlw	low __pidataBANK1
  1689  07E5  0084               	movwf	4
  1690  07E6  3083               	movlw	(high __pidataBANK1)| (0+128)
  1691  07E7  0085               	movwf	5
  1692  07E8  30A0               	movlw	low __pdataBANK1
  1693  07E9  0086               	movwf	6
  1694  07EA  3000               	movlw	high __pdataBANK1
  1695  07EB  0087               	movwf	7
  1696  07EC  3040               	movlw	64
  1697  07ED  211E               	fcall	init_ram
  1698                           
  1699                           ; Initialize objects allocated to BANK2
  1700  07EE  3081               	movlw	low __pidataBANK2
  1701  07EF  0084               	movwf	4
  1702  07F0  3083               	movlw	(high __pidataBANK2)| (0+128)
  1703  07F1  0085               	movwf	5
  1704  07F2  3020               	movlw	low __pdataBANK2
  1705  07F3  0086               	movwf	6
  1706  07F4  3001               	movlw	high __pdataBANK2
  1707  07F5  0087               	movwf	7
  1708  07F6  3040               	movlw	64
  1709  07F7  211E               	fcall	init_ram
  1710                           
  1711                           ; Clear objects allocated to BANK0
  1712  07F8  3047               	movlw	low __pbssBANK0
  1713  07F9  0084               	movwf	4
  1714  07FA  3000               	movlw	high __pbssBANK0
  1715  07FB  0085               	movwf	5
  1716  07FC  3012               	movlw	18
  1717  07FD  2118               	fcall	clear_ram0
  1718  07FE                     end_of_initialization:	
  1719                           ;End of C runtime variable initialization code
  1720                           
  1721  07FE                     __end_of__initialization:	
  1722  07FE  0140               	movlb	0
  1723  07FF  2C8E               	ljmp	_main	;jump to C main() function
  1724                           
  1725                           	psect	bssBANK0
  1726  0047                     __pbssBANK0:	
  1727  0047                     _cw_bat:	
  1728  0047                     	ds	6
  1729  004D                     cw_get_vol@F83:	
  1730  004D                     	ds	2
  1731  004F                     _allow_charger_always_zero:	
  1732  004F                     	ds	2
  1733  0051                     _allow_no_charger_full:	
  1734  0051                     	ds	2
  1735  0053                     _no_charger_full_jump:	
  1736  0053                     	ds	2
  1737  0055                     _CHARGE:	
  1738  0055                     	ds	2
  1739  0057                     _reset_loop:	
  1740  0057                     	ds	1
  1741  0058                     _if_quickstart:	
  1742  0058                     	ds	1
  1743                           
  1744                           	psect	dataBANK1
  1745  00A0                     __pdataBANK1:	
  1746  00A0                     CW201x@cw_bat_config_info:	
  1747  00A0                     	ds	64
  1748                           
  1749                           	psect	dataBANK2
  1750  0120                     __pdataBANK2:	
  1751  0120                     _cw_bat_config_info:	
  1752  0120                     	ds	64
  1753                           
  1754                           	psect	inittext
  1755  011E                     init_ram:	
  1756  011E  00FE               	movwf	126
  1757  011F                     initloop:	
  1758  011F  0012               	moviw fsr0++
  1759  0120  001E               	movwi fsr1++
  1760  0121  0BFE               	decfsz	126,f
  1761  0122  291F               	goto	initloop
  1762  0123  3400               	retlw	0
  1763                           
  1764                           	psect	clrtext
  1765  0118                     clear_ram0:	
  1766                           ;	Called with FSR0 containing the base address, and
  1767                           ;	WREG with the size to clear
  1768                           
  1769  0118  0064               	clrwdt	;clear the watchdog before getting into this loop
  1770  0119                     clrloop0:	
  1771  0119  0180               	clrf	0	;clear RAM location pointed to by FSR
  1772  011A  3101               	addfsr 0,1
  1773  011B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1774  011C  2919               	goto	clrloop0	;have we reached the end yet?
  1775  011D  3400               	retlw	0	;all done for this memory range, return
  1776                           
  1777                           	psect	cstackCOMMON
  1778  0070                     __pcstackCOMMON:	
  1779  0070                     ?_PIN_MANAGER_Initialize:	
  1780  0070                     ??_PIN_MANAGER_Initialize:	
  1781                           ; 1 bytes @ 0x0
  1782                           
  1783  0070                     ?_OSCILLATOR_Initialize:	
  1784                           ; 1 bytes @ 0x0
  1785                           
  1786  0070                     ??_OSCILLATOR_Initialize:	
  1787                           ; 1 bytes @ 0x0
  1788                           
  1789  0070                     ?_cw_bat_init:	
  1790                           ; 1 bytes @ 0x0
  1791                           
  1792  0070                     ?_CW_Delay10ms:	
  1793                           ; 1 bytes @ 0x0
  1794                           
  1795  0070                     ?_cw_bat_work:	
  1796                           ; 1 bytes @ 0x0
  1797                           
  1798  0070                     ?_EUSART1_Initialize:	
  1799                           ; 1 bytes @ 0x0
  1800                           
  1801  0070                     ??_EUSART1_Initialize:	
  1802                           ; 1 bytes @ 0x0
  1803                           
  1804  0070                     ?_EUSART1_Write:	
  1805                           ; 1 bytes @ 0x0
  1806                           
  1807  0070                     ??_EUSART1_Write:	
  1808                           ; 1 bytes @ 0x0
  1809                           
  1810  0070                     ?_SYSTEM_Initialize:	
  1811                           ; 1 bytes @ 0x0
  1812                           
  1813  0070                     ?_main:	
  1814                           ; 1 bytes @ 0x0
  1815                           
  1816  0070                     ?_CW_Delay100us:	
  1817                           ; 1 bytes @ 0x0
  1818                           
  1819  0070                     ??_CW_Delay100us:	
  1820                           ; 1 bytes @ 0x0
  1821                           
  1822  0070                     ?_cw_update_config_info:	
  1823                           ; 1 bytes @ 0x0
  1824                           
  1825  0070                     ?_cw_init:	
  1826                           ; 1 bytes @ 0x0
  1827                           
  1828  0070                     ?_update_capacity:	
  1829                           ; 1 bytes @ 0x0
  1830                           
  1831  0070                     ?_update_vol:	
  1832                           ; 1 bytes @ 0x0
  1833                           
  1834  0070                     ?_update_usb_online:	
  1835                           ; 1 bytes @ 0x0
  1836                           
  1837  0070                     ??_update_usb_online:	
  1838                           ; 1 bytes @ 0x0
  1839                           
  1840  0070                     ?_Delay10us:	
  1841                           ; 1 bytes @ 0x0
  1842                           
  1843  0070                     ??_Delay10us:	
  1844                           ; 1 bytes @ 0x0
  1845                           
  1846  0070                     ?_start:	
  1847                           ; 1 bytes @ 0x0
  1848                           
  1849  0070                     ?_stop:	
  1850                           ; 1 bytes @ 0x0
  1851                           
  1852  0070                     ?_s_ack:	
  1853                           ; 1 bytes @ 0x0
  1854                           
  1855  0070                     ?_sn_ack:	
  1856                           ; 1 bytes @ 0x0
  1857                           
  1858  0070                     ?_write_byte:	
  1859                           ; 1 bytes @ 0x0
  1860                           
  1861  0070                     ?_read_byte:	
  1862                           ; 1 bytes @ 0x0
  1863                           
  1864  0070                     ?___lmul:	
  1865                           ; 1 bytes @ 0x0
  1866                           
  1867  0070                     EUSART1_Write@txData:	
  1868                           ; 4 bytes @ 0x0
  1869                           
  1870  0070                     PIN_MANAGER_Initialize@state:	
  1871                           ; 1 bytes @ 0x0
  1872                           
  1873  0070                     CW_Delay10ms@c:	
  1874                           ; 1 bytes @ 0x0
  1875                           
  1876  0070                     ___lmul@multiplier:	
  1877                           ; 2 bytes @ 0x0
  1878                           
  1879                           
  1880                           ; 4 bytes @ 0x0
  1881  0070                     	ds	1
  1882  0071                     ??_SYSTEM_Initialize:	
  1883  0071                     CW_Delay100us@a:	
  1884                           ; 1 bytes @ 0x1
  1885                           
  1886  0071                     Delay10us@a:	
  1887                           ; 1 bytes @ 0x1
  1888                           
  1889                           
  1890                           ; 1 bytes @ 0x1
  1891  0071                     	ds	1
  1892  0072                     ??_CW_Delay10ms:	
  1893  0072                     CW_Delay100us@b:	
  1894                           ; 1 bytes @ 0x2
  1895                           
  1896  0072                     Delay10us@b:	
  1897                           ; 1 bytes @ 0x2
  1898                           
  1899                           
  1900                           ; 1 bytes @ 0x2
  1901  0072                     	ds	1
  1902  0073                     CW_Delay10ms@a:	
  1903  0073                     CW_Delay100us@i:	
  1904                           ; 1 bytes @ 0x3
  1905                           
  1906  0073                     Delay10us@i:	
  1907                           ; 1 bytes @ 0x3
  1908                           
  1909                           
  1910                           ; 1 bytes @ 0x3
  1911  0073                     	ds	1
  1912  0074                     ??_start:	
  1913  0074                     ??_stop:	
  1914                           ; 1 bytes @ 0x4
  1915                           
  1916  0074                     ??_s_ack:	
  1917                           ; 1 bytes @ 0x4
  1918                           
  1919  0074                     ??_sn_ack:	
  1920                           ; 1 bytes @ 0x4
  1921                           
  1922  0074                     ??_write_byte:	
  1923                           ; 1 bytes @ 0x4
  1924                           
  1925  0074                     ??_read_byte:	
  1926                           ; 1 bytes @ 0x4
  1927                           
  1928  0074                     ?_r_ack:	
  1929                           ; 1 bytes @ 0x4
  1930                           
  1931  0074                     CW_Delay10ms@b:	
  1932                           ; 2 bytes @ 0x4
  1933                           
  1934  0074                     ___lmul@multiplicand:	
  1935                           ; 1 bytes @ 0x4
  1936                           
  1937                           
  1938                           ; 4 bytes @ 0x4
  1939  0074                     	ds	1
  1940  0075                     write_byte@w_data:	
  1941  0075                     read_byte@i:	
  1942                           ; 1 bytes @ 0x5
  1943                           
  1944                           
  1945                           ; 1 bytes @ 0x5
  1946  0075                     	ds	1
  1947  0076                     ??_r_ack:	
  1948  0076                     write_byte@i:	
  1949                           ; 1 bytes @ 0x6
  1950                           
  1951  0076                     read_byte@r_data:	
  1952                           ; 1 bytes @ 0x6
  1953                           
  1954                           
  1955                           ; 1 bytes @ 0x6
  1956  0076                     	ds	2
  1957  0078                     ??___lmul:	
  1958  0078                     r_ack@ack:	
  1959                           ; 1 bytes @ 0x8
  1960                           
  1961  0078                     ___lmul@product:	
  1962                           ; 2 bytes @ 0x8
  1963                           
  1964                           
  1965                           ; 4 bytes @ 0x8
  1966  0078                     	ds	2
  1967  007A                     ?_wait_r_ack:	
  1968                           
  1969                           ; 2 bytes @ 0xA
  1970  007A                     	ds	2
  1971  007C                     ??_cw_read:	
  1972  007C                     ??_cw_write:	
  1973                           ; 1 bytes @ 0xC
  1974                           
  1975  007C                     ??_cw_read_word:	
  1976                           ; 1 bytes @ 0xC
  1977                           
  1978  007C                     ??_wait_r_ack:	
  1979                           ; 1 bytes @ 0xC
  1980                           
  1981  007C                     ??___lldiv:	
  1982                           ; 1 bytes @ 0xC
  1983                           
  1984  007C                     cw_write@point_reg:	
  1985                           ; 1 bytes @ 0xC
  1986                           
  1987                           
  1988                           ; 1 bytes @ 0xC
  1989  007C                     	ds	1
  1990  007D                     cw_read@point_reg:	
  1991                           
  1992                           ; 1 bytes @ 0xD
  1993  007D                     	ds	1
  1994  007E                     ??_cw_bat_work:	
  1995  007E                     ??_update_vol:	
  1996                           ; 1 bytes @ 0xE
  1997                           
  1998                           
  1999                           	psect	cstackBANK0
  2000  0020                     __pcstackBANK0:	
  2001                           ; 1 bytes @ 0xE
  2002                           
  2003  0020                     ?___lldiv:	
  2004  0020                     wait_r_ack@ack:	
  2005                           ; 4 bytes @ 0x0
  2006                           
  2007  0020                     ___lldiv@divisor:	
  2008                           ; 2 bytes @ 0x0
  2009                           
  2010                           
  2011                           ; 4 bytes @ 0x0
  2012  0020                     	ds	2
  2013  0022                     wait_r_ack@i:	
  2014                           
  2015                           ; 2 bytes @ 0x2
  2016  0022                     	ds	2
  2017  0024                     ?_cw_read:	
  2018  0024                     ?_cw_write:	
  2019                           ; 2 bytes @ 0x4
  2020                           
  2021  0024                     ?_cw_read_word:	
  2022                           ; 2 bytes @ 0x4
  2023                           
  2024  0024                     cw_read@r_pdata:	
  2025                           ; 2 bytes @ 0x4
  2026                           
  2027  0024                     cw_read_word@r_pdata:	
  2028                           ; 1 bytes @ 0x4
  2029                           
  2030  0024                     cw_write@w_pdata:	
  2031                           ; 1 bytes @ 0x4
  2032                           
  2033  0024                     ___lldiv@dividend:	
  2034                           ; 1 bytes @ 0x4
  2035                           
  2036                           
  2037                           ; 4 bytes @ 0x4
  2038  0024                     	ds	1
  2039  0025                     cw_read_word@length:	
  2040                           
  2041                           ; 2 bytes @ 0x5
  2042  0025                     	ds	2
  2043  0027                     ??_cw_update_config_info:	
  2044  0027                     cw_read_word@point_reg:	
  2045                           ; 1 bytes @ 0x7
  2046                           
  2047                           
  2048                           ; 1 bytes @ 0x7
  2049  0027                     	ds	1
  2050  0028                     cw_update_config_info@reset_val:	
  2051  0028                     cw_read_word@count:	
  2052                           ; 1 bytes @ 0x8
  2053                           
  2054  0028                     ___lldiv@quotient:	
  2055                           ; 1 bytes @ 0x8
  2056                           
  2057                           
  2058                           ; 4 bytes @ 0x8
  2059  0028                     	ds	1
  2060  0029                     cw_update_config_info@ret:	
  2061                           
  2062                           ; 2 bytes @ 0x9
  2063  0029                     	ds	2
  2064  002B                     cw_update_config_info@i:	
  2065                           
  2066                           ; 1 bytes @ 0xB
  2067  002B                     	ds	1
  2068  002C                     cw_update_config_info@reg_val:	
  2069  002C                     ___lldiv@counter:	
  2070                           ; 1 bytes @ 0xC
  2071                           
  2072                           
  2073                           ; 1 bytes @ 0xC
  2074  002C                     	ds	1
  2075  002D                     ??_cw_init:	
  2076  002D                     ?_cw_get_vol:	
  2077                           ; 1 bytes @ 0xD
  2078                           
  2079                           
  2080                           ; 2 bytes @ 0xD
  2081  002D                     	ds	2
  2082  002F                     ??_cw_get_vol:	
  2083  002F                     cw_init@i:	
  2084                           ; 1 bytes @ 0xF
  2085                           
  2086                           
  2087                           ; 1 bytes @ 0xF
  2088  002F                     	ds	1
  2089  0030                     cw_init@ret:	
  2090                           
  2091                           ; 2 bytes @ 0x10
  2092  0030                     	ds	2
  2093  0032                     cw_init@reg_val:	
  2094                           
  2095                           ; 1 bytes @ 0x12
  2096  0032                     	ds	1
  2097  0033                     ??_cw_bat_init:	
  2098  0033                     ?_cw_por:	
  2099                           ; 1 bytes @ 0x13
  2100                           
  2101                           
  2102                           ; 2 bytes @ 0x13
  2103  0033                     	ds	1
  2104  0034                     cw_bat_init@loop:	
  2105  0034                     cw_get_vol@ret:	
  2106                           ; 1 bytes @ 0x14
  2107                           
  2108                           
  2109                           ; 2 bytes @ 0x14
  2110  0034                     	ds	1
  2111  0035                     ??_cw_por:	
  2112  0035                     cw_bat_init@ret:	
  2113                           ; 1 bytes @ 0x15
  2114                           
  2115                           
  2116                           ; 1 bytes @ 0x15
  2117  0035                     	ds	1
  2118  0036                     cw_get_vol@reg_val:	
  2119                           
  2120                           ; 2 bytes @ 0x16
  2121  0036                     	ds	1
  2122  0037                     cw_por@reset_val:	
  2123                           
  2124                           ; 1 bytes @ 0x17
  2125  0037                     	ds	1
  2126  0038                     cw_por@ret:	
  2127  0038                     cw_get_vol@ad_value_min:	
  2128                           ; 2 bytes @ 0x18
  2129                           
  2130                           
  2131                           ; 2 bytes @ 0x18
  2132  0038                     	ds	2
  2133  003A                     ?_cw_get_capacity:	
  2134  003A                     cw_get_vol@ad_value_max:	
  2135                           ; 2 bytes @ 0x1A
  2136                           
  2137                           
  2138                           ; 2 bytes @ 0x1A
  2139  003A                     	ds	2
  2140  003C                     ??_cw_get_capacity:	
  2141  003C                     cw_get_vol@ad_value:	
  2142                           ; 1 bytes @ 0x1C
  2143                           
  2144                           
  2145                           ; 4 bytes @ 0x1C
  2146  003C                     	ds	2
  2147  003E                     cw_get_capacity@cw_capacity:	
  2148                           
  2149                           ; 1 bytes @ 0x1E
  2150  003E                     	ds	1
  2151  003F                     cw_get_capacity@ret:	
  2152                           
  2153                           ; 2 bytes @ 0x1F
  2154  003F                     	ds	1
  2155  0040                     cw_get_vol@get_ad_times:	
  2156                           
  2157                           ; 1 bytes @ 0x20
  2158  0040                     	ds	1
  2159  0041                     cw_get_capacity@reg_val:	
  2160  0041                     cw_get_vol@ad_buff:	
  2161                           ; 1 bytes @ 0x21
  2162                           
  2163                           
  2164                           ; 2 bytes @ 0x21
  2165  0041                     	ds	1
  2166  0042                     ??_update_capacity:	
  2167                           
  2168                           ; 1 bytes @ 0x22
  2169  0042                     	ds	1
  2170  0043                     update_capacity@cw_capacity:	
  2171  0043                     update_vol@cw_voltage:	
  2172                           ; 2 bytes @ 0x23
  2173                           
  2174                           
  2175                           ; 2 bytes @ 0x23
  2176  0043                     	ds	2
  2177  0045                     ??_main:	
  2178                           
  2179                           ; 1 bytes @ 0x25
  2180  0045                     	ds	1
  2181  0046                     main@ret:	
  2182                           
  2183                           ; 1 bytes @ 0x26
  2184  0046                     	ds	1
  2185                           
  2186                           	psect	maintext
  2187  048E                     __pmaintext:	
  2188 ;;
  2189 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2190 ;;
  2191 ;; *************** function _main *****************
  2192 ;; Defined at:
  2193 ;;		line 53 in file "main.c"
  2194 ;; Parameters:    Size  Location     Type
  2195 ;;		None
  2196 ;; Auto vars:     Size  Location     Type
  2197 ;;  ret             1   38[BANK0 ] unsigned char 
  2198 ;;  send_char       1    0        unsigned char 
  2199 ;; Return value:  Size  Location     Type
  2200 ;;                  1    wreg      void 
  2201 ;; Registers used:
  2202 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2203 ;; Tracked objects:
  2204 ;;		On entry : B3F/0
  2205 ;;		On exit  : 0/0
  2206 ;;		Unchanged: 0/0
  2207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2208 ;;      Params:         0       0       0       0
  2209 ;;      Locals:         0       1       0       0
  2210 ;;      Temps:          0       1       0       0
  2211 ;;      Totals:         0       2       0       0
  2212 ;;Total ram usage:        2 bytes
  2213 ;; Hardware stack levels required when called:   10
  2214 ;; This function calls:
  2215 ;;		_CW_Delay10ms
  2216 ;;		_EUSART1_Write
  2217 ;;		_SYSTEM_Initialize
  2218 ;;		_cw_bat_init
  2219 ;;		_cw_bat_work
  2220 ;; This function is called by:
  2221 ;;		Startup code after reset
  2222 ;; This function uses a non-reentrant model
  2223 ;;
  2224                           
  2225                           
  2226                           ;psect for function _main
  2227  048E                     _main:	
  2228                           
  2229                           ;main.c: 56: unsigned char ret = 0;
  2230                           
  2231                           ;incstack = 0
  2232                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2233  048E  0140               	movlb	0	; select bank0
  2234  048F  01C6               	clrf	main@ret
  2235                           
  2236                           ;main.c: 57: uint8_t send_char;
  2237                           ;main.c: 58: SYSTEM_Initialize();
  2238  0490  2110               	fcall	_SYSTEM_Initialize
  2239                           
  2240                           ;main.c: 60: ret = cw_bat_init();
  2241  0491  21A9               	fcall	_cw_bat_init
  2242  0492  0140               	movlb	0	; select bank0
  2243  0493  00C5               	movwf	??_main
  2244  0494  0845               	movf	??_main,w
  2245  0495  00C6               	movwf	main@ret
  2246  0496  2CA4               	goto	l2401
  2247  0497                     l128:	
  2248                           ;main.c: 87: {
  2249                           ;main.c: 88: do { LATCbits.LATC2 = 0; } while(0);
  2250                           
  2251  0497  111A               	bcf	26,2	;volatile
  2252  0498  2C9A               	goto	L1
  2253  0499                     l138:	
  2254                           ;main.c: 94: {
  2255                           ;main.c: 95: do { LATCbits.LATC2 = 1; } while(0);
  2256                           
  2257                           ;main.c: 92: }
  2258                           
  2259                           ;main.c: 91: do { LATAbits.LATA4 = 0; } while(0);
  2260                           
  2261                           ;main.c: 90: do { LATAbits.LATA5 = 0; } while(0);
  2262                           
  2263                           ;main.c: 89: do { LATAbits.LATA2 = 0; } while(0);
  2264                           
  2265  0499  151A               	bsf	26,2	;volatile
  2266  049A                     L1:	
  2267                           
  2268                           ;main.c: 96: do { LATAbits.LATA2 = 0; } while(0);
  2269  049A  1118               	bcf	24,2	;volatile
  2270  049B  2C9E               	goto	L2
  2271  049C                     l148:	
  2272                           ;main.c: 101: {
  2273                           ;main.c: 102: do { LATCbits.LATC2 = 1; } while(0);
  2274                           
  2275                           ;main.c: 99: }
  2276                           
  2277                           ;main.c: 98: do { LATAbits.LATA4 = 0; } while(0);
  2278                           
  2279                           ;main.c: 97: do { LATAbits.LATA5 = 0; } while(0);
  2280                           
  2281  049C  151A               	bsf	26,2	;volatile
  2282                           
  2283                           ;main.c: 103: do { LATAbits.LATA2 = 1; } while(0);
  2284  049D  1518               	bsf	24,2	;volatile
  2285  049E                     L2:	
  2286                           
  2287                           ;main.c: 104: do { LATAbits.LATA5 = 0; } while(0);
  2288  049E  1298               	bcf	24,5	;volatile
  2289  049F  2CA3               	goto	L3
  2290  04A0                     l158:	
  2291                           ;main.c: 108: {
  2292                           ;main.c: 109: do { LATCbits.LATC2 = 1; } while(0);
  2293                           
  2294                           ;main.c: 106: }
  2295                           
  2296                           ;main.c: 105: do { LATAbits.LATA4 = 0; } while(0);
  2297                           
  2298  04A0  151A               	bsf	26,2	;volatile
  2299                           
  2300                           ;main.c: 110: do { LATAbits.LATA2 = 1; } while(0);
  2301  04A1  1518               	bsf	24,2	;volatile
  2302                           
  2303                           ;main.c: 111: do { LATAbits.LATA5 = 1; } while(0);
  2304  04A2  1698               	bsf	24,5	;volatile
  2305  04A3                     L3:	
  2306                           
  2307                           ;main.c: 112: do { LATAbits.LATA4 = 0; } while(0);
  2308  04A3  1218               	bcf	24,4	;volatile
  2309  04A4                     l2401:	
  2310                           ;main.c: 76: while (1)
  2311                           
  2312                           ;main.c: 113: }
  2313                           
  2314                           
  2315                           ;main.c: 77: {
  2316                           ;main.c: 79: CW_Delay10ms(100);
  2317  04A4  3064               	movlw	100
  2318  04A5  00F0               	movwf	CW_Delay10ms@c
  2319  04A6  3000               	movlw	0
  2320  04A7  00F1               	movwf	CW_Delay10ms@c+1
  2321  04A8  2223               	fcall	_CW_Delay10ms
  2322                           
  2323                           ;main.c: 80: do { LATCbits.LATC3 = 1; } while(0);
  2324  04A9  0140               	movlb	0	; select bank0
  2325  04AA  159A               	bsf	26,3	;volatile
  2326                           
  2327                           ;main.c: 81: cw_bat_work();
  2328  04AB  2114               	fcall	_cw_bat_work
  2329                           
  2330                           ;main.c: 82: EUSART1_Write(cw_bat.voltage);
  2331  04AC  0140               	movlb	0	; select bank0
  2332  04AD  084A               	movf	_cw_bat+3,w
  2333  04AE  2124               	fcall	_EUSART1_Write
  2334                           
  2335                           ;main.c: 83: EUSART1_Write(cw_bat.capacity);
  2336  04AF  0140               	movlb	0	; select bank0
  2337  04B0  0848               	movf	_cw_bat+1,w
  2338  04B1  2124               	fcall	_EUSART1_Write
  2339                           
  2340                           ;main.c: 84: CW_Delay10ms(1);
  2341  04B2  3001               	movlw	1
  2342  04B3  00F0               	movwf	CW_Delay10ms@c
  2343  04B4  3000               	movlw	0
  2344  04B5  00F1               	movwf	CW_Delay10ms@c+1
  2345  04B6  2223               	fcall	_CW_Delay10ms
  2346                           
  2347                           ;main.c: 85: do { LATCbits.LATC3 = 0; } while(0);
  2348  04B7  0140               	movlb	0	; select bank0
  2349  04B8  119A               	bcf	26,3	;volatile
  2350                           
  2351                           ;main.c: 86: if(cw_bat.capacity >= 80)
  2352  04B9  3000               	movlw	0
  2353  04BA  0249               	subwf	_cw_bat+2,w
  2354  04BB  3050               	movlw	80
  2355  04BC  1903               	skipnz
  2356  04BD  0248               	subwf	_cw_bat+1,w
  2357  04BE  1803               	btfsc	3,0
  2358  04BF  2C97               	goto	l128
  2359                           
  2360                           ;main.c: 93: else if(cw_bat.capacity >= 60)
  2361  04C0  3000               	movlw	0
  2362  04C1  0249               	subwf	_cw_bat+2,w
  2363  04C2  303C               	movlw	60
  2364  04C3  1903               	skipnz
  2365  04C4  0248               	subwf	_cw_bat+1,w
  2366  04C5  1803               	btfsc	3,0
  2367  04C6  2C99               	goto	l138
  2368                           
  2369                           ;main.c: 100: else if(cw_bat.capacity >= 40)
  2370  04C7  3000               	movlw	0
  2371  04C8  0249               	subwf	_cw_bat+2,w
  2372  04C9  3028               	movlw	40
  2373  04CA  1903               	skipnz
  2374  04CB  0248               	subwf	_cw_bat+1,w
  2375  04CC  1803               	btfsc	3,0
  2376  04CD  2C9C               	goto	l148
  2377                           
  2378                           ;main.c: 107: else if(cw_bat.capacity >= 20)
  2379  04CE  3000               	movlw	0
  2380  04CF  0249               	subwf	_cw_bat+2,w
  2381  04D0  3014               	movlw	20
  2382  04D1  1903               	skipnz
  2383  04D2  0248               	subwf	_cw_bat+1,w
  2384  04D3  1803               	btfsc	3,0
  2385  04D4  2CA0               	goto	l158
  2386                           
  2387                           ;main.c: 114: else
  2388                           ;main.c: 115: {
  2389                           ;main.c: 116: do { LATCbits.LATC2 = 1; } while(0);
  2390  04D5  151A               	bsf	26,2	;volatile
  2391                           
  2392                           ;main.c: 117: do { LATAbits.LATA2 = 1; } while(0);
  2393  04D6  1518               	bsf	24,2	;volatile
  2394                           
  2395                           ;main.c: 118: do { LATAbits.LATA5 = 1; } while(0);
  2396  04D7  1698               	bsf	24,5	;volatile
  2397                           
  2398                           ;main.c: 119: do { LATAbits.LATA4 = 1; } while(0);
  2399  04D8  1618               	bsf	24,4	;volatile
  2400  04D9  2CA4               	goto	l2401
  2401  04DA                     __end_of_main:	
  2402                           
  2403                           	psect	text1
  2404  0114                     __ptext1:	
  2405 ;; *************** function _cw_bat_work *****************
  2406 ;; Defined at:
  2407 ;;		line 530 in file "CW201x.c"
  2408 ;; Parameters:    Size  Location     Type
  2409 ;;		None
  2410 ;; Auto vars:     Size  Location     Type
  2411 ;;		None
  2412 ;; Return value:  Size  Location     Type
  2413 ;;                  1    wreg      void 
  2414 ;; Registers used:
  2415 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2416 ;; Tracked objects:
  2417 ;;		On entry : 0/0
  2418 ;;		On exit  : 0/0
  2419 ;;		Unchanged: 0/0
  2420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2421 ;;      Params:         0       0       0       0
  2422 ;;      Locals:         0       0       0       0
  2423 ;;      Temps:          0       0       0       0
  2424 ;;      Totals:         0       0       0       0
  2425 ;;Total ram usage:        0 bytes
  2426 ;; Hardware stack levels used:    1
  2427 ;; Hardware stack levels required when called:    9
  2428 ;; This function calls:
  2429 ;;		_update_capacity
  2430 ;;		_update_usb_online
  2431 ;;		_update_vol
  2432 ;; This function is called by:
  2433 ;;		_main
  2434 ;; This function uses a non-reentrant model
  2435 ;;
  2436                           
  2437                           
  2438                           ;psect for function _cw_bat_work
  2439  0114                     _cw_bat_work:	
  2440                           
  2441                           ;CW201x.c: 532: update_usb_online();
  2442                           
  2443                           ;incstack = 0
  2444                           ; Regs used in _cw_bat_work: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2445  0114  212C               	fcall	_update_usb_online
  2446                           
  2447                           ;CW201x.c: 533: update_capacity();
  2448  0115  2244               	fcall	_update_capacity
  2449                           
  2450                           ;CW201x.c: 534: update_vol();
  2451  0116  2192               	fcall	_update_vol
  2452  0117  0008               	return
  2453  0118                     __end_of_cw_bat_work:	
  2454                           
  2455                           	psect	text2
  2456  0192                     __ptext2:	
  2457 ;; *************** function _update_vol *****************
  2458 ;; Defined at:
  2459 ;;		line 483 in file "CW201x.c"
  2460 ;; Parameters:    Size  Location     Type
  2461 ;;		None
  2462 ;; Auto vars:     Size  Location     Type
  2463 ;;  cw_voltage      2   35[BANK0 ] unsigned int 
  2464 ;; Return value:  Size  Location     Type
  2465 ;;                  1    wreg      void 
  2466 ;; Registers used:
  2467 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2468 ;; Tracked objects:
  2469 ;;		On entry : 0/0
  2470 ;;		On exit  : 0/0
  2471 ;;		Unchanged: 0/0
  2472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2473 ;;      Params:         0       0       0       0
  2474 ;;      Locals:         0       2       0       0
  2475 ;;      Temps:          0       0       0       0
  2476 ;;      Totals:         0       2       0       0
  2477 ;;Total ram usage:        2 bytes
  2478 ;; Hardware stack levels used:    1
  2479 ;; Hardware stack levels required when called:    5
  2480 ;; This function calls:
  2481 ;;		_cw_get_vol
  2482 ;; This function is called by:
  2483 ;;		_cw_bat_work
  2484 ;; This function uses a non-reentrant model
  2485 ;;
  2486                           
  2487                           
  2488                           ;psect for function _update_vol
  2489  0192                     _update_vol:	
  2490                           
  2491                           ;CW201x.c: 485: unsigned int cw_voltage;
  2492                           ;CW201x.c: 486: cw_voltage = cw_get_vol();
  2493                           
  2494                           ;incstack = 0
  2495                           ; Regs used in _update_vol: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2496  0192  264D               	fcall	_cw_get_vol
  2497  0193  0140               	movlb	0	; select bank0
  2498  0194  082E               	movf	?_cw_get_vol+1,w
  2499  0195  00C4               	movwf	update_vol@cw_voltage+1
  2500  0196  082D               	movf	?_cw_get_vol,w
  2501  0197  00C3               	movwf	update_vol@cw_voltage
  2502                           
  2503                           ;CW201x.c: 487: if(cw_voltage == 1){
  2504  0198  0343               	decf	update_vol@cw_voltage,w
  2505  0199  0444               	iorwf	update_vol@cw_voltage+1,w
  2506  019A  1903               	btfsc	3,2
  2507  019B  0008               	return
  2508                           
  2509                           ;CW201x.c: 490: }else if(cw_bat.voltage != cw_voltage)
  2510  019C  0844               	movf	update_vol@cw_voltage+1,w
  2511  019D  064B               	xorwf	_cw_bat+4,w
  2512  019E  1D03               	skipz
  2513  019F  29A2               	goto	u2265
  2514  01A0  0843               	movf	update_vol@cw_voltage,w
  2515  01A1  064A               	xorwf	_cw_bat+3,w
  2516  01A2                     u2265:	
  2517  01A2  1903               	skipnz
  2518  01A3  0008               	return
  2519                           
  2520                           ;CW201x.c: 491: {
  2521                           ;CW201x.c: 492: cw_bat.voltage = cw_voltage;
  2522  01A4  0844               	movf	update_vol@cw_voltage+1,w
  2523  01A5  00CB               	movwf	_cw_bat+4
  2524  01A6  0843               	movf	update_vol@cw_voltage,w
  2525  01A7  00CA               	movwf	_cw_bat+3
  2526  01A8  0008               	return
  2527  01A9                     __end_of_update_vol:	
  2528                           
  2529                           	psect	text3
  2530  064D                     __ptext3:	
  2531 ;; *************** function _cw_get_vol *****************
  2532 ;; Defined at:
  2533 ;;		line 409 in file "CW201x.c"
  2534 ;; Parameters:    Size  Location     Type
  2535 ;;		None
  2536 ;; Auto vars:     Size  Location     Type
  2537 ;;  ad_value        4   28[BANK0 ] unsigned long 
  2538 ;;  ad_buff         2   33[BANK0 ] unsigned int 
  2539 ;;  reg_val         2   22[BANK0 ] unsigned char [2]
  2540 ;;  ad_value_max    2   26[BANK0 ] unsigned int 
  2541 ;;  ad_value_min    2   24[BANK0 ] unsigned int 
  2542 ;;  ret             2   20[BANK0 ] int 
  2543 ;;  get_ad_times    1   32[BANK0 ] unsigned char 
  2544 ;; Return value:  Size  Location     Type
  2545 ;;                  2   13[BANK0 ] unsigned int 
  2546 ;; Registers used:
  2547 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2548 ;; Tracked objects:
  2549 ;;		On entry : 0/0
  2550 ;;		On exit  : 0/0
  2551 ;;		Unchanged: 0/0
  2552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2553 ;;      Params:         0       2       0       0
  2554 ;;      Locals:         0      15       0       0
  2555 ;;      Temps:          0       5       0       0
  2556 ;;      Totals:         0      22       0       0
  2557 ;;Total ram usage:       22 bytes
  2558 ;; Hardware stack levels used:    1
  2559 ;; Hardware stack levels required when called:    4
  2560 ;; This function calls:
  2561 ;;		___lldiv
  2562 ;;		___lmul
  2563 ;;		_cw_read_word
  2564 ;; This function is called by:
  2565 ;;		_update_vol
  2566 ;; This function uses a non-reentrant model
  2567 ;;
  2568                           
  2569                           
  2570                           ;psect for function _cw_get_vol
  2571  064D                     _cw_get_vol:	
  2572                           
  2573                           ;CW201x.c: 411: int ret = 0;
  2574                           
  2575                           ;incstack = 0
  2576                           ; Regs used in _cw_get_vol: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2577  064D  0140               	movlb	0	; select bank0
  2578  064E  01B4               	clrf	cw_get_vol@ret
  2579  064F  01B5               	clrf	cw_get_vol@ret+1
  2580                           
  2581                           ;CW201x.c: 412: unsigned char get_ad_times = 0;
  2582  0650  01C0               	clrf	cw_get_vol@get_ad_times
  2583                           
  2584                           ;CW201x.c: 413: unsigned char reg_val[2] = {0 , 0};
  2585  0651  084E               	movf	cw_get_vol@F83+1,w
  2586  0652  00B7               	movwf	cw_get_vol@reg_val+1
  2587  0653  084D               	movf	cw_get_vol@F83,w
  2588  0654  00B6               	movwf	cw_get_vol@reg_val
  2589                           
  2590                           ;CW201x.c: 414: unsigned long ad_value = 0;
  2591  0655  3000               	movlw	0
  2592  0656  00BF               	movwf	cw_get_vol@ad_value+3
  2593  0657  3000               	movlw	0
  2594  0658  00BE               	movwf	cw_get_vol@ad_value+2
  2595  0659  3000               	movlw	0
  2596  065A  00BD               	movwf	cw_get_vol@ad_value+1
  2597  065B  3000               	movlw	0
  2598  065C  00BC               	movwf	cw_get_vol@ad_value
  2599                           
  2600                           ;CW201x.c: 415: unsigned int ad_buff = 0;
  2601  065D  01C1               	clrf	cw_get_vol@ad_buff
  2602  065E  01C2               	clrf	cw_get_vol@ad_buff+1
  2603                           
  2604                           ;CW201x.c: 416: unsigned int ad_value_min = 0;
  2605  065F  01B8               	clrf	cw_get_vol@ad_value_min
  2606  0660  01B9               	clrf	cw_get_vol@ad_value_min+1
  2607                           
  2608                           ;CW201x.c: 417: unsigned int ad_value_max = 0;
  2609  0661  01BA               	clrf	cw_get_vol@ad_value_max
  2610  0662  01BB               	clrf	cw_get_vol@ad_value_max+1
  2611                           
  2612                           ;CW201x.c: 419: for(get_ad_times = 0; get_ad_times < 3; get_ad_times++)
  2613  0663  01C0               	clrf	cw_get_vol@get_ad_times
  2614  0664  3003               	movlw	3
  2615  0665  0240               	subwf	cw_get_vol@get_ad_times,w
  2616  0666  1803               	btfsc	3,0
  2617  0667  2EC1               	goto	l2243
  2618  0668                     l2223:	
  2619                           
  2620                           ;CW201x.c: 420: {
  2621                           ;CW201x.c: 421: ret = cw_read_word(0x2, &reg_val[0],2);
  2622  0668  3036               	movlw	(low (cw_get_vol@reg_val| 0))& (0+255)
  2623  0669  00AF               	movwf	??_cw_get_vol
  2624  066A  082F               	movf	??_cw_get_vol,w
  2625  066B  00A4               	movwf	cw_read_word@r_pdata
  2626  066C  3002               	movlw	2
  2627  066D  00A5               	movwf	cw_read_word@length
  2628  066E  3000               	movlw	0
  2629  066F  00A6               	movwf	cw_read_word@length+1
  2630  0670  3002               	movlw	2
  2631  0671  252D               	fcall	_cw_read_word
  2632  0672  0140               	movlb	0	; select bank0
  2633  0673  0825               	movf	?_cw_read_word+1,w
  2634  0674  00B5               	movwf	cw_get_vol@ret+1
  2635  0675  0824               	movf	?_cw_read_word,w
  2636  0676  00B4               	movwf	cw_get_vol@ret
  2637                           
  2638                           ;CW201x.c: 422: if(ret)
  2639  0677  0834               	movf	cw_get_vol@ret,w
  2640  0678  0435               	iorwf	cw_get_vol@ret+1,w
  2641  0679  1903               	btfsc	3,2
  2642  067A  2E80               	goto	l2231
  2643                           
  2644                           ;CW201x.c: 423: {
  2645                           ;CW201x.c: 424: return 1;
  2646  067B  3001               	movlw	1
  2647  067C  00AD               	movwf	?_cw_get_vol
  2648  067D  3000               	movlw	0
  2649  067E  00AE               	movwf	?_cw_get_vol+1
  2650  067F  0008               	return
  2651  0680                     l2231:	
  2652                           
  2653                           ;CW201x.c: 425: }
  2654                           ;CW201x.c: 426: ad_buff = (reg_val[0] << 8) + reg_val[1];
  2655  0680  0837               	movf	cw_get_vol@reg_val+1,w
  2656  0681  00AF               	movwf	??_cw_get_vol
  2657  0682  01B0               	clrf	??_cw_get_vol+1
  2658  0683  0836               	movf	cw_get_vol@reg_val,w
  2659  0684  00B1               	movwf	??_cw_get_vol+2
  2660  0685  01B2               	clrf	??_cw_get_vol+3
  2661  0686  0831               	movf	??_cw_get_vol+2,w
  2662  0687  00B2               	movwf	??_cw_get_vol+3
  2663  0688  01B1               	clrf	??_cw_get_vol+2
  2664  0689  082F               	movf	??_cw_get_vol,w
  2665  068A  0731               	addwf	??_cw_get_vol+2,w
  2666  068B  00C1               	movwf	cw_get_vol@ad_buff
  2667  068C  0830               	movf	??_cw_get_vol+1,w
  2668  068D  3D32               	addwfc	??_cw_get_vol+3,w
  2669  068E  00C2               	movwf	cw_get_vol@ad_buff+1
  2670                           
  2671                           ;CW201x.c: 428: if(get_ad_times == 0)
  2672  068F  0840               	movf	cw_get_vol@get_ad_times,w
  2673  0690  1D03               	btfss	3,2
  2674  0691  2E9A               	goto	l279
  2675                           
  2676                           ;CW201x.c: 429: {
  2677                           ;CW201x.c: 430: ad_value_min = ad_buff;
  2678  0692  0842               	movf	cw_get_vol@ad_buff+1,w
  2679  0693  00B9               	movwf	cw_get_vol@ad_value_min+1
  2680  0694  0841               	movf	cw_get_vol@ad_buff,w
  2681  0695  00B8               	movwf	cw_get_vol@ad_value_min
  2682                           
  2683                           ;CW201x.c: 431: ad_value_max = ad_buff;
  2684  0696  0842               	movf	cw_get_vol@ad_buff+1,w
  2685  0697  00BB               	movwf	cw_get_vol@ad_value_max+1
  2686  0698  0841               	movf	cw_get_vol@ad_buff,w
  2687  0699  00BA               	movwf	cw_get_vol@ad_value_max
  2688  069A                     l279:	
  2689                           
  2690                           ;CW201x.c: 432: }
  2691                           ;CW201x.c: 433: if(ad_buff < ad_value_min)
  2692  069A  0839               	movf	cw_get_vol@ad_value_min+1,w
  2693  069B  0242               	subwf	cw_get_vol@ad_buff+1,w
  2694  069C  1D03               	skipz
  2695  069D  2EA0               	goto	u2065
  2696  069E  0838               	movf	cw_get_vol@ad_value_min,w
  2697  069F  0241               	subwf	cw_get_vol@ad_buff,w
  2698  06A0                     u2065:	
  2699  06A0  1803               	skipnc
  2700  06A1  2EA6               	goto	l280
  2701                           
  2702                           ;CW201x.c: 434: {
  2703                           ;CW201x.c: 435: ad_value_min = ad_buff;
  2704  06A2  0842               	movf	cw_get_vol@ad_buff+1,w
  2705  06A3  00B9               	movwf	cw_get_vol@ad_value_min+1
  2706  06A4  0841               	movf	cw_get_vol@ad_buff,w
  2707  06A5  00B8               	movwf	cw_get_vol@ad_value_min
  2708  06A6                     l280:	
  2709                           
  2710                           ;CW201x.c: 436: }
  2711                           ;CW201x.c: 437: if(ad_buff > ad_value_max)
  2712  06A6  0842               	movf	cw_get_vol@ad_buff+1,w
  2713  06A7  023B               	subwf	cw_get_vol@ad_value_max+1,w
  2714  06A8  1D03               	skipz
  2715  06A9  2EAC               	goto	u2075
  2716  06AA  0841               	movf	cw_get_vol@ad_buff,w
  2717  06AB  023A               	subwf	cw_get_vol@ad_value_max,w
  2718  06AC                     u2075:	
  2719  06AC  1803               	skipnc
  2720  06AD  2EB2               	goto	l281
  2721                           
  2722                           ;CW201x.c: 438: {
  2723                           ;CW201x.c: 439: ad_value_max = ad_buff;
  2724  06AE  0842               	movf	cw_get_vol@ad_buff+1,w
  2725  06AF  00BB               	movwf	cw_get_vol@ad_value_max+1
  2726  06B0  0841               	movf	cw_get_vol@ad_buff,w
  2727  06B1  00BA               	movwf	cw_get_vol@ad_value_max
  2728  06B2                     l281:	
  2729                           
  2730                           ;CW201x.c: 440: }
  2731                           ;CW201x.c: 441: ad_value += ad_buff;
  2732  06B2  0841               	movf	cw_get_vol@ad_buff,w
  2733  06B3  07BC               	addwf	cw_get_vol@ad_value,f
  2734  06B4  0842               	movf	cw_get_vol@ad_buff+1,w
  2735  06B5  3DBD               	addwfc	cw_get_vol@ad_value+1,f
  2736  06B6  3000               	movlw	0
  2737  06B7  3DBE               	addwfc	cw_get_vol@ad_value+2,f
  2738  06B8  3DBF               	addwfc	cw_get_vol@ad_value+3,f
  2739  06B9  3001               	movlw	1
  2740  06BA  00AF               	movwf	??_cw_get_vol
  2741  06BB  082F               	movf	??_cw_get_vol,w
  2742  06BC  07C0               	addwf	cw_get_vol@get_ad_times,f
  2743  06BD  3003               	movlw	3
  2744  06BE  0240               	subwf	cw_get_vol@get_ad_times,w
  2745  06BF  1C03               	skipc
  2746  06C0  2E68               	goto	l2223
  2747  06C1                     l2243:	
  2748                           
  2749                           ;CW201x.c: 442: }
  2750                           ;CW201x.c: 443: ad_value -= ad_value_min;
  2751  06C1  0838               	movf	cw_get_vol@ad_value_min,w
  2752  06C2  00AF               	movwf	??_cw_get_vol
  2753  06C3  0839               	movf	cw_get_vol@ad_value_min+1,w
  2754  06C4  00B0               	movwf	??_cw_get_vol+1
  2755  06C5  01B1               	clrf	??_cw_get_vol+2
  2756  06C6  01B2               	clrf	??_cw_get_vol+3
  2757  06C7  082F               	movf	??_cw_get_vol,w
  2758  06C8  02BC               	subwf	cw_get_vol@ad_value,f
  2759  06C9  0830               	movf	??_cw_get_vol+1,w
  2760  06CA  3BBD               	subwfb	cw_get_vol@ad_value+1,f
  2761  06CB  0831               	movf	??_cw_get_vol+2,w
  2762  06CC  3BBE               	subwfb	cw_get_vol@ad_value+2,f
  2763  06CD  0832               	movf	??_cw_get_vol+3,w
  2764  06CE  3BBF               	subwfb	cw_get_vol@ad_value+3,f
  2765                           
  2766                           ;CW201x.c: 444: ad_value -= ad_value_max;
  2767  06CF  083A               	movf	cw_get_vol@ad_value_max,w
  2768  06D0  00AF               	movwf	??_cw_get_vol
  2769  06D1  083B               	movf	cw_get_vol@ad_value_max+1,w
  2770  06D2  00B0               	movwf	??_cw_get_vol+1
  2771  06D3  01B1               	clrf	??_cw_get_vol+2
  2772  06D4  01B2               	clrf	??_cw_get_vol+3
  2773  06D5  082F               	movf	??_cw_get_vol,w
  2774  06D6  02BC               	subwf	cw_get_vol@ad_value,f
  2775  06D7  0830               	movf	??_cw_get_vol+1,w
  2776  06D8  3BBD               	subwfb	cw_get_vol@ad_value+1,f
  2777  06D9  0831               	movf	??_cw_get_vol+2,w
  2778  06DA  3BBE               	subwfb	cw_get_vol@ad_value+2,f
  2779  06DB  0832               	movf	??_cw_get_vol+3,w
  2780  06DC  3BBF               	subwfb	cw_get_vol@ad_value+3,f
  2781                           
  2782                           ;CW201x.c: 445: ad_value = ad_value * 305 / 100000;
  2783  06DD  3000               	movlw	0
  2784  06DE  00A3               	movwf	___lldiv@divisor+3
  2785  06DF  3001               	movlw	1
  2786  06E0  00A2               	movwf	___lldiv@divisor+2
  2787  06E1  3086               	movlw	134
  2788  06E2  00A1               	movwf	___lldiv@divisor+1
  2789  06E3  30A0               	movlw	160
  2790  06E4  00A0               	movwf	___lldiv@divisor
  2791  06E5  083F               	movf	cw_get_vol@ad_value+3,w
  2792  06E6  00F3               	movwf	___lmul@multiplier+3
  2793  06E7  083E               	movf	cw_get_vol@ad_value+2,w
  2794  06E8  00F2               	movwf	___lmul@multiplier+2
  2795  06E9  083D               	movf	cw_get_vol@ad_value+1,w
  2796  06EA  00F1               	movwf	___lmul@multiplier+1
  2797  06EB  083C               	movf	cw_get_vol@ad_value,w
  2798  06EC  00F0               	movwf	___lmul@multiplier
  2799  06ED  3000               	movlw	0
  2800  06EE  00F7               	movwf	___lmul@multiplicand+3
  2801  06EF  3000               	movlw	0
  2802  06F0  00F6               	movwf	___lmul@multiplicand+2
  2803  06F1  3001               	movlw	1
  2804  06F2  00F5               	movwf	___lmul@multiplicand+1
  2805  06F3  3031               	movlw	49
  2806  06F4  00F4               	movwf	___lmul@multiplicand
  2807  06F5  22B6               	fcall	___lmul
  2808  06F6  0873               	movf	?___lmul+3,w
  2809  06F7  0140               	movlb	0	; select bank0
  2810  06F8  00A7               	movwf	___lldiv@dividend+3
  2811  06F9  0872               	movf	?___lmul+2,w
  2812  06FA  00A6               	movwf	___lldiv@dividend+2
  2813  06FB  0871               	movf	?___lmul+1,w
  2814  06FC  00A5               	movwf	___lldiv@dividend+1
  2815  06FD  0870               	movf	?___lmul,w
  2816  06FE  00A4               	movwf	___lldiv@dividend
  2817  06FF  24DA               	fcall	___lldiv
  2818  0700  0140               	movlb	0	; select bank0
  2819  0701  0823               	movf	?___lldiv+3,w
  2820  0702  00BF               	movwf	cw_get_vol@ad_value+3
  2821  0703  0822               	movf	?___lldiv+2,w
  2822  0704  00BE               	movwf	cw_get_vol@ad_value+2
  2823  0705  0821               	movf	?___lldiv+1,w
  2824  0706  00BD               	movwf	cw_get_vol@ad_value+1
  2825  0707  0820               	movf	?___lldiv,w
  2826  0708  00BC               	movwf	cw_get_vol@ad_value
  2827                           
  2828                           ;CW201x.c: 446: return(ad_value);
  2829  0709  083D               	movf	cw_get_vol@ad_value+1,w
  2830  070A  00AE               	movwf	?_cw_get_vol+1
  2831  070B  083C               	movf	cw_get_vol@ad_value,w
  2832  070C  00AD               	movwf	?_cw_get_vol
  2833  070D  0008               	return
  2834  070E                     __end_of_cw_get_vol:	
  2835                           
  2836                           	psect	text4
  2837  052D                     __ptext4:	
  2838 ;; *************** function _cw_read_word *****************
  2839 ;; Defined at:
  2840 ;;		line 189 in file "iic.c"
  2841 ;; Parameters:    Size  Location     Type
  2842 ;;  point_reg       1    wreg     unsigned char 
  2843 ;;  r_pdata         1    4[BANK0 ] PTR unsigned char 
  2844 ;;		 -> cw_get_vol@reg_val(2), 
  2845 ;;  length          2    5[BANK0 ] unsigned int 
  2846 ;; Auto vars:     Size  Location     Type
  2847 ;;  point_reg       1    7[BANK0 ] unsigned char 
  2848 ;;  count           1    8[BANK0 ] unsigned char 
  2849 ;; Return value:  Size  Location     Type
  2850 ;;                  2    4[BANK0 ] int 
  2851 ;; Registers used:
  2852 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2853 ;; Tracked objects:
  2854 ;;		On entry : 0/0
  2855 ;;		On exit  : 0/0
  2856 ;;		Unchanged: 0/0
  2857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2858 ;;      Params:         0       3       0       0
  2859 ;;      Locals:         0       2       0       0
  2860 ;;      Temps:          2       0       0       0
  2861 ;;      Totals:         2       5       0       0
  2862 ;;Total ram usage:        7 bytes
  2863 ;; Hardware stack levels used:    1
  2864 ;; Hardware stack levels required when called:    3
  2865 ;; This function calls:
  2866 ;;		_read_byte
  2867 ;;		_s_ack
  2868 ;;		_sn_ack
  2869 ;;		_start
  2870 ;;		_stop
  2871 ;;		_wait_r_ack
  2872 ;;		_write_byte
  2873 ;; This function is called by:
  2874 ;;		_cw_get_vol
  2875 ;; This function uses a non-reentrant model
  2876 ;;
  2877                           
  2878                           
  2879                           ;psect for function _cw_read_word
  2880  052D                     _cw_read_word:	
  2881                           
  2882                           ;incstack = 0
  2883                           ; Regs used in _cw_read_word: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2884                           ;cw_read_word@point_reg stored from wreg
  2885  052D  0140               	movlb	0	; select bank0
  2886  052E  00A7               	movwf	cw_read_word@point_reg
  2887                           
  2888                           ;iic.c: 191: unsigned char count;
  2889                           ;iic.c: 193: start();
  2890  052F  2141               	fcall	_start
  2891                           
  2892                           ;iic.c: 194: write_byte(0xc4);
  2893  0530  30C4               	movlw	196
  2894  0531  21C4               	fcall	_write_byte
  2895                           
  2896                           ;iic.c: 195: if(wait_r_ack())
  2897  0532  22E5               	fcall	_wait_r_ack
  2898  0533  087A               	movf	?_wait_r_ack,w
  2899  0534  047B               	iorwf	?_wait_r_ack+1,w
  2900  0535  1903               	btfsc	3,2
  2901  0536  2D3D               	goto	l2105
  2902                           
  2903                           ;iic.c: 196: {
  2904                           ;iic.c: 197: return 1;
  2905  0537  3001               	movlw	1
  2906  0538  0140               	movlb	0	; select bank0
  2907  0539  00A4               	movwf	?_cw_read_word
  2908  053A  3000               	movlw	0
  2909  053B  00A5               	movwf	?_cw_read_word+1
  2910  053C  0008               	return
  2911  053D                     l2105:	
  2912                           
  2913                           ;iic.c: 198: }
  2914                           ;iic.c: 199: write_byte(point_reg);
  2915  053D  0140               	movlb	0	; select bank0
  2916  053E  0827               	movf	cw_read_word@point_reg,w
  2917  053F  21C4               	fcall	_write_byte
  2918                           
  2919                           ;iic.c: 200: if(wait_r_ack())
  2920  0540  22E5               	fcall	_wait_r_ack
  2921  0541  087A               	movf	?_wait_r_ack,w
  2922  0542  047B               	iorwf	?_wait_r_ack+1,w
  2923  0543  1903               	btfsc	3,2
  2924  0544  2D4B               	goto	l2111
  2925                           
  2926                           ;iic.c: 201: {
  2927                           ;iic.c: 202: return 1;
  2928  0545  3001               	movlw	1
  2929  0546  0140               	movlb	0	; select bank0
  2930  0547  00A4               	movwf	?_cw_read_word
  2931  0548  3000               	movlw	0
  2932  0549  00A5               	movwf	?_cw_read_word+1
  2933  054A  0008               	return
  2934  054B                     l2111:	
  2935                           
  2936                           ;iic.c: 203: }
  2937                           ;iic.c: 204: start();
  2938  054B  2141               	fcall	_start
  2939                           
  2940                           ;iic.c: 205: write_byte(0xc5);
  2941  054C  30C5               	movlw	197
  2942  054D  21C4               	fcall	_write_byte
  2943                           
  2944                           ;iic.c: 206: if(wait_r_ack())
  2945  054E  22E5               	fcall	_wait_r_ack
  2946  054F  087A               	movf	?_wait_r_ack,w
  2947  0550  047B               	iorwf	?_wait_r_ack+1,w
  2948  0551  1903               	btfsc	3,2
  2949  0552  2D59               	goto	l2117
  2950                           
  2951                           ;iic.c: 207: {
  2952                           ;iic.c: 208: return 1;
  2953  0553  3001               	movlw	1
  2954  0554  0140               	movlb	0	; select bank0
  2955  0555  00A4               	movwf	?_cw_read_word
  2956  0556  3000               	movlw	0
  2957  0557  00A5               	movwf	?_cw_read_word+1
  2958  0558  0008               	return
  2959  0559                     l2117:	
  2960                           
  2961                           ;iic.c: 209: }
  2962                           ;iic.c: 210: for(count = 0; count < length; count++ ){
  2963  0559  0140               	movlb	0	; select bank0
  2964  055A  01A8               	clrf	cw_read_word@count
  2965  055B                     l2129:	
  2966  055B  0828               	movf	cw_read_word@count,w
  2967  055C  00FC               	movwf	??_cw_read_word
  2968  055D  01FD               	clrf	??_cw_read_word+1
  2969  055E  0826               	movf	cw_read_word@length+1,w
  2970  055F  027D               	subwf	??_cw_read_word+1,w
  2971  0560  1D03               	skipz
  2972  0561  2D64               	goto	u1875
  2973  0562  0825               	movf	cw_read_word@length,w
  2974  0563  027C               	subwf	??_cw_read_word,w
  2975  0564                     u1875:	
  2976  0564  1803               	btfsc	3,0
  2977  0565  2D88               	goto	l2131
  2978                           
  2979                           ;iic.c: 211: *r_pdata = read_byte();
  2980  0566  2265               	fcall	_read_byte
  2981  0567  00FC               	movwf	??_cw_read_word
  2982  0568  0140               	movlb	0	; select bank0
  2983  0569  0824               	movf	cw_read_word@r_pdata,w
  2984  056A  0086               	movwf	6
  2985  056B  0187               	clrf	7
  2986  056C  087C               	movf	??_cw_read_word,w
  2987  056D  0081               	movwf	1
  2988                           
  2989                           ;iic.c: 212: if(count + 1 < length){
  2990  056E  0828               	movf	cw_read_word@count,w
  2991  056F  3E01               	addlw	1
  2992  0570  00FC               	movwf	??_cw_read_word
  2993  0571  3000               	movlw	0
  2994  0572  1803               	skipnc
  2995  0573  3001               	movlw	1
  2996  0574  00FD               	movwf	??_cw_read_word+1
  2997  0575  0826               	movf	cw_read_word@length+1,w
  2998  0576  027D               	subwf	??_cw_read_word+1,w
  2999  0577  1D03               	skipz
  3000  0578  2D7B               	goto	u1865
  3001  0579  0825               	movf	cw_read_word@length,w
  3002  057A  027C               	subwf	??_cw_read_word,w
  3003  057B                     u1865:	
  3004  057B  1803               	skipnc
  3005  057C  2D82               	goto	l2127
  3006                           
  3007                           ;iic.c: 213: r_pdata++;
  3008  057D  3001               	movlw	1
  3009  057E  00FC               	movwf	??_cw_read_word
  3010  057F  087C               	movf	??_cw_read_word,w
  3011  0580  07A4               	addwf	cw_read_word@r_pdata,f
  3012                           
  3013                           ;iic.c: 214: sn_ack();
  3014  0581  2170               	fcall	_sn_ack
  3015  0582                     l2127:	
  3016  0582  3001               	movlw	1
  3017  0583  00FC               	movwf	??_cw_read_word
  3018  0584  087C               	movf	??_cw_read_word,w
  3019  0585  0140               	movlb	0	; select bank0
  3020  0586  07A8               	addwf	cw_read_word@count,f
  3021  0587  2D5B               	goto	l2129
  3022  0588                     l2131:	
  3023                           
  3024                           ;iic.c: 215: }
  3025                           ;iic.c: 216: }
  3026                           ;iic.c: 217: s_ack();
  3027  0588  2136               	fcall	_s_ack
  3028                           
  3029                           ;iic.c: 218: stop();
  3030  0589  2164               	fcall	_stop
  3031                           
  3032                           ;iic.c: 219: return 0;
  3033  058A  0140               	movlb	0	; select bank0
  3034  058B  01A4               	clrf	?_cw_read_word
  3035  058C  01A5               	clrf	?_cw_read_word+1
  3036  058D  0008               	return
  3037  058E                     __end_of_cw_read_word:	
  3038                           
  3039                           	psect	text5
  3040  0170                     __ptext5:	
  3041 ;; *************** function _sn_ack *****************
  3042 ;; Defined at:
  3043 ;;		line 113 in file "iic.c"
  3044 ;; Parameters:    Size  Location     Type
  3045 ;;		None
  3046 ;; Auto vars:     Size  Location     Type
  3047 ;;		None
  3048 ;; Return value:  Size  Location     Type
  3049 ;;                  1    wreg      void 
  3050 ;; Registers used:
  3051 ;;		wreg, status,2, status,0, pclath, cstack
  3052 ;; Tracked objects:
  3053 ;;		On entry : 0/0
  3054 ;;		On exit  : 0/0
  3055 ;;		Unchanged: 0/0
  3056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3057 ;;      Params:         0       0       0       0
  3058 ;;      Locals:         0       0       0       0
  3059 ;;      Temps:          0       0       0       0
  3060 ;;      Totals:         0       0       0       0
  3061 ;;Total ram usage:        0 bytes
  3062 ;; Hardware stack levels used:    1
  3063 ;; Hardware stack levels required when called:    1
  3064 ;; This function calls:
  3065 ;;		_Delay10us
  3066 ;; This function is called by:
  3067 ;;		_cw_read_word
  3068 ;; This function uses a non-reentrant model
  3069 ;;
  3070                           
  3071                           
  3072                           ;psect for function _sn_ack
  3073  0170                     _sn_ack:	
  3074                           
  3075                           ;incstack = 0
  3076                           ; Regs used in _sn_ack: [wreg+status,2+status,0+pclath+cstack]
  3077                           ;iic.c: 115: do { TRISCbits.TRISC1 = 0; } while(0);
  3078  0170  0140               	movlb	0	; select bank0
  3079  0171  1094               	bcf	20,1	;volatile
  3080                           
  3081                           ;iic.c: 116: do { LATCbits.LATC1 = 0; } while(0);
  3082  0172  109A               	bcf	26,1	;volatile
  3083                           
  3084                           ;iic.c: 117: Delay10us();
  3085  0173  2203               	fcall	_Delay10us
  3086                           
  3087                           ;iic.c: 118: do { LATCbits.LATC0 = 1; } while(0);
  3088  0174  0140               	movlb	0	; select bank0
  3089  0175  141A               	bsf	26,0	;volatile
  3090                           
  3091                           ;iic.c: 119: Delay10us();
  3092  0176  2203               	fcall	_Delay10us
  3093                           
  3094                           ;iic.c: 120: do { LATCbits.LATC0 = 0; } while(0);
  3095  0177  0140               	movlb	0	; select bank0
  3096  0178  101A               	bcf	26,0	;volatile
  3097                           
  3098                           ;iic.c: 121: do { LATCbits.LATC1 = 1; } while(0);
  3099  0179  149A               	bsf	26,1	;volatile
  3100                           
  3101                           ;iic.c: 122: Delay10us();
  3102  017A  2203               	fcall	_Delay10us
  3103  017B  0008               	return
  3104  017C                     __end_of_sn_ack:	
  3105                           
  3106                           	psect	text6
  3107  02B6                     __ptext6:	
  3108 ;; *************** function ___lmul *****************
  3109 ;; Defined at:
  3110 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul32.c"
  3111 ;; Parameters:    Size  Location     Type
  3112 ;;  multiplier      4    0[COMMON] unsigned long 
  3113 ;;  multiplicand    4    4[COMMON] unsigned long 
  3114 ;; Auto vars:     Size  Location     Type
  3115 ;;  product         4    8[COMMON] unsigned long 
  3116 ;; Return value:  Size  Location     Type
  3117 ;;                  4    0[COMMON] unsigned long 
  3118 ;; Registers used:
  3119 ;;		wreg, status,2, status,0
  3120 ;; Tracked objects:
  3121 ;;		On entry : 0/0
  3122 ;;		On exit  : 0/0
  3123 ;;		Unchanged: 0/0
  3124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3125 ;;      Params:         8       0       0       0
  3126 ;;      Locals:         4       0       0       0
  3127 ;;      Temps:          0       0       0       0
  3128 ;;      Totals:        12       0       0       0
  3129 ;;Total ram usage:       12 bytes
  3130 ;; Hardware stack levels used:    1
  3131 ;; This function calls:
  3132 ;;		Nothing
  3133 ;; This function is called by:
  3134 ;;		_cw_get_vol
  3135 ;; This function uses a non-reentrant model
  3136 ;;
  3137                           
  3138                           
  3139                           ;psect for function ___lmul
  3140  02B6                     ___lmul:	
  3141                           
  3142                           ;incstack = 0
  3143                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3144  02B6  3000               	movlw	0
  3145  02B7  00FB               	movwf	___lmul@product+3
  3146  02B8  3000               	movlw	0
  3147  02B9  00FA               	movwf	___lmul@product+2
  3148  02BA  3000               	movlw	0
  3149  02BB  00F9               	movwf	___lmul@product+1
  3150  02BC  3000               	movlw	0
  3151  02BD  00F8               	movwf	___lmul@product
  3152  02BE                     l2139:	
  3153  02BE  1C70               	btfss	___lmul@multiplier,0
  3154  02BF  2AC8               	goto	l2143
  3155  02C0  0874               	movf	___lmul@multiplicand,w
  3156  02C1  07F8               	addwf	___lmul@product,f
  3157  02C2  0875               	movf	___lmul@multiplicand+1,w
  3158  02C3  3DF9               	addwfc	___lmul@product+1,f
  3159  02C4  0876               	movf	___lmul@multiplicand+2,w
  3160  02C5  3DFA               	addwfc	___lmul@product+2,f
  3161  02C6  0877               	movf	___lmul@multiplicand+3,w
  3162  02C7  3DFB               	addwfc	___lmul@product+3,f
  3163  02C8                     l2143:	
  3164  02C8  3001               	movlw	1
  3165  02C9                     u1895:	
  3166  02C9  35F4               	lslf	___lmul@multiplicand,f
  3167  02CA  0DF5               	rlf	___lmul@multiplicand+1,f
  3168  02CB  0DF6               	rlf	___lmul@multiplicand+2,f
  3169  02CC  0DF7               	rlf	___lmul@multiplicand+3,f
  3170  02CD  0B89               	decfsz	9,f
  3171  02CE  2AC9               	goto	u1895
  3172  02CF  3001               	movlw	1
  3173  02D0                     u1905:	
  3174  02D0  36F3               	lsrf	___lmul@multiplier+3,f
  3175  02D1  0CF2               	rrf	___lmul@multiplier+2,f
  3176  02D2  0CF1               	rrf	___lmul@multiplier+1,f
  3177  02D3  0CF0               	rrf	___lmul@multiplier,f
  3178  02D4  0B89               	decfsz	9,f
  3179  02D5  2AD0               	goto	u1905
  3180  02D6  0873               	movf	___lmul@multiplier+3,w
  3181  02D7  0472               	iorwf	___lmul@multiplier+2,w
  3182  02D8  0471               	iorwf	___lmul@multiplier+1,w
  3183  02D9  0470               	iorwf	___lmul@multiplier,w
  3184  02DA  1D03               	skipz
  3185  02DB  2ABE               	goto	l2139
  3186  02DC  087B               	movf	___lmul@product+3,w
  3187  02DD  00F3               	movwf	?___lmul+3
  3188  02DE  087A               	movf	___lmul@product+2,w
  3189  02DF  00F2               	movwf	?___lmul+2
  3190  02E0  0879               	movf	___lmul@product+1,w
  3191  02E1  00F1               	movwf	?___lmul+1
  3192  02E2  0878               	movf	___lmul@product,w
  3193  02E3  00F0               	movwf	?___lmul
  3194  02E4  0008               	return
  3195  02E5                     __end_of___lmul:	
  3196                           
  3197                           	psect	text7
  3198  04DA                     __ptext7:	
  3199 ;; *************** function ___lldiv *****************
  3200 ;; Defined at:
  3201 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
  3202 ;; Parameters:    Size  Location     Type
  3203 ;;  divisor         4    0[BANK0 ] unsigned long 
  3204 ;;  dividend        4    4[BANK0 ] unsigned long 
  3205 ;; Auto vars:     Size  Location     Type
  3206 ;;  quotient        4    8[BANK0 ] unsigned long 
  3207 ;;  counter         1   12[BANK0 ] unsigned char 
  3208 ;; Return value:  Size  Location     Type
  3209 ;;                  4    0[BANK0 ] unsigned long 
  3210 ;; Registers used:
  3211 ;;		wreg, status,2, status,0
  3212 ;; Tracked objects:
  3213 ;;		On entry : 0/0
  3214 ;;		On exit  : 0/0
  3215 ;;		Unchanged: 0/0
  3216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3217 ;;      Params:         0       8       0       0
  3218 ;;      Locals:         0       5       0       0
  3219 ;;      Temps:          1       0       0       0
  3220 ;;      Totals:         1      13       0       0
  3221 ;;Total ram usage:       14 bytes
  3222 ;; Hardware stack levels used:    1
  3223 ;; This function calls:
  3224 ;;		Nothing
  3225 ;; This function is called by:
  3226 ;;		_cw_get_vol
  3227 ;; This function uses a non-reentrant model
  3228 ;;
  3229                           
  3230                           
  3231                           ;psect for function ___lldiv
  3232  04DA                     ___lldiv:	
  3233                           
  3234                           ;incstack = 0
  3235                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3236  04DA  3000               	movlw	0
  3237  04DB  0140               	movlb	0	; select bank0
  3238  04DC  00AB               	movwf	___lldiv@quotient+3
  3239  04DD  3000               	movlw	0
  3240  04DE  00AA               	movwf	___lldiv@quotient+2
  3241  04DF  3000               	movlw	0
  3242  04E0  00A9               	movwf	___lldiv@quotient+1
  3243  04E1  3000               	movlw	0
  3244  04E2  00A8               	movwf	___lldiv@quotient
  3245  04E3  0823               	movf	___lldiv@divisor+3,w
  3246  04E4  0422               	iorwf	___lldiv@divisor+2,w
  3247  04E5  0421               	iorwf	___lldiv@divisor+1,w
  3248  04E6  0420               	iorwf	___lldiv@divisor,w
  3249  04E7  1903               	skipnz
  3250  04E8  2D24               	goto	l2171
  3251  04E9  01AC               	clrf	___lldiv@counter
  3252  04EA  0AAC               	incf	___lldiv@counter,f
  3253  04EB                     l2157:	
  3254  04EB  1BA3               	btfsc	___lldiv@divisor+3,7
  3255  04EC  2CF9               	goto	l2159
  3256  04ED  3001               	movlw	1
  3257  04EE                     u1935:	
  3258  04EE  35A0               	lslf	___lldiv@divisor,f
  3259  04EF  0DA1               	rlf	___lldiv@divisor+1,f
  3260  04F0  0DA2               	rlf	___lldiv@divisor+2,f
  3261  04F1  0DA3               	rlf	___lldiv@divisor+3,f
  3262  04F2  0B89               	decfsz	9,f
  3263  04F3  2CEE               	goto	u1935
  3264  04F4  3001               	movlw	1
  3265  04F5  00FC               	movwf	??___lldiv
  3266  04F6  087C               	movf	??___lldiv,w
  3267  04F7  07AC               	addwf	___lldiv@counter,f
  3268  04F8  2CEB               	goto	l2157
  3269  04F9                     l2159:	
  3270  04F9  3001               	movlw	1
  3271  04FA                     u1955:	
  3272  04FA  35A8               	lslf	___lldiv@quotient,f
  3273  04FB  0DA9               	rlf	___lldiv@quotient+1,f
  3274  04FC  0DAA               	rlf	___lldiv@quotient+2,f
  3275  04FD  0DAB               	rlf	___lldiv@quotient+3,f
  3276  04FE  0B89               	decfsz	9,f
  3277  04FF  2CFA               	goto	u1955
  3278  0500  0823               	movf	___lldiv@divisor+3,w
  3279  0501  0227               	subwf	___lldiv@dividend+3,w
  3280  0502  1D03               	skipz
  3281  0503  2D0E               	goto	u1965
  3282  0504  0822               	movf	___lldiv@divisor+2,w
  3283  0505  0226               	subwf	___lldiv@dividend+2,w
  3284  0506  1D03               	skipz
  3285  0507  2D0E               	goto	u1965
  3286  0508  0821               	movf	___lldiv@divisor+1,w
  3287  0509  0225               	subwf	___lldiv@dividend+1,w
  3288  050A  1D03               	skipz
  3289  050B  2D0E               	goto	u1965
  3290  050C  0820               	movf	___lldiv@divisor,w
  3291  050D  0224               	subwf	___lldiv@dividend,w
  3292  050E                     u1965:	
  3293  050E  1C03               	skipc
  3294  050F  2D19               	goto	l2167
  3295  0510  0820               	movf	___lldiv@divisor,w
  3296  0511  02A4               	subwf	___lldiv@dividend,f
  3297  0512  0821               	movf	___lldiv@divisor+1,w
  3298  0513  3BA5               	subwfb	___lldiv@dividend+1,f
  3299  0514  0822               	movf	___lldiv@divisor+2,w
  3300  0515  3BA6               	subwfb	___lldiv@dividend+2,f
  3301  0516  0823               	movf	___lldiv@divisor+3,w
  3302  0517  3BA7               	subwfb	___lldiv@dividend+3,f
  3303  0518  1428               	bsf	___lldiv@quotient,0
  3304  0519                     l2167:	
  3305  0519  3001               	movlw	1
  3306  051A                     u1975:	
  3307  051A  36A3               	lsrf	___lldiv@divisor+3,f
  3308  051B  0CA2               	rrf	___lldiv@divisor+2,f
  3309  051C  0CA1               	rrf	___lldiv@divisor+1,f
  3310  051D  0CA0               	rrf	___lldiv@divisor,f
  3311  051E  0B89               	decfsz	9,f
  3312  051F  2D1A               	goto	u1975
  3313  0520  3001               	movlw	1
  3314  0521  02AC               	subwf	___lldiv@counter,f
  3315  0522  1D03               	btfss	3,2
  3316  0523  2CF9               	goto	l2159
  3317  0524                     l2171:	
  3318  0524  082B               	movf	___lldiv@quotient+3,w
  3319  0525  00A3               	movwf	?___lldiv+3
  3320  0526  082A               	movf	___lldiv@quotient+2,w
  3321  0527  00A2               	movwf	?___lldiv+2
  3322  0528  0829               	movf	___lldiv@quotient+1,w
  3323  0529  00A1               	movwf	?___lldiv+1
  3324  052A  0828               	movf	___lldiv@quotient,w
  3325  052B  00A0               	movwf	?___lldiv
  3326  052C  0008               	return
  3327  052D                     __end_of___lldiv:	
  3328                           
  3329                           	psect	text8
  3330  012C                     __ptext8:	
  3331 ;; *************** function _update_usb_online *****************
  3332 ;; Defined at:
  3333 ;;		line 519 in file "CW201x.c"
  3334 ;; Parameters:    Size  Location     Type
  3335 ;;		None
  3336 ;; Auto vars:     Size  Location     Type
  3337 ;;		None
  3338 ;; Return value:  Size  Location     Type
  3339 ;;                  1    wreg      void 
  3340 ;; Registers used:
  3341 ;;		wreg, status,2, status,0
  3342 ;; Tracked objects:
  3343 ;;		On entry : 0/0
  3344 ;;		On exit  : 0/0
  3345 ;;		Unchanged: 0/0
  3346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3347 ;;      Params:         0       0       0       0
  3348 ;;      Locals:         0       0       0       0
  3349 ;;      Temps:          0       0       0       0
  3350 ;;      Totals:         0       0       0       0
  3351 ;;Total ram usage:        0 bytes
  3352 ;; Hardware stack levels used:    1
  3353 ;; This function calls:
  3354 ;;		Nothing
  3355 ;; This function is called by:
  3356 ;;		_cw_bat_work
  3357 ;; This function uses a non-reentrant model
  3358 ;;
  3359                           
  3360                           
  3361                           ;psect for function _update_usb_online
  3362  012C                     _update_usb_online:	
  3363                           
  3364                           ;CW201x.c: 521: if(CHARGE == 1)
  3365                           
  3366                           ;incstack = 0
  3367                           ; Regs used in _update_usb_online: [wreg+status,2+status,0]
  3368  012C  0140               	movlb	0	; select bank0
  3369  012D  0355               	decf	_CHARGE,w
  3370  012E  0456               	iorwf	_CHARGE+1,w
  3371  012F  1D03               	btfss	3,2
  3372  0130  2934               	goto	l2315
  3373                           
  3374                           ;CW201x.c: 522: {
  3375                           ;CW201x.c: 523: cw_bat.usb_online = 1;
  3376  0131  01C7               	clrf	_cw_bat
  3377  0132  0AC7               	incf	_cw_bat,f
  3378                           
  3379                           ;CW201x.c: 524: }else{
  3380  0133  0008               	return
  3381  0134                     l2315:	
  3382                           
  3383                           ;CW201x.c: 525: cw_bat.usb_online = 0;
  3384  0134  01C7               	clrf	_cw_bat
  3385  0135  0008               	return
  3386  0136                     __end_of_update_usb_online:	
  3387                           
  3388                           	psect	text9
  3389  0244                     __ptext9:	
  3390 ;; *************** function _update_capacity *****************
  3391 ;; Defined at:
  3392 ;;		line 472 in file "CW201x.c"
  3393 ;; Parameters:    Size  Location     Type
  3394 ;;		None
  3395 ;; Auto vars:     Size  Location     Type
  3396 ;;  cw_capacity     2   35[BANK0 ] int 
  3397 ;; Return value:  Size  Location     Type
  3398 ;;                  1    wreg      void 
  3399 ;; Registers used:
  3400 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3401 ;; Tracked objects:
  3402 ;;		On entry : 0/0
  3403 ;;		On exit  : 0/0
  3404 ;;		Unchanged: 0/0
  3405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3406 ;;      Params:         0       0       0       0
  3407 ;;      Locals:         0       2       0       0
  3408 ;;      Temps:          0       1       0       0
  3409 ;;      Totals:         0       3       0       0
  3410 ;;Total ram usage:        3 bytes
  3411 ;; Hardware stack levels used:    1
  3412 ;; Hardware stack levels required when called:    8
  3413 ;; This function calls:
  3414 ;;		_cw_get_capacity
  3415 ;; This function is called by:
  3416 ;;		_cw_bat_work
  3417 ;; This function uses a non-reentrant model
  3418 ;;
  3419                           
  3420                           
  3421                           ;psect for function _update_capacity
  3422  0244                     _update_capacity:	
  3423                           
  3424                           ;CW201x.c: 474: int cw_capacity;
  3425                           ;CW201x.c: 475: cw_capacity = cw_get_capacity();
  3426                           
  3427                           ;incstack = 0
  3428                           ; Regs used in _update_capacity: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3429  0244  2401               	fcall	_cw_get_capacity
  3430  0245  0140               	movlb	0	; select bank0
  3431  0246  083B               	movf	?_cw_get_capacity+1,w
  3432  0247  00C4               	movwf	update_capacity@cw_capacity+1
  3433  0248  083A               	movf	?_cw_get_capacity,w
  3434  0249  00C3               	movwf	update_capacity@cw_capacity
  3435                           
  3436                           ;CW201x.c: 476: if((cw_capacity >= 0) && (cw_capacity <= 100) && (cw_bat.capacity != cw_
      +                          capacity))
  3437  024A  1BC4               	btfsc	update_capacity@cw_capacity+1,7
  3438  024B  0008               	return
  3439  024C  0844               	movf	update_capacity@cw_capacity+1,w
  3440  024D  3A80               	xorlw	128
  3441  024E  00C2               	movwf	??_update_capacity
  3442  024F  3080               	movlw	128
  3443  0250  0242               	subwf	??_update_capacity,w
  3444  0251  1D03               	skipz
  3445  0252  2A55               	goto	u2135
  3446  0253  3065               	movlw	101
  3447  0254  0243               	subwf	update_capacity@cw_capacity,w
  3448  0255                     u2135:	
  3449  0255  1803               	skipnc
  3450  0256  0008               	return
  3451  0257  0140               	movlb	0	; select bank0
  3452  0258  0844               	movf	update_capacity@cw_capacity+1,w
  3453  0259  0649               	xorwf	_cw_bat+2,w
  3454  025A  1D03               	skipz
  3455  025B  2A5E               	goto	u2145
  3456  025C  0843               	movf	update_capacity@cw_capacity,w
  3457  025D  0648               	xorwf	_cw_bat+1,w
  3458  025E                     u2145:	
  3459  025E  1903               	skipnz
  3460  025F  0008               	return
  3461                           
  3462                           ;CW201x.c: 477: {
  3463                           ;CW201x.c: 478: cw_bat.capacity = cw_capacity;
  3464  0260  0844               	movf	update_capacity@cw_capacity+1,w
  3465  0261  00C9               	movwf	_cw_bat+2
  3466  0262  0843               	movf	update_capacity@cw_capacity,w
  3467  0263  00C8               	movwf	_cw_bat+1
  3468  0264  0008               	return
  3469  0265                     __end_of_update_capacity:	
  3470                           
  3471                           	psect	text10
  3472  0401                     __ptext10:	
  3473 ;; *************** function _cw_get_capacity *****************
  3474 ;; Defined at:
  3475 ;;		line 300 in file "CW201x.c"
  3476 ;; Parameters:    Size  Location     Type
  3477 ;;		None
  3478 ;; Auto vars:     Size  Location     Type
  3479 ;;  ret             2   31[BANK0 ] int 
  3480 ;;  reg_val         1   33[BANK0 ] unsigned char 
  3481 ;;  cw_capacity     1   30[BANK0 ] unsigned char 
  3482 ;;  allow_capaci    1    0        unsigned char 
  3483 ;; Return value:  Size  Location     Type
  3484 ;;                  2   26[BANK0 ] int 
  3485 ;; Registers used:
  3486 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3487 ;; Tracked objects:
  3488 ;;		On entry : 0/0
  3489 ;;		On exit  : 0/0
  3490 ;;		Unchanged: 0/0
  3491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3492 ;;      Params:         0       2       0       0
  3493 ;;      Locals:         0       4       0       0
  3494 ;;      Temps:          0       2       0       0
  3495 ;;      Totals:         0       8       0       0
  3496 ;;Total ram usage:        8 bytes
  3497 ;; Hardware stack levels used:    1
  3498 ;; Hardware stack levels required when called:    7
  3499 ;; This function calls:
  3500 ;;		_cw_por
  3501 ;;		_cw_read
  3502 ;; This function is called by:
  3503 ;;		_update_capacity
  3504 ;; This function uses a non-reentrant model
  3505 ;;
  3506                           
  3507                           
  3508                           ;psect for function _cw_get_capacity
  3509  0401                     _cw_get_capacity:	
  3510                           
  3511                           ;CW201x.c: 302: int ret = 0;
  3512                           
  3513                           ;incstack = 0
  3514                           ; Regs used in _cw_get_capacity: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3515  0401  0140               	movlb	0	; select bank0
  3516  0402  01BF               	clrf	cw_get_capacity@ret
  3517  0403  01C0               	clrf	cw_get_capacity@ret+1
  3518                           
  3519                           ;CW201x.c: 303: unsigned char allow_capacity;
  3520                           ;CW201x.c: 304: unsigned char reg_val;
  3521                           ;CW201x.c: 306: unsigned char cw_capacity;
  3522                           ;CW201x.c: 309: ret = cw_read(0x4, &reg_val);
  3523  0404  3041               	movlw	(low (cw_get_capacity@reg_val| 0))& (0+255)
  3524  0405  00BC               	movwf	??_cw_get_capacity
  3525  0406  083C               	movf	??_cw_get_capacity,w
  3526  0407  00A4               	movwf	cw_read@r_pdata
  3527  0408  3004               	movlw	4
  3528  0409  2349               	fcall	_cw_read
  3529  040A  0140               	movlb	0	; select bank0
  3530  040B  0825               	movf	?_cw_read+1,w
  3531  040C  00C0               	movwf	cw_get_capacity@ret+1
  3532  040D  0824               	movf	?_cw_read,w
  3533  040E  00BF               	movwf	cw_get_capacity@ret
  3534                           
  3535                           ;CW201x.c: 310: if(ret)
  3536  040F  083F               	movf	cw_get_capacity@ret,w
  3537  0410  0440               	iorwf	cw_get_capacity@ret+1,w
  3538  0411  1903               	btfsc	3,2
  3539  0412  2C18               	goto	l2185
  3540                           
  3541                           ;CW201x.c: 311: {
  3542                           ;CW201x.c: 312: return -1;
  3543  0413  30FF               	movlw	255
  3544  0414  00BA               	movwf	?_cw_get_capacity
  3545  0415  30FF               	movlw	255
  3546  0416  00BB               	movwf	?_cw_get_capacity+1
  3547  0417  0008               	return
  3548  0418                     l2185:	
  3549                           
  3550                           ;CW201x.c: 313: }
  3551                           ;CW201x.c: 315: cw_capacity = reg_val;
  3552  0418  0841               	movf	cw_get_capacity@reg_val,w
  3553  0419  00BC               	movwf	??_cw_get_capacity
  3554  041A  083C               	movf	??_cw_get_capacity,w
  3555  041B  00BE               	movwf	cw_get_capacity@cw_capacity
  3556                           
  3557                           ;CW201x.c: 317: if ((cw_capacity < 0) || (cw_capacity > 100)) {
  3558  041C  3065               	movlw	101
  3559  041D  023E               	subwf	cw_get_capacity@cw_capacity,w
  3560  041E  1C03               	skipc
  3561  041F  2C3D               	goto	l2207
  3562                           
  3563                           ;CW201x.c: 319: reset_loop++;
  3564  0420  3001               	movlw	1
  3565  0421  00BC               	movwf	??_cw_get_capacity
  3566  0422  083C               	movf	??_cw_get_capacity,w
  3567  0423  07D7               	addwf	_reset_loop,f
  3568                           
  3569                           ;CW201x.c: 320: if (reset_loop >5) {
  3570  0424  3006               	movlw	6
  3571  0425  0257               	subwf	_reset_loop,w
  3572  0426  1C03               	skipc
  3573  0427  2C38               	goto	l2201
  3574                           
  3575                           ;CW201x.c: 321: ret = cw_por();
  3576  0428  2446               	fcall	_cw_por
  3577  0429  0140               	movlb	0	; select bank0
  3578  042A  0834               	movf	?_cw_por+1,w
  3579  042B  00C0               	movwf	cw_get_capacity@ret+1
  3580  042C  0833               	movf	?_cw_por,w
  3581  042D  00BF               	movwf	cw_get_capacity@ret
  3582                           
  3583                           ;CW201x.c: 322: if(ret)
  3584  042E  083F               	movf	cw_get_capacity@ret,w
  3585  042F  0440               	iorwf	cw_get_capacity@ret+1,w
  3586  0430  1903               	btfsc	3,2
  3587  0431  2C37               	goto	l2199
  3588                           
  3589                           ;CW201x.c: 323: return -1;
  3590  0432  30FF               	movlw	255
  3591  0433  00BA               	movwf	?_cw_get_capacity
  3592  0434  30FF               	movlw	255
  3593  0435  00BB               	movwf	?_cw_get_capacity+1
  3594  0436  0008               	return
  3595  0437                     l2199:	
  3596                           
  3597                           ;CW201x.c: 324: reset_loop =0;
  3598  0437  01D7               	clrf	_reset_loop
  3599  0438                     l2201:	
  3600                           
  3601                           ;CW201x.c: 325: }
  3602                           ;CW201x.c: 326: return cw_bat.capacity;
  3603  0438  0849               	movf	_cw_bat+2,w
  3604  0439  00BB               	movwf	?_cw_get_capacity+1
  3605  043A  0848               	movf	_cw_bat+1,w
  3606  043B  00BA               	movwf	?_cw_get_capacity
  3607  043C  0008               	return
  3608  043D                     l2207:	
  3609                           ;CW201x.c: 327: }else {
  3610                           
  3611                           
  3612                           ;CW201x.c: 328: reset_loop =0;
  3613  043D  01D7               	clrf	_reset_loop
  3614                           
  3615                           ;CW201x.c: 329: }
  3616                           ;CW201x.c: 406: return(cw_capacity);
  3617  043E  083E               	movf	cw_get_capacity@cw_capacity,w
  3618  043F  00BC               	movwf	??_cw_get_capacity
  3619  0440  01BD               	clrf	??_cw_get_capacity+1
  3620  0441  083C               	movf	??_cw_get_capacity,w
  3621  0442  00BA               	movwf	?_cw_get_capacity
  3622  0443  083D               	movf	??_cw_get_capacity+1,w
  3623  0444  00BB               	movwf	?_cw_get_capacity+1
  3624  0445  0008               	return
  3625  0446                     __end_of_cw_get_capacity:	
  3626                           
  3627                           	psect	text11
  3628  0446                     __ptext11:	
  3629 ;; *************** function _cw_por *****************
  3630 ;; Defined at:
  3631 ;;		line 278 in file "CW201x.c"
  3632 ;; Parameters:    Size  Location     Type
  3633 ;;		None
  3634 ;; Auto vars:     Size  Location     Type
  3635 ;;  ret             2   24[BANK0 ] int 
  3636 ;;  reset_val       1   23[BANK0 ] unsigned char 
  3637 ;; Return value:  Size  Location     Type
  3638 ;;                  2   19[BANK0 ] int 
  3639 ;; Registers used:
  3640 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3641 ;; Tracked objects:
  3642 ;;		On entry : 0/0
  3643 ;;		On exit  : 0/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3646 ;;      Params:         0       2       0       0
  3647 ;;      Locals:         0       3       0       0
  3648 ;;      Temps:          0       2       0       0
  3649 ;;      Totals:         0       7       0       0
  3650 ;;Total ram usage:        7 bytes
  3651 ;; Hardware stack levels used:    1
  3652 ;; Hardware stack levels required when called:    6
  3653 ;; This function calls:
  3654 ;;		_CW_Delay100us
  3655 ;;		_cw_init
  3656 ;;		_cw_write
  3657 ;; This function is called by:
  3658 ;;		_cw_get_capacity
  3659 ;; This function uses a non-reentrant model
  3660 ;;
  3661                           
  3662                           
  3663                           ;psect for function _cw_por
  3664  0446                     _cw_por:	
  3665                           
  3666                           ;CW201x.c: 280: int ret = 0;
  3667                           
  3668                           ;incstack = 0
  3669                           ; Regs used in _cw_por: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3670  0446  0140               	movlb	0	; select bank0
  3671  0447  01B8               	clrf	cw_por@ret
  3672  0448  01B9               	clrf	cw_por@ret+1
  3673                           
  3674                           ;CW201x.c: 281: unsigned char reset_val = 0;
  3675  0449  01B7               	clrf	cw_por@reset_val
  3676                           
  3677                           ;CW201x.c: 282: reset_val = (0x3<<6);
  3678  044A  30C0               	movlw	192
  3679  044B  00B5               	movwf	??_cw_por
  3680  044C  0835               	movf	??_cw_por,w
  3681  044D  00B7               	movwf	cw_por@reset_val
  3682                           
  3683                           ;CW201x.c: 283: ret = cw_write(0xA, &reset_val);
  3684  044E  3037               	movlw	(low (cw_por@reset_val| 0))& (0+255)
  3685  044F  00B5               	movwf	??_cw_por
  3686  0450  0835               	movf	??_cw_por,w
  3687  0451  00A4               	movwf	cw_write@w_pdata
  3688  0452  300A               	movlw	10
  3689  0453  2317               	fcall	_cw_write
  3690  0454  0140               	movlb	0	; select bank0
  3691  0455  0825               	movf	?_cw_write+1,w
  3692  0456  00B9               	movwf	cw_por@ret+1
  3693  0457  0824               	movf	?_cw_write,w
  3694  0458  00B8               	movwf	cw_por@ret
  3695                           
  3696                           ;CW201x.c: 284: if (ret)
  3697  0459  0838               	movf	cw_por@ret,w
  3698  045A  0439               	iorwf	cw_por@ret+1,w
  3699  045B  1903               	btfsc	3,2
  3700  045C  2C62               	goto	l2073
  3701                           
  3702                           ;CW201x.c: 285: return -1;
  3703  045D  30FF               	movlw	255
  3704  045E  00B3               	movwf	?_cw_por
  3705  045F  30FF               	movlw	255
  3706  0460  00B4               	movwf	?_cw_por+1
  3707  0461  0008               	return
  3708  0462                     l2073:	
  3709                           
  3710                           ;CW201x.c: 286: CW_Delay100us();
  3711  0462  21E3               	fcall	_CW_Delay100us
  3712                           
  3713                           ;CW201x.c: 288: reset_val = (0x0<<6);
  3714  0463  0140               	movlb	0	; select bank0
  3715  0464  01B7               	clrf	cw_por@reset_val
  3716                           
  3717                           ;CW201x.c: 289: ret = cw_write(0xA, &reset_val);
  3718  0465  3037               	movlw	(low (cw_por@reset_val| 0))& (0+255)
  3719  0466  00B5               	movwf	??_cw_por
  3720  0467  0835               	movf	??_cw_por,w
  3721  0468  00A4               	movwf	cw_write@w_pdata
  3722  0469  300A               	movlw	10
  3723  046A  2317               	fcall	_cw_write
  3724  046B  0140               	movlb	0	; select bank0
  3725  046C  0825               	movf	?_cw_write+1,w
  3726  046D  00B9               	movwf	cw_por@ret+1
  3727  046E  0824               	movf	?_cw_write,w
  3728  046F  00B8               	movwf	cw_por@ret
  3729                           
  3730                           ;CW201x.c: 290: if (ret)
  3731  0470  0838               	movf	cw_por@ret,w
  3732  0471  0439               	iorwf	cw_por@ret+1,w
  3733  0472  1903               	btfsc	3,2
  3734  0473  2C79               	goto	l2085
  3735                           
  3736                           ;CW201x.c: 291: return -1;
  3737  0474  30FF               	movlw	255
  3738  0475  00B3               	movwf	?_cw_por
  3739  0476  30FF               	movlw	255
  3740  0477  00B4               	movwf	?_cw_por+1
  3741  0478  0008               	return
  3742  0479                     l2085:	
  3743                           
  3744                           ;CW201x.c: 292: CW_Delay100us();
  3745  0479  21E3               	fcall	_CW_Delay100us
  3746                           
  3747                           ;CW201x.c: 294: ret = cw_init();
  3748  047A  270E               	fcall	_cw_init
  3749  047B  0140               	movlb	0	; select bank0
  3750  047C  00B5               	movwf	??_cw_por
  3751  047D  01B6               	clrf	??_cw_por+1
  3752  047E  0835               	movf	??_cw_por,w
  3753  047F  00B8               	movwf	cw_por@ret
  3754  0480  0836               	movf	??_cw_por+1,w
  3755  0481  00B9               	movwf	cw_por@ret+1
  3756                           
  3757                           ;CW201x.c: 295: if (ret)
  3758  0482  0838               	movf	cw_por@ret,w
  3759  0483  0439               	iorwf	cw_por@ret+1,w
  3760  0484  1903               	btfsc	3,2
  3761  0485  2C8B               	goto	l2095
  3762                           
  3763                           ;CW201x.c: 296: return ret;
  3764  0486  0839               	movf	cw_por@ret+1,w
  3765  0487  00B4               	movwf	?_cw_por+1
  3766  0488  0838               	movf	cw_por@ret,w
  3767  0489  00B3               	movwf	?_cw_por
  3768  048A  0008               	return
  3769  048B                     l2095:	
  3770                           
  3771                           ;CW201x.c: 297: return 0;
  3772  048B  01B3               	clrf	?_cw_por
  3773  048C  01B4               	clrf	?_cw_por+1
  3774  048D  0008               	return
  3775  048E                     __end_of_cw_por:	
  3776                           
  3777                           	psect	text12
  3778  01A9                     __ptext12:	
  3779 ;; *************** function _cw_bat_init *****************
  3780 ;; Defined at:
  3781 ;;		line 552 in file "CW201x.c"
  3782 ;; Parameters:    Size  Location     Type
  3783 ;;		None
  3784 ;; Auto vars:     Size  Location     Type
  3785 ;;  ret             1   21[BANK0 ] unsigned char 
  3786 ;;  loop            1   20[BANK0 ] unsigned char 
  3787 ;; Return value:  Size  Location     Type
  3788 ;;                  1    wreg      unsigned char 
  3789 ;; Registers used:
  3790 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3791 ;; Tracked objects:
  3792 ;;		On entry : 0/0
  3793 ;;		On exit  : 0/0
  3794 ;;		Unchanged: 0/0
  3795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3796 ;;      Params:         0       0       0       0
  3797 ;;      Locals:         0       2       0       0
  3798 ;;      Temps:          0       1       0       0
  3799 ;;      Totals:         0       3       0       0
  3800 ;;Total ram usage:        3 bytes
  3801 ;; Hardware stack levels used:    1
  3802 ;; Hardware stack levels required when called:    6
  3803 ;; This function calls:
  3804 ;;		_cw_init
  3805 ;; This function is called by:
  3806 ;;		_main
  3807 ;; This function uses a non-reentrant model
  3808 ;;
  3809                           
  3810                           
  3811                           ;psect for function _cw_bat_init
  3812  01A9                     _cw_bat_init:	
  3813                           
  3814                           ;CW201x.c: 554: unsigned char ret;
  3815                           ;CW201x.c: 555: unsigned char loop = 0;
  3816                           
  3817                           ;incstack = 0
  3818                           ; Regs used in _cw_bat_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3819  01A9  0140               	movlb	0	; select bank0
  3820  01AA  01B4               	clrf	cw_bat_init@loop
  3821  01AB                     l2327:	
  3822                           ;CW201x.c: 559: while((loop++ < 200) && (ret != 0))
  3823                           
  3824                           ;CW201x.c: 558: ret = cw_init();
  3825                           
  3826                           
  3827                           ;CW201x.c: 560: {
  3828                           ;CW201x.c: 561: ret = cw_init();
  3829  01AB  270E               	fcall	_cw_init
  3830  01AC  0140               	movlb	0	; select bank0
  3831  01AD  00B3               	movwf	??_cw_bat_init
  3832  01AE  0833               	movf	??_cw_bat_init,w
  3833  01AF  00B5               	movwf	cw_bat_init@ret
  3834  01B0  0834               	movf	cw_bat_init@loop,w
  3835  01B1  0AB4               	incf	cw_bat_init@loop,f
  3836  01B2  00B3               	movwf	??_cw_bat_init
  3837  01B3  30C8               	movlw	200
  3838  01B4  0233               	subwf	??_cw_bat_init,w
  3839  01B5  1803               	skipnc
  3840  01B6  29BA               	goto	l2333
  3841  01B7  0835               	movf	cw_bat_init@ret,w
  3842  01B8  1D03               	btfss	3,2
  3843  01B9  29AB               	goto	l2327
  3844  01BA                     l2333:	
  3845                           
  3846                           ;CW201x.c: 562: }
  3847                           ;CW201x.c: 564: cw_bat.usb_online = 0;
  3848  01BA  01C7               	clrf	_cw_bat
  3849                           
  3850                           ;CW201x.c: 565: cw_bat.capacity = 2;
  3851  01BB  3002               	movlw	2
  3852  01BC  00C8               	movwf	_cw_bat+1
  3853  01BD  3000               	movlw	0
  3854  01BE  00C9               	movwf	_cw_bat+2
  3855                           
  3856                           ;CW201x.c: 566: cw_bat.voltage = 0;
  3857  01BF  01CA               	clrf	_cw_bat+3
  3858  01C0  01CB               	clrf	_cw_bat+4
  3859                           
  3860                           ;CW201x.c: 570: cw_bat.alt = 0;
  3861  01C1  01CC               	clrf	_cw_bat+5
  3862                           
  3863                           ;CW201x.c: 572: return ret;
  3864  01C2  0835               	movf	cw_bat_init@ret,w
  3865  01C3  0008               	return
  3866  01C4                     __end_of_cw_bat_init:	
  3867                           
  3868                           	psect	text13
  3869  070E                     __ptext13:	
  3870 ;; *************** function _cw_init *****************
  3871 ;; Defined at:
  3872 ;;		line 126 in file "CW201x.c"
  3873 ;; Parameters:    Size  Location     Type
  3874 ;;		None
  3875 ;; Auto vars:     Size  Location     Type
  3876 ;;  ret             2   16[BANK0 ] unsigned int 
  3877 ;;  reg_val         1   18[BANK0 ] unsigned char 
  3878 ;;  i               1   15[BANK0 ] unsigned char 
  3879 ;; Return value:  Size  Location     Type
  3880 ;;                  1    wreg      unsigned char 
  3881 ;; Registers used:
  3882 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3883 ;; Tracked objects:
  3884 ;;		On entry : 0/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3888 ;;      Params:         0       0       0       0
  3889 ;;      Locals:         0       4       0       0
  3890 ;;      Temps:          0       2       0       0
  3891 ;;      Totals:         0       6       0       0
  3892 ;;Total ram usage:        6 bytes
  3893 ;; Hardware stack levels used:    1
  3894 ;; Hardware stack levels required when called:    5
  3895 ;; This function calls:
  3896 ;;		_CW_Delay10ms
  3897 ;;		_cw_read
  3898 ;;		_cw_update_config_info
  3899 ;;		_cw_write
  3900 ;; This function is called by:
  3901 ;;		_cw_por
  3902 ;;		_cw_bat_init
  3903 ;; This function uses a non-reentrant model
  3904 ;;
  3905                           
  3906                           
  3907                           ;psect for function _cw_init
  3908  070E                     _cw_init:	
  3909                           
  3910                           ;CW201x.c: 128: unsigned ret;
  3911                           ;CW201x.c: 129: unsigned char i;
  3912                           ;CW201x.c: 130: unsigned char reg_val = (0x0<<6);
  3913                           
  3914                           ;incstack = 0
  3915                           ; Regs used in _cw_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3916  070E  0140               	movlb	0	; select bank0
  3917  070F  01B2               	clrf	cw_init@reg_val
  3918                           
  3919                           ;CW201x.c: 133: ret = cw_write(0xA, &reg_val);
  3920  0710  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  3921  0711  00AD               	movwf	??_cw_init
  3922  0712  082D               	movf	??_cw_init,w
  3923  0713  00A4               	movwf	cw_write@w_pdata
  3924  0714  300A               	movlw	10
  3925  0715  2317               	fcall	_cw_write
  3926  0716  0140               	movlb	0	; select bank0
  3927  0717  0825               	movf	?_cw_write+1,w
  3928  0718  00B1               	movwf	cw_init@ret+1
  3929  0719  0824               	movf	?_cw_write,w
  3930  071A  00B0               	movwf	cw_init@ret
  3931                           
  3932                           ;CW201x.c: 134: if(ret)
  3933  071B  0830               	movf	cw_init@ret,w
  3934  071C  0431               	iorwf	cw_init@ret+1,w
  3935  071D  1903               	btfsc	3,2
  3936  071E  2F21               	goto	l1945
  3937                           
  3938                           ;CW201x.c: 135: {
  3939                           ;CW201x.c: 136: return 1;
  3940  071F  3001               	movlw	1
  3941  0720  0008               	return
  3942  0721                     l1945:	
  3943                           
  3944                           ;CW201x.c: 137: }
  3945                           ;CW201x.c: 140: ret = cw_read(0x8, &reg_val);
  3946  0721  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  3947  0722  00AD               	movwf	??_cw_init
  3948  0723  082D               	movf	??_cw_init,w
  3949  0724  00A4               	movwf	cw_read@r_pdata
  3950  0725  3008               	movlw	8
  3951  0726  2349               	fcall	_cw_read
  3952  0727  0140               	movlb	0	; select bank0
  3953  0728  0825               	movf	?_cw_read+1,w
  3954  0729  00B1               	movwf	cw_init@ret+1
  3955  072A  0824               	movf	?_cw_read,w
  3956  072B  00B0               	movwf	cw_init@ret
  3957                           
  3958                           ;CW201x.c: 141: if(ret)
  3959  072C  0830               	movf	cw_init@ret,w
  3960  072D  0431               	iorwf	cw_init@ret+1,w
  3961  072E  1903               	btfsc	3,2
  3962  072F  2F32               	goto	l1953
  3963                           
  3964                           ;CW201x.c: 142: {
  3965                           ;CW201x.c: 143: return 1;
  3966  0730  3001               	movlw	1
  3967  0731  0008               	return
  3968  0732                     l1953:	
  3969                           
  3970                           ;CW201x.c: 144: }
  3971                           ;CW201x.c: 145: if((reg_val & 0xf8) != (0x0<<3))
  3972  0732  0832               	movf	cw_init@reg_val,w
  3973  0733  39F8               	andlw	248
  3974  0734  1903               	btfsc	3,2
  3975  0735  2F4B               	goto	l1965
  3976                           
  3977                           ;CW201x.c: 149: reg_val |= (0x0<<3);
  3978  0736  3007               	movlw	7
  3979  0737  00AD               	movwf	??_cw_init
  3980  0738  082D               	movf	??_cw_init,w
  3981  0739  05B2               	andwf	cw_init@reg_val,f
  3982                           
  3983                           ;CW201x.c: 150: ret = cw_write(0x8, &reg_val);
  3984  073A  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  3985  073B  00AD               	movwf	??_cw_init
  3986  073C  082D               	movf	??_cw_init,w
  3987  073D  00A4               	movwf	cw_write@w_pdata
  3988  073E  3008               	movlw	8
  3989  073F  2317               	fcall	_cw_write
  3990  0740  0140               	movlb	0	; select bank0
  3991  0741  0825               	movf	?_cw_write+1,w
  3992  0742  00B1               	movwf	cw_init@ret+1
  3993  0743  0824               	movf	?_cw_write,w
  3994  0744  00B0               	movwf	cw_init@ret
  3995                           
  3996                           ;CW201x.c: 151: if(ret)
  3997  0745  0830               	movf	cw_init@ret,w
  3998  0746  0431               	iorwf	cw_init@ret+1,w
  3999  0747  1903               	btfsc	3,2
  4000  0748  2F4B               	goto	l1965
  4001                           
  4002                           ;CW201x.c: 152: {
  4003                           ;CW201x.c: 153: return 1;
  4004  0749  3001               	movlw	1
  4005  074A  0008               	return
  4006  074B                     l1965:	
  4007                           
  4008                           ;CW201x.c: 154: }
  4009                           ;CW201x.c: 155: }
  4010                           ;CW201x.c: 158: ret = cw_read(0x8, &reg_val);
  4011  074B  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4012  074C  00AD               	movwf	??_cw_init
  4013  074D  082D               	movf	??_cw_init,w
  4014  074E  00A4               	movwf	cw_read@r_pdata
  4015  074F  3008               	movlw	8
  4016  0750  2349               	fcall	_cw_read
  4017  0751  0140               	movlb	0	; select bank0
  4018  0752  0825               	movf	?_cw_read+1,w
  4019  0753  00B1               	movwf	cw_init@ret+1
  4020  0754  0824               	movf	?_cw_read,w
  4021  0755  00B0               	movwf	cw_init@ret
  4022                           
  4023                           ;CW201x.c: 159: if(ret)
  4024  0756  0830               	movf	cw_init@ret,w
  4025  0757  0431               	iorwf	cw_init@ret+1,w
  4026  0758  1903               	btfsc	3,2
  4027  0759  2F5C               	goto	l241
  4028                           
  4029                           ;CW201x.c: 160: {
  4030                           ;CW201x.c: 161: return 1;
  4031  075A  3001               	movlw	1
  4032  075B  0008               	return
  4033  075C                     l241:	
  4034                           
  4035                           ;CW201x.c: 162: }
  4036                           ;CW201x.c: 163: if(!(reg_val & (0x1<<1)))
  4037  075C  18B2               	btfsc	cw_init@reg_val,1
  4038  075D  2F6C               	goto	l1981
  4039                           
  4040                           ;CW201x.c: 164: {
  4041                           ;CW201x.c: 166: ret = cw_update_config_info();
  4042  075E  258E               	fcall	_cw_update_config_info
  4043  075F  0140               	movlb	0	; select bank0
  4044  0760  00AD               	movwf	??_cw_init
  4045  0761  01AE               	clrf	??_cw_init+1
  4046  0762  082D               	movf	??_cw_init,w
  4047  0763  00B0               	movwf	cw_init@ret
  4048  0764  082E               	movf	??_cw_init+1,w
  4049  0765  00B1               	movwf	cw_init@ret+1
  4050                           
  4051                           ;CW201x.c: 167: if(ret)
  4052  0766  0830               	movf	cw_init@ret,w
  4053  0767  0431               	iorwf	cw_init@ret+1,w
  4054  0768  1903               	btfsc	3,2
  4055  0769  2FA5               	goto	l2013
  4056                           
  4057                           ;CW201x.c: 168: {
  4058                           ;CW201x.c: 169: return ret;
  4059  076A  0830               	movf	cw_init@ret,w
  4060  076B  0008               	return
  4061  076C                     l1981:	
  4062                           ;CW201x.c: 170: }
  4063                           ;CW201x.c: 171: }
  4064                           
  4065                           
  4066                           ;CW201x.c: 172: else
  4067                           ;CW201x.c: 173: {
  4068                           ;CW201x.c: 174: for(i = 0; i < 64; i++)
  4069  076C  01AF               	clrf	cw_init@i
  4070  076D  3040               	movlw	64
  4071  076E  022F               	subwf	cw_init@i,w
  4072  076F  1803               	btfsc	3,0
  4073  0770  2F93               	goto	l2003
  4074  0771                     l1987:	
  4075                           
  4076                           ;CW201x.c: 175: {
  4077                           ;CW201x.c: 176: ret = cw_read(0x10 +i, &reg_val);
  4078  0771  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4079  0772  00AD               	movwf	??_cw_init
  4080  0773  082D               	movf	??_cw_init,w
  4081  0774  00A4               	movwf	cw_read@r_pdata
  4082  0775  082F               	movf	cw_init@i,w
  4083  0776  3E10               	addlw	16
  4084  0777  2349               	fcall	_cw_read
  4085  0778  0140               	movlb	0	; select bank0
  4086  0779  0825               	movf	?_cw_read+1,w
  4087  077A  00B1               	movwf	cw_init@ret+1
  4088  077B  0824               	movf	?_cw_read,w
  4089  077C  00B0               	movwf	cw_init@ret
  4090                           
  4091                           ;CW201x.c: 177: if(ret)
  4092  077D  0830               	movf	cw_init@ret,w
  4093  077E  0431               	iorwf	cw_init@ret+1,w
  4094  077F  1903               	btfsc	3,2
  4095  0780  2F83               	goto	l1995
  4096                           
  4097                           ;CW201x.c: 178: {
  4098                           ;CW201x.c: 179: return 1;
  4099  0781  3001               	movlw	1
  4100  0782  0008               	return
  4101  0783                     l1995:	
  4102                           
  4103                           ;CW201x.c: 180: }
  4104                           ;CW201x.c: 181: if(cw_bat_config_info[i] != reg_val)
  4105  0783  082F               	movf	cw_init@i,w
  4106  0784  3EA0               	addlw	(low (CW201x@cw_bat_config_info| 0))& (0+255)
  4107  0785  0086               	movwf	6
  4108  0786  0187               	clrf	7
  4109  0787  0801               	movf	1,w
  4110  0788  0632               	xorwf	cw_init@reg_val,w
  4111  0789  1D03               	btfss	3,2
  4112  078A  2F93               	goto	l2003
  4113                           
  4114                           ;CW201x.c: 182: {
  4115                           ;CW201x.c: 183: break;
  4116  078B  3001               	movlw	1
  4117  078C  00AD               	movwf	??_cw_init
  4118  078D  082D               	movf	??_cw_init,w
  4119  078E  07AF               	addwf	cw_init@i,f
  4120  078F  3040               	movlw	64
  4121  0790  022F               	subwf	cw_init@i,w
  4122  0791  1C03               	skipc
  4123  0792  2F71               	goto	l1987
  4124  0793                     l2003:	
  4125                           
  4126                           ;CW201x.c: 184: }
  4127                           ;CW201x.c: 185: }
  4128                           ;CW201x.c: 186: if(i != 64)
  4129  0793  3040               	movlw	64
  4130  0794  062F               	xorwf	cw_init@i,w
  4131  0795  1903               	btfsc	3,2
  4132  0796  2FA5               	goto	l2013
  4133                           
  4134                           ;CW201x.c: 187: {
  4135                           ;CW201x.c: 189: ret = cw_update_config_info();
  4136  0797  258E               	fcall	_cw_update_config_info
  4137  0798  0140               	movlb	0	; select bank0
  4138  0799  00AD               	movwf	??_cw_init
  4139  079A  01AE               	clrf	??_cw_init+1
  4140  079B  082D               	movf	??_cw_init,w
  4141  079C  00B0               	movwf	cw_init@ret
  4142  079D  082E               	movf	??_cw_init+1,w
  4143  079E  00B1               	movwf	cw_init@ret+1
  4144                           
  4145                           ;CW201x.c: 190: if(ret)
  4146  079F  0830               	movf	cw_init@ret,w
  4147  07A0  0431               	iorwf	cw_init@ret+1,w
  4148  07A1  1903               	btfsc	3,2
  4149  07A2  2FA5               	goto	l2013
  4150                           
  4151                           ;CW201x.c: 191: {
  4152                           ;CW201x.c: 192: return ret;
  4153  07A3  0830               	movf	cw_init@ret,w
  4154  07A4  0008               	return
  4155  07A5                     l2013:	
  4156                           
  4157                           ;CW201x.c: 193: }
  4158                           ;CW201x.c: 194: }
  4159                           ;CW201x.c: 195: }
  4160                           ;CW201x.c: 197: for (i = 0; i < 30; i++) {
  4161  07A5  01AF               	clrf	cw_init@i
  4162  07A6  301E               	movlw	30
  4163  07A7  022F               	subwf	cw_init@i,w
  4164  07A8  1803               	btfsc	3,0
  4165  07A9  2FCD               	goto	l2039
  4166  07AA                     l2019:	
  4167                           
  4168                           ;CW201x.c: 198: CW_Delay10ms(10);
  4169  07AA  300A               	movlw	10
  4170  07AB  00F0               	movwf	CW_Delay10ms@c
  4171  07AC  3000               	movlw	0
  4172  07AD  00F1               	movwf	CW_Delay10ms@c+1
  4173  07AE  2223               	fcall	_CW_Delay10ms
  4174                           
  4175                           ;CW201x.c: 199: ret = cw_read(0x4, &reg_val);
  4176  07AF  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4177  07B0  0140               	movlb	0	; select bank0
  4178  07B1  00AD               	movwf	??_cw_init
  4179  07B2  082D               	movf	??_cw_init,w
  4180  07B3  00A4               	movwf	cw_read@r_pdata
  4181  07B4  3004               	movlw	4
  4182  07B5  2349               	fcall	_cw_read
  4183  07B6  0140               	movlb	0	; select bank0
  4184  07B7  0825               	movf	?_cw_read+1,w
  4185  07B8  00B1               	movwf	cw_init@ret+1
  4186  07B9  0824               	movf	?_cw_read,w
  4187  07BA  00B0               	movwf	cw_init@ret
  4188                           
  4189                           ;CW201x.c: 200: if (ret)
  4190  07BB  0830               	movf	cw_init@ret,w
  4191  07BC  0431               	iorwf	cw_init@ret+1,w
  4192  07BD  1903               	btfsc	3,2
  4193  07BE  2FC1               	goto	l2031
  4194                           
  4195                           ;CW201x.c: 201: return 1;
  4196  07BF  3001               	movlw	1
  4197  07C0  0008               	return
  4198  07C1                     l2031:	
  4199                           
  4200                           ;CW201x.c: 202: else if (reg_val <= 100)
  4201  07C1  3065               	movlw	101
  4202  07C2  0232               	subwf	cw_init@reg_val,w
  4203  07C3  1C03               	btfss	3,0
  4204  07C4  2FCD               	goto	l2039
  4205                           
  4206                           ;CW201x.c: 203: break;
  4207  07C5  3001               	movlw	1
  4208  07C6  00AD               	movwf	??_cw_init
  4209  07C7  082D               	movf	??_cw_init,w
  4210  07C8  07AF               	addwf	cw_init@i,f
  4211  07C9  301E               	movlw	30
  4212  07CA  022F               	subwf	cw_init@i,w
  4213  07CB  1C03               	skipc
  4214  07CC  2FAA               	goto	l2019
  4215  07CD                     l2039:	
  4216                           
  4217                           ;CW201x.c: 204: }
  4218                           ;CW201x.c: 206: if (i >=30){
  4219  07CD  301E               	movlw	30
  4220  07CE  022F               	subwf	cw_init@i,w
  4221  07CF  1C03               	skipc
  4222  07D0  2FE2               	goto	l2049
  4223                           
  4224                           ;CW201x.c: 207: reg_val = (0x3<<6);
  4225  07D1  30C0               	movlw	192
  4226  07D2  00AD               	movwf	??_cw_init
  4227  07D3  082D               	movf	??_cw_init,w
  4228  07D4  00B2               	movwf	cw_init@reg_val
  4229                           
  4230                           ;CW201x.c: 208: ret = cw_write(0xA, &reg_val);
  4231  07D5  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4232  07D6  00AD               	movwf	??_cw_init
  4233  07D7  082D               	movf	??_cw_init,w
  4234  07D8  00A4               	movwf	cw_write@w_pdata
  4235  07D9  300A               	movlw	10
  4236  07DA  2317               	fcall	_cw_write
  4237  07DB  0140               	movlb	0	; select bank0
  4238  07DC  0825               	movf	?_cw_write+1,w
  4239  07DD  00B1               	movwf	cw_init@ret+1
  4240  07DE  0824               	movf	?_cw_write,w
  4241  07DF  00B0               	movwf	cw_init@ret
  4242                           
  4243                           ;CW201x.c: 210: return 4;
  4244  07E0  3004               	movlw	4
  4245  07E1  0008               	return
  4246  07E2                     l2049:	
  4247                           
  4248                           ;CW201x.c: 211: }
  4249                           ;CW201x.c: 212: return 0;
  4250  07E2  3000               	movlw	0
  4251  07E3  0008               	return
  4252  07E4                     __end_of_cw_init:	
  4253                           
  4254                           	psect	text14
  4255  058E                     __ptext14:	
  4256 ;; *************** function _cw_update_config_info *****************
  4257 ;; Defined at:
  4258 ;;		line 53 in file "CW201x.c"
  4259 ;; Parameters:    Size  Location     Type
  4260 ;;		None
  4261 ;; Auto vars:     Size  Location     Type
  4262 ;;  ret             2    9[BANK0 ] int 
  4263 ;;  reg_val         1   12[BANK0 ] unsigned char 
  4264 ;;  i               1   11[BANK0 ] unsigned char 
  4265 ;;  reset_val       1    8[BANK0 ] unsigned char 
  4266 ;; Return value:  Size  Location     Type
  4267 ;;                  1    wreg      unsigned char 
  4268 ;; Registers used:
  4269 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4270 ;; Tracked objects:
  4271 ;;		On entry : 0/0
  4272 ;;		On exit  : 0/0
  4273 ;;		Unchanged: 0/0
  4274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4275 ;;      Params:         0       0       0       0
  4276 ;;      Locals:         0       5       0       0
  4277 ;;      Temps:          0       1       0       0
  4278 ;;      Totals:         0       6       0       0
  4279 ;;Total ram usage:        6 bytes
  4280 ;; Hardware stack levels used:    1
  4281 ;; Hardware stack levels required when called:    4
  4282 ;; This function calls:
  4283 ;;		_CW_Delay100us
  4284 ;;		_cw_read
  4285 ;;		_cw_write
  4286 ;; This function is called by:
  4287 ;;		_cw_init
  4288 ;; This function uses a non-reentrant model
  4289 ;;
  4290                           
  4291                           
  4292                           ;psect for function _cw_update_config_info
  4293  058E                     _cw_update_config_info:	
  4294                           
  4295                           ;CW201x.c: 55: int ret = 0;
  4296                           
  4297                           ;incstack = 0
  4298                           ; Regs used in _cw_update_config_info: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  4299  058E  0140               	movlb	0	; select bank0
  4300  058F  01A9               	clrf	cw_update_config_info@ret
  4301  0590  01AA               	clrf	cw_update_config_info@ret+1
  4302                           
  4303                           ;CW201x.c: 56: unsigned char i;
  4304                           ;CW201x.c: 57: unsigned char reset_val;
  4305                           ;CW201x.c: 58: unsigned char reg_val;
  4306                           ;CW201x.c: 60: ret = cw_read(0xA, &reg_val);
  4307  0591  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4308  0592  00A7               	movwf	??_cw_update_config_info
  4309  0593  0827               	movf	??_cw_update_config_info,w
  4310  0594  00A4               	movwf	cw_read@r_pdata
  4311  0595  300A               	movlw	10
  4312  0596  2349               	fcall	_cw_read
  4313  0597  0140               	movlb	0	; select bank0
  4314  0598  0825               	movf	?_cw_read+1,w
  4315  0599  00AA               	movwf	cw_update_config_info@ret+1
  4316  059A  0824               	movf	?_cw_read,w
  4317  059B  00A9               	movwf	cw_update_config_info@ret
  4318                           
  4319                           ;CW201x.c: 61: if(ret)
  4320  059C  0829               	movf	cw_update_config_info@ret,w
  4321  059D  042A               	iorwf	cw_update_config_info@ret+1,w
  4322  059E  1903               	btfsc	3,2
  4323  059F  2DA2               	goto	l1841
  4324                           
  4325                           ;CW201x.c: 62: {
  4326                           ;CW201x.c: 63: return 1;
  4327  05A0  3001               	movlw	1
  4328  05A1  0008               	return
  4329  05A2                     l1841:	
  4330                           
  4331                           ;CW201x.c: 64: }
  4332                           ;CW201x.c: 65: if((reg_val & (0x3<<6)) == (0x3<<6))
  4333  05A2  30C0               	movlw	192
  4334  05A3  052C               	andwf	cw_update_config_info@reg_val,w
  4335  05A4  00A7               	movwf	??_cw_update_config_info
  4336  05A5  30C0               	movlw	192
  4337  05A6  0627               	xorwf	??_cw_update_config_info,w
  4338  05A7  1D03               	btfss	3,2
  4339  05A8  2DAB               	goto	l1847
  4340                           
  4341                           ;CW201x.c: 66: {
  4342                           ;CW201x.c: 67: return 2;
  4343  05A9  3002               	movlw	2
  4344  05AA  0008               	return
  4345  05AB                     l1847:	
  4346                           
  4347                           ;CW201x.c: 68: }
  4348                           ;CW201x.c: 70: for(i = 0; i < 64; i++)
  4349  05AB  01AB               	clrf	cw_update_config_info@i
  4350  05AC  3040               	movlw	64
  4351  05AD  022B               	subwf	cw_update_config_info@i,w
  4352  05AE  1803               	btfsc	3,0
  4353  05AF  2DD2               	goto	l1867
  4354  05B0                     l1853:	
  4355                           
  4356                           ;CW201x.c: 71: {
  4357                           ;CW201x.c: 72: reg_val = cw_bat_config_info[i];
  4358  05B0  082B               	movf	cw_update_config_info@i,w
  4359  05B1  3EA0               	addlw	(low (CW201x@cw_bat_config_info| 0))& (0+255)
  4360  05B2  0086               	movwf	6
  4361  05B3  0187               	clrf	7
  4362  05B4  0801               	movf	1,w
  4363  05B5  00A7               	movwf	??_cw_update_config_info
  4364  05B6  0827               	movf	??_cw_update_config_info,w
  4365  05B7  00AC               	movwf	cw_update_config_info@reg_val
  4366                           
  4367                           ;CW201x.c: 73: ret = cw_write(0x10+i, &reg_val);
  4368  05B8  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4369  05B9  00A7               	movwf	??_cw_update_config_info
  4370  05BA  0827               	movf	??_cw_update_config_info,w
  4371  05BB  00A4               	movwf	cw_write@w_pdata
  4372  05BC  082B               	movf	cw_update_config_info@i,w
  4373  05BD  3E10               	addlw	16
  4374  05BE  2317               	fcall	_cw_write
  4375  05BF  0140               	movlb	0	; select bank0
  4376  05C0  0825               	movf	?_cw_write+1,w
  4377  05C1  00AA               	movwf	cw_update_config_info@ret+1
  4378  05C2  0824               	movf	?_cw_write,w
  4379  05C3  00A9               	movwf	cw_update_config_info@ret
  4380                           
  4381                           ;CW201x.c: 74: if(ret)
  4382  05C4  0829               	movf	cw_update_config_info@ret,w
  4383  05C5  042A               	iorwf	cw_update_config_info@ret+1,w
  4384  05C6  1903               	btfsc	3,2
  4385  05C7  2DCA               	goto	l1863
  4386                           
  4387                           ;CW201x.c: 75: {
  4388                           ;CW201x.c: 76: return 1;
  4389  05C8  3001               	movlw	1
  4390  05C9  0008               	return
  4391  05CA                     l1863:	
  4392  05CA  3001               	movlw	1
  4393  05CB  00A7               	movwf	??_cw_update_config_info
  4394  05CC  0827               	movf	??_cw_update_config_info,w
  4395  05CD  07AB               	addwf	cw_update_config_info@i,f
  4396  05CE  3040               	movlw	64
  4397  05CF  022B               	subwf	cw_update_config_info@i,w
  4398  05D0  1C03               	skipc
  4399  05D1  2DB0               	goto	l1853
  4400  05D2                     l1867:	
  4401                           
  4402                           ;CW201x.c: 77: }
  4403                           ;CW201x.c: 78: }
  4404                           ;CW201x.c: 81: for(i = 0; i < 64; i++)
  4405  05D2  01AB               	clrf	cw_update_config_info@i
  4406  05D3  3040               	movlw	64
  4407  05D4  022B               	subwf	cw_update_config_info@i,w
  4408  05D5  1803               	btfsc	3,0
  4409  05D6  2DFB               	goto	l1891
  4410  05D7                     l1873:	
  4411                           
  4412                           ;CW201x.c: 82: {
  4413                           ;CW201x.c: 83: ret = cw_read(0x10+i, &reg_val);
  4414  05D7  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4415  05D8  00A7               	movwf	??_cw_update_config_info
  4416  05D9  0827               	movf	??_cw_update_config_info,w
  4417  05DA  00A4               	movwf	cw_read@r_pdata
  4418  05DB  082B               	movf	cw_update_config_info@i,w
  4419  05DC  3E10               	addlw	16
  4420  05DD  2349               	fcall	_cw_read
  4421  05DE  0140               	movlb	0	; select bank0
  4422  05DF  0825               	movf	?_cw_read+1,w
  4423  05E0  00AA               	movwf	cw_update_config_info@ret+1
  4424  05E1  0824               	movf	?_cw_read,w
  4425  05E2  00A9               	movwf	cw_update_config_info@ret
  4426                           
  4427                           ;CW201x.c: 84: if(ret)
  4428  05E3  0829               	movf	cw_update_config_info@ret,w
  4429  05E4  042A               	iorwf	cw_update_config_info@ret+1,w
  4430  05E5  1903               	btfsc	3,2
  4431  05E6  2DE9               	goto	l1881
  4432                           
  4433                           ;CW201x.c: 85: {
  4434                           ;CW201x.c: 86: return 1;
  4435  05E7  3001               	movlw	1
  4436  05E8  0008               	return
  4437  05E9                     l1881:	
  4438                           
  4439                           ;CW201x.c: 87: }
  4440                           ;CW201x.c: 88: if(reg_val != cw_bat_config_info[i])
  4441  05E9  082B               	movf	cw_update_config_info@i,w
  4442  05EA  3EA0               	addlw	(low (CW201x@cw_bat_config_info| 0))& (0+255)
  4443  05EB  0086               	movwf	6
  4444  05EC  0187               	clrf	7
  4445  05ED  0801               	movf	1,w
  4446  05EE  062C               	xorwf	cw_update_config_info@reg_val,w
  4447  05EF  1903               	skipnz
  4448  05F0  2DF3               	goto	l1887
  4449                           
  4450                           ;CW201x.c: 89: {
  4451                           ;CW201x.c: 90: return 3;
  4452  05F1  3003               	movlw	3
  4453  05F2  0008               	return
  4454  05F3                     l1887:	
  4455  05F3  3001               	movlw	1
  4456  05F4  00A7               	movwf	??_cw_update_config_info
  4457  05F5  0827               	movf	??_cw_update_config_info,w
  4458  05F6  07AB               	addwf	cw_update_config_info@i,f
  4459  05F7  3040               	movlw	64
  4460  05F8  022B               	subwf	cw_update_config_info@i,w
  4461  05F9  1C03               	skipc
  4462  05FA  2DD7               	goto	l1873
  4463  05FB                     l1891:	
  4464                           
  4465                           ;CW201x.c: 91: }
  4466                           ;CW201x.c: 92: }
  4467                           ;CW201x.c: 94: ret = cw_read(0x8, &reg_val);
  4468  05FB  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4469  05FC  00A7               	movwf	??_cw_update_config_info
  4470  05FD  0827               	movf	??_cw_update_config_info,w
  4471  05FE  00A4               	movwf	cw_read@r_pdata
  4472  05FF  3008               	movlw	8
  4473  0600  2349               	fcall	_cw_read
  4474  0601  0140               	movlb	0	; select bank0
  4475  0602  0825               	movf	?_cw_read+1,w
  4476  0603  00AA               	movwf	cw_update_config_info@ret+1
  4477  0604  0824               	movf	?_cw_read,w
  4478  0605  00A9               	movwf	cw_update_config_info@ret
  4479                           
  4480                           ;CW201x.c: 95: if(ret)
  4481  0606  0829               	movf	cw_update_config_info@ret,w
  4482  0607  042A               	iorwf	cw_update_config_info@ret+1,w
  4483  0608  1903               	btfsc	3,2
  4484  0609  2E0C               	goto	l230
  4485                           
  4486                           ;CW201x.c: 96: {
  4487                           ;CW201x.c: 97: return 1;
  4488  060A  3001               	movlw	1
  4489  060B  0008               	return
  4490  060C                     l230:	
  4491                           
  4492                           ;CW201x.c: 98: }
  4493                           ;CW201x.c: 99: reg_val |= (0x1<<1);
  4494  060C  14AC               	bsf	cw_update_config_info@reg_val,1
  4495                           
  4496                           ;CW201x.c: 101: reg_val |= (0x0<<3);
  4497  060D  3007               	movlw	7
  4498  060E  00A7               	movwf	??_cw_update_config_info
  4499  060F  0827               	movf	??_cw_update_config_info,w
  4500  0610  05AC               	andwf	cw_update_config_info@reg_val,f
  4501                           
  4502                           ;CW201x.c: 102: ret = cw_write(0x8, &reg_val);
  4503  0611  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4504  0612  00A7               	movwf	??_cw_update_config_info
  4505  0613  0827               	movf	??_cw_update_config_info,w
  4506  0614  00A4               	movwf	cw_write@w_pdata
  4507  0615  3008               	movlw	8
  4508  0616  2317               	fcall	_cw_write
  4509  0617  0140               	movlb	0	; select bank0
  4510  0618  0825               	movf	?_cw_write+1,w
  4511  0619  00AA               	movwf	cw_update_config_info@ret+1
  4512  061A  0824               	movf	?_cw_write,w
  4513  061B  00A9               	movwf	cw_update_config_info@ret
  4514                           
  4515                           ;CW201x.c: 103: if(ret)
  4516  061C  0829               	movf	cw_update_config_info@ret,w
  4517  061D  042A               	iorwf	cw_update_config_info@ret+1,w
  4518  061E  1903               	btfsc	3,2
  4519  061F  2E22               	goto	l1909
  4520                           
  4521                           ;CW201x.c: 104: {
  4522                           ;CW201x.c: 105: return 1;
  4523  0620  3001               	movlw	1
  4524  0621  0008               	return
  4525  0622                     l1909:	
  4526                           
  4527                           ;CW201x.c: 106: }
  4528                           ;CW201x.c: 108: reset_val = (0x0<<6);
  4529  0622  01A8               	clrf	cw_update_config_info@reset_val
  4530                           
  4531                           ;CW201x.c: 109: reg_val = (0xf<<0);
  4532  0623  300F               	movlw	15
  4533  0624  00A7               	movwf	??_cw_update_config_info
  4534  0625  0827               	movf	??_cw_update_config_info,w
  4535  0626  00AC               	movwf	cw_update_config_info@reg_val
  4536                           
  4537                           ;CW201x.c: 110: ret = cw_write(0xA, &reg_val);
  4538  0627  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4539  0628  00A7               	movwf	??_cw_update_config_info
  4540  0629  0827               	movf	??_cw_update_config_info,w
  4541  062A  00A4               	movwf	cw_write@w_pdata
  4542  062B  300A               	movlw	10
  4543  062C  2317               	fcall	_cw_write
  4544  062D  0140               	movlb	0	; select bank0
  4545  062E  0825               	movf	?_cw_write+1,w
  4546  062F  00AA               	movwf	cw_update_config_info@ret+1
  4547  0630  0824               	movf	?_cw_write,w
  4548  0631  00A9               	movwf	cw_update_config_info@ret
  4549                           
  4550                           ;CW201x.c: 111: if(ret)
  4551  0632  0829               	movf	cw_update_config_info@ret,w
  4552  0633  042A               	iorwf	cw_update_config_info@ret+1,w
  4553  0634  1903               	btfsc	3,2
  4554  0635  2E38               	goto	l1921
  4555                           
  4556                           ;CW201x.c: 112: {
  4557                           ;CW201x.c: 113: return 1;
  4558  0636  3001               	movlw	1
  4559  0637  0008               	return
  4560  0638                     l1921:	
  4561                           
  4562                           ;CW201x.c: 114: }
  4563                           ;CW201x.c: 115: CW_Delay100us();
  4564  0638  21E3               	fcall	_CW_Delay100us
  4565                           
  4566                           ;CW201x.c: 116: ret = cw_write(0xA, &reset_val);
  4567  0639  3028               	movlw	(low (cw_update_config_info@reset_val| 0))& (0+255)
  4568  063A  0140               	movlb	0	; select bank0
  4569  063B  00A7               	movwf	??_cw_update_config_info
  4570  063C  0827               	movf	??_cw_update_config_info,w
  4571  063D  00A4               	movwf	cw_write@w_pdata
  4572  063E  300A               	movlw	10
  4573  063F  2317               	fcall	_cw_write
  4574  0640  0140               	movlb	0	; select bank0
  4575  0641  0825               	movf	?_cw_write+1,w
  4576  0642  00AA               	movwf	cw_update_config_info@ret+1
  4577  0643  0824               	movf	?_cw_write,w
  4578  0644  00A9               	movwf	cw_update_config_info@ret
  4579                           
  4580                           ;CW201x.c: 117: if(ret)
  4581  0645  0829               	movf	cw_update_config_info@ret,w
  4582  0646  042A               	iorwf	cw_update_config_info@ret+1,w
  4583  0647  1903               	btfsc	3,2
  4584  0648  2E4B               	goto	l1931
  4585                           
  4586                           ;CW201x.c: 118: {
  4587                           ;CW201x.c: 119: return 1;
  4588  0649  3001               	movlw	1
  4589  064A  0008               	return
  4590  064B                     l1931:	
  4591                           
  4592                           ;CW201x.c: 120: }
  4593                           ;CW201x.c: 121: return 0;
  4594  064B  3000               	movlw	0
  4595  064C  0008               	return
  4596  064D                     __end_of_cw_update_config_info:	
  4597                           
  4598                           	psect	text15
  4599  0317                     __ptext15:	
  4600 ;; *************** function _cw_write *****************
  4601 ;; Defined at:
  4602 ;;		line 222 in file "iic.c"
  4603 ;; Parameters:    Size  Location     Type
  4604 ;;  point_reg       1    wreg     unsigned char 
  4605 ;;  w_pdata         1    4[BANK0 ] PTR unsigned char 
  4606 ;;		 -> cw_por@reset_val(1), cw_init@reg_val(1), cw_update_config_info@reset_val(1), cw_update_config_info@reg_val(1), 
  4607 ;; Auto vars:     Size  Location     Type
  4608 ;;  point_reg       1   12[COMMON] unsigned char 
  4609 ;; Return value:  Size  Location     Type
  4610 ;;                  2    4[BANK0 ] int 
  4611 ;; Registers used:
  4612 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4613 ;; Tracked objects:
  4614 ;;		On entry : 0/0
  4615 ;;		On exit  : 0/0
  4616 ;;		Unchanged: 0/0
  4617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4618 ;;      Params:         0       3       0       0
  4619 ;;      Locals:         1       0       0       0
  4620 ;;      Temps:          0       0       0       0
  4621 ;;      Totals:         1       3       0       0
  4622 ;;Total ram usage:        4 bytes
  4623 ;; Hardware stack levels used:    1
  4624 ;; Hardware stack levels required when called:    3
  4625 ;; This function calls:
  4626 ;;		_start
  4627 ;;		_stop
  4628 ;;		_wait_r_ack
  4629 ;;		_write_byte
  4630 ;; This function is called by:
  4631 ;;		_cw_update_config_info
  4632 ;;		_cw_init
  4633 ;;		_cw_por
  4634 ;; This function uses a non-reentrant model
  4635 ;;
  4636                           
  4637                           
  4638                           ;psect for function _cw_write
  4639  0317                     _cw_write:	
  4640                           
  4641                           ;incstack = 0
  4642                           ; Regs used in _cw_write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4643                           ;cw_write@point_reg stored from wreg
  4644  0317  00FC               	movwf	cw_write@point_reg
  4645                           
  4646                           ;iic.c: 224: start();
  4647  0318  2141               	fcall	_start
  4648                           
  4649                           ;iic.c: 225: write_byte(0xc4);
  4650  0319  30C4               	movlw	196
  4651  031A  21C4               	fcall	_write_byte
  4652                           
  4653                           ;iic.c: 226: if(wait_r_ack())
  4654  031B  22E5               	fcall	_wait_r_ack
  4655  031C  087A               	movf	?_wait_r_ack,w
  4656  031D  047B               	iorwf	?_wait_r_ack+1,w
  4657  031E  1903               	btfsc	3,2
  4658  031F  2B26               	goto	l1787
  4659                           
  4660                           ;iic.c: 227: {
  4661                           ;iic.c: 228: return 1;
  4662  0320  3001               	movlw	1
  4663  0321  0140               	movlb	0	; select bank0
  4664  0322  00A4               	movwf	?_cw_write
  4665  0323  3000               	movlw	0
  4666  0324  00A5               	movwf	?_cw_write+1
  4667  0325  0008               	return
  4668  0326                     l1787:	
  4669                           
  4670                           ;iic.c: 229: }
  4671                           ;iic.c: 230: write_byte(point_reg);
  4672  0326  087C               	movf	cw_write@point_reg,w
  4673  0327  21C4               	fcall	_write_byte
  4674                           
  4675                           ;iic.c: 231: if(wait_r_ack())
  4676  0328  22E5               	fcall	_wait_r_ack
  4677  0329  087A               	movf	?_wait_r_ack,w
  4678  032A  047B               	iorwf	?_wait_r_ack+1,w
  4679  032B  1903               	btfsc	3,2
  4680  032C  2B33               	goto	l1793
  4681                           
  4682                           ;iic.c: 232: {
  4683                           ;iic.c: 233: return 1;
  4684  032D  3001               	movlw	1
  4685  032E  0140               	movlb	0	; select bank0
  4686  032F  00A4               	movwf	?_cw_write
  4687  0330  3000               	movlw	0
  4688  0331  00A5               	movwf	?_cw_write+1
  4689  0332  0008               	return
  4690  0333                     l1793:	
  4691                           
  4692                           ;iic.c: 234: }
  4693                           ;iic.c: 235: write_byte(*w_pdata);
  4694  0333  0140               	movlb	0	; select bank0
  4695  0334  0824               	movf	cw_write@w_pdata,w
  4696  0335  0086               	movwf	6
  4697  0336  0187               	clrf	7
  4698  0337  0801               	movf	1,w
  4699  0338  21C4               	fcall	_write_byte
  4700                           
  4701                           ;iic.c: 236: if(wait_r_ack())
  4702  0339  22E5               	fcall	_wait_r_ack
  4703  033A  087A               	movf	?_wait_r_ack,w
  4704  033B  047B               	iorwf	?_wait_r_ack+1,w
  4705  033C  1903               	btfsc	3,2
  4706  033D  2B44               	goto	l1801
  4707                           
  4708                           ;iic.c: 237: {
  4709                           ;iic.c: 238: return 1;
  4710  033E  3001               	movlw	1
  4711  033F  0140               	movlb	0	; select bank0
  4712  0340  00A4               	movwf	?_cw_write
  4713  0341  3000               	movlw	0
  4714  0342  00A5               	movwf	?_cw_write+1
  4715  0343  0008               	return
  4716  0344                     l1801:	
  4717                           
  4718                           ;iic.c: 239: }
  4719                           ;iic.c: 240: stop();
  4720  0344  2164               	fcall	_stop
  4721                           
  4722                           ;iic.c: 241: return 0;
  4723  0345  0140               	movlb	0	; select bank0
  4724  0346  01A4               	clrf	?_cw_write
  4725  0347  01A5               	clrf	?_cw_write+1
  4726  0348  0008               	return
  4727  0349                     __end_of_cw_write:	
  4728                           
  4729                           	psect	text16
  4730  0349                     __ptext16:	
  4731 ;; *************** function _cw_read *****************
  4732 ;; Defined at:
  4733 ;;		line 164 in file "iic.c"
  4734 ;; Parameters:    Size  Location     Type
  4735 ;;  point_reg       1    wreg     unsigned char 
  4736 ;;  r_pdata         1    4[BANK0 ] PTR unsigned char 
  4737 ;;		 -> cw_get_capacity@reg_val(1), cw_init@reg_val(1), cw_update_config_info@reg_val(1), 
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;  point_reg       1   13[COMMON] unsigned char 
  4740 ;; Return value:  Size  Location     Type
  4741 ;;                  2    4[BANK0 ] int 
  4742 ;; Registers used:
  4743 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4744 ;; Tracked objects:
  4745 ;;		On entry : 0/0
  4746 ;;		On exit  : 0/0
  4747 ;;		Unchanged: 0/0
  4748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4749 ;;      Params:         0       2       0       0
  4750 ;;      Locals:         1       0       0       0
  4751 ;;      Temps:          1       0       0       0
  4752 ;;      Totals:         2       2       0       0
  4753 ;;Total ram usage:        4 bytes
  4754 ;; Hardware stack levels used:    1
  4755 ;; Hardware stack levels required when called:    3
  4756 ;; This function calls:
  4757 ;;		_read_byte
  4758 ;;		_s_ack
  4759 ;;		_start
  4760 ;;		_stop
  4761 ;;		_wait_r_ack
  4762 ;;		_write_byte
  4763 ;; This function is called by:
  4764 ;;		_cw_update_config_info
  4765 ;;		_cw_init
  4766 ;;		_cw_get_capacity
  4767 ;; This function uses a non-reentrant model
  4768 ;;
  4769                           
  4770                           
  4771                           ;psect for function _cw_read
  4772  0349                     _cw_read:	
  4773                           
  4774                           ;incstack = 0
  4775                           ; Regs used in _cw_read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4776                           ;cw_read@point_reg stored from wreg
  4777  0349  00FD               	movwf	cw_read@point_reg
  4778                           
  4779                           ;iic.c: 166: start();
  4780  034A  2141               	fcall	_start
  4781                           
  4782                           ;iic.c: 167: write_byte(0xc4);
  4783  034B  30C4               	movlw	196
  4784  034C  21C4               	fcall	_write_byte
  4785                           
  4786                           ;iic.c: 168: if(wait_r_ack())
  4787  034D  22E5               	fcall	_wait_r_ack
  4788  034E  087A               	movf	?_wait_r_ack,w
  4789  034F  047B               	iorwf	?_wait_r_ack+1,w
  4790  0350  1903               	btfsc	3,2
  4791  0351  2B58               	goto	l1759
  4792                           
  4793                           ;iic.c: 169: {
  4794                           ;iic.c: 170: return 1;
  4795  0352  3001               	movlw	1
  4796  0353  0140               	movlb	0	; select bank0
  4797  0354  00A4               	movwf	?_cw_read
  4798  0355  3000               	movlw	0
  4799  0356  00A5               	movwf	?_cw_read+1
  4800  0357  0008               	return
  4801  0358                     l1759:	
  4802                           
  4803                           ;iic.c: 171: }
  4804                           ;iic.c: 172: write_byte(point_reg);
  4805  0358  087D               	movf	cw_read@point_reg,w
  4806  0359  21C4               	fcall	_write_byte
  4807                           
  4808                           ;iic.c: 173: if(wait_r_ack())
  4809  035A  22E5               	fcall	_wait_r_ack
  4810  035B  087A               	movf	?_wait_r_ack,w
  4811  035C  047B               	iorwf	?_wait_r_ack+1,w
  4812  035D  1903               	btfsc	3,2
  4813  035E  2B65               	goto	l1765
  4814                           
  4815                           ;iic.c: 174: {
  4816                           ;iic.c: 175: return 1;
  4817  035F  3001               	movlw	1
  4818  0360  0140               	movlb	0	; select bank0
  4819  0361  00A4               	movwf	?_cw_read
  4820  0362  3000               	movlw	0
  4821  0363  00A5               	movwf	?_cw_read+1
  4822  0364  0008               	return
  4823  0365                     l1765:	
  4824                           
  4825                           ;iic.c: 176: }
  4826                           ;iic.c: 177: start();
  4827  0365  2141               	fcall	_start
  4828                           
  4829                           ;iic.c: 178: write_byte(0xc5);
  4830  0366  30C5               	movlw	197
  4831  0367  21C4               	fcall	_write_byte
  4832                           
  4833                           ;iic.c: 179: if(wait_r_ack())
  4834  0368  22E5               	fcall	_wait_r_ack
  4835  0369  087A               	movf	?_wait_r_ack,w
  4836  036A  047B               	iorwf	?_wait_r_ack+1,w
  4837  036B  1903               	btfsc	3,2
  4838  036C  2B73               	goto	l1771
  4839                           
  4840                           ;iic.c: 180: {
  4841                           ;iic.c: 181: return 1;
  4842  036D  3001               	movlw	1
  4843  036E  0140               	movlb	0	; select bank0
  4844  036F  00A4               	movwf	?_cw_read
  4845  0370  3000               	movlw	0
  4846  0371  00A5               	movwf	?_cw_read+1
  4847  0372  0008               	return
  4848  0373                     l1771:	
  4849                           
  4850                           ;iic.c: 182: }
  4851                           ;iic.c: 183: *r_pdata = read_byte();
  4852  0373  2265               	fcall	_read_byte
  4853  0374  00FC               	movwf	??_cw_read
  4854  0375  0140               	movlb	0	; select bank0
  4855  0376  0824               	movf	cw_read@r_pdata,w
  4856  0377  0086               	movwf	6
  4857  0378  0187               	clrf	7
  4858  0379  087C               	movf	??_cw_read,w
  4859  037A  0081               	movwf	1
  4860                           
  4861                           ;iic.c: 184: s_ack();
  4862  037B  2136               	fcall	_s_ack
  4863                           
  4864                           ;iic.c: 185: stop();
  4865  037C  2164               	fcall	_stop
  4866                           
  4867                           ;iic.c: 186: return 0;
  4868  037D  0140               	movlb	0	; select bank0
  4869  037E  01A4               	clrf	?_cw_read
  4870  037F  01A5               	clrf	?_cw_read+1
  4871  0380  0008               	return
  4872  0381                     __end_of_cw_read:	
  4873                           
  4874                           	psect	text17
  4875  01C4                     __ptext17:	
  4876 ;; *************** function _write_byte *****************
  4877 ;; Defined at:
  4878 ;;		line 126 in file "iic.c"
  4879 ;; Parameters:    Size  Location     Type
  4880 ;;  w_data          1    wreg     unsigned char 
  4881 ;; Auto vars:     Size  Location     Type
  4882 ;;  w_data          1    5[COMMON] unsigned char 
  4883 ;;  i               1    6[COMMON] unsigned char 
  4884 ;; Return value:  Size  Location     Type
  4885 ;;                  1    wreg      void 
  4886 ;; Registers used:
  4887 ;;		wreg, status,2, status,0, pclath, cstack
  4888 ;; Tracked objects:
  4889 ;;		On entry : 0/0
  4890 ;;		On exit  : 0/0
  4891 ;;		Unchanged: 0/0
  4892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4893 ;;      Params:         0       0       0       0
  4894 ;;      Locals:         2       0       0       0
  4895 ;;      Temps:          1       0       0       0
  4896 ;;      Totals:         3       0       0       0
  4897 ;;Total ram usage:        3 bytes
  4898 ;; Hardware stack levels used:    1
  4899 ;; Hardware stack levels required when called:    1
  4900 ;; This function calls:
  4901 ;;		_Delay10us
  4902 ;; This function is called by:
  4903 ;;		_cw_read
  4904 ;;		_cw_read_word
  4905 ;;		_cw_write
  4906 ;; This function uses a non-reentrant model
  4907 ;;
  4908                           
  4909                           
  4910                           ;psect for function _write_byte
  4911  01C4                     _write_byte:	
  4912                           
  4913                           ;incstack = 0
  4914                           ; Regs used in _write_byte: [wreg+status,2+status,0+pclath+cstack]
  4915                           ;write_byte@w_data stored from wreg
  4916  01C4  00F5               	movwf	write_byte@w_data
  4917                           
  4918                           ;iic.c: 128: unsigned char i;
  4919                           ;iic.c: 129: do { TRISCbits.TRISC1 = 0; } while(0);
  4920  01C5  0140               	movlb	0	; select bank0
  4921  01C6  1094               	bcf	20,1	;volatile
  4922                           
  4923                           ;iic.c: 130: for(i = 0; i < 8; i++)
  4924  01C7  01F6               	clrf	write_byte@i
  4925  01C8                     L5:	
  4926  01C8  3008               	movlw	8
  4927  01C9  0276               	subwf	write_byte@i,w
  4928  01CA  1803               	btfsc	3,0
  4929  01CB  0008               	return
  4930                           
  4931                           ;iic.c: 131: {
  4932                           ;iic.c: 132: LATCbits.LATC1 = (w_data & 0x80)?1:0;
  4933  01CC  1FF5               	btfss	write_byte@w_data,7
  4934  01CD  29D1               	goto	u1250
  4935  01CE  0140               	movlb	0	; select bank0
  4936  01CF  149A               	bsf	26,1	;volatile
  4937  01D0  29D3               	goto	l1689
  4938  01D1                     u1250:	
  4939  01D1  0140               	movlb	0	; select bank0
  4940  01D2  109A               	bcf	26,1	;volatile
  4941  01D3                     l1689:	
  4942                           
  4943                           ;iic.c: 133: Delay10us();
  4944  01D3  2203               	fcall	_Delay10us
  4945                           
  4946                           ;iic.c: 134: do { LATCbits.LATC0 = 1; } while(0);
  4947  01D4  0140               	movlb	0	; select bank0
  4948  01D5  141A               	bsf	26,0	;volatile
  4949                           
  4950                           ;iic.c: 135: Delay10us();
  4951  01D6  2203               	fcall	_Delay10us
  4952                           
  4953                           ;iic.c: 136: do { LATCbits.LATC0 = 0; } while(0);
  4954  01D7  0140               	movlb	0	; select bank0
  4955  01D8  101A               	bcf	26,0	;volatile
  4956                           
  4957                           ;iic.c: 137: Delay10us();
  4958  01D9  2203               	fcall	_Delay10us
  4959                           
  4960                           ;iic.c: 138: w_data = w_data << 1;
  4961  01DA  3575               	lslf	write_byte@w_data,w
  4962  01DB  00F4               	movwf	??_write_byte
  4963  01DC  0874               	movf	??_write_byte,w
  4964  01DD  00F5               	movwf	write_byte@w_data
  4965  01DE  3001               	movlw	1
  4966  01DF  00F4               	movwf	??_write_byte
  4967  01E0  0874               	movf	??_write_byte,w
  4968  01E1  07F6               	addwf	write_byte@i,f
  4969  01E2  29C8               	goto	L5
  4970  01E3                     __end_of_write_byte:	
  4971                           
  4972                           	psect	text18
  4973  02E5                     __ptext18:	
  4974 ;; *************** function _wait_r_ack *****************
  4975 ;; Defined at:
  4976 ;;		line 80 in file "iic.c"
  4977 ;; Parameters:    Size  Location     Type
  4978 ;;		None
  4979 ;; Auto vars:     Size  Location     Type
  4980 ;;  i               2    2[BANK0 ] unsigned int 
  4981 ;;  ack             2    0[BANK0 ] int 
  4982 ;; Return value:  Size  Location     Type
  4983 ;;                  2   10[COMMON] int 
  4984 ;; Registers used:
  4985 ;;		wreg, status,2, status,0, pclath, cstack
  4986 ;; Tracked objects:
  4987 ;;		On entry : 0/0
  4988 ;;		On exit  : 0/0
  4989 ;;		Unchanged: 0/0
  4990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4991 ;;      Params:         2       0       0       0
  4992 ;;      Locals:         0       4       0       0
  4993 ;;      Temps:          0       0       0       0
  4994 ;;      Totals:         2       4       0       0
  4995 ;;Total ram usage:        6 bytes
  4996 ;; Hardware stack levels used:    1
  4997 ;; Hardware stack levels required when called:    2
  4998 ;; This function calls:
  4999 ;;		_r_ack
  5000 ;;		_stop
  5001 ;; This function is called by:
  5002 ;;		_cw_read
  5003 ;;		_cw_read_word
  5004 ;;		_cw_write
  5005 ;; This function uses a non-reentrant model
  5006 ;;
  5007                           
  5008                           
  5009                           ;psect for function _wait_r_ack
  5010  02E5                     _wait_r_ack:	
  5011                           
  5012                           ;iic.c: 82: int ack;
  5013                           ;iic.c: 83: unsigned int i;
  5014                           ;iic.c: 84: ack = 1;
  5015                           
  5016                           ;incstack = 0
  5017                           ; Regs used in _wait_r_ack: [wreg+status,2+status,0+pclath+cstack]
  5018  02E5  3001               	movlw	1
  5019  02E6  0140               	movlb	0	; select bank0
  5020  02E7  00A0               	movwf	wait_r_ack@ack
  5021  02E8  3000               	movlw	0
  5022  02E9  00A1               	movwf	wait_r_ack@ack+1
  5023                           
  5024                           ;iic.c: 85: for(i = 0; i < 100; i++)
  5025  02EA  01A2               	clrf	wait_r_ack@i
  5026  02EB  01A3               	clrf	wait_r_ack@i+1
  5027  02EC  3000               	movlw	0
  5028  02ED  0223               	subwf	wait_r_ack@i+1,w
  5029  02EE  3064               	movlw	100
  5030  02EF  1903               	skipnz
  5031  02F0  0222               	subwf	wait_r_ack@i,w
  5032  02F1  1803               	btfsc	3,0
  5033  02F2  2B14               	goto	l1673
  5034  02F3                     l1657:	
  5035                           
  5036                           ;iic.c: 86: {
  5037                           ;iic.c: 87: ack = r_ack();
  5038  02F3  217C               	fcall	_r_ack
  5039  02F4  0875               	movf	?_r_ack+1,w
  5040  02F5  0140               	movlb	0	; select bank0
  5041  02F6  00A1               	movwf	wait_r_ack@ack+1
  5042  02F7  0874               	movf	?_r_ack,w
  5043  02F8  00A0               	movwf	wait_r_ack@ack
  5044                           
  5045                           ;iic.c: 88: if(!ack)
  5046  02F9  0820               	movf	wait_r_ack@ack,w
  5047  02FA  0421               	iorwf	wait_r_ack@ack+1,w
  5048  02FB  1903               	btfsc	3,2
  5049  02FC  2B14               	goto	l1673
  5050                           
  5051                           ;iic.c: 91: }
  5052                           ;iic.c: 92: if(i == 99)
  5053                           
  5054                           ;iic.c: 89: {
  5055                           ;iic.c: 90: break;
  5056  02FD  3063               	movlw	99
  5057  02FE  0622               	xorwf	wait_r_ack@i,w
  5058  02FF  0423               	iorwf	wait_r_ack@i+1,w
  5059  0300  1D03               	btfss	3,2
  5060  0301  2B08               	goto	l1671
  5061                           
  5062                           ;iic.c: 93: {
  5063                           ;iic.c: 94: stop();
  5064  0302  2164               	fcall	_stop
  5065                           
  5066                           ;iic.c: 95: return 1;
  5067  0303  3001               	movlw	1
  5068  0304  00FA               	movwf	?_wait_r_ack
  5069  0305  3000               	movlw	0
  5070  0306  00FB               	movwf	?_wait_r_ack+1
  5071  0307  0008               	return
  5072  0308                     l1671:	
  5073  0308  3001               	movlw	1
  5074  0309  0140               	movlb	0	; select bank0
  5075  030A  07A2               	addwf	wait_r_ack@i,f
  5076  030B  3000               	movlw	0
  5077  030C  3DA3               	addwfc	wait_r_ack@i+1,f
  5078  030D  3000               	movlw	0
  5079  030E  0223               	subwf	wait_r_ack@i+1,w
  5080  030F  3064               	movlw	100
  5081  0310  1903               	skipnz
  5082  0311  0222               	subwf	wait_r_ack@i,w
  5083  0312  1C03               	skipc
  5084  0313  2AF3               	goto	l1657
  5085  0314                     l1673:	
  5086                           
  5087                           ;iic.c: 96: }
  5088                           ;iic.c: 97: }
  5089                           ;iic.c: 98: return 0;
  5090  0314  01FA               	clrf	?_wait_r_ack
  5091  0315  01FB               	clrf	?_wait_r_ack+1
  5092  0316  0008               	return
  5093  0317                     __end_of_wait_r_ack:	
  5094                           
  5095                           	psect	text19
  5096  0164                     __ptext19:	
  5097 ;; *************** function _stop *****************
  5098 ;; Defined at:
  5099 ;;		line 54 in file "iic.c"
  5100 ;; Parameters:    Size  Location     Type
  5101 ;;		None
  5102 ;; Auto vars:     Size  Location     Type
  5103 ;;		None
  5104 ;; Return value:  Size  Location     Type
  5105 ;;                  1    wreg      void 
  5106 ;; Registers used:
  5107 ;;		wreg, status,2, status,0, pclath, cstack
  5108 ;; Tracked objects:
  5109 ;;		On entry : 0/0
  5110 ;;		On exit  : 0/0
  5111 ;;		Unchanged: 0/0
  5112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5113 ;;      Params:         0       0       0       0
  5114 ;;      Locals:         0       0       0       0
  5115 ;;      Temps:          0       0       0       0
  5116 ;;      Totals:         0       0       0       0
  5117 ;;Total ram usage:        0 bytes
  5118 ;; Hardware stack levels used:    1
  5119 ;; Hardware stack levels required when called:    1
  5120 ;; This function calls:
  5121 ;;		_Delay10us
  5122 ;; This function is called by:
  5123 ;;		_wait_r_ack
  5124 ;;		_cw_read
  5125 ;;		_cw_read_word
  5126 ;;		_cw_write
  5127 ;; This function uses a non-reentrant model
  5128 ;;
  5129                           
  5130                           
  5131                           ;psect for function _stop
  5132  0164                     _stop:	
  5133                           
  5134                           ;incstack = 0
  5135                           ; Regs used in _stop: [wreg+status,2+status,0+pclath+cstack]
  5136                           ;iic.c: 56: do { TRISCbits.TRISC1 = 0; } while(0);
  5137  0164  0140               	movlb	0	; select bank0
  5138  0165  1094               	bcf	20,1	;volatile
  5139                           
  5140                           ;iic.c: 57: do { LATCbits.LATC1 = 0; } while(0);
  5141  0166  109A               	bcf	26,1	;volatile
  5142                           
  5143                           ;iic.c: 58: Delay10us();
  5144  0167  2203               	fcall	_Delay10us
  5145                           
  5146                           ;iic.c: 59: do { LATCbits.LATC0 = 1; } while(0);
  5147  0168  0140               	movlb	0	; select bank0
  5148  0169  141A               	bsf	26,0	;volatile
  5149                           
  5150                           ;iic.c: 60: Delay10us();
  5151  016A  2203               	fcall	_Delay10us
  5152                           
  5153                           ;iic.c: 61: do { LATCbits.LATC1 = 1; } while(0);
  5154  016B  0140               	movlb	0	; select bank0
  5155  016C  149A               	bsf	26,1	;volatile
  5156                           
  5157                           ;iic.c: 62: Delay10us();
  5158  016D  2203               	fcall	_Delay10us
  5159                           
  5160                           ;iic.c: 64: Delay10us();
  5161  016E  2203               	fcall	_Delay10us
  5162  016F  0008               	return
  5163  0170                     __end_of_stop:	
  5164                           
  5165                           	psect	text20
  5166  017C                     __ptext20:	
  5167 ;; *************** function _r_ack *****************
  5168 ;; Defined at:
  5169 ;;		line 67 in file "iic.c"
  5170 ;; Parameters:    Size  Location     Type
  5171 ;;		None
  5172 ;; Auto vars:     Size  Location     Type
  5173 ;;  ack             2    8[COMMON] int 
  5174 ;; Return value:  Size  Location     Type
  5175 ;;                  2    4[COMMON] int 
  5176 ;; Registers used:
  5177 ;;		wreg, status,2, status,0, pclath, cstack
  5178 ;; Tracked objects:
  5179 ;;		On entry : 0/0
  5180 ;;		On exit  : 0/0
  5181 ;;		Unchanged: 0/0
  5182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5183 ;;      Params:         2       0       0       0
  5184 ;;      Locals:         2       0       0       0
  5185 ;;      Temps:          2       0       0       0
  5186 ;;      Totals:         6       0       0       0
  5187 ;;Total ram usage:        6 bytes
  5188 ;; Hardware stack levels used:    1
  5189 ;; Hardware stack levels required when called:    1
  5190 ;; This function calls:
  5191 ;;		_Delay10us
  5192 ;; This function is called by:
  5193 ;;		_wait_r_ack
  5194 ;; This function uses a non-reentrant model
  5195 ;;
  5196                           
  5197                           
  5198                           ;psect for function _r_ack
  5199  017C                     _r_ack:	
  5200                           
  5201                           ;incstack = 0
  5202                           ; Regs used in _r_ack: [wreg+status,2+status,0+pclath+cstack]
  5203                           ;iic.c: 69: int ack;
  5204                           ;iic.c: 70: do { TRISCbits.TRISC1 = 1; } while(0);
  5205  017C  0140               	movlb	0	; select bank0
  5206  017D  1494               	bsf	20,1	;volatile
  5207                           
  5208                           ;iic.c: 71: do { LATCbits.LATC0 = 1; } while(0);
  5209  017E  141A               	bsf	26,0	;volatile
  5210                           
  5211                           ;iic.c: 72: Delay10us();
  5212  017F  2203               	fcall	_Delay10us
  5213                           
  5214                           ;iic.c: 73: ack = PORTCbits.RC1;
  5215  0180  0140               	movlb	0	; select bank0
  5216  0181  0C0E               	rrf	14,w	;volatile
  5217  0182  3901               	andlw	1
  5218  0183  00F6               	movwf	??_r_ack
  5219  0184  01F7               	clrf	??_r_ack+1
  5220  0185  0876               	movf	??_r_ack,w
  5221  0186  00F8               	movwf	r_ack@ack
  5222  0187  0877               	movf	??_r_ack+1,w
  5223  0188  00F9               	movwf	r_ack@ack+1
  5224                           
  5225                           ;iic.c: 74: Delay10us();
  5226  0189  2203               	fcall	_Delay10us
  5227                           
  5228                           ;iic.c: 75: do { LATCbits.LATC0 = 0; } while(0);
  5229  018A  0140               	movlb	0	; select bank0
  5230  018B  101A               	bcf	26,0	;volatile
  5231                           
  5232                           ;iic.c: 76: Delay10us();
  5233  018C  2203               	fcall	_Delay10us
  5234                           
  5235                           ;iic.c: 77: return ack;
  5236  018D  0879               	movf	r_ack@ack+1,w
  5237  018E  00F5               	movwf	?_r_ack+1
  5238  018F  0878               	movf	r_ack@ack,w
  5239  0190  00F4               	movwf	?_r_ack
  5240  0191  0008               	return
  5241  0192                     __end_of_r_ack:	
  5242                           
  5243                           	psect	text21
  5244  0141                     __ptext21:	
  5245 ;; *************** function _start *****************
  5246 ;; Defined at:
  5247 ;;		line 43 in file "iic.c"
  5248 ;; Parameters:    Size  Location     Type
  5249 ;;		None
  5250 ;; Auto vars:     Size  Location     Type
  5251 ;;		None
  5252 ;; Return value:  Size  Location     Type
  5253 ;;                  1    wreg      void 
  5254 ;; Registers used:
  5255 ;;		wreg, status,2, status,0, pclath, cstack
  5256 ;; Tracked objects:
  5257 ;;		On entry : 0/0
  5258 ;;		On exit  : 0/0
  5259 ;;		Unchanged: 0/0
  5260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5261 ;;      Params:         0       0       0       0
  5262 ;;      Locals:         0       0       0       0
  5263 ;;      Temps:          0       0       0       0
  5264 ;;      Totals:         0       0       0       0
  5265 ;;Total ram usage:        0 bytes
  5266 ;; Hardware stack levels used:    1
  5267 ;; Hardware stack levels required when called:    1
  5268 ;; This function calls:
  5269 ;;		_Delay10us
  5270 ;; This function is called by:
  5271 ;;		_cw_read
  5272 ;;		_cw_read_word
  5273 ;;		_cw_write
  5274 ;; This function uses a non-reentrant model
  5275 ;;
  5276                           
  5277                           
  5278                           ;psect for function _start
  5279  0141                     _start:	
  5280                           
  5281                           ;incstack = 0
  5282                           ; Regs used in _start: [wreg+status,2+status,0+pclath+cstack]
  5283                           ;iic.c: 45: do { TRISCbits.TRISC1 = 0; } while(0);
  5284  0141  0140               	movlb	0	; select bank0
  5285  0142  1094               	bcf	20,1	;volatile
  5286                           
  5287                           ;iic.c: 46: do { LATCbits.LATC1 = 1; } while(0);
  5288  0143  149A               	bsf	26,1	;volatile
  5289                           
  5290                           ;iic.c: 47: do { LATCbits.LATC0 = 1; } while(0);
  5291  0144  141A               	bsf	26,0	;volatile
  5292                           
  5293                           ;iic.c: 48: Delay10us();
  5294  0145  2203               	fcall	_Delay10us
  5295                           
  5296                           ;iic.c: 49: do { LATCbits.LATC1 = 0; } while(0);
  5297  0146  0140               	movlb	0	; select bank0
  5298  0147  109A               	bcf	26,1	;volatile
  5299                           
  5300                           ;iic.c: 50: Delay10us();
  5301  0148  2203               	fcall	_Delay10us
  5302                           
  5303                           ;iic.c: 51: do { LATCbits.LATC0 = 0; } while(0);
  5304  0149  0140               	movlb	0	; select bank0
  5305  014A  101A               	bcf	26,0	;volatile
  5306  014B  0008               	return
  5307  014C                     __end_of_start:	
  5308                           
  5309                           	psect	text22
  5310  0136                     __ptext22:	
  5311 ;; *************** function _s_ack *****************
  5312 ;; Defined at:
  5313 ;;		line 101 in file "iic.c"
  5314 ;; Parameters:    Size  Location     Type
  5315 ;;		None
  5316 ;; Auto vars:     Size  Location     Type
  5317 ;;		None
  5318 ;; Return value:  Size  Location     Type
  5319 ;;                  1    wreg      void 
  5320 ;; Registers used:
  5321 ;;		wreg, status,2, status,0, pclath, cstack
  5322 ;; Tracked objects:
  5323 ;;		On entry : 0/0
  5324 ;;		On exit  : 0/0
  5325 ;;		Unchanged: 0/0
  5326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5327 ;;      Params:         0       0       0       0
  5328 ;;      Locals:         0       0       0       0
  5329 ;;      Temps:          0       0       0       0
  5330 ;;      Totals:         0       0       0       0
  5331 ;;Total ram usage:        0 bytes
  5332 ;; Hardware stack levels used:    1
  5333 ;; Hardware stack levels required when called:    1
  5334 ;; This function calls:
  5335 ;;		_Delay10us
  5336 ;; This function is called by:
  5337 ;;		_cw_read
  5338 ;;		_cw_read_word
  5339 ;; This function uses a non-reentrant model
  5340 ;;
  5341                           
  5342                           
  5343                           ;psect for function _s_ack
  5344  0136                     _s_ack:	
  5345                           
  5346                           ;incstack = 0
  5347                           ; Regs used in _s_ack: [wreg+status,2+status,0+pclath+cstack]
  5348                           ;iic.c: 103: do { TRISCbits.TRISC1 = 0; } while(0);
  5349  0136  0140               	movlb	0	; select bank0
  5350  0137  1094               	bcf	20,1	;volatile
  5351                           
  5352                           ;iic.c: 104: do { LATCbits.LATC1 = 1; } while(0);
  5353  0138  149A               	bsf	26,1	;volatile
  5354                           
  5355                           ;iic.c: 105: Delay10us();
  5356  0139  2203               	fcall	_Delay10us
  5357                           
  5358                           ;iic.c: 106: do { LATCbits.LATC0 = 1; } while(0);
  5359  013A  0140               	movlb	0	; select bank0
  5360  013B  141A               	bsf	26,0	;volatile
  5361                           
  5362                           ;iic.c: 107: Delay10us();
  5363  013C  2203               	fcall	_Delay10us
  5364                           
  5365                           ;iic.c: 108: do { LATCbits.LATC0 = 0; } while(0);
  5366  013D  0140               	movlb	0	; select bank0
  5367  013E  101A               	bcf	26,0	;volatile
  5368                           
  5369                           ;iic.c: 109: Delay10us();
  5370  013F  2203               	fcall	_Delay10us
  5371  0140  0008               	return
  5372  0141                     __end_of_s_ack:	
  5373                           
  5374                           	psect	text23
  5375  0265                     __ptext23:	
  5376 ;; *************** function _read_byte *****************
  5377 ;; Defined at:
  5378 ;;		line 142 in file "iic.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;		None
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;  r_data          1    6[COMMON] unsigned char 
  5383 ;;  i               1    5[COMMON] unsigned char 
  5384 ;; Return value:  Size  Location     Type
  5385 ;;                  1    wreg      unsigned char 
  5386 ;; Registers used:
  5387 ;;		wreg, status,2, status,0, pclath, cstack
  5388 ;; Tracked objects:
  5389 ;;		On entry : 0/0
  5390 ;;		On exit  : 0/0
  5391 ;;		Unchanged: 0/0
  5392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5393 ;;      Params:         0       0       0       0
  5394 ;;      Locals:         2       0       0       0
  5395 ;;      Temps:          1       0       0       0
  5396 ;;      Totals:         3       0       0       0
  5397 ;;Total ram usage:        3 bytes
  5398 ;; Hardware stack levels used:    1
  5399 ;; Hardware stack levels required when called:    1
  5400 ;; This function calls:
  5401 ;;		_Delay10us
  5402 ;; This function is called by:
  5403 ;;		_cw_read
  5404 ;;		_cw_read_word
  5405 ;; This function uses a non-reentrant model
  5406 ;;
  5407                           
  5408                           
  5409                           ;psect for function _read_byte
  5410  0265                     _read_byte:	
  5411                           
  5412                           ;incstack = 0
  5413                           ; Regs used in _read_byte: [wreg+status,2+status,0+pclath+cstack]
  5414                           ;iic.c: 144: unsigned char i;
  5415                           ;iic.c: 145: unsigned char r_data;
  5416                           ;iic.c: 146: do { TRISCbits.TRISC1 = 1; } while(0);
  5417  0265  0140               	movlb	0	; select bank0
  5418  0266  1494               	bsf	20,1	;volatile
  5419                           
  5420                           ;iic.c: 147: for(i = 0; i < 8; i++)
  5421  0267  01F5               	clrf	read_byte@i
  5422  0268  3008               	movlw	8
  5423  0269  0275               	subwf	read_byte@i,w
  5424  026A  1803               	btfsc	3,0
  5425  026B  2A86               	goto	l1725
  5426  026C                     l404:	
  5427                           ;iic.c: 148: {
  5428                           ;iic.c: 149: do { LATCbits.LATC0 = 1; } while(0);
  5429                           
  5430  026C  0140               	movlb	0	; select bank0
  5431  026D  141A               	bsf	26,0	;volatile
  5432                           
  5433                           ;iic.c: 150: Delay10us();
  5434  026E  2203               	fcall	_Delay10us
  5435                           
  5436                           ;iic.c: 151: r_data = r_data << 1;
  5437  026F  3576               	lslf	read_byte@r_data,w
  5438  0270  00F4               	movwf	??_read_byte
  5439  0271  0874               	movf	??_read_byte,w
  5440  0272  00F6               	movwf	read_byte@r_data
  5441                           
  5442                           ;iic.c: 152: Delay10us();
  5443  0273  2203               	fcall	_Delay10us
  5444                           
  5445                           ;iic.c: 153: if(PORTCbits.RC1)
  5446  0274  0140               	movlb	0	; select bank0
  5447  0275  1C8E               	btfss	14,1	;volatile
  5448  0276  2A7C               	goto	l1717
  5449                           
  5450                           ;iic.c: 154: {
  5451                           ;iic.c: 155: r_data = r_data | 0x1;
  5452  0277  0876               	movf	read_byte@r_data,w
  5453  0278  3801               	iorlw	1
  5454  0279  00F4               	movwf	??_read_byte
  5455  027A  0874               	movf	??_read_byte,w
  5456  027B  00F6               	movwf	read_byte@r_data
  5457  027C                     l1717:	
  5458                           ;iic.c: 156: }
  5459                           ;iic.c: 157: do { LATCbits.LATC0 = 0; } while(0);
  5460                           
  5461  027C  101A               	bcf	26,0	;volatile
  5462                           
  5463                           ;iic.c: 158: Delay10us();
  5464  027D  2203               	fcall	_Delay10us
  5465  027E  3001               	movlw	1
  5466  027F  00F4               	movwf	??_read_byte
  5467  0280  0874               	movf	??_read_byte,w
  5468  0281  07F5               	addwf	read_byte@i,f
  5469  0282  3008               	movlw	8
  5470  0283  0275               	subwf	read_byte@i,w
  5471  0284  1C03               	skipc
  5472  0285  2A6C               	goto	l404
  5473  0286                     l1725:	
  5474                           
  5475                           ;iic.c: 159: }
  5476                           ;iic.c: 160: return r_data;
  5477  0286  0876               	movf	read_byte@r_data,w
  5478  0287  0008               	return
  5479  0288                     __end_of_read_byte:	
  5480                           
  5481                           	psect	text24
  5482  0203                     __ptext24:	
  5483 ;; *************** function _Delay10us *****************
  5484 ;; Defined at:
  5485 ;;		line 22 in file "iic.c"
  5486 ;; Parameters:    Size  Location     Type
  5487 ;;		None
  5488 ;; Auto vars:     Size  Location     Type
  5489 ;;  i               1    3[COMMON] unsigned char 
  5490 ;;  b               1    2[COMMON] unsigned char 
  5491 ;;  a               1    1[COMMON] unsigned char 
  5492 ;; Return value:  Size  Location     Type
  5493 ;;                  1    wreg      void 
  5494 ;; Registers used:
  5495 ;;		wreg, status,2, status,0
  5496 ;; Tracked objects:
  5497 ;;		On entry : 0/0
  5498 ;;		On exit  : 0/0
  5499 ;;		Unchanged: 0/0
  5500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5501 ;;      Params:         0       0       0       0
  5502 ;;      Locals:         3       0       0       0
  5503 ;;      Temps:          1       0       0       0
  5504 ;;      Totals:         4       0       0       0
  5505 ;;Total ram usage:        4 bytes
  5506 ;; Hardware stack levels used:    1
  5507 ;; This function calls:
  5508 ;;		Nothing
  5509 ;; This function is called by:
  5510 ;;		_start
  5511 ;;		_stop
  5512 ;;		_r_ack
  5513 ;;		_s_ack
  5514 ;;		_sn_ack
  5515 ;;		_write_byte
  5516 ;;		_read_byte
  5517 ;; This function uses a non-reentrant model
  5518 ;;
  5519                           
  5520                           
  5521                           ;psect for function _Delay10us
  5522  0203                     _Delay10us:	
  5523                           
  5524                           ;iic.c: 24: unsigned char a, b;
  5525                           ;iic.c: 25: unsigned char i;
  5526                           ;iic.c: 26: for(i = 0; i < 2; i++)
  5527                           
  5528                           ;incstack = 0
  5529                           ; Regs used in _Delay10us: [wreg+status,2+status,0]
  5530  0203  01F3               	clrf	Delay10us@i
  5531  0204                     L6:	
  5532  0204  3002               	movlw	2
  5533  0205  0273               	subwf	Delay10us@i,w
  5534  0206  1803               	btfsc	3,0
  5535  0207  0008               	return
  5536                           
  5537                           ;iic.c: 27: {
  5538                           ;iic.c: 28: for(b = 1;b > 0;b --)
  5539  0208  01F2               	clrf	Delay10us@b
  5540  0209  0AF2               	incf	Delay10us@b,f
  5541  020A  0872               	movf	Delay10us@b,w
  5542  020B  1903               	btfsc	3,2
  5543  020C  2A1E               	goto	l1619
  5544  020D                     l1609:	
  5545                           
  5546                           ;iic.c: 29: {
  5547                           ;iic.c: 30: for(a = 7;a > 0;a --) ;
  5548  020D  3007               	movlw	7
  5549  020E  00F0               	movwf	??_Delay10us
  5550  020F  0870               	movf	??_Delay10us,w
  5551  0210  00F1               	movwf	Delay10us@a
  5552  0211  0871               	movf	Delay10us@a,w
  5553  0212  1903               	btfsc	3,2
  5554  0213  2A19               	goto	l1617
  5555  0214                     l1615:	
  5556  0214  3001               	movlw	1
  5557  0215  02F1               	subwf	Delay10us@a,f
  5558  0216  0871               	movf	Delay10us@a,w
  5559  0217  1D03               	btfss	3,2
  5560  0218  2A14               	goto	l1615
  5561  0219                     l1617:	
  5562  0219  3001               	movlw	1
  5563  021A  02F2               	subwf	Delay10us@b,f
  5564  021B  0872               	movf	Delay10us@b,w
  5565  021C  1D03               	btfss	3,2
  5566  021D  2A0D               	goto	l1609
  5567  021E                     l1619:	
  5568  021E  3001               	movlw	1
  5569  021F  00F0               	movwf	??_Delay10us
  5570  0220  0870               	movf	??_Delay10us,w
  5571  0221  07F3               	addwf	Delay10us@i,f
  5572  0222  2A04               	goto	L6
  5573  0223                     __end_of_Delay10us:	
  5574                           
  5575                           	psect	text25
  5576  01E3                     __ptext25:	
  5577 ;; *************** function _CW_Delay100us *****************
  5578 ;; Defined at:
  5579 ;;		line 38 in file "CW201x.c"
  5580 ;; Parameters:    Size  Location     Type
  5581 ;;		None
  5582 ;; Auto vars:     Size  Location     Type
  5583 ;;  i               1    3[COMMON] unsigned char 
  5584 ;;  b               1    2[COMMON] unsigned char 
  5585 ;;  a               1    1[COMMON] unsigned char 
  5586 ;; Return value:  Size  Location     Type
  5587 ;;                  1    wreg      void 
  5588 ;; Registers used:
  5589 ;;		wreg, status,2, status,0
  5590 ;; Tracked objects:
  5591 ;;		On entry : 0/0
  5592 ;;		On exit  : 0/0
  5593 ;;		Unchanged: 0/0
  5594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5595 ;;      Params:         0       0       0       0
  5596 ;;      Locals:         3       0       0       0
  5597 ;;      Temps:          1       0       0       0
  5598 ;;      Totals:         4       0       0       0
  5599 ;;Total ram usage:        4 bytes
  5600 ;; Hardware stack levels used:    1
  5601 ;; This function calls:
  5602 ;;		Nothing
  5603 ;; This function is called by:
  5604 ;;		_cw_update_config_info
  5605 ;;		_cw_por
  5606 ;; This function uses a non-reentrant model
  5607 ;;
  5608                           
  5609                           
  5610                           ;psect for function _CW_Delay100us
  5611  01E3                     _CW_Delay100us:	
  5612                           
  5613                           ;CW201x.c: 40: unsigned char a, b;
  5614                           ;CW201x.c: 41: unsigned char i;
  5615                           ;CW201x.c: 42: for(i = 0; i < 10; i++)
  5616                           
  5617                           ;incstack = 0
  5618                           ; Regs used in _CW_Delay100us: [wreg+status,2+status,0]
  5619  01E3  01F3               	clrf	CW_Delay100us@i
  5620  01E4                     L7:	
  5621  01E4  300A               	movlw	10
  5622  01E5  0273               	subwf	CW_Delay100us@i,w
  5623  01E6  1803               	btfsc	3,0
  5624  01E7  0008               	return
  5625                           
  5626                           ;CW201x.c: 43: {
  5627                           ;CW201x.c: 44: for(b = 1;b > 0;b --)
  5628  01E8  01F2               	clrf	CW_Delay100us@b
  5629  01E9  0AF2               	incf	CW_Delay100us@b,f
  5630  01EA  0872               	movf	CW_Delay100us@b,w
  5631  01EB  1903               	btfsc	3,2
  5632  01EC  29FE               	goto	l1749
  5633  01ED                     l1739:	
  5634                           
  5635                           ;CW201x.c: 45: {
  5636                           ;CW201x.c: 46: for(a = 7;a > 0;a --);
  5637  01ED  3007               	movlw	7
  5638  01EE  00F0               	movwf	??_CW_Delay100us
  5639  01EF  0870               	movf	??_CW_Delay100us,w
  5640  01F0  00F1               	movwf	CW_Delay100us@a
  5641  01F1  0871               	movf	CW_Delay100us@a,w
  5642  01F2  1903               	btfsc	3,2
  5643  01F3  29F9               	goto	l1747
  5644  01F4                     l1745:	
  5645  01F4  3001               	movlw	1
  5646  01F5  02F1               	subwf	CW_Delay100us@a,f
  5647  01F6  0871               	movf	CW_Delay100us@a,w
  5648  01F7  1D03               	btfss	3,2
  5649  01F8  29F4               	goto	l1745
  5650  01F9                     l1747:	
  5651  01F9  3001               	movlw	1
  5652  01FA  02F2               	subwf	CW_Delay100us@b,f
  5653  01FB  0872               	movf	CW_Delay100us@b,w
  5654  01FC  1D03               	btfss	3,2
  5655  01FD  29ED               	goto	l1739
  5656  01FE                     l1749:	
  5657  01FE  3001               	movlw	1
  5658  01FF  00F0               	movwf	??_CW_Delay100us
  5659  0200  0870               	movf	??_CW_Delay100us,w
  5660  0201  07F3               	addwf	CW_Delay100us@i,f
  5661  0202  29E4               	goto	L7
  5662  0203                     __end_of_CW_Delay100us:	
  5663                           
  5664                           	psect	text26
  5665  0223                     __ptext26:	
  5666 ;; *************** function _CW_Delay10ms *****************
  5667 ;; Defined at:
  5668 ;;		line 26 in file "CW201x.c"
  5669 ;; Parameters:    Size  Location     Type
  5670 ;;  c               2    0[COMMON] unsigned int 
  5671 ;; Auto vars:     Size  Location     Type
  5672 ;;  b               1    4[COMMON] unsigned char 
  5673 ;;  a               1    3[COMMON] unsigned char 
  5674 ;;  d               1    0        unsigned char 
  5675 ;; Return value:  Size  Location     Type
  5676 ;;                  1    wreg      void 
  5677 ;; Registers used:
  5678 ;;		wreg, status,2, status,0
  5679 ;; Tracked objects:
  5680 ;;		On entry : 0/0
  5681 ;;		On exit  : 0/0
  5682 ;;		Unchanged: 0/0
  5683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5684 ;;      Params:         2       0       0       0
  5685 ;;      Locals:         2       0       0       0
  5686 ;;      Temps:          1       0       0       0
  5687 ;;      Totals:         5       0       0       0
  5688 ;;Total ram usage:        5 bytes
  5689 ;; Hardware stack levels used:    1
  5690 ;; This function calls:
  5691 ;;		Nothing
  5692 ;; This function is called by:
  5693 ;;		_main
  5694 ;;		_cw_init
  5695 ;; This function uses a non-reentrant model
  5696 ;;
  5697                           
  5698                           
  5699                           ;psect for function _CW_Delay10ms
  5700  0223                     _CW_Delay10ms:	
  5701                           
  5702                           ;CW201x.c: 28: unsigned char a, b, d;
  5703                           ;CW201x.c: 29: for (;c>0;c--)
  5704                           
  5705                           ;incstack = 0
  5706                           ; Regs used in _CW_Delay10ms: [wreg+status,2+status,0]
  5707  0223  0870               	movf	CW_Delay10ms@c,w
  5708  0224  0471               	iorwf	CW_Delay10ms@c+1,w
  5709  0225  1903               	btfsc	3,2
  5710  0226  0008               	return
  5711                           
  5712                           ;CW201x.c: 30: {
  5713                           ;CW201x.c: 31: for(b=95;b>0;b--)
  5714  0227  305F               	movlw	95
  5715  0228  00F2               	movwf	??_CW_Delay10ms
  5716  0229  0872               	movf	??_CW_Delay10ms,w
  5717  022A  00F4               	movwf	CW_Delay10ms@b
  5718  022B  0874               	movf	CW_Delay10ms@b,w
  5719  022C  1903               	btfsc	3,2
  5720  022D  2A3F               	goto	l1827
  5721  022E                     l1817:	
  5722                           
  5723                           ;CW201x.c: 32: {
  5724                           ;CW201x.c: 33: for(a=209;a>0;a--) ;
  5725  022E  30D1               	movlw	209
  5726  022F  00F2               	movwf	??_CW_Delay10ms
  5727  0230  0872               	movf	??_CW_Delay10ms,w
  5728  0231  00F3               	movwf	CW_Delay10ms@a
  5729  0232  0873               	movf	CW_Delay10ms@a,w
  5730  0233  1903               	btfsc	3,2
  5731  0234  2A3A               	goto	l1825
  5732  0235                     l1823:	
  5733  0235  3001               	movlw	1
  5734  0236  02F3               	subwf	CW_Delay10ms@a,f
  5735  0237  0873               	movf	CW_Delay10ms@a,w
  5736  0238  1D03               	btfss	3,2
  5737  0239  2A35               	goto	l1823
  5738  023A                     l1825:	
  5739  023A  3001               	movlw	1
  5740  023B  02F4               	subwf	CW_Delay10ms@b,f
  5741  023C  0874               	movf	CW_Delay10ms@b,w
  5742  023D  1D03               	btfss	3,2
  5743  023E  2A2E               	goto	l1817
  5744  023F                     l1827:	
  5745  023F  3001               	movlw	1
  5746  0240  02F0               	subwf	CW_Delay10ms@c,f
  5747  0241  3000               	movlw	0
  5748  0242  3BF1               	subwfb	CW_Delay10ms@c+1,f
  5749  0243  2A23               	goto	_CW_Delay10ms
  5750  0244                     __end_of_CW_Delay10ms:	
  5751                           
  5752                           	psect	text27
  5753  0110                     __ptext27:	
  5754 ;; *************** function _SYSTEM_Initialize *****************
  5755 ;; Defined at:
  5756 ;;		line 86 in file "mcc_generated_files/mcc.c"
  5757 ;; Parameters:    Size  Location     Type
  5758 ;;		None
  5759 ;; Auto vars:     Size  Location     Type
  5760 ;;		None
  5761 ;; Return value:  Size  Location     Type
  5762 ;;                  1    wreg      void 
  5763 ;; Registers used:
  5764 ;;		wreg, status,2, status,0, pclath, cstack
  5765 ;; Tracked objects:
  5766 ;;		On entry : 0/0
  5767 ;;		On exit  : 0/0
  5768 ;;		Unchanged: 0/0
  5769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5770 ;;      Params:         0       0       0       0
  5771 ;;      Locals:         0       0       0       0
  5772 ;;      Temps:          0       0       0       0
  5773 ;;      Totals:         0       0       0       0
  5774 ;;Total ram usage:        0 bytes
  5775 ;; Hardware stack levels used:    1
  5776 ;; Hardware stack levels required when called:    1
  5777 ;; This function calls:
  5778 ;;		_EUSART1_Initialize
  5779 ;;		_OSCILLATOR_Initialize
  5780 ;;		_PIN_MANAGER_Initialize
  5781 ;; This function is called by:
  5782 ;;		_main
  5783 ;; This function uses a non-reentrant model
  5784 ;;
  5785                           
  5786                           
  5787                           ;psect for function _SYSTEM_Initialize
  5788  0110                     _SYSTEM_Initialize:	
  5789                           
  5790                           ;mcc.c: 89: PIN_MANAGER_Initialize();
  5791                           
  5792                           ;incstack = 0
  5793                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5794  0110  2288               	fcall	_PIN_MANAGER_Initialize
  5795                           
  5796                           ;mcc.c: 90: OSCILLATOR_Initialize();
  5797  0111  2158               	fcall	_OSCILLATOR_Initialize
  5798                           
  5799                           ;mcc.c: 91: EUSART1_Initialize();
  5800  0112  214C               	fcall	_EUSART1_Initialize
  5801  0113  0008               	return
  5802  0114                     __end_of_SYSTEM_Initialize:	
  5803                           
  5804                           	psect	text28
  5805  0288                     __ptext28:	
  5806 ;; *************** function _PIN_MANAGER_Initialize *****************
  5807 ;; Defined at:
  5808 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  5809 ;; Parameters:    Size  Location     Type
  5810 ;;		None
  5811 ;; Auto vars:     Size  Location     Type
  5812 ;;  state           1    0[COMMON] unsigned char 
  5813 ;; Return value:  Size  Location     Type
  5814 ;;                  1    wreg      void 
  5815 ;; Registers used:
  5816 ;;		wreg, status,2, status,0
  5817 ;; Tracked objects:
  5818 ;;		On entry : 0/0
  5819 ;;		On exit  : 0/0
  5820 ;;		Unchanged: 0/0
  5821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5822 ;;      Params:         0       0       0       0
  5823 ;;      Locals:         1       0       0       0
  5824 ;;      Temps:          0       0       0       0
  5825 ;;      Totals:         1       0       0       0
  5826 ;;Total ram usage:        1 bytes
  5827 ;; Hardware stack levels used:    1
  5828 ;; This function calls:
  5829 ;;		Nothing
  5830 ;; This function is called by:
  5831 ;;		_SYSTEM_Initialize
  5832 ;; This function uses a non-reentrant model
  5833 ;;
  5834                           
  5835                           
  5836                           ;psect for function _PIN_MANAGER_Initialize
  5837  0288                     _PIN_MANAGER_Initialize:	
  5838                           
  5839                           ;pin_manager.c: 56: LATA = 0x00;
  5840                           
  5841                           ;incstack = 0
  5842                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  5843  0288  0140               	movlb	0	; select bank0
  5844  0289  0198               	clrf	24	;volatile
  5845                           
  5846                           ;pin_manager.c: 57: LATC = 0x00;
  5847  028A  019A               	clrf	26	;volatile
  5848                           
  5849                           ;pin_manager.c: 62: TRISA = 0x03;
  5850  028B  3003               	movlw	3
  5851  028C  0092               	movwf	18	;volatile
  5852                           
  5853                           ;pin_manager.c: 63: TRISC = 0x22;
  5854  028D  3022               	movlw	34
  5855  028E  0094               	movwf	20	;volatile
  5856                           
  5857                           ;pin_manager.c: 68: ANSELC = 0x1D;
  5858  028F  301D               	movlw	29
  5859  0290  017E               	movlb	62	; select bank62
  5860  0291  00CE               	movwf	78	;volatile
  5861                           
  5862                           ;pin_manager.c: 69: ANSELA = 0x37;
  5863  0292  3037               	movlw	55
  5864  0293  00B8               	movwf	56	;volatile
  5865                           
  5866                           ;pin_manager.c: 74: WPUA = 0x00;
  5867  0294  01B9               	clrf	57	;volatile
  5868                           
  5869                           ;pin_manager.c: 75: WPUC = 0x00;
  5870  0295  01CF               	clrf	79	;volatile
  5871                           
  5872                           ;pin_manager.c: 80: ODCONA = 0x00;
  5873  0296  01BA               	clrf	58	;volatile
  5874                           
  5875                           ;pin_manager.c: 81: ODCONC = 0x00;
  5876  0297  01D0               	clrf	80	;volatile
  5877                           
  5878                           ;pin_manager.c: 88: bool state = GIE;
  5879  0298  3000               	movlw	0
  5880  0299  1B8B               	btfsc	11,7	;volatile
  5881  029A  3001               	movlw	1
  5882  029B  00F0               	movwf	PIN_MANAGER_Initialize@state
  5883                           
  5884                           ;pin_manager.c: 89: GIE = 0;
  5885  029C  138B               	bcf	11,7	;volatile
  5886                           
  5887                           ;pin_manager.c: 90: PPSLOCK = 0x55;
  5888  029D  3055               	movlw	85
  5889  029E  017D               	movlb	61	; select bank61
  5890  029F  008F               	movwf	15	;volatile
  5891                           
  5892                           ;pin_manager.c: 91: PPSLOCK = 0xAA;
  5893  02A0  30AA               	movlw	170
  5894  02A1  008F               	movwf	15	;volatile
  5895                           
  5896                           ;pin_manager.c: 92: PPSLOCKbits.PPSLOCKED = 0x00;
  5897  02A2  100F               	bcf	15,0	;volatile
  5898                           
  5899                           ;pin_manager.c: 94: RX1DTPPSbits.RX1DTPPS = 0x15;
  5900  02A3  084B               	movf	75,w	;volatile
  5901  02A4  39C0               	andlw	-64
  5902  02A5  3815               	iorlw	21
  5903  02A6  00CB               	movwf	75	;volatile
  5904                           
  5905                           ;pin_manager.c: 95: RC4PPS = 0x0F;
  5906  02A7  300F               	movlw	15
  5907  02A8  017E               	movlb	62	; select bank62
  5908  02A9  00A4               	movwf	36	;volatile
  5909                           
  5910                           ;pin_manager.c: 97: PPSLOCK = 0x55;
  5911  02AA  3055               	movlw	85
  5912  02AB  017D               	movlb	61	; select bank61
  5913  02AC  008F               	movwf	15	;volatile
  5914                           
  5915                           ;pin_manager.c: 98: PPSLOCK = 0xAA;
  5916  02AD  30AA               	movlw	170
  5917  02AE  008F               	movwf	15	;volatile
  5918                           
  5919                           ;pin_manager.c: 99: PPSLOCKbits.PPSLOCKED = 0x01;
  5920  02AF  140F               	bsf	15,0	;volatile
  5921                           
  5922                           ;pin_manager.c: 101: GIE = state;
  5923  02B0  1C70               	btfss	PIN_MANAGER_Initialize@state,0
  5924  02B1  2AB4               	goto	u2090
  5925  02B2  178B               	bsf	11,7	;volatile
  5926  02B3  0008               	return
  5927  02B4                     u2090:	
  5928  02B4  138B               	bcf	11,7	;volatile
  5929  02B5  0008               	return
  5930  02B6                     __end_of_PIN_MANAGER_Initialize:	
  5931                           
  5932                           	psect	text29
  5933  0158                     __ptext29:	
  5934 ;; *************** function _OSCILLATOR_Initialize *****************
  5935 ;; Defined at:
  5936 ;;		line 94 in file "mcc_generated_files/mcc.c"
  5937 ;; Parameters:    Size  Location     Type
  5938 ;;		None
  5939 ;; Auto vars:     Size  Location     Type
  5940 ;;		None
  5941 ;; Return value:  Size  Location     Type
  5942 ;;                  1    wreg      void 
  5943 ;; Registers used:
  5944 ;;		wreg, status,2
  5945 ;; Tracked objects:
  5946 ;;		On entry : 0/0
  5947 ;;		On exit  : 0/0
  5948 ;;		Unchanged: 0/0
  5949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5950 ;;      Params:         0       0       0       0
  5951 ;;      Locals:         0       0       0       0
  5952 ;;      Temps:          0       0       0       0
  5953 ;;      Totals:         0       0       0       0
  5954 ;;Total ram usage:        0 bytes
  5955 ;; Hardware stack levels used:    1
  5956 ;; This function calls:
  5957 ;;		Nothing
  5958 ;; This function is called by:
  5959 ;;		_SYSTEM_Initialize
  5960 ;; This function uses a non-reentrant model
  5961 ;;
  5962                           
  5963                           
  5964                           ;psect for function _OSCILLATOR_Initialize
  5965  0158                     _OSCILLATOR_Initialize:	
  5966                           
  5967                           ;mcc.c: 97: OSCCON1 = 0x10;
  5968                           
  5969                           ;incstack = 0
  5970                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5971  0158  3010               	movlw	16
  5972  0159  0151               	movlb	17	; select bank17
  5973  015A  008D               	movwf	13	;volatile
  5974                           
  5975                           ;mcc.c: 99: OSCCON3 = 0x00;
  5976  015B  018F               	clrf	15	;volatile
  5977                           
  5978                           ;mcc.c: 101: OSCEN = 0x00;
  5979  015C  0191               	clrf	17	;volatile
  5980                           
  5981                           ;mcc.c: 103: OSCFRQ = 0x05;
  5982  015D  3005               	movlw	5
  5983  015E  0093               	movwf	19	;volatile
  5984                           
  5985                           ;mcc.c: 105: OSCSTAT = 0x00;
  5986  015F  0190               	clrf	16	;volatile
  5987                           
  5988                           ;mcc.c: 107: OSCTUNE = 0x00;
  5989  0160  0192               	clrf	18	;volatile
  5990  0161                     l60:	
  5991                           ;mcc.c: 110: {
  5992                           
  5993                           ;mcc.c: 109: while(PLLR == 0)
  5994                           
  5995  0161  1810               	btfsc	16,0	;volatile
  5996  0162  0008               	return
  5997  0163  2961               	goto	l60
  5998  0164                     __end_of_OSCILLATOR_Initialize:	
  5999                           
  6000                           	psect	text30
  6001  014C                     __ptext30:	
  6002 ;; *************** function _EUSART1_Initialize *****************
  6003 ;; Defined at:
  6004 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  6005 ;; Parameters:    Size  Location     Type
  6006 ;;		None
  6007 ;; Auto vars:     Size  Location     Type
  6008 ;;		None
  6009 ;; Return value:  Size  Location     Type
  6010 ;;                  1    wreg      void 
  6011 ;; Registers used:
  6012 ;;		wreg
  6013 ;; Tracked objects:
  6014 ;;		On entry : 0/0
  6015 ;;		On exit  : 0/0
  6016 ;;		Unchanged: 0/0
  6017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6018 ;;      Params:         0       0       0       0
  6019 ;;      Locals:         0       0       0       0
  6020 ;;      Temps:          0       0       0       0
  6021 ;;      Totals:         0       0       0       0
  6022 ;;Total ram usage:        0 bytes
  6023 ;; Hardware stack levels used:    1
  6024 ;; This function calls:
  6025 ;;		Nothing
  6026 ;; This function is called by:
  6027 ;;		_SYSTEM_Initialize
  6028 ;; This function uses a non-reentrant model
  6029 ;;
  6030                           
  6031                           
  6032                           ;psect for function _EUSART1_Initialize
  6033  014C                     _EUSART1_Initialize:	
  6034                           
  6035                           ;eusart1.c: 60: BAUD1CON = 0x08;
  6036                           
  6037                           ;incstack = 0
  6038                           ; Regs used in _EUSART1_Initialize: [wreg]
  6039  014C  3008               	movlw	8
  6040  014D  0142               	movlb	2	; select bank2
  6041  014E  009F               	movwf	31	;volatile
  6042                           
  6043                           ;eusart1.c: 63: RC1STA = 0x90;
  6044  014F  3090               	movlw	144
  6045  0150  009D               	movwf	29	;volatile
  6046                           
  6047                           ;eusart1.c: 66: TX1STA = 0x24;
  6048  0151  3024               	movlw	36
  6049  0152  009E               	movwf	30	;volatile
  6050                           
  6051                           ;eusart1.c: 69: SP1BRGL = 0x40;
  6052  0153  3040               	movlw	64
  6053  0154  009B               	movwf	27	;volatile
  6054                           
  6055                           ;eusart1.c: 72: SP1BRGH = 0x03;
  6056  0155  3003               	movlw	3
  6057  0156  009C               	movwf	28	;volatile
  6058  0157  0008               	return
  6059  0158                     __end_of_EUSART1_Initialize:	
  6060                           
  6061                           	psect	text31
  6062  0124                     __ptext31:	
  6063 ;; *************** function _EUSART1_Write *****************
  6064 ;; Defined at:
  6065 ;;		line 96 in file "mcc_generated_files/eusart1.c"
  6066 ;; Parameters:    Size  Location     Type
  6067 ;;  txData          1    wreg     unsigned char 
  6068 ;; Auto vars:     Size  Location     Type
  6069 ;;  txData          1    0[COMMON] unsigned char 
  6070 ;; Return value:  Size  Location     Type
  6071 ;;                  1    wreg      void 
  6072 ;; Registers used:
  6073 ;;		wreg
  6074 ;; Tracked objects:
  6075 ;;		On entry : 0/0
  6076 ;;		On exit  : 0/0
  6077 ;;		Unchanged: 0/0
  6078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6079 ;;      Params:         0       0       0       0
  6080 ;;      Locals:         1       0       0       0
  6081 ;;      Temps:          0       0       0       0
  6082 ;;      Totals:         1       0       0       0
  6083 ;;Total ram usage:        1 bytes
  6084 ;; Hardware stack levels used:    1
  6085 ;; This function calls:
  6086 ;;		Nothing
  6087 ;; This function is called by:
  6088 ;;		_main
  6089 ;; This function uses a non-reentrant model
  6090 ;;
  6091                           
  6092                           
  6093                           ;psect for function _EUSART1_Write
  6094  0124                     _EUSART1_Write:	
  6095                           
  6096                           ;incstack = 0
  6097                           ; Regs used in _EUSART1_Write: [wreg]
  6098                           ;EUSART1_Write@txData stored from wreg
  6099  0124  00F0               	movwf	EUSART1_Write@txData
  6100  0125                     l31:	
  6101                           ;eusart1.c: 99: {
  6102                           
  6103                           ;eusart1.c: 98: while(0 == PIR3bits.TX1IF)
  6104                           
  6105  0125  014E               	movlb	14	; select bank14
  6106  0126  1E0F               	btfss	15,4	;volatile
  6107  0127  2925               	goto	l31
  6108                           
  6109                           ;eusart1.c: 100: }
  6110                           ;eusart1.c: 102: TX1REG = txData;
  6111  0128  0870               	movf	EUSART1_Write@txData,w
  6112  0129  0142               	movlb	2	; select bank2
  6113  012A  009A               	movwf	26	;volatile
  6114  012B  0008               	return
  6115  012C                     __end_of_EUSART1_Write:	
  6116  007E                     btemp	set	126	;btemp
  6117  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        128
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     39      57
    BANK1            80      0      64
    BANK2            80      0      64

Pointer List with Targets:

    cw_write@w_pdata	PTR unsigned char  size(1) Largest target is 1
		 -> cw_por@reset_val(BANK0[1]), cw_init@reg_val(BANK0[1]), cw_update_config_info@reset_val(BANK0[1]), cw_update_config_info@reg_val(BANK0[1]), 

    cw_read_word@r_pdata	PTR unsigned char  size(1) Largest target is 2
		 -> cw_get_vol@reg_val(BANK0[2]), 

    cw_read@r_pdata	PTR unsigned char  size(1) Largest target is 1
		 -> cw_get_capacity@reg_val(BANK0[1]), cw_init@reg_val(BANK0[1]), cw_update_config_info@reg_val(BANK0[1]), 


Critical Paths under _main in COMMON

    _cw_get_vol->_cw_read_word
    _cw_read_word->_wait_r_ack
    _sn_ack->_Delay10us
    ___lldiv->___lmul
    _cw_get_capacity->_cw_read
    _cw_init->_cw_read
    _cw_update_config_info->_cw_read
    _cw_write->_wait_r_ack
    _cw_read->_wait_r_ack
    _write_byte->_Delay10us
    _wait_r_ack->_r_ack
    _stop->_Delay10us
    _r_ack->_Delay10us
    _start->_Delay10us
    _s_ack->_Delay10us
    _read_byte->_Delay10us
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize

Critical Paths under _main in BANK0

    _cw_bat_work->_update_capacity
    _cw_bat_work->_update_vol
    _update_vol->_cw_get_vol
    _cw_get_vol->___lldiv
    _cw_read_word->_wait_r_ack
    _update_capacity->_cw_get_capacity
    _cw_get_capacity->_cw_por
    _cw_por->_cw_init
    _cw_bat_init->_cw_init
    _cw_init->_cw_update_config_info
    _cw_update_config_info->_cw_write
    _cw_write->_wait_r_ack
    _cw_read->_wait_r_ack

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   23845
                                             37 BANK0      2     2      0
                       _CW_Delay10ms
                      _EUSART1_Write
                  _SYSTEM_Initialize
                        _cw_bat_init
                        _cw_bat_work
 ---------------------------------------------------------------------------------
 (1) _cw_bat_work                                          0     0      0   15007
                    _update_capacity
                  _update_usb_online
                         _update_vol
 ---------------------------------------------------------------------------------
 (2) _update_vol                                           2     2      0    2755
                                             35 BANK0      2     2      0
                         _cw_get_vol
 ---------------------------------------------------------------------------------
 (3) _cw_get_vol                                          22    20      2    2659
                                             13 BANK0     22    20      2
                            ___lldiv
                             ___lmul
                       _cw_read_word
 ---------------------------------------------------------------------------------
 (4) _cw_read_word                                         7     4      3    1687
                                             12 COMMON     2     2      0
                                              4 BANK0      5     2      3
                          _read_byte
                              _s_ack
                             _sn_ack
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (5) _sn_ack                                               0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     220
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     290
                                             12 COMMON     1     1      0
                                              0 BANK0     13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _update_usb_online                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _update_capacity                                      3     3      0   12252
                                             34 BANK0      3     3      0
                    _cw_get_capacity
 ---------------------------------------------------------------------------------
 (3) _cw_get_capacity                                      9     7      2   12163
                                             26 BANK0      8     6      2
                             _cw_por
                            _cw_read
 ---------------------------------------------------------------------------------
 (4) _cw_por                                               7     5      2   10183
                                             19 BANK0      7     5      2
                      _CW_Delay100us
                            _cw_init
                           _cw_write
 ---------------------------------------------------------------------------------
 (1) _cw_bat_init                                          3     3      0    8458
                                             19 BANK0      3     3      0
                            _cw_init
 ---------------------------------------------------------------------------------
 (5) _cw_init                                              6     6      0    8389
                                             13 BANK0      6     6      0
                       _CW_Delay10ms
                            _cw_read
              _cw_update_config_info
                           _cw_write
 ---------------------------------------------------------------------------------
 (6) _cw_update_config_info                                6     6      0    4045
                                              7 BANK0      6     6      0
                      _CW_Delay100us
                            _cw_read
                           _cw_write
 ---------------------------------------------------------------------------------
 (5) _cw_write                                             4     1      3    1516
                                             12 COMMON     1     1      0
                                              4 BANK0      3     0      3
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (4) _cw_read                                              4     2      2    1842
                                             12 COMMON     2     2      0
                                              4 BANK0      2     0      2
                          _read_byte
                              _s_ack
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (5) _write_byte                                           3     3      0     229
                                              4 COMMON     3     3      0
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _wait_r_ack                                           6     4      2     391
                                             10 COMMON     2     0      2
                                              0 BANK0      4     4      0
                              _r_ack
                               _stop
 ---------------------------------------------------------------------------------
 (6) _stop                                                 0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (6) _r_ack                                                6     4      2     161
                                              4 COMMON     6     4      2
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _start                                                0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _s_ack                                                0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _read_byte                                            3     3      0     252
                                              4 COMMON     3     3      0
                          _Delay10us
 ---------------------------------------------------------------------------------
 (6) _Delay10us                                            4     4      0     138
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (7) _CW_Delay100us                                        4     4      0     138
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (6) _CW_Delay10ms                                         6     4      2     329
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      23
                 _EUSART1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Write                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CW_Delay10ms
   _EUSART1_Write
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _cw_bat_init
     _cw_init
       _CW_Delay10ms
       _cw_read
         _read_byte
           _Delay10us
         _s_ack
           _Delay10us
         _start
           _Delay10us
         _stop
           _Delay10us
         _wait_r_ack
           _r_ack
             _Delay10us
           _stop
             _Delay10us
         _write_byte
           _Delay10us
       _cw_update_config_info
         _CW_Delay100us
         _cw_read
           _read_byte
             _Delay10us
           _s_ack
             _Delay10us
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us
         _cw_write
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us
       _cw_write
         _start
           _Delay10us
         _stop
           _Delay10us
         _wait_r_ack
           _r_ack
             _Delay10us
           _stop
             _Delay10us
         _write_byte
           _Delay10us
   _cw_bat_work
     _update_capacity
       _cw_get_capacity
         _cw_por
           _CW_Delay100us
           _cw_init
             _CW_Delay10ms
             _cw_read
               _read_byte
                 _Delay10us
               _s_ack
                 _Delay10us
               _start
                 _Delay10us
               _stop
                 _Delay10us
               _wait_r_ack
                 _r_ack
                   _Delay10us
                 _stop
                   _Delay10us
               _write_byte
                 _Delay10us
             _cw_update_config_info
               _CW_Delay100us
               _cw_read
                 _read_byte
                   _Delay10us
                 _s_ack
                   _Delay10us
                 _start
                   _Delay10us
                 _stop
                   _Delay10us
                 _wait_r_ack
                   _r_ack
                     _Delay10us
                   _stop
                     _Delay10us
                 _write_byte
                   _Delay10us
               _cw_write
                 _start
                   _Delay10us
                 _stop
                   _Delay10us
                 _wait_r_ack
                   _r_ack
                     _Delay10us
                   _stop
                     _Delay10us
                 _write_byte
                   _Delay10us
             _cw_write
               _start
                 _Delay10us
               _stop
                 _Delay10us
               _wait_r_ack
                 _r_ack
                   _Delay10us
                 _stop
                   _Delay10us
               _write_byte
                 _Delay10us
           _cw_write
             _start
               _Delay10us
             _stop
               _Delay10us
             _wait_r_ack
               _r_ack
                 _Delay10us
               _stop
                 _Delay10us
             _write_byte
               _Delay10us
         _cw_read
           _read_byte
             _Delay10us
           _s_ack
             _Delay10us
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us
     _update_usb_online
     _update_vol
       _cw_get_vol
         ___lldiv
           ___lmul (ARG)
         ___lmul
         _cw_read_word
           _read_byte
             _Delay10us
           _s_ack
             _Delay10us
           _sn_ack
             _Delay10us
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     27      39       5       71.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      40       7       80.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      40       9       80.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
ABS                  0      0      C7      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      C7      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Mon Aug 28 22:07:42 2017

                    __CFG_CP$OFF 0000                               l31 0125                               l60 0161  
                _update_capacity 0244                      __CFG_LVP$ON 0000                              l230 060C  
                            l128 0497                              l241 075C                              l138 0499  
                            l404 026C                              l148 049C                              l158 04A0  
                            l280 06A6                              l281 06B2                              l279 069A  
                            _GIE 005F                     __CFG_BORV$LO 0000                              wreg 0009  
                  __CFG_BBEN$OFF 0000                     __CFG_ZCD$OFF 0000                    ?_cw_read_word 0024  
                           l2003 0793                    CW_Delay10ms@a 0073                             l2013 07A5  
                  CW_Delay10ms@b 0074                    CW_Delay10ms@c 0070                             l2031 07C1  
                           l2111 054B                             l2201 0438                             l2105 053D  
                           l2019 07AA                             l2131 0588                             l2117 0559  
                           l2039 07CD                             l2207 043D                             l2143 02C8  
                           l2127 0582                             l2231 0680                             l2223 0668  
                           l2049 07E2                             l2073 0462                             l2129 055B  
                           l2401 04A4                             l2315 0134                             l2171 0524  
                           l2139 02BE                             l2243 06C1                             l2333 01BA  
                           l2085 0479                             l2157 04EB                             l1615 0214  
                           l2327 01AB                             l2095 048B                             l2167 0519  
                           l2159 04F9                             l1617 0219                             l1609 020D  
                           l1801 0344                             l2185 0418                             l1619 021E  
                           l1717 027C                             l1725 0286                             l1823 0235  
                           l1671 0308                             l2199 0437                             l1825 023A  
                           l1817 022E                             l1745 01F4                             l1673 0314  
                           l1657 02F3                             l1921 0638                             l1841 05A2  
                           l1827 023F                             l1747 01F9                             l1739 01ED  
                           l1771 0373                             l1931 064B                             l1749 01FE  
                           l1765 0365                             l1909 0622                             l1853 05B0  
                           l1759 0358                             l1863 05CA                             l1847 05AB  
                           l1689 01D3                             l1793 0333                             l1881 05E9  
                           l1873 05D7                             l1953 0732                             l1945 0721  
                           l1787 0326                             l1891 05FB                             l1867 05D2  
                           l1981 076C                             l1965 074B                             l1887 05F3  
                           l1995 0783                             l1987 0771                             u1250 01D1  
                           _LATA 0018                             u2135 0255                             _LATC 001A  
                           u2145 025E                             u2065 06A0                             u2090 02B4  
                           u2075 06AC                             u2265 01A2                             u1905 02D0  
                           u1935 04EE                             u1865 057B                             u1955 04FA  
                           u1875 0564                             u1965 050E                             u1975 051A  
                           u1895 02C9                             _PLLR 4480                             _WPUA 1F39  
                           _WPUC 1F4F                    _EUSART1_Write 0124                    __CFG_FCMEN$ON 0000  
                           _main 048E                             fsr0h 0005                             fsr1h 0007  
                           indf0 0000                             fsr0l 0004                             indf1 0001  
                           fsr1l 0006                             btemp 007E                             _stop 0164  
                  __CFG_BOREN$ON 0000                             start 0001                    __CFG_CSWEN$ON 0000  
                 CW_Delay100us@a 0071                   CW_Delay100us@b 0072                   CW_Delay100us@i 0073  
               ?_cw_get_capacity 003A       update_capacity@cw_capacity 0043   __size_of_OSCILLATOR_Initialize 000C  
  __end_of_OSCILLATOR_Initialize 0164            _cw_update_config_info 058E                            ?_main 0070  
                  __CFG_WDTE$OFF 0000                  __end_of___lldiv 052D                            ?_stop 0070  
                          _OSCEN 0891                            _TRISA 0012                            _TRISC 0014  
            ___lmul@multiplicand 0074                    __CFG_WRTB$OFF 0000                    __CFG_WRTC$OFF 0000  
                __end_of_cw_init 07E4                  __end_of_cw_read 0381                   ??_cw_read_word 007C  
                          _r_ack 017C                            _s_ack 0136                            _start 0141  
                 ?_EUSART1_Write 0070                            status 0003                            wtemp0 007E  
                 __CFG_MCLRE$OFF 0000          __end_of_update_capacity 0265                  __initialization 07E4  
     __end_of_EUSART1_Initialize 0158                     __end_of_main 04DA               __size_of_Delay10us 0020  
                   __end_of_stop 0170                   __CFG_SAFEN$OFF 0000                   cw_bat_init@ret 0035  
                         ??_main 0045                           ??_stop 0074                           ?_r_ack 0074  
                         ?_s_ack 0070                 cw_read@point_reg 007D                           _CHARGE 0055  
                         _ANSELA 1F38                           _ANSELC 1F4E                           ?_start 0070  
                         _RC1REG 0119                           _RC1STA 011D                           _RC4PPS 1F24  
                         _ODCONA 1F3A                           _ODCONC 1F50                   __CFG_WDTCCS$SC 0000  
                         _OSCFRQ 0893                           _TX1REG 011A                           _TX1STA 011E  
                cw_write@w_pdata 0024                   __CFG_PWRTE$OFF 0000                    cw_get_vol@F83 004D  
           __size_of_cw_bat_init 001B             __size_of_cw_bat_work 0004                           ___lmul 02B6  
                  cw_get_vol@ret 0034                   __CFG_STVREN$ON 0000                        ??___lldiv 007C  
               __end_of_cw_write 0349                           _cw_bat 0047                           _cw_por 0446  
         ?_cw_update_config_info 0070                           _sn_ack 0170                        ??_cw_init 002D  
                      ??_cw_read 007C                    ?_CW_Delay10ms 0070                  ??_EUSART1_Write 0070  
              __end_of_Delay10us 0223                _SYSTEM_Initialize 0110          __end_of__initialization 07FE  
             ?_SYSTEM_Initialize 0070             _no_charger_full_jump 0053                _update_usb_online 012C  
               ?_update_capacity 0070                cw_get_vol@ad_buff 0041                   __pcstackCOMMON 0070  
                   __pidataBANK1 03C1                     __pidataBANK2 0381               ?_update_usb_online 0070  
            ??_SYSTEM_Initialize 0071             __end_of_cw_read_word 058E                    __end_of_r_ack 0192  
                  __end_of_s_ack 0141                    __end_of_start 014C           __size_of_CW_Delay100us 0020  
                 ??_CW_Delay10ms 0072              ??_update_usb_online 0070                cw_get_vol@reg_val 0036  
                cw_bat_init@loop 0034                          ??_r_ack 0076                          ??_s_ack 0074  
      __end_of_SYSTEM_Initialize 0114                          ??_start 0074                       __pbssBANK0 0047  
      __end_of_update_usb_online 0136               __size_of_read_byte 0023                       __pmaintext 048E  
                        ?___lmul 0070                  __CFG_PPS1WAY$ON 0000                          ?_cw_por 0033  
                 ___lmul@product 0078                          ?_sn_ack 0070                          _SP1BRGH 011C  
                        _SP1BRGL 011B                          _OSCCON1 088D                          _OSCCON3 088F  
                        _OSCSTAT 0890                          _OSCTUNE 0892                          _PPSLOCK 1E8F  
                     _cw_get_vol 064D                        ?_cw_write 0024                    _CW_Delay100us 01E3  
           update_vol@cw_voltage 0043                  __size_of___lmul 002F                          ___lldiv 04DA  
                __size_of_cw_por 0048                  __size_of_sn_ack 000C                          __ptext1 0114  
                        __ptext2 0192                          __ptext3 064D                          __ptext4 052D  
                        __ptext5 0170                          __ptext6 02B6                          __ptext7 04DA  
                        __ptext8 012C                          __ptext9 0244                          _cw_init 070E  
                        _cw_read 0349                  __CFG_WRTAPP$OFF 0000            _OSCILLATOR_Initialize 0158  
              __end_of_read_byte 0288               _EUSART1_Initialize 014C         __size_of_cw_get_capacity 0045  
       ??_PIN_MANAGER_Initialize 0070                  __CFG_WRTSAF$OFF 0000       __size_of_SYSTEM_Initialize 0004  
                        clrloop0 0119                          main@ret 0046             end_of_initialization 07FE  
               write_byte@w_data 0075                   ?_CW_Delay100us 0070              ?_EUSART1_Initialize 0070  
                     ??_cw_write 007C                          init_ram 011E                          initloop 011F  
     __size_of_update_usb_online 000A             __end_of_CW_Delay10ms 0244            __size_of_cw_read_word 0061  
                ___lldiv@divisor 0020                  cw_por@reset_val 0037                  ___lldiv@counter 002C  
                     _reset_loop 0057     cw_update_config_info@reg_val 002C          ??_cw_update_config_info 0027  
                    wait_r_ack@i 0022                       _wait_r_ack 02E5             ??_EUSART1_Initialize 0070  
          __CFG_WDTCPS$WDTCPS_31 0000                        _PORTCbits 000E         cw_update_config_info@ret 0029  
                      _TRISCbits 0014                       _update_vol 0192                      ?_cw_get_vol 002D  
            EUSART1_Write@txData 0070                 __CFG_FEXTOSC$OFF 0000                     _cw_read_word 052D  
                      _Delay10us 0203                   cw_init@reg_val 0032                    ??_cw_bat_init 0033  
                  ??_cw_bat_work 007E                       cw_init@ret 0030                   cw_read@r_pdata 0024  
             cw_get_vol@ad_value 003C                   __end_of___lmul 02E5                       _write_byte 01C4  
                 __end_of_cw_por 048E           ?_OSCILLATOR_Initialize 0070                   __end_of_sn_ack 017C  
            start_initialization 07E4  __size_of_PIN_MANAGER_Initialize 002E                  ??_CW_Delay100us 0070  
          __end_of_EUSART1_Write 012C       cw_get_capacity@cw_capacity 003E                ??_cw_get_capacity 003C  
                     ?_Delay10us 0070                 __CFG_LPBOREN$OFF 0000                         ??___lmul 0078  
            __end_of_cw_bat_init 01C4              __size_of_cw_get_vol 00C1                      ?_wait_r_ack 007A  
            __end_of_cw_bat_work 0118                      __pdataBANK1 00A0                      __pdataBANK2 0120  
                       ??_cw_por 0035                         ??_sn_ack 0074                       read_byte@i 0075  
       __size_of_update_capacity 0021           cw_update_config_info@i 002B           cw_get_capacity@reg_val 0041  
                      ___latbits 0000                    __pcstackBANK0 0020                      ?_update_vol 0070  
          __size_of_CW_Delay10ms 0021        _allow_charger_always_zero 004F                __size_of_cw_write 0032  
         cw_get_vol@ad_value_max 003A           cw_get_vol@ad_value_min 0038              cw_read_word@r_pdata 0024  
         _PIN_MANAGER_Initialize 0288                         ?___lldiv 0020                      ?_write_byte 0070  
          cw_read_word@point_reg 0027                         ?_cw_init 0070                         ?_cw_read 0024  
                       _BAUD1CON 011F                     _CW_Delay10ms 0223             __CFG_RSTOSC$HFINTPLL 0000  
                 __size_of_r_ack 0016                   __size_of_s_ack 000B                        _read_byte 0265  
                 __size_of_start 000B              __size_of_wait_r_ack 0032                      ??_Delay10us 0070  
                       _LATAbits 0018                         _LATCbits 001A                        clear_ram0 0118  
                    _cw_bat_init 01A9                      _cw_bat_work 0114                         _PIR3bits 070F  
              __CFG_BBSIZE$BB512 0000              __size_of_update_vol 0017   __size_of_cw_update_config_info 00BF  
  __end_of_cw_update_config_info 064D                     _RX1DTPPSbits 1ECB                      write_byte@i 0076  
                   ??_cw_get_vol 002F                ??_update_capacity 0042                        cw_por@ret 0038  
              ___lmul@multiplier 0070                       ?_read_byte 0070                cw_write@point_reg 007C  
            __size_of_write_byte 001F                  read_byte@r_data 0076          ??_OSCILLATOR_Initialize 0070  
             __end_of_cw_get_vol 070E                 __size_of___lldiv 0053      __size_of_EUSART1_Initialize 000C  
                _cw_get_capacity 0401                 __size_of_cw_init 00D6                 __size_of_cw_read 0038  
             _cw_bat_config_info 0120               cw_read_word@length 0025                         __ptext10 0401  
                       __ptext11 0446                         __ptext20 017C                         __ptext12 01A9  
                       __ptext21 0141                         __ptext13 070E                         __ptext30 014C  
                       __ptext22 0136                         __ptext14 058E                         __ptext31 0124  
                       __ptext23 0265                         __ptext15 0317                         __ptext24 0203  
                       __ptext16 0349                         __ptext25 01E3                         __ptext17 01C4  
                       __ptext26 0223                         __ptext18 02E5                         __ptext27 0110  
                       __ptext19 0164                         __ptext28 0288                         __ptext29 0158  
                       _cw_write 0317            _allow_no_charger_full 0051               cw_get_capacity@ret 003F  
                  __size_of_main 004C                    __size_of_stop 000C             __CFG_WDTCWS$WDTCWS_7 0000  
                     Delay10us@a 0071                       Delay10us@b 0072                       Delay10us@i 0073  
                     _RC1STAbits 011D                     ??_wait_r_ack 007C                         cw_init@i 002F  
 cw_update_config_info@reset_val 0028      PIN_MANAGER_Initialize@state 0070                         r_ack@ack 0078  
                  wait_r_ack@ack 0020                     ??_update_vol 007E                      ??_read_byte 0074  
          __end_of_CW_Delay100us 0203                cw_read_word@count 0028               __end_of_wait_r_ack 0317  
               ___lldiv@dividend 0024          ?_PIN_MANAGER_Initialize 0070                __CFG_CLKOUTEN$OFF 0000  
                    _PPSLOCKbits 1E8F         CW201x@cw_bat_config_info 00A0                    _if_quickstart 0058  
        __end_of_cw_get_capacity 0446               __end_of_update_vol 01A9           cw_get_vol@get_ad_times 0040  
                   ??_write_byte 0074           __size_of_EUSART1_Write 0008                 ___lldiv@quotient 0028  
 __end_of_PIN_MANAGER_Initialize 02B6               __end_of_write_byte 01E3                     ?_cw_bat_init 0070  
                   ?_cw_bat_work 0070  
