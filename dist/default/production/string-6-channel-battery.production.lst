

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Wed Sep 13 01:46:01 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F15323
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	psect	text20,local,class=CODE,merge=1,delta=2
    31                           	psect	text21,local,class=CODE,merge=1,delta=2
    32                           	psect	text22,local,class=CODE,merge=1,delta=2
    33                           	psect	text23,local,class=CODE,merge=1,delta=2
    34                           	psect	text24,local,class=CODE,merge=1,delta=2
    35                           	psect	text25,local,class=CODE,merge=1,delta=2
    36                           	psect	text26,local,class=CODE,merge=1,delta=2
    37                           	psect	text27,local,class=CODE,merge=1,delta=2
    38                           	psect	text28,local,class=CODE,merge=1,delta=2
    39                           	psect	text29,local,class=CODE,merge=1,delta=2
    40                           	psect	text30,local,class=CODE,merge=1,delta=2
    41                           	psect	text31,local,class=CODE,merge=1,delta=2
    42                           	dabs	1,0x7E,2
    43  0000                     
    44                           ; Version 1.43
    45                           ; Generated 25/07/2017 GMT
    46                           ; 
    47                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC16F15323 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     	;# 
    79  0001                     	;# 
    80  0002                     	;# 
    81  0003                     	;# 
    82  0004                     	;# 
    83  0005                     	;# 
    84  0006                     	;# 
    85  0007                     	;# 
    86  0008                     	;# 
    87  0009                     	;# 
    88  000A                     	;# 
    89  000B                     	;# 
    90  000C                     	;# 
    91  000E                     	;# 
    92  0012                     	;# 
    93  0014                     	;# 
    94  0018                     	;# 
    95  001A                     	;# 
    96  009B                     	;# 
    97  009B                     	;# 
    98  009C                     	;# 
    99  009D                     	;# 
   100  009E                     	;# 
   101  009F                     	;# 
   102  0119                     	;# 
   103  0119                     	;# 
   104  0119                     	;# 
   105  011A                     	;# 
   106  011A                     	;# 
   107  011A                     	;# 
   108  011B                     	;# 
   109  011B                     	;# 
   110  011B                     	;# 
   111  011B                     	;# 
   112  011B                     	;# 
   113  011C                     	;# 
   114  011C                     	;# 
   115  011C                     	;# 
   116  011D                     	;# 
   117  011D                     	;# 
   118  011D                     	;# 
   119  011E                     	;# 
   120  011E                     	;# 
   121  011E                     	;# 
   122  011F                     	;# 
   123  011F                     	;# 
   124  011F                     	;# 
   125  011F                     	;# 
   126  011F                     	;# 
   127  018C                     	;# 
   128  018D                     	;# 
   129  018E                     	;# 
   130  018F                     	;# 
   131  0190                     	;# 
   132  0191                     	;# 
   133  0192                     	;# 
   134  020C                     	;# 
   135  020C                     	;# 
   136  020D                     	;# 
   137  020E                     	;# 
   138  020F                     	;# 
   139  020F                     	;# 
   140  0210                     	;# 
   141  0210                     	;# 
   142  0211                     	;# 
   143  0211                     	;# 
   144  028C                     	;# 
   145  028C                     	;# 
   146  028D                     	;# 
   147  028D                     	;# 
   148  028E                     	;# 
   149  028F                     	;# 
   150  0290                     	;# 
   151  0291                     	;# 
   152  030C                     	;# 
   153  030C                     	;# 
   154  030D                     	;# 
   155  030E                     	;# 
   156  030F                     	;# 
   157  0310                     	;# 
   158  0310                     	;# 
   159  0311                     	;# 
   160  0312                     	;# 
   161  0313                     	;# 
   162  0314                     	;# 
   163  0315                     	;# 
   164  0316                     	;# 
   165  0318                     	;# 
   166  0319                     	;# 
   167  031A                     	;# 
   168  031C                     	;# 
   169  031D                     	;# 
   170  031E                     	;# 
   171  038C                     	;# 
   172  038D                     	;# 
   173  038E                     	;# 
   174  058C                     	;# 
   175  058C                     	;# 
   176  058D                     	;# 
   177  058E                     	;# 
   178  058F                     	;# 
   179  058F                     	;# 
   180  0590                     	;# 
   181  0591                     	;# 
   182  0592                     	;# 
   183  0593                     	;# 
   184  059C                     	;# 
   185  059C                     	;# 
   186  059D                     	;# 
   187  059D                     	;# 
   188  059E                     	;# 
   189  059F                     	;# 
   190  060C                     	;# 
   191  060D                     	;# 
   192  060E                     	;# 
   193  060F                     	;# 
   194  0610                     	;# 
   195  0611                     	;# 
   196  0612                     	;# 
   197  0613                     	;# 
   198  0614                     	;# 
   199  070C                     	;# 
   200  070D                     	;# 
   201  070E                     	;# 
   202  070F                     	;# 
   203  0710                     	;# 
   204  0711                     	;# 
   205  0712                     	;# 
   206  0713                     	;# 
   207  0716                     	;# 
   208  0717                     	;# 
   209  0718                     	;# 
   210  0719                     	;# 
   211  071A                     	;# 
   212  071B                     	;# 
   213  071C                     	;# 
   214  071D                     	;# 
   215  0796                     	;# 
   216  0797                     	;# 
   217  0798                     	;# 
   218  0799                     	;# 
   219  079A                     	;# 
   220  079B                     	;# 
   221  080C                     	;# 
   222  080D                     	;# 
   223  080E                     	;# 
   224  080F                     	;# 
   225  0810                     	;# 
   226  0811                     	;# 
   227  0812                     	;# 
   228  0813                     	;# 
   229  0814                     	;# 
   230  081A                     	;# 
   231  081A                     	;# 
   232  081B                     	;# 
   233  081C                     	;# 
   234  081C                     	;# 
   235  081D                     	;# 
   236  081E                     	;# 
   237  081F                     	;# 
   238  088C                     	;# 
   239  088D                     	;# 
   240  088E                     	;# 
   241  088F                     	;# 
   242  0890                     	;# 
   243  0891                     	;# 
   244  0892                     	;# 
   245  0893                     	;# 
   246  0895                     	;# 
   247  0896                     	;# 
   248  090C                     	;# 
   249  090E                     	;# 
   250  090F                     	;# 
   251  091F                     	;# 
   252  098F                     	;# 
   253  098F                     	;# 
   254  0990                     	;# 
   255  0991                     	;# 
   256  0992                     	;# 
   257  0993                     	;# 
   258  0994                     	;# 
   259  0995                     	;# 
   260  0996                     	;# 
   261  0997                     	;# 
   262  1E0F                     	;# 
   263  1E10                     	;# 
   264  1E11                     	;# 
   265  1E12                     	;# 
   266  1E13                     	;# 
   267  1E14                     	;# 
   268  1E15                     	;# 
   269  1E16                     	;# 
   270  1E17                     	;# 
   271  1E18                     	;# 
   272  1E19                     	;# 
   273  1E1A                     	;# 
   274  1E1B                     	;# 
   275  1E1C                     	;# 
   276  1E1D                     	;# 
   277  1E1E                     	;# 
   278  1E1F                     	;# 
   279  1E20                     	;# 
   280  1E21                     	;# 
   281  1E22                     	;# 
   282  1E23                     	;# 
   283  1E24                     	;# 
   284  1E25                     	;# 
   285  1E26                     	;# 
   286  1E27                     	;# 
   287  1E28                     	;# 
   288  1E29                     	;# 
   289  1E2A                     	;# 
   290  1E2B                     	;# 
   291  1E2C                     	;# 
   292  1E2D                     	;# 
   293  1E2E                     	;# 
   294  1E2F                     	;# 
   295  1E30                     	;# 
   296  1E31                     	;# 
   297  1E32                     	;# 
   298  1E33                     	;# 
   299  1E34                     	;# 
   300  1E35                     	;# 
   301  1E36                     	;# 
   302  1E37                     	;# 
   303  1E8F                     	;# 
   304  1E90                     	;# 
   305  1E91                     	;# 
   306  1E92                     	;# 
   307  1E93                     	;# 
   308  1E9C                     	;# 
   309  1EA1                     	;# 
   310  1EA2                     	;# 
   311  1EB1                     	;# 
   312  1EBB                     	;# 
   313  1EBC                     	;# 
   314  1EBD                     	;# 
   315  1EBE                     	;# 
   316  1EC3                     	;# 
   317  1EC5                     	;# 
   318  1EC6                     	;# 
   319  1EC7                     	;# 
   320  1ECB                     	;# 
   321  1ECC                     	;# 
   322  1F10                     	;# 
   323  1F11                     	;# 
   324  1F12                     	;# 
   325  1F13                     	;# 
   326  1F14                     	;# 
   327  1F15                     	;# 
   328  1F20                     	;# 
   329  1F21                     	;# 
   330  1F22                     	;# 
   331  1F23                     	;# 
   332  1F24                     	;# 
   333  1F25                     	;# 
   334  1F38                     	;# 
   335  1F39                     	;# 
   336  1F3A                     	;# 
   337  1F3B                     	;# 
   338  1F3C                     	;# 
   339  1F3D                     	;# 
   340  1F3E                     	;# 
   341  1F3F                     	;# 
   342  1F4E                     	;# 
   343  1F4F                     	;# 
   344  1F50                     	;# 
   345  1F51                     	;# 
   346  1F52                     	;# 
   347  1F53                     	;# 
   348  1F54                     	;# 
   349  1F55                     	;# 
   350  1FE4                     	;# 
   351  1FE5                     	;# 
   352  1FE6                     	;# 
   353  1FE7                     	;# 
   354  1FE8                     	;# 
   355  1FE8                     	;# 
   356  1FE9                     	;# 
   357  1FEA                     	;# 
   358  1FEA                     	;# 
   359  1FEB                     	;# 
   360  1FED                     	;# 
   361  1FEE                     	;# 
   362  1FEF                     	;# 
   363  0000                     	;# 
   364  0001                     	;# 
   365  0002                     	;# 
   366  0003                     	;# 
   367  0004                     	;# 
   368  0005                     	;# 
   369  0006                     	;# 
   370  0007                     	;# 
   371  0008                     	;# 
   372  0009                     	;# 
   373  000A                     	;# 
   374  000B                     	;# 
   375  000C                     	;# 
   376  000E                     	;# 
   377  0012                     	;# 
   378  0014                     	;# 
   379  0018                     	;# 
   380  001A                     	;# 
   381  009B                     	;# 
   382  009B                     	;# 
   383  009C                     	;# 
   384  009D                     	;# 
   385  009E                     	;# 
   386  009F                     	;# 
   387  0119                     	;# 
   388  0119                     	;# 
   389  0119                     	;# 
   390  011A                     	;# 
   391  011A                     	;# 
   392  011A                     	;# 
   393  011B                     	;# 
   394  011B                     	;# 
   395  011B                     	;# 
   396  011B                     	;# 
   397  011B                     	;# 
   398  011C                     	;# 
   399  011C                     	;# 
   400  011C                     	;# 
   401  011D                     	;# 
   402  011D                     	;# 
   403  011D                     	;# 
   404  011E                     	;# 
   405  011E                     	;# 
   406  011E                     	;# 
   407  011F                     	;# 
   408  011F                     	;# 
   409  011F                     	;# 
   410  011F                     	;# 
   411  011F                     	;# 
   412  018C                     	;# 
   413  018D                     	;# 
   414  018E                     	;# 
   415  018F                     	;# 
   416  0190                     	;# 
   417  0191                     	;# 
   418  0192                     	;# 
   419  020C                     	;# 
   420  020C                     	;# 
   421  020D                     	;# 
   422  020E                     	;# 
   423  020F                     	;# 
   424  020F                     	;# 
   425  0210                     	;# 
   426  0210                     	;# 
   427  0211                     	;# 
   428  0211                     	;# 
   429  028C                     	;# 
   430  028C                     	;# 
   431  028D                     	;# 
   432  028D                     	;# 
   433  028E                     	;# 
   434  028F                     	;# 
   435  0290                     	;# 
   436  0291                     	;# 
   437  030C                     	;# 
   438  030C                     	;# 
   439  030D                     	;# 
   440  030E                     	;# 
   441  030F                     	;# 
   442  0310                     	;# 
   443  0310                     	;# 
   444  0311                     	;# 
   445  0312                     	;# 
   446  0313                     	;# 
   447  0314                     	;# 
   448  0315                     	;# 
   449  0316                     	;# 
   450  0318                     	;# 
   451  0319                     	;# 
   452  031A                     	;# 
   453  031C                     	;# 
   454  031D                     	;# 
   455  031E                     	;# 
   456  038C                     	;# 
   457  038D                     	;# 
   458  038E                     	;# 
   459  058C                     	;# 
   460  058C                     	;# 
   461  058D                     	;# 
   462  058E                     	;# 
   463  058F                     	;# 
   464  058F                     	;# 
   465  0590                     	;# 
   466  0591                     	;# 
   467  0592                     	;# 
   468  0593                     	;# 
   469  059C                     	;# 
   470  059C                     	;# 
   471  059D                     	;# 
   472  059D                     	;# 
   473  059E                     	;# 
   474  059F                     	;# 
   475  060C                     	;# 
   476  060D                     	;# 
   477  060E                     	;# 
   478  060F                     	;# 
   479  0610                     	;# 
   480  0611                     	;# 
   481  0612                     	;# 
   482  0613                     	;# 
   483  0614                     	;# 
   484  070C                     	;# 
   485  070D                     	;# 
   486  070E                     	;# 
   487  070F                     	;# 
   488  0710                     	;# 
   489  0711                     	;# 
   490  0712                     	;# 
   491  0713                     	;# 
   492  0716                     	;# 
   493  0717                     	;# 
   494  0718                     	;# 
   495  0719                     	;# 
   496  071A                     	;# 
   497  071B                     	;# 
   498  071C                     	;# 
   499  071D                     	;# 
   500  0796                     	;# 
   501  0797                     	;# 
   502  0798                     	;# 
   503  0799                     	;# 
   504  079A                     	;# 
   505  079B                     	;# 
   506  080C                     	;# 
   507  080D                     	;# 
   508  080E                     	;# 
   509  080F                     	;# 
   510  0810                     	;# 
   511  0811                     	;# 
   512  0812                     	;# 
   513  0813                     	;# 
   514  0814                     	;# 
   515  081A                     	;# 
   516  081A                     	;# 
   517  081B                     	;# 
   518  081C                     	;# 
   519  081C                     	;# 
   520  081D                     	;# 
   521  081E                     	;# 
   522  081F                     	;# 
   523  088C                     	;# 
   524  088D                     	;# 
   525  088E                     	;# 
   526  088F                     	;# 
   527  0890                     	;# 
   528  0891                     	;# 
   529  0892                     	;# 
   530  0893                     	;# 
   531  0895                     	;# 
   532  0896                     	;# 
   533  090C                     	;# 
   534  090E                     	;# 
   535  090F                     	;# 
   536  091F                     	;# 
   537  098F                     	;# 
   538  098F                     	;# 
   539  0990                     	;# 
   540  0991                     	;# 
   541  0992                     	;# 
   542  0993                     	;# 
   543  0994                     	;# 
   544  0995                     	;# 
   545  0996                     	;# 
   546  0997                     	;# 
   547  1E0F                     	;# 
   548  1E10                     	;# 
   549  1E11                     	;# 
   550  1E12                     	;# 
   551  1E13                     	;# 
   552  1E14                     	;# 
   553  1E15                     	;# 
   554  1E16                     	;# 
   555  1E17                     	;# 
   556  1E18                     	;# 
   557  1E19                     	;# 
   558  1E1A                     	;# 
   559  1E1B                     	;# 
   560  1E1C                     	;# 
   561  1E1D                     	;# 
   562  1E1E                     	;# 
   563  1E1F                     	;# 
   564  1E20                     	;# 
   565  1E21                     	;# 
   566  1E22                     	;# 
   567  1E23                     	;# 
   568  1E24                     	;# 
   569  1E25                     	;# 
   570  1E26                     	;# 
   571  1E27                     	;# 
   572  1E28                     	;# 
   573  1E29                     	;# 
   574  1E2A                     	;# 
   575  1E2B                     	;# 
   576  1E2C                     	;# 
   577  1E2D                     	;# 
   578  1E2E                     	;# 
   579  1E2F                     	;# 
   580  1E30                     	;# 
   581  1E31                     	;# 
   582  1E32                     	;# 
   583  1E33                     	;# 
   584  1E34                     	;# 
   585  1E35                     	;# 
   586  1E36                     	;# 
   587  1E37                     	;# 
   588  1E8F                     	;# 
   589  1E90                     	;# 
   590  1E91                     	;# 
   591  1E92                     	;# 
   592  1E93                     	;# 
   593  1E9C                     	;# 
   594  1EA1                     	;# 
   595  1EA2                     	;# 
   596  1EB1                     	;# 
   597  1EBB                     	;# 
   598  1EBC                     	;# 
   599  1EBD                     	;# 
   600  1EBE                     	;# 
   601  1EC3                     	;# 
   602  1EC5                     	;# 
   603  1EC6                     	;# 
   604  1EC7                     	;# 
   605  1ECB                     	;# 
   606  1ECC                     	;# 
   607  1F10                     	;# 
   608  1F11                     	;# 
   609  1F12                     	;# 
   610  1F13                     	;# 
   611  1F14                     	;# 
   612  1F15                     	;# 
   613  1F20                     	;# 
   614  1F21                     	;# 
   615  1F22                     	;# 
   616  1F23                     	;# 
   617  1F24                     	;# 
   618  1F25                     	;# 
   619  1F38                     	;# 
   620  1F39                     	;# 
   621  1F3A                     	;# 
   622  1F3B                     	;# 
   623  1F3C                     	;# 
   624  1F3D                     	;# 
   625  1F3E                     	;# 
   626  1F3F                     	;# 
   627  1F4E                     	;# 
   628  1F4F                     	;# 
   629  1F50                     	;# 
   630  1F51                     	;# 
   631  1F52                     	;# 
   632  1F53                     	;# 
   633  1F54                     	;# 
   634  1F55                     	;# 
   635  1FE4                     	;# 
   636  1FE5                     	;# 
   637  1FE6                     	;# 
   638  1FE7                     	;# 
   639  1FE8                     	;# 
   640  1FE8                     	;# 
   641  1FE9                     	;# 
   642  1FEA                     	;# 
   643  1FEA                     	;# 
   644  1FEB                     	;# 
   645  1FED                     	;# 
   646  1FEE                     	;# 
   647  1FEF                     	;# 
   648  0000                     	;# 
   649  0001                     	;# 
   650  0002                     	;# 
   651  0003                     	;# 
   652  0004                     	;# 
   653  0005                     	;# 
   654  0006                     	;# 
   655  0007                     	;# 
   656  0008                     	;# 
   657  0009                     	;# 
   658  000A                     	;# 
   659  000B                     	;# 
   660  000C                     	;# 
   661  000E                     	;# 
   662  0012                     	;# 
   663  0014                     	;# 
   664  0018                     	;# 
   665  001A                     	;# 
   666  009B                     	;# 
   667  009B                     	;# 
   668  009C                     	;# 
   669  009D                     	;# 
   670  009E                     	;# 
   671  009F                     	;# 
   672  0119                     	;# 
   673  0119                     	;# 
   674  0119                     	;# 
   675  011A                     	;# 
   676  011A                     	;# 
   677  011A                     	;# 
   678  011B                     	;# 
   679  011B                     	;# 
   680  011B                     	;# 
   681  011B                     	;# 
   682  011B                     	;# 
   683  011C                     	;# 
   684  011C                     	;# 
   685  011C                     	;# 
   686  011D                     	;# 
   687  011D                     	;# 
   688  011D                     	;# 
   689  011E                     	;# 
   690  011E                     	;# 
   691  011E                     	;# 
   692  011F                     	;# 
   693  011F                     	;# 
   694  011F                     	;# 
   695  011F                     	;# 
   696  011F                     	;# 
   697  018C                     	;# 
   698  018D                     	;# 
   699  018E                     	;# 
   700  018F                     	;# 
   701  0190                     	;# 
   702  0191                     	;# 
   703  0192                     	;# 
   704  020C                     	;# 
   705  020C                     	;# 
   706  020D                     	;# 
   707  020E                     	;# 
   708  020F                     	;# 
   709  020F                     	;# 
   710  0210                     	;# 
   711  0210                     	;# 
   712  0211                     	;# 
   713  0211                     	;# 
   714  028C                     	;# 
   715  028C                     	;# 
   716  028D                     	;# 
   717  028D                     	;# 
   718  028E                     	;# 
   719  028F                     	;# 
   720  0290                     	;# 
   721  0291                     	;# 
   722  030C                     	;# 
   723  030C                     	;# 
   724  030D                     	;# 
   725  030E                     	;# 
   726  030F                     	;# 
   727  0310                     	;# 
   728  0310                     	;# 
   729  0311                     	;# 
   730  0312                     	;# 
   731  0313                     	;# 
   732  0314                     	;# 
   733  0315                     	;# 
   734  0316                     	;# 
   735  0318                     	;# 
   736  0319                     	;# 
   737  031A                     	;# 
   738  031C                     	;# 
   739  031D                     	;# 
   740  031E                     	;# 
   741  038C                     	;# 
   742  038D                     	;# 
   743  038E                     	;# 
   744  058C                     	;# 
   745  058C                     	;# 
   746  058D                     	;# 
   747  058E                     	;# 
   748  058F                     	;# 
   749  058F                     	;# 
   750  0590                     	;# 
   751  0591                     	;# 
   752  0592                     	;# 
   753  0593                     	;# 
   754  059C                     	;# 
   755  059C                     	;# 
   756  059D                     	;# 
   757  059D                     	;# 
   758  059E                     	;# 
   759  059F                     	;# 
   760  060C                     	;# 
   761  060D                     	;# 
   762  060E                     	;# 
   763  060F                     	;# 
   764  0610                     	;# 
   765  0611                     	;# 
   766  0612                     	;# 
   767  0613                     	;# 
   768  0614                     	;# 
   769  070C                     	;# 
   770  070D                     	;# 
   771  070E                     	;# 
   772  070F                     	;# 
   773  0710                     	;# 
   774  0711                     	;# 
   775  0712                     	;# 
   776  0713                     	;# 
   777  0716                     	;# 
   778  0717                     	;# 
   779  0718                     	;# 
   780  0719                     	;# 
   781  071A                     	;# 
   782  071B                     	;# 
   783  071C                     	;# 
   784  071D                     	;# 
   785  0796                     	;# 
   786  0797                     	;# 
   787  0798                     	;# 
   788  0799                     	;# 
   789  079A                     	;# 
   790  079B                     	;# 
   791  080C                     	;# 
   792  080D                     	;# 
   793  080E                     	;# 
   794  080F                     	;# 
   795  0810                     	;# 
   796  0811                     	;# 
   797  0812                     	;# 
   798  0813                     	;# 
   799  0814                     	;# 
   800  081A                     	;# 
   801  081A                     	;# 
   802  081B                     	;# 
   803  081C                     	;# 
   804  081C                     	;# 
   805  081D                     	;# 
   806  081E                     	;# 
   807  081F                     	;# 
   808  088C                     	;# 
   809  088D                     	;# 
   810  088E                     	;# 
   811  088F                     	;# 
   812  0890                     	;# 
   813  0891                     	;# 
   814  0892                     	;# 
   815  0893                     	;# 
   816  0895                     	;# 
   817  0896                     	;# 
   818  090C                     	;# 
   819  090E                     	;# 
   820  090F                     	;# 
   821  091F                     	;# 
   822  098F                     	;# 
   823  098F                     	;# 
   824  0990                     	;# 
   825  0991                     	;# 
   826  0992                     	;# 
   827  0993                     	;# 
   828  0994                     	;# 
   829  0995                     	;# 
   830  0996                     	;# 
   831  0997                     	;# 
   832  1E0F                     	;# 
   833  1E10                     	;# 
   834  1E11                     	;# 
   835  1E12                     	;# 
   836  1E13                     	;# 
   837  1E14                     	;# 
   838  1E15                     	;# 
   839  1E16                     	;# 
   840  1E17                     	;# 
   841  1E18                     	;# 
   842  1E19                     	;# 
   843  1E1A                     	;# 
   844  1E1B                     	;# 
   845  1E1C                     	;# 
   846  1E1D                     	;# 
   847  1E1E                     	;# 
   848  1E1F                     	;# 
   849  1E20                     	;# 
   850  1E21                     	;# 
   851  1E22                     	;# 
   852  1E23                     	;# 
   853  1E24                     	;# 
   854  1E25                     	;# 
   855  1E26                     	;# 
   856  1E27                     	;# 
   857  1E28                     	;# 
   858  1E29                     	;# 
   859  1E2A                     	;# 
   860  1E2B                     	;# 
   861  1E2C                     	;# 
   862  1E2D                     	;# 
   863  1E2E                     	;# 
   864  1E2F                     	;# 
   865  1E30                     	;# 
   866  1E31                     	;# 
   867  1E32                     	;# 
   868  1E33                     	;# 
   869  1E34                     	;# 
   870  1E35                     	;# 
   871  1E36                     	;# 
   872  1E37                     	;# 
   873  1E8F                     	;# 
   874  1E90                     	;# 
   875  1E91                     	;# 
   876  1E92                     	;# 
   877  1E93                     	;# 
   878  1E9C                     	;# 
   879  1EA1                     	;# 
   880  1EA2                     	;# 
   881  1EB1                     	;# 
   882  1EBB                     	;# 
   883  1EBC                     	;# 
   884  1EBD                     	;# 
   885  1EBE                     	;# 
   886  1EC3                     	;# 
   887  1EC5                     	;# 
   888  1EC6                     	;# 
   889  1EC7                     	;# 
   890  1ECB                     	;# 
   891  1ECC                     	;# 
   892  1F10                     	;# 
   893  1F11                     	;# 
   894  1F12                     	;# 
   895  1F13                     	;# 
   896  1F14                     	;# 
   897  1F15                     	;# 
   898  1F20                     	;# 
   899  1F21                     	;# 
   900  1F22                     	;# 
   901  1F23                     	;# 
   902  1F24                     	;# 
   903  1F25                     	;# 
   904  1F38                     	;# 
   905  1F39                     	;# 
   906  1F3A                     	;# 
   907  1F3B                     	;# 
   908  1F3C                     	;# 
   909  1F3D                     	;# 
   910  1F3E                     	;# 
   911  1F3F                     	;# 
   912  1F4E                     	;# 
   913  1F4F                     	;# 
   914  1F50                     	;# 
   915  1F51                     	;# 
   916  1F52                     	;# 
   917  1F53                     	;# 
   918  1F54                     	;# 
   919  1F55                     	;# 
   920  1FE4                     	;# 
   921  1FE5                     	;# 
   922  1FE6                     	;# 
   923  1FE7                     	;# 
   924  1FE8                     	;# 
   925  1FE8                     	;# 
   926  1FE9                     	;# 
   927  1FEA                     	;# 
   928  1FEA                     	;# 
   929  1FEB                     	;# 
   930  1FED                     	;# 
   931  1FEE                     	;# 
   932  1FEF                     	;# 
   933  0000                     	;# 
   934  0001                     	;# 
   935  0002                     	;# 
   936  0003                     	;# 
   937  0004                     	;# 
   938  0005                     	;# 
   939  0006                     	;# 
   940  0007                     	;# 
   941  0008                     	;# 
   942  0009                     	;# 
   943  000A                     	;# 
   944  000B                     	;# 
   945  000C                     	;# 
   946  000E                     	;# 
   947  0012                     	;# 
   948  0014                     	;# 
   949  0018                     	;# 
   950  001A                     	;# 
   951  009B                     	;# 
   952  009B                     	;# 
   953  009C                     	;# 
   954  009D                     	;# 
   955  009E                     	;# 
   956  009F                     	;# 
   957  0119                     	;# 
   958  0119                     	;# 
   959  0119                     	;# 
   960  011A                     	;# 
   961  011A                     	;# 
   962  011A                     	;# 
   963  011B                     	;# 
   964  011B                     	;# 
   965  011B                     	;# 
   966  011B                     	;# 
   967  011B                     	;# 
   968  011C                     	;# 
   969  011C                     	;# 
   970  011C                     	;# 
   971  011D                     	;# 
   972  011D                     	;# 
   973  011D                     	;# 
   974  011E                     	;# 
   975  011E                     	;# 
   976  011E                     	;# 
   977  011F                     	;# 
   978  011F                     	;# 
   979  011F                     	;# 
   980  011F                     	;# 
   981  011F                     	;# 
   982  018C                     	;# 
   983  018D                     	;# 
   984  018E                     	;# 
   985  018F                     	;# 
   986  0190                     	;# 
   987  0191                     	;# 
   988  0192                     	;# 
   989  020C                     	;# 
   990  020C                     	;# 
   991  020D                     	;# 
   992  020E                     	;# 
   993  020F                     	;# 
   994  020F                     	;# 
   995  0210                     	;# 
   996  0210                     	;# 
   997  0211                     	;# 
   998  0211                     	;# 
   999  028C                     	;# 
  1000  028C                     	;# 
  1001  028D                     	;# 
  1002  028D                     	;# 
  1003  028E                     	;# 
  1004  028F                     	;# 
  1005  0290                     	;# 
  1006  0291                     	;# 
  1007  030C                     	;# 
  1008  030C                     	;# 
  1009  030D                     	;# 
  1010  030E                     	;# 
  1011  030F                     	;# 
  1012  0310                     	;# 
  1013  0310                     	;# 
  1014  0311                     	;# 
  1015  0312                     	;# 
  1016  0313                     	;# 
  1017  0314                     	;# 
  1018  0315                     	;# 
  1019  0316                     	;# 
  1020  0318                     	;# 
  1021  0319                     	;# 
  1022  031A                     	;# 
  1023  031C                     	;# 
  1024  031D                     	;# 
  1025  031E                     	;# 
  1026  038C                     	;# 
  1027  038D                     	;# 
  1028  038E                     	;# 
  1029  058C                     	;# 
  1030  058C                     	;# 
  1031  058D                     	;# 
  1032  058E                     	;# 
  1033  058F                     	;# 
  1034  058F                     	;# 
  1035  0590                     	;# 
  1036  0591                     	;# 
  1037  0592                     	;# 
  1038  0593                     	;# 
  1039  059C                     	;# 
  1040  059C                     	;# 
  1041  059D                     	;# 
  1042  059D                     	;# 
  1043  059E                     	;# 
  1044  059F                     	;# 
  1045  060C                     	;# 
  1046  060D                     	;# 
  1047  060E                     	;# 
  1048  060F                     	;# 
  1049  0610                     	;# 
  1050  0611                     	;# 
  1051  0612                     	;# 
  1052  0613                     	;# 
  1053  0614                     	;# 
  1054  070C                     	;# 
  1055  070D                     	;# 
  1056  070E                     	;# 
  1057  070F                     	;# 
  1058  0710                     	;# 
  1059  0711                     	;# 
  1060  0712                     	;# 
  1061  0713                     	;# 
  1062  0716                     	;# 
  1063  0717                     	;# 
  1064  0718                     	;# 
  1065  0719                     	;# 
  1066  071A                     	;# 
  1067  071B                     	;# 
  1068  071C                     	;# 
  1069  071D                     	;# 
  1070  0796                     	;# 
  1071  0797                     	;# 
  1072  0798                     	;# 
  1073  0799                     	;# 
  1074  079A                     	;# 
  1075  079B                     	;# 
  1076  080C                     	;# 
  1077  080D                     	;# 
  1078  080E                     	;# 
  1079  080F                     	;# 
  1080  0810                     	;# 
  1081  0811                     	;# 
  1082  0812                     	;# 
  1083  0813                     	;# 
  1084  0814                     	;# 
  1085  081A                     	;# 
  1086  081A                     	;# 
  1087  081B                     	;# 
  1088  081C                     	;# 
  1089  081C                     	;# 
  1090  081D                     	;# 
  1091  081E                     	;# 
  1092  081F                     	;# 
  1093  088C                     	;# 
  1094  088D                     	;# 
  1095  088E                     	;# 
  1096  088F                     	;# 
  1097  0890                     	;# 
  1098  0891                     	;# 
  1099  0892                     	;# 
  1100  0893                     	;# 
  1101  0895                     	;# 
  1102  0896                     	;# 
  1103  090C                     	;# 
  1104  090E                     	;# 
  1105  090F                     	;# 
  1106  091F                     	;# 
  1107  098F                     	;# 
  1108  098F                     	;# 
  1109  0990                     	;# 
  1110  0991                     	;# 
  1111  0992                     	;# 
  1112  0993                     	;# 
  1113  0994                     	;# 
  1114  0995                     	;# 
  1115  0996                     	;# 
  1116  0997                     	;# 
  1117  1E0F                     	;# 
  1118  1E10                     	;# 
  1119  1E11                     	;# 
  1120  1E12                     	;# 
  1121  1E13                     	;# 
  1122  1E14                     	;# 
  1123  1E15                     	;# 
  1124  1E16                     	;# 
  1125  1E17                     	;# 
  1126  1E18                     	;# 
  1127  1E19                     	;# 
  1128  1E1A                     	;# 
  1129  1E1B                     	;# 
  1130  1E1C                     	;# 
  1131  1E1D                     	;# 
  1132  1E1E                     	;# 
  1133  1E1F                     	;# 
  1134  1E20                     	;# 
  1135  1E21                     	;# 
  1136  1E22                     	;# 
  1137  1E23                     	;# 
  1138  1E24                     	;# 
  1139  1E25                     	;# 
  1140  1E26                     	;# 
  1141  1E27                     	;# 
  1142  1E28                     	;# 
  1143  1E29                     	;# 
  1144  1E2A                     	;# 
  1145  1E2B                     	;# 
  1146  1E2C                     	;# 
  1147  1E2D                     	;# 
  1148  1E2E                     	;# 
  1149  1E2F                     	;# 
  1150  1E30                     	;# 
  1151  1E31                     	;# 
  1152  1E32                     	;# 
  1153  1E33                     	;# 
  1154  1E34                     	;# 
  1155  1E35                     	;# 
  1156  1E36                     	;# 
  1157  1E37                     	;# 
  1158  1E8F                     	;# 
  1159  1E90                     	;# 
  1160  1E91                     	;# 
  1161  1E92                     	;# 
  1162  1E93                     	;# 
  1163  1E9C                     	;# 
  1164  1EA1                     	;# 
  1165  1EA2                     	;# 
  1166  1EB1                     	;# 
  1167  1EBB                     	;# 
  1168  1EBC                     	;# 
  1169  1EBD                     	;# 
  1170  1EBE                     	;# 
  1171  1EC3                     	;# 
  1172  1EC5                     	;# 
  1173  1EC6                     	;# 
  1174  1EC7                     	;# 
  1175  1ECB                     	;# 
  1176  1ECC                     	;# 
  1177  1F10                     	;# 
  1178  1F11                     	;# 
  1179  1F12                     	;# 
  1180  1F13                     	;# 
  1181  1F14                     	;# 
  1182  1F15                     	;# 
  1183  1F20                     	;# 
  1184  1F21                     	;# 
  1185  1F22                     	;# 
  1186  1F23                     	;# 
  1187  1F24                     	;# 
  1188  1F25                     	;# 
  1189  1F38                     	;# 
  1190  1F39                     	;# 
  1191  1F3A                     	;# 
  1192  1F3B                     	;# 
  1193  1F3C                     	;# 
  1194  1F3D                     	;# 
  1195  1F3E                     	;# 
  1196  1F3F                     	;# 
  1197  1F4E                     	;# 
  1198  1F4F                     	;# 
  1199  1F50                     	;# 
  1200  1F51                     	;# 
  1201  1F52                     	;# 
  1202  1F53                     	;# 
  1203  1F54                     	;# 
  1204  1F55                     	;# 
  1205  1FE4                     	;# 
  1206  1FE5                     	;# 
  1207  1FE6                     	;# 
  1208  1FE7                     	;# 
  1209  1FE8                     	;# 
  1210  1FE8                     	;# 
  1211  1FE9                     	;# 
  1212  1FEA                     	;# 
  1213  1FEA                     	;# 
  1214  1FEB                     	;# 
  1215  1FED                     	;# 
  1216  1FEE                     	;# 
  1217  1FEF                     	;# 
  1218  0000                     	;# 
  1219  0001                     	;# 
  1220  0002                     	;# 
  1221  0003                     	;# 
  1222  0004                     	;# 
  1223  0005                     	;# 
  1224  0006                     	;# 
  1225  0007                     	;# 
  1226  0008                     	;# 
  1227  0009                     	;# 
  1228  000A                     	;# 
  1229  000B                     	;# 
  1230  000C                     	;# 
  1231  000E                     	;# 
  1232  0012                     	;# 
  1233  0014                     	;# 
  1234  0018                     	;# 
  1235  001A                     	;# 
  1236  009B                     	;# 
  1237  009B                     	;# 
  1238  009C                     	;# 
  1239  009D                     	;# 
  1240  009E                     	;# 
  1241  009F                     	;# 
  1242  0119                     	;# 
  1243  0119                     	;# 
  1244  0119                     	;# 
  1245  011A                     	;# 
  1246  011A                     	;# 
  1247  011A                     	;# 
  1248  011B                     	;# 
  1249  011B                     	;# 
  1250  011B                     	;# 
  1251  011B                     	;# 
  1252  011B                     	;# 
  1253  011C                     	;# 
  1254  011C                     	;# 
  1255  011C                     	;# 
  1256  011D                     	;# 
  1257  011D                     	;# 
  1258  011D                     	;# 
  1259  011E                     	;# 
  1260  011E                     	;# 
  1261  011E                     	;# 
  1262  011F                     	;# 
  1263  011F                     	;# 
  1264  011F                     	;# 
  1265  011F                     	;# 
  1266  011F                     	;# 
  1267  018C                     	;# 
  1268  018D                     	;# 
  1269  018E                     	;# 
  1270  018F                     	;# 
  1271  0190                     	;# 
  1272  0191                     	;# 
  1273  0192                     	;# 
  1274  020C                     	;# 
  1275  020C                     	;# 
  1276  020D                     	;# 
  1277  020E                     	;# 
  1278  020F                     	;# 
  1279  020F                     	;# 
  1280  0210                     	;# 
  1281  0210                     	;# 
  1282  0211                     	;# 
  1283  0211                     	;# 
  1284  028C                     	;# 
  1285  028C                     	;# 
  1286  028D                     	;# 
  1287  028D                     	;# 
  1288  028E                     	;# 
  1289  028F                     	;# 
  1290  0290                     	;# 
  1291  0291                     	;# 
  1292  030C                     	;# 
  1293  030C                     	;# 
  1294  030D                     	;# 
  1295  030E                     	;# 
  1296  030F                     	;# 
  1297  0310                     	;# 
  1298  0310                     	;# 
  1299  0311                     	;# 
  1300  0312                     	;# 
  1301  0313                     	;# 
  1302  0314                     	;# 
  1303  0315                     	;# 
  1304  0316                     	;# 
  1305  0318                     	;# 
  1306  0319                     	;# 
  1307  031A                     	;# 
  1308  031C                     	;# 
  1309  031D                     	;# 
  1310  031E                     	;# 
  1311  038C                     	;# 
  1312  038D                     	;# 
  1313  038E                     	;# 
  1314  058C                     	;# 
  1315  058C                     	;# 
  1316  058D                     	;# 
  1317  058E                     	;# 
  1318  058F                     	;# 
  1319  058F                     	;# 
  1320  0590                     	;# 
  1321  0591                     	;# 
  1322  0592                     	;# 
  1323  0593                     	;# 
  1324  059C                     	;# 
  1325  059C                     	;# 
  1326  059D                     	;# 
  1327  059D                     	;# 
  1328  059E                     	;# 
  1329  059F                     	;# 
  1330  060C                     	;# 
  1331  060D                     	;# 
  1332  060E                     	;# 
  1333  060F                     	;# 
  1334  0610                     	;# 
  1335  0611                     	;# 
  1336  0612                     	;# 
  1337  0613                     	;# 
  1338  0614                     	;# 
  1339  070C                     	;# 
  1340  070D                     	;# 
  1341  070E                     	;# 
  1342  070F                     	;# 
  1343  0710                     	;# 
  1344  0711                     	;# 
  1345  0712                     	;# 
  1346  0713                     	;# 
  1347  0716                     	;# 
  1348  0717                     	;# 
  1349  0718                     	;# 
  1350  0719                     	;# 
  1351  071A                     	;# 
  1352  071B                     	;# 
  1353  071C                     	;# 
  1354  071D                     	;# 
  1355  0796                     	;# 
  1356  0797                     	;# 
  1357  0798                     	;# 
  1358  0799                     	;# 
  1359  079A                     	;# 
  1360  079B                     	;# 
  1361  080C                     	;# 
  1362  080D                     	;# 
  1363  080E                     	;# 
  1364  080F                     	;# 
  1365  0810                     	;# 
  1366  0811                     	;# 
  1367  0812                     	;# 
  1368  0813                     	;# 
  1369  0814                     	;# 
  1370  081A                     	;# 
  1371  081A                     	;# 
  1372  081B                     	;# 
  1373  081C                     	;# 
  1374  081C                     	;# 
  1375  081D                     	;# 
  1376  081E                     	;# 
  1377  081F                     	;# 
  1378  088C                     	;# 
  1379  088D                     	;# 
  1380  088E                     	;# 
  1381  088F                     	;# 
  1382  0890                     	;# 
  1383  0891                     	;# 
  1384  0892                     	;# 
  1385  0893                     	;# 
  1386  0895                     	;# 
  1387  0896                     	;# 
  1388  090C                     	;# 
  1389  090E                     	;# 
  1390  090F                     	;# 
  1391  091F                     	;# 
  1392  098F                     	;# 
  1393  098F                     	;# 
  1394  0990                     	;# 
  1395  0991                     	;# 
  1396  0992                     	;# 
  1397  0993                     	;# 
  1398  0994                     	;# 
  1399  0995                     	;# 
  1400  0996                     	;# 
  1401  0997                     	;# 
  1402  1E0F                     	;# 
  1403  1E10                     	;# 
  1404  1E11                     	;# 
  1405  1E12                     	;# 
  1406  1E13                     	;# 
  1407  1E14                     	;# 
  1408  1E15                     	;# 
  1409  1E16                     	;# 
  1410  1E17                     	;# 
  1411  1E18                     	;# 
  1412  1E19                     	;# 
  1413  1E1A                     	;# 
  1414  1E1B                     	;# 
  1415  1E1C                     	;# 
  1416  1E1D                     	;# 
  1417  1E1E                     	;# 
  1418  1E1F                     	;# 
  1419  1E20                     	;# 
  1420  1E21                     	;# 
  1421  1E22                     	;# 
  1422  1E23                     	;# 
  1423  1E24                     	;# 
  1424  1E25                     	;# 
  1425  1E26                     	;# 
  1426  1E27                     	;# 
  1427  1E28                     	;# 
  1428  1E29                     	;# 
  1429  1E2A                     	;# 
  1430  1E2B                     	;# 
  1431  1E2C                     	;# 
  1432  1E2D                     	;# 
  1433  1E2E                     	;# 
  1434  1E2F                     	;# 
  1435  1E30                     	;# 
  1436  1E31                     	;# 
  1437  1E32                     	;# 
  1438  1E33                     	;# 
  1439  1E34                     	;# 
  1440  1E35                     	;# 
  1441  1E36                     	;# 
  1442  1E37                     	;# 
  1443  1E8F                     	;# 
  1444  1E90                     	;# 
  1445  1E91                     	;# 
  1446  1E92                     	;# 
  1447  1E93                     	;# 
  1448  1E9C                     	;# 
  1449  1EA1                     	;# 
  1450  1EA2                     	;# 
  1451  1EB1                     	;# 
  1452  1EBB                     	;# 
  1453  1EBC                     	;# 
  1454  1EBD                     	;# 
  1455  1EBE                     	;# 
  1456  1EC3                     	;# 
  1457  1EC5                     	;# 
  1458  1EC6                     	;# 
  1459  1EC7                     	;# 
  1460  1ECB                     	;# 
  1461  1ECC                     	;# 
  1462  1F10                     	;# 
  1463  1F11                     	;# 
  1464  1F12                     	;# 
  1465  1F13                     	;# 
  1466  1F14                     	;# 
  1467  1F15                     	;# 
  1468  1F20                     	;# 
  1469  1F21                     	;# 
  1470  1F22                     	;# 
  1471  1F23                     	;# 
  1472  1F24                     	;# 
  1473  1F25                     	;# 
  1474  1F38                     	;# 
  1475  1F39                     	;# 
  1476  1F3A                     	;# 
  1477  1F3B                     	;# 
  1478  1F3C                     	;# 
  1479  1F3D                     	;# 
  1480  1F3E                     	;# 
  1481  1F3F                     	;# 
  1482  1F4E                     	;# 
  1483  1F4F                     	;# 
  1484  1F50                     	;# 
  1485  1F51                     	;# 
  1486  1F52                     	;# 
  1487  1F53                     	;# 
  1488  1F54                     	;# 
  1489  1F55                     	;# 
  1490  1FE4                     	;# 
  1491  1FE5                     	;# 
  1492  1FE6                     	;# 
  1493  1FE7                     	;# 
  1494  1FE8                     	;# 
  1495  1FE8                     	;# 
  1496  1FE9                     	;# 
  1497  1FEA                     	;# 
  1498  1FEA                     	;# 
  1499  1FEB                     	;# 
  1500  1FED                     	;# 
  1501  1FEE                     	;# 
  1502  1FEF                     	;# 
  1503                           
  1504                           	psect	stringtext1
  1505  0396                     __pstringtext1:	
  1506  0396                     cw_init@cw_bat_config_info:	
  1507  0396  3414               	retlw	20
  1508  0397  34A6               	retlw	166
  1509  0398  3470               	retlw	112
  1510  0399  346C               	retlw	108
  1511  039A  346C               	retlw	108
  1512  039B  3467               	retlw	103
  1513  039C  3464               	retlw	100
  1514  039D  3462               	retlw	98
  1515  039E  3460               	retlw	96
  1516  039F  345C               	retlw	92
  1517  03A0  3459               	retlw	89
  1518  03A1  344E               	retlw	78
  1519  03A2  3450               	retlw	80
  1520  03A3  3442               	retlw	66
  1521  03A4  342E               	retlw	46
  1522  03A5  3426               	retlw	38
  1523  03A6  3425               	retlw	37
  1524  03A7  3424               	retlw	36
  1525  03A8  3427               	retlw	39
  1526  03A9  342E               	retlw	46
  1527  03AA  3441               	retlw	65
  1528  03AB  345A               	retlw	90
  1529  03AC  346D               	retlw	109
  1530  03AD  344C               	retlw	76
  1531  03AE  3439               	retlw	57
  1532  03AF  34D7               	retlw	215
  1533  03B0  3406               	retlw	6
  1534  03B1  3466               	retlw	102
  1535  03B2  3400               	retlw	0
  1536  03B3  3401               	retlw	1
  1537  03B4  3405               	retlw	5
  1538  03B5  3434               	retlw	52
  1539  03B6  3461               	retlw	97
  1540  03B7  3476               	retlw	118
  1541  03B8  3479               	retlw	121
  1542  03B9  347D               	retlw	125
  1543  03BA  3442               	retlw	66
  1544  03BB  341E               	retlw	30
  1545  03BC  34A4               	retlw	164
  1546  03BD  3400               	retlw	0
  1547  03BE  3427               	retlw	39
  1548  03BF  345A               	retlw	90
  1549  03C0  3452               	retlw	82
  1550  03C1  3487               	retlw	135
  1551  03C2  348F               	retlw	143
  1552  03C3  3491               	retlw	145
  1553  03C4  3494               	retlw	148
  1554  03C5  3452               	retlw	82
  1555  03C6  3482               	retlw	130
  1556  03C7  348C               	retlw	140
  1557  03C8  3492               	retlw	146
  1558  03C9  3496               	retlw	150
  1559  03CA  342B               	retlw	43
  1560  03CB  3459               	retlw	89
  1561  03CC  346E               	retlw	110
  1562  03CD  34CB               	retlw	203
  1563  03CE  342F               	retlw	47
  1564  03CF  347D               	retlw	125
  1565  03D0  3472               	retlw	114
  1566  03D1  34A5               	retlw	165
  1567  03D2  34B5               	retlw	181
  1568  03D3  34C1               	retlw	193
  1569  03D4  3494               	retlw	148
  1570  03D5  3499               	retlw	153
  1571  03D6                     __end_ofcw_init@cw_bat_config_info:	
  1572                           
  1573                           	psect	stringtext2
  1574  0356                     __pstringtext2:	
  1575  0356                     cw_update_config_info@cw_bat_config_info:	
  1576  0356  3414               	retlw	20
  1577  0357  34A6               	retlw	166
  1578  0358  3470               	retlw	112
  1579  0359  346C               	retlw	108
  1580  035A  346C               	retlw	108
  1581  035B  3467               	retlw	103
  1582  035C  3464               	retlw	100
  1583  035D  3462               	retlw	98
  1584  035E  3460               	retlw	96
  1585  035F  345C               	retlw	92
  1586  0360  3459               	retlw	89
  1587  0361  344E               	retlw	78
  1588  0362  3450               	retlw	80
  1589  0363  3442               	retlw	66
  1590  0364  342E               	retlw	46
  1591  0365  3426               	retlw	38
  1592  0366  3425               	retlw	37
  1593  0367  3424               	retlw	36
  1594  0368  3427               	retlw	39
  1595  0369  342E               	retlw	46
  1596  036A  3441               	retlw	65
  1597  036B  345A               	retlw	90
  1598  036C  346D               	retlw	109
  1599  036D  344C               	retlw	76
  1600  036E  3439               	retlw	57
  1601  036F  34D7               	retlw	215
  1602  0370  3406               	retlw	6
  1603  0371  3466               	retlw	102
  1604  0372  3400               	retlw	0
  1605  0373  3401               	retlw	1
  1606  0374  3405               	retlw	5
  1607  0375  3434               	retlw	52
  1608  0376  3461               	retlw	97
  1609  0377  3476               	retlw	118
  1610  0378  3479               	retlw	121
  1611  0379  347D               	retlw	125
  1612  037A  3442               	retlw	66
  1613  037B  341E               	retlw	30
  1614  037C  34A4               	retlw	164
  1615  037D  3400               	retlw	0
  1616  037E  3427               	retlw	39
  1617  037F  345A               	retlw	90
  1618  0380  3452               	retlw	82
  1619  0381  3487               	retlw	135
  1620  0382  348F               	retlw	143
  1621  0383  3491               	retlw	145
  1622  0384  3494               	retlw	148
  1623  0385  3452               	retlw	82
  1624  0386  3482               	retlw	130
  1625  0387  348C               	retlw	140
  1626  0388  3492               	retlw	146
  1627  0389  3496               	retlw	150
  1628  038A  342B               	retlw	43
  1629  038B  3459               	retlw	89
  1630  038C  346E               	retlw	110
  1631  038D  34CB               	retlw	203
  1632  038E  342F               	retlw	47
  1633  038F  347D               	retlw	125
  1634  0390  3472               	retlw	114
  1635  0391  34A5               	retlw	165
  1636  0392  34B5               	retlw	181
  1637  0393  34C1               	retlw	193
  1638  0394  3494               	retlw	148
  1639  0395  3499               	retlw	153
  1640  0396                     __end_ofcw_update_config_info@cw_bat_config_info:	
  1641  000E                     _PORTCbits	set	14
  1642  0014                     _TRISCbits	set	20
  1643  0018                     _LATAbits	set	24
  1644  001A                     _LATCbits	set	26
  1645  0014                     _TRISC	set	20
  1646  0012                     _TRISA	set	18
  1647  001A                     _LATC	set	26
  1648  0018                     _LATA	set	24
  1649  005F                     _GIE	set	95
  1650  011A                     _TX1REG	set	282
  1651  0119                     _RC1REG	set	281
  1652  011D                     _RC1STAbits	set	285
  1653  011C                     _SP1BRGH	set	284
  1654  011B                     _SP1BRGL	set	283
  1655  011E                     _TX1STA	set	286
  1656  011D                     _RC1STA	set	285
  1657  011F                     _BAUD1CON	set	287
  1658  070F                     _PIR3bits	set	1807
  1659  0892                     _OSCTUNE	set	2194
  1660  0890                     _OSCSTAT	set	2192
  1661  0893                     _OSCFRQ	set	2195
  1662  0891                     _OSCEN	set	2193
  1663  088F                     _OSCCON3	set	2191
  1664  088D                     _OSCCON1	set	2189
  1665  4480                     _PLLR	set	17536
  1666  1ECB                     _RX1DTPPSbits	set	7883
  1667  1E8F                     _PPSLOCKbits	set	7823
  1668  1E8F                     _PPSLOCK	set	7823
  1669  1F24                     _RC4PPS	set	7972
  1670  1F50                     _ODCONC	set	8016
  1671  1F3A                     _ODCONA	set	7994
  1672  1F4F                     _WPUC	set	8015
  1673  1F39                     _WPUA	set	7993
  1674  1F38                     _ANSELA	set	7992
  1675  1F4E                     _ANSELC	set	8014
  1676                           
  1677                           ; #config settings
  1678  0000                     
  1679                           	psect	cinit
  1680  07F2                     start_initialization:	
  1681  07F2                     __initialization:	
  1682                           
  1683                           ; Clear objects allocated to BANK0
  1684  07F2  0140               	movlb	0	; select bank0
  1685  07F3  01C7               	clrf	__pbssBANK0& (0+127)
  1686  07F4  01C8               	clrf	(__pbssBANK0+1)& (0+127)
  1687  07F5  01C9               	clrf	(__pbssBANK0+2)& (0+127)
  1688  07F6  01CA               	clrf	(__pbssBANK0+3)& (0+127)
  1689  07F7  01CB               	clrf	(__pbssBANK0+4)& (0+127)
  1690  07F8  01CC               	clrf	(__pbssBANK0+5)& (0+127)
  1691  07F9  01CD               	clrf	(__pbssBANK0+6)& (0+127)
  1692  07FA  01CE               	clrf	(__pbssBANK0+7)& (0+127)
  1693  07FB  01CF               	clrf	(__pbssBANK0+8)& (0+127)
  1694  07FC  01D0               	clrf	(__pbssBANK0+9)& (0+127)
  1695  07FD  01D1               	clrf	(__pbssBANK0+10)& (0+127)
  1696  07FE                     end_of_initialization:	
  1697                           ;End of C runtime variable initialization code
  1698                           
  1699  07FE                     __end_of__initialization:	
  1700  07FE  0140               	movlb	0
  1701  07FF  2D17               	ljmp	_main	;jump to C main() function
  1702                           
  1703                           	psect	bssBANK0
  1704  0047                     __pbssBANK0:	
  1705  0047                     _cw_bat:	
  1706  0047                     	ds	6
  1707  004D                     cw_get_vol@F80:	
  1708  004D                     	ds	2
  1709  004F                     _reset_loop:	
  1710  004F                     	ds	1
  1711  0050                     _CHARGE:	
  1712  0050                     	ds	1
  1713  0051                     _count:	
  1714  0051                     	ds	1
  1715                           
  1716                           	psect	cstackCOMMON
  1717  0070                     __pcstackCOMMON:	
  1718  0070                     ?_PIN_MANAGER_Initialize:	
  1719  0070                     ??_PIN_MANAGER_Initialize:	
  1720                           ; 1 bytes @ 0x0
  1721                           
  1722  0070                     ?_OSCILLATOR_Initialize:	
  1723                           ; 1 bytes @ 0x0
  1724                           
  1725  0070                     ??_OSCILLATOR_Initialize:	
  1726                           ; 1 bytes @ 0x0
  1727                           
  1728  0070                     ?_cw_bat_init:	
  1729                           ; 1 bytes @ 0x0
  1730                           
  1731  0070                     ?_cw_bat_work:	
  1732                           ; 1 bytes @ 0x0
  1733                           
  1734  0070                     ?_CW_Delay10ms:	
  1735                           ; 1 bytes @ 0x0
  1736                           
  1737  0070                     ?_EUSART1_Initialize:	
  1738                           ; 1 bytes @ 0x0
  1739                           
  1740  0070                     ??_EUSART1_Initialize:	
  1741                           ; 1 bytes @ 0x0
  1742                           
  1743  0070                     ?_EUSART1_Write:	
  1744                           ; 1 bytes @ 0x0
  1745                           
  1746  0070                     ??_EUSART1_Write:	
  1747                           ; 1 bytes @ 0x0
  1748                           
  1749  0070                     ?_SYSTEM_Initialize:	
  1750                           ; 1 bytes @ 0x0
  1751                           
  1752  0070                     ?_main:	
  1753                           ; 1 bytes @ 0x0
  1754                           
  1755  0070                     ?_CW_Delay100us:	
  1756                           ; 1 bytes @ 0x0
  1757                           
  1758  0070                     ??_CW_Delay100us:	
  1759                           ; 1 bytes @ 0x0
  1760                           
  1761  0070                     ?_cw_update_config_info:	
  1762                           ; 1 bytes @ 0x0
  1763                           
  1764  0070                     ?_cw_init:	
  1765                           ; 1 bytes @ 0x0
  1766                           
  1767  0070                     ?_update_capacity:	
  1768                           ; 1 bytes @ 0x0
  1769                           
  1770  0070                     ?_update_vol:	
  1771                           ; 1 bytes @ 0x0
  1772                           
  1773  0070                     ?_update_usb_online:	
  1774                           ; 1 bytes @ 0x0
  1775                           
  1776  0070                     ??_update_usb_online:	
  1777                           ; 1 bytes @ 0x0
  1778                           
  1779  0070                     ?_Delay10us:	
  1780                           ; 1 bytes @ 0x0
  1781                           
  1782  0070                     ??_Delay10us:	
  1783                           ; 1 bytes @ 0x0
  1784                           
  1785  0070                     ?_start:	
  1786                           ; 1 bytes @ 0x0
  1787                           
  1788  0070                     ?_stop:	
  1789                           ; 1 bytes @ 0x0
  1790                           
  1791  0070                     ?_s_ack:	
  1792                           ; 1 bytes @ 0x0
  1793                           
  1794  0070                     ?_sn_ack:	
  1795                           ; 1 bytes @ 0x0
  1796                           
  1797  0070                     ?_write_byte:	
  1798                           ; 1 bytes @ 0x0
  1799                           
  1800  0070                     ?_read_byte:	
  1801                           ; 1 bytes @ 0x0
  1802                           
  1803  0070                     ?___lmul:	
  1804                           ; 1 bytes @ 0x0
  1805                           
  1806  0070                     EUSART1_Write@txData:	
  1807                           ; 4 bytes @ 0x0
  1808                           
  1809  0070                     PIN_MANAGER_Initialize@state:	
  1810                           ; 1 bytes @ 0x0
  1811                           
  1812  0070                     CW_Delay10ms@c:	
  1813                           ; 1 bytes @ 0x0
  1814                           
  1815  0070                     ___lmul@multiplier:	
  1816                           ; 2 bytes @ 0x0
  1817                           
  1818                           
  1819                           ; 4 bytes @ 0x0
  1820  0070                     	ds	1
  1821  0071                     ??_SYSTEM_Initialize:	
  1822  0071                     CW_Delay100us@a:	
  1823                           ; 1 bytes @ 0x1
  1824                           
  1825  0071                     Delay10us@a:	
  1826                           ; 1 bytes @ 0x1
  1827                           
  1828                           
  1829                           ; 1 bytes @ 0x1
  1830  0071                     	ds	1
  1831  0072                     ??_CW_Delay10ms:	
  1832  0072                     CW_Delay100us@b:	
  1833                           ; 1 bytes @ 0x2
  1834                           
  1835  0072                     Delay10us@b:	
  1836                           ; 1 bytes @ 0x2
  1837                           
  1838                           
  1839                           ; 1 bytes @ 0x2
  1840  0072                     	ds	1
  1841  0073                     CW_Delay10ms@a:	
  1842  0073                     CW_Delay100us@i:	
  1843                           ; 1 bytes @ 0x3
  1844                           
  1845  0073                     Delay10us@i:	
  1846                           ; 1 bytes @ 0x3
  1847                           
  1848                           
  1849                           ; 1 bytes @ 0x3
  1850  0073                     	ds	1
  1851  0074                     ??_start:	
  1852  0074                     ??_stop:	
  1853                           ; 1 bytes @ 0x4
  1854                           
  1855  0074                     ??_s_ack:	
  1856                           ; 1 bytes @ 0x4
  1857                           
  1858  0074                     ??_sn_ack:	
  1859                           ; 1 bytes @ 0x4
  1860                           
  1861  0074                     ??_write_byte:	
  1862                           ; 1 bytes @ 0x4
  1863                           
  1864  0074                     ??_read_byte:	
  1865                           ; 1 bytes @ 0x4
  1866                           
  1867  0074                     ?_r_ack:	
  1868                           ; 1 bytes @ 0x4
  1869                           
  1870  0074                     CW_Delay10ms@b:	
  1871                           ; 2 bytes @ 0x4
  1872                           
  1873  0074                     ___lmul@multiplicand:	
  1874                           ; 1 bytes @ 0x4
  1875                           
  1876                           
  1877                           ; 4 bytes @ 0x4
  1878  0074                     	ds	1
  1879  0075                     write_byte@w_data:	
  1880  0075                     read_byte@i:	
  1881                           ; 1 bytes @ 0x5
  1882                           
  1883                           
  1884                           ; 1 bytes @ 0x5
  1885  0075                     	ds	1
  1886  0076                     ??_r_ack:	
  1887  0076                     write_byte@i:	
  1888                           ; 1 bytes @ 0x6
  1889                           
  1890  0076                     read_byte@r_data:	
  1891                           ; 1 bytes @ 0x6
  1892                           
  1893                           
  1894                           ; 1 bytes @ 0x6
  1895  0076                     	ds	2
  1896  0078                     ??___lmul:	
  1897  0078                     r_ack@ack:	
  1898                           ; 1 bytes @ 0x8
  1899                           
  1900  0078                     ___lmul@product:	
  1901                           ; 2 bytes @ 0x8
  1902                           
  1903                           
  1904                           ; 4 bytes @ 0x8
  1905  0078                     	ds	2
  1906  007A                     ?_wait_r_ack:	
  1907                           
  1908                           ; 2 bytes @ 0xA
  1909  007A                     	ds	2
  1910  007C                     ??_cw_read:	
  1911  007C                     ??_cw_write:	
  1912                           ; 1 bytes @ 0xC
  1913                           
  1914  007C                     ??_cw_read_word:	
  1915                           ; 1 bytes @ 0xC
  1916                           
  1917  007C                     ??_wait_r_ack:	
  1918                           ; 1 bytes @ 0xC
  1919                           
  1920  007C                     ??___lldiv:	
  1921                           ; 1 bytes @ 0xC
  1922                           
  1923  007C                     cw_write@point_reg:	
  1924                           ; 1 bytes @ 0xC
  1925                           
  1926                           
  1927                           ; 1 bytes @ 0xC
  1928  007C                     	ds	1
  1929  007D                     cw_read@point_reg:	
  1930                           
  1931                           ; 1 bytes @ 0xD
  1932  007D                     	ds	1
  1933  007E                     ??_cw_bat_work:	
  1934  007E                     ??_update_vol:	
  1935                           ; 1 bytes @ 0xE
  1936                           
  1937                           
  1938                           	psect	cstackBANK0
  1939  0020                     __pcstackBANK0:	
  1940                           ; 1 bytes @ 0xE
  1941                           
  1942  0020                     ?___lldiv:	
  1943  0020                     wait_r_ack@ack:	
  1944                           ; 4 bytes @ 0x0
  1945                           
  1946  0020                     ___lldiv@divisor:	
  1947                           ; 2 bytes @ 0x0
  1948                           
  1949                           
  1950                           ; 4 bytes @ 0x0
  1951  0020                     	ds	2
  1952  0022                     wait_r_ack@i:	
  1953                           
  1954                           ; 2 bytes @ 0x2
  1955  0022                     	ds	2
  1956  0024                     ?_cw_read:	
  1957  0024                     ?_cw_write:	
  1958                           ; 2 bytes @ 0x4
  1959                           
  1960  0024                     ?_cw_read_word:	
  1961                           ; 2 bytes @ 0x4
  1962                           
  1963  0024                     cw_read@r_pdata:	
  1964                           ; 2 bytes @ 0x4
  1965                           
  1966  0024                     cw_read_word@r_pdata:	
  1967                           ; 1 bytes @ 0x4
  1968                           
  1969  0024                     cw_write@w_pdata:	
  1970                           ; 1 bytes @ 0x4
  1971                           
  1972  0024                     ___lldiv@dividend:	
  1973                           ; 1 bytes @ 0x4
  1974                           
  1975                           
  1976                           ; 4 bytes @ 0x4
  1977  0024                     	ds	1
  1978  0025                     cw_read_word@length:	
  1979                           
  1980                           ; 2 bytes @ 0x5
  1981  0025                     	ds	2
  1982  0027                     ??_cw_update_config_info:	
  1983  0027                     cw_read_word@point_reg:	
  1984                           ; 1 bytes @ 0x7
  1985                           
  1986                           
  1987                           ; 1 bytes @ 0x7
  1988  0027                     	ds	1
  1989  0028                     cw_update_config_info@reset_val:	
  1990  0028                     cw_read_word@count:	
  1991                           ; 1 bytes @ 0x8
  1992                           
  1993  0028                     ___lldiv@quotient:	
  1994                           ; 1 bytes @ 0x8
  1995                           
  1996                           
  1997                           ; 4 bytes @ 0x8
  1998  0028                     	ds	1
  1999  0029                     cw_update_config_info@ret:	
  2000                           
  2001                           ; 2 bytes @ 0x9
  2002  0029                     	ds	2
  2003  002B                     cw_update_config_info@i:	
  2004                           
  2005                           ; 1 bytes @ 0xB
  2006  002B                     	ds	1
  2007  002C                     cw_update_config_info@reg_val:	
  2008  002C                     ___lldiv@counter:	
  2009                           ; 1 bytes @ 0xC
  2010                           
  2011                           
  2012                           ; 1 bytes @ 0xC
  2013  002C                     	ds	1
  2014  002D                     ??_cw_init:	
  2015  002D                     ?_cw_get_vol:	
  2016                           ; 1 bytes @ 0xD
  2017                           
  2018                           
  2019                           ; 2 bytes @ 0xD
  2020  002D                     	ds	2
  2021  002F                     ??_cw_get_vol:	
  2022  002F                     cw_init@i:	
  2023                           ; 1 bytes @ 0xF
  2024                           
  2025                           
  2026                           ; 1 bytes @ 0xF
  2027  002F                     	ds	1
  2028  0030                     cw_init@ret:	
  2029                           
  2030                           ; 2 bytes @ 0x10
  2031  0030                     	ds	2
  2032  0032                     cw_init@reg_val:	
  2033                           
  2034                           ; 1 bytes @ 0x12
  2035  0032                     	ds	1
  2036  0033                     ??_cw_bat_init:	
  2037  0033                     ?_cw_por:	
  2038                           ; 1 bytes @ 0x13
  2039                           
  2040                           
  2041                           ; 2 bytes @ 0x13
  2042  0033                     	ds	1
  2043  0034                     cw_bat_init@loop:	
  2044  0034                     cw_get_vol@ret:	
  2045                           ; 1 bytes @ 0x14
  2046                           
  2047                           
  2048                           ; 2 bytes @ 0x14
  2049  0034                     	ds	1
  2050  0035                     ??_cw_por:	
  2051  0035                     cw_bat_init@ret:	
  2052                           ; 1 bytes @ 0x15
  2053                           
  2054                           
  2055                           ; 1 bytes @ 0x15
  2056  0035                     	ds	1
  2057  0036                     cw_get_vol@reg_val:	
  2058                           
  2059                           ; 2 bytes @ 0x16
  2060  0036                     	ds	1
  2061  0037                     cw_por@reset_val:	
  2062                           
  2063                           ; 1 bytes @ 0x17
  2064  0037                     	ds	1
  2065  0038                     cw_por@ret:	
  2066  0038                     cw_get_vol@ad_value_min:	
  2067                           ; 2 bytes @ 0x18
  2068                           
  2069                           
  2070                           ; 2 bytes @ 0x18
  2071  0038                     	ds	2
  2072  003A                     ?_cw_get_capacity:	
  2073  003A                     cw_get_vol@ad_value_max:	
  2074                           ; 2 bytes @ 0x1A
  2075                           
  2076                           
  2077                           ; 2 bytes @ 0x1A
  2078  003A                     	ds	2
  2079  003C                     ??_cw_get_capacity:	
  2080  003C                     cw_get_vol@ad_value:	
  2081                           ; 1 bytes @ 0x1C
  2082                           
  2083                           
  2084                           ; 4 bytes @ 0x1C
  2085  003C                     	ds	2
  2086  003E                     cw_get_capacity@cw_capacity:	
  2087                           
  2088                           ; 1 bytes @ 0x1E
  2089  003E                     	ds	1
  2090  003F                     cw_get_capacity@ret:	
  2091                           
  2092                           ; 2 bytes @ 0x1F
  2093  003F                     	ds	1
  2094  0040                     cw_get_vol@get_ad_times:	
  2095                           
  2096                           ; 1 bytes @ 0x20
  2097  0040                     	ds	1
  2098  0041                     cw_get_capacity@reg_val:	
  2099  0041                     cw_get_vol@ad_buff:	
  2100                           ; 1 bytes @ 0x21
  2101                           
  2102                           
  2103                           ; 2 bytes @ 0x21
  2104  0041                     	ds	1
  2105  0042                     ??_update_capacity:	
  2106                           
  2107                           ; 1 bytes @ 0x22
  2108  0042                     	ds	1
  2109  0043                     update_capacity@cw_capacity:	
  2110  0043                     update_vol@cw_voltage:	
  2111                           ; 2 bytes @ 0x23
  2112                           
  2113                           
  2114                           ; 2 bytes @ 0x23
  2115  0043                     	ds	2
  2116  0045                     ??_main:	
  2117                           
  2118                           ; 1 bytes @ 0x25
  2119  0045                     	ds	1
  2120  0046                     main@ret:	
  2121                           
  2122                           ; 1 bytes @ 0x26
  2123  0046                     	ds	1
  2124                           
  2125                           	psect	maintext
  2126  0517                     __pmaintext:	
  2127 ;;
  2128 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2129 ;;
  2130 ;; *************** function _main *****************
  2131 ;; Defined at:
  2132 ;;		line 54 in file "main.c"
  2133 ;; Parameters:    Size  Location     Type
  2134 ;;		None
  2135 ;; Auto vars:     Size  Location     Type
  2136 ;;  ret             1   38[BANK0 ] unsigned char 
  2137 ;;  send_char       1    0        unsigned char 
  2138 ;; Return value:  Size  Location     Type
  2139 ;;                  1    wreg      void 
  2140 ;; Registers used:
  2141 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2142 ;; Tracked objects:
  2143 ;;		On entry : B3F/0
  2144 ;;		On exit  : 0/0
  2145 ;;		Unchanged: 0/0
  2146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2147 ;;      Params:         0       0       0       0
  2148 ;;      Locals:         0       1       0       0
  2149 ;;      Temps:          0       1       0       0
  2150 ;;      Totals:         0       2       0       0
  2151 ;;Total ram usage:        2 bytes
  2152 ;; Hardware stack levels required when called:   10
  2153 ;; This function calls:
  2154 ;;		_CW_Delay10ms
  2155 ;;		_EUSART1_Write
  2156 ;;		_SYSTEM_Initialize
  2157 ;;		_cw_bat_init
  2158 ;;		_cw_bat_work
  2159 ;; This function is called by:
  2160 ;;		Startup code after reset
  2161 ;; This function uses a non-reentrant model
  2162 ;;
  2163                           
  2164                           
  2165                           ;psect for function _main
  2166  0517                     _main:	
  2167                           
  2168                           ;main.c: 57: unsigned char ret = 0;
  2169                           
  2170                           ;incstack = 0
  2171                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2172  0517  0140               	movlb	0	; select bank0
  2173  0518  01C6               	clrf	main@ret
  2174                           
  2175                           ;main.c: 58: uint8_t send_char;
  2176                           ;main.c: 59: SYSTEM_Initialize();
  2177  0519  20F2               	fcall	_SYSTEM_Initialize
  2178                           
  2179                           ;main.c: 60: do { LATCbits.LATC2 = 1; } while(0);
  2180  051A  0140               	movlb	0	; select bank0
  2181  051B  151A               	bsf	26,2	;volatile
  2182                           
  2183                           ;main.c: 61: do { LATAbits.LATA2 = 1; } while(0);
  2184  051C  1518               	bsf	24,2	;volatile
  2185                           
  2186                           ;main.c: 62: do { LATAbits.LATA5 = 1; } while(0);
  2187  051D  1698               	bsf	24,5	;volatile
  2188                           
  2189                           ;main.c: 63: do { LATAbits.LATA4 = 1; } while(0);
  2190  051E  1618               	bsf	24,4	;volatile
  2191                           
  2192                           ;main.c: 64: ret = cw_bat_init();
  2193  051F  217E               	fcall	_cw_bat_init
  2194  0520  0140               	movlb	0	; select bank0
  2195  0521  00C5               	movwf	??_main
  2196  0522  0845               	movf	??_main,w
  2197  0523  00C6               	movwf	main@ret
  2198                           
  2199                           ;main.c: 80: cw_bat_work();
  2200  0524  20F6               	fcall	_cw_bat_work
  2201  0525                     l2439:	
  2202                           ;main.c: 82: while (1)
  2203                           
  2204                           
  2205                           ;main.c: 83: {
  2206                           ;main.c: 85: if(cw_bat.capacity >= 80)
  2207  0525  3000               	movlw	0
  2208  0526  0140               	movlb	0	; select bank0
  2209  0527  0249               	subwf	_cw_bat+2,w
  2210  0528  3050               	movlw	80
  2211  0529  1903               	skipnz
  2212  052A  0248               	subwf	_cw_bat+1,w
  2213  052B  1C03               	skipc
  2214  052C  2D2F               	goto	l2441
  2215                           
  2216                           ;main.c: 86: {
  2217                           ;main.c: 87: do { LATCbits.LATC2 = 0; } while(0);
  2218  052D  111A               	bcf	26,2	;volatile
  2219  052E  2D37               	goto	L1
  2220  052F                     l2441:	
  2221                           ;main.c: 91: }
  2222                           
  2223                           ;main.c: 90: do { LATAbits.LATA4 = 0; } while(0);
  2224                           
  2225                           ;main.c: 89: do { LATAbits.LATA5 = 0; } while(0);
  2226                           
  2227                           ;main.c: 88: do { LATAbits.LATA2 = 0; } while(0);
  2228                           
  2229                           
  2230                           ;main.c: 92: else if(cw_bat.capacity >= 60)
  2231  052F  3000               	movlw	0
  2232  0530  0249               	subwf	_cw_bat+2,w
  2233  0531  303C               	movlw	60
  2234  0532  1903               	skipnz
  2235  0533  0248               	subwf	_cw_bat+1,w
  2236  0534  1C03               	skipc
  2237  0535  2D39               	goto	l2443
  2238                           
  2239                           ;main.c: 93: {
  2240                           ;main.c: 94: do { LATCbits.LATC2 = 1; } while(0);
  2241  0536  151A               	bsf	26,2	;volatile
  2242  0537                     L1:	
  2243                           
  2244                           ;main.c: 95: do { LATAbits.LATA2 = 0; } while(0);
  2245  0537  1118               	bcf	24,2	;volatile
  2246  0538  2D42               	goto	L2
  2247  0539                     l2443:	
  2248                           ;main.c: 98: }
  2249                           
  2250                           ;main.c: 97: do { LATAbits.LATA4 = 0; } while(0);
  2251                           
  2252                           ;main.c: 96: do { LATAbits.LATA5 = 0; } while(0);
  2253                           
  2254                           
  2255                           ;main.c: 99: else if(cw_bat.capacity >= 40)
  2256  0539  3000               	movlw	0
  2257  053A  0249               	subwf	_cw_bat+2,w
  2258  053B  3028               	movlw	40
  2259  053C  1903               	skipnz
  2260  053D  0248               	subwf	_cw_bat+1,w
  2261  053E  1C03               	skipc
  2262  053F  2D44               	goto	l2445
  2263                           
  2264                           ;main.c: 100: {
  2265                           ;main.c: 101: do { LATCbits.LATC2 = 1; } while(0);
  2266  0540  151A               	bsf	26,2	;volatile
  2267                           
  2268                           ;main.c: 102: do { LATAbits.LATA2 = 1; } while(0);
  2269  0541  1518               	bsf	24,2	;volatile
  2270  0542                     L2:	
  2271                           
  2272                           ;main.c: 103: do { LATAbits.LATA5 = 0; } while(0);
  2273  0542  1298               	bcf	24,5	;volatile
  2274                           
  2275                           ;main.c: 104: do { LATAbits.LATA4 = 0; } while(0);
  2276  0543  2D4E               	goto	l168
  2277  0544                     l2445:	
  2278                           ;main.c: 105: }
  2279                           
  2280                           
  2281                           ;main.c: 106: else if(cw_bat.capacity >= 20)
  2282  0544  3000               	movlw	0
  2283  0545  0249               	subwf	_cw_bat+2,w
  2284  0546  3014               	movlw	20
  2285  0547  1903               	skipnz
  2286  0548  0248               	subwf	_cw_bat+1,w
  2287  0549  1C03               	skipc
  2288  054A  2D50               	goto	l171
  2289                           
  2290                           ;main.c: 107: {
  2291                           ;main.c: 108: do { LATCbits.LATC2 = 1; } while(0);
  2292  054B  151A               	bsf	26,2	;volatile
  2293                           
  2294                           ;main.c: 109: do { LATAbits.LATA2 = 1; } while(0);
  2295  054C  1518               	bsf	24,2	;volatile
  2296                           
  2297                           ;main.c: 110: do { LATAbits.LATA5 = 1; } while(0);
  2298  054D  1698               	bsf	24,5	;volatile
  2299  054E                     l168:	
  2300                           ;main.c: 111: do { LATAbits.LATA4 = 0; } while(0);
  2301                           
  2302  054E  1218               	bcf	24,4	;volatile
  2303                           
  2304                           ;main.c: 112: }
  2305  054F  2D54               	goto	l2447
  2306  0550                     l171:	
  2307                           ;main.c: 113: else
  2308                           ;main.c: 114: {
  2309                           ;main.c: 115: do { LATCbits.LATC2 = 1; } while(0);
  2310                           
  2311  0550  151A               	bsf	26,2	;volatile
  2312                           
  2313                           ;main.c: 116: do { LATAbits.LATA2 = 1; } while(0);
  2314  0551  1518               	bsf	24,2	;volatile
  2315                           
  2316                           ;main.c: 117: do { LATAbits.LATA5 = 1; } while(0);
  2317  0552  1698               	bsf	24,5	;volatile
  2318                           
  2319                           ;main.c: 118: do { LATAbits.LATA4 = 1; } while(0);
  2320  0553  1618               	bsf	24,4	;volatile
  2321  0554                     l2447:	
  2322                           
  2323                           ;main.c: 119: }
  2324                           ;main.c: 121: if(count < 10)
  2325  0554  300A               	movlw	10
  2326  0555  0251               	subwf	_count,w
  2327  0556  1803               	skipnc
  2328  0557  2D63               	goto	l2453
  2329                           
  2330                           ;main.c: 122: {
  2331                           ;main.c: 123: CW_Delay10ms(333);
  2332  0558  304D               	movlw	77
  2333  0559  00F0               	movwf	CW_Delay10ms@c
  2334  055A  3001               	movlw	1
  2335  055B  00F1               	movwf	CW_Delay10ms@c+1
  2336  055C  21F8               	fcall	_CW_Delay10ms
  2337                           
  2338                           ;main.c: 124: count ++;
  2339  055D  3001               	movlw	1
  2340  055E  0140               	movlb	0	; select bank0
  2341  055F  00C5               	movwf	??_main
  2342  0560  0845               	movf	??_main,w
  2343  0561  07D1               	addwf	_count,f
  2344                           
  2345                           ;main.c: 125: }
  2346  0562  2D77               	goto	l2455
  2347  0563                     l2453:	
  2348                           
  2349                           ;main.c: 126: else
  2350                           ;main.c: 127: {
  2351                           ;main.c: 128: CW_Delay10ms(1000);
  2352  0563  30E8               	movlw	232
  2353  0564  00F0               	movwf	CW_Delay10ms@c
  2354  0565  3003               	movlw	3
  2355  0566  00F1               	movwf	CW_Delay10ms@c+1
  2356  0567  21F8               	fcall	_CW_Delay10ms
  2357                           
  2358                           ;main.c: 129: CW_Delay10ms(1000);
  2359  0568  30E8               	movlw	232
  2360  0569  00F0               	movwf	CW_Delay10ms@c
  2361  056A  3003               	movlw	3
  2362  056B  00F1               	movwf	CW_Delay10ms@c+1
  2363  056C  21F8               	fcall	_CW_Delay10ms
  2364                           
  2365                           ;main.c: 130: CW_Delay10ms(1000);
  2366  056D  30E8               	movlw	232
  2367  056E  00F0               	movwf	CW_Delay10ms@c
  2368  056F  3003               	movlw	3
  2369  0570  00F1               	movwf	CW_Delay10ms@c+1
  2370  0571  21F8               	fcall	_CW_Delay10ms
  2371                           
  2372                           ;main.c: 131: CW_Delay10ms(1000);
  2373  0572  30E8               	movlw	232
  2374  0573  00F0               	movwf	CW_Delay10ms@c
  2375  0574  3003               	movlw	3
  2376  0575  00F1               	movwf	CW_Delay10ms@c+1
  2377  0576  21F8               	fcall	_CW_Delay10ms
  2378  0577                     l2455:	
  2379                           
  2380                           ;main.c: 132: }
  2381                           ;main.c: 134: cw_bat_work();
  2382  0577  20F6               	fcall	_cw_bat_work
  2383                           
  2384                           ;main.c: 136: EUSART1_Write('S');
  2385  0578  3053               	movlw	83
  2386  0579  20FA               	fcall	_EUSART1_Write
  2387                           
  2388                           ;main.c: 137: EUSART1_Write(cw_bat.voltage);
  2389  057A  0140               	movlb	0	; select bank0
  2390  057B  084A               	movf	_cw_bat+3,w
  2391  057C  20FA               	fcall	_EUSART1_Write
  2392                           
  2393                           ;main.c: 138: EUSART1_Write(cw_bat.capacity);
  2394  057D  0140               	movlb	0	; select bank0
  2395  057E  0848               	movf	_cw_bat+1,w
  2396  057F  20FA               	fcall	_EUSART1_Write
  2397                           
  2398                           ;main.c: 139: EUSART1_Write('E');
  2399  0580  3045               	movlw	69
  2400  0581  20FA               	fcall	_EUSART1_Write
  2401  0582  2D25               	goto	l2439
  2402  0583                     __end_of_main:	
  2403                           
  2404                           	psect	text1
  2405  00F6                     __ptext1:	
  2406 ;; *************** function _cw_bat_work *****************
  2407 ;; Defined at:
  2408 ;;		line 555 in file "CW201x.c"
  2409 ;; Parameters:    Size  Location     Type
  2410 ;;		None
  2411 ;; Auto vars:     Size  Location     Type
  2412 ;;		None
  2413 ;; Return value:  Size  Location     Type
  2414 ;;                  1    wreg      void 
  2415 ;; Registers used:
  2416 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2417 ;; Tracked objects:
  2418 ;;		On entry : 0/0
  2419 ;;		On exit  : 0/0
  2420 ;;		Unchanged: 0/0
  2421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2422 ;;      Params:         0       0       0       0
  2423 ;;      Locals:         0       0       0       0
  2424 ;;      Temps:          0       0       0       0
  2425 ;;      Totals:         0       0       0       0
  2426 ;;Total ram usage:        0 bytes
  2427 ;; Hardware stack levels used:    1
  2428 ;; Hardware stack levels required when called:    9
  2429 ;; This function calls:
  2430 ;;		_update_capacity
  2431 ;;		_update_usb_online
  2432 ;;		_update_vol
  2433 ;; This function is called by:
  2434 ;;		_main
  2435 ;; This function uses a non-reentrant model
  2436 ;;
  2437                           
  2438                           
  2439                           ;psect for function _cw_bat_work
  2440  00F6                     _cw_bat_work:	
  2441                           
  2442                           ;CW201x.c: 557: update_usb_online();
  2443                           
  2444                           ;incstack = 0
  2445                           ; Regs used in _cw_bat_work: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2446  00F6  2102               	fcall	_update_usb_online
  2447                           
  2448                           ;CW201x.c: 558: update_capacity();
  2449  00F7  2219               	fcall	_update_capacity
  2450                           
  2451                           ;CW201x.c: 559: update_vol();
  2452  00F8  2167               	fcall	_update_vol
  2453  00F9  0008               	return
  2454  00FA                     __end_of_cw_bat_work:	
  2455                           
  2456                           	psect	text2
  2457  0167                     __ptext2:	
  2458 ;; *************** function _update_vol *****************
  2459 ;; Defined at:
  2460 ;;		line 508 in file "CW201x.c"
  2461 ;; Parameters:    Size  Location     Type
  2462 ;;		None
  2463 ;; Auto vars:     Size  Location     Type
  2464 ;;  cw_voltage      2   35[BANK0 ] unsigned int 
  2465 ;; Return value:  Size  Location     Type
  2466 ;;                  1    wreg      void 
  2467 ;; Registers used:
  2468 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2469 ;; Tracked objects:
  2470 ;;		On entry : 0/0
  2471 ;;		On exit  : 0/0
  2472 ;;		Unchanged: 0/0
  2473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2474 ;;      Params:         0       0       0       0
  2475 ;;      Locals:         0       2       0       0
  2476 ;;      Temps:          0       0       0       0
  2477 ;;      Totals:         0       2       0       0
  2478 ;;Total ram usage:        2 bytes
  2479 ;; Hardware stack levels used:    1
  2480 ;; Hardware stack levels required when called:    5
  2481 ;; This function calls:
  2482 ;;		_cw_get_vol
  2483 ;; This function is called by:
  2484 ;;		_cw_bat_work
  2485 ;; This function uses a non-reentrant model
  2486 ;;
  2487                           
  2488                           
  2489                           ;psect for function _update_vol
  2490  0167                     _update_vol:	
  2491                           
  2492                           ;CW201x.c: 510: unsigned int cw_voltage;
  2493                           ;CW201x.c: 511: cw_voltage = cw_get_vol();
  2494                           
  2495                           ;incstack = 0
  2496                           ; Regs used in _update_vol: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2497  0167  2648               	fcall	_cw_get_vol
  2498  0168  0140               	movlb	0	; select bank0
  2499  0169  082E               	movf	?_cw_get_vol+1,w
  2500  016A  00C4               	movwf	update_vol@cw_voltage+1
  2501  016B  082D               	movf	?_cw_get_vol,w
  2502  016C  00C3               	movwf	update_vol@cw_voltage
  2503                           
  2504                           ;CW201x.c: 512: if(cw_voltage == 1){
  2505  016D  0343               	decf	update_vol@cw_voltage,w
  2506  016E  0444               	iorwf	update_vol@cw_voltage+1,w
  2507  016F  1903               	btfsc	3,2
  2508  0170  0008               	return
  2509                           
  2510                           ;CW201x.c: 515: }else if(cw_bat.voltage != cw_voltage)
  2511  0171  0844               	movf	update_vol@cw_voltage+1,w
  2512  0172  064B               	xorwf	_cw_bat+4,w
  2513  0173  1D03               	skipz
  2514  0174  2977               	goto	u2285
  2515  0175  0843               	movf	update_vol@cw_voltage,w
  2516  0176  064A               	xorwf	_cw_bat+3,w
  2517  0177                     u2285:	
  2518  0177  1903               	skipnz
  2519  0178  0008               	return
  2520                           
  2521                           ;CW201x.c: 516: {
  2522                           ;CW201x.c: 517: cw_bat.voltage = cw_voltage;
  2523  0179  0844               	movf	update_vol@cw_voltage+1,w
  2524  017A  00CB               	movwf	_cw_bat+4
  2525  017B  0843               	movf	update_vol@cw_voltage,w
  2526  017C  00CA               	movwf	_cw_bat+3
  2527  017D  0008               	return
  2528  017E                     __end_of_update_vol:	
  2529                           
  2530                           	psect	text3
  2531  0648                     __ptext3:	
  2532 ;; *************** function _cw_get_vol *****************
  2533 ;; Defined at:
  2534 ;;		line 434 in file "CW201x.c"
  2535 ;; Parameters:    Size  Location     Type
  2536 ;;		None
  2537 ;; Auto vars:     Size  Location     Type
  2538 ;;  ad_value        4   28[BANK0 ] unsigned long 
  2539 ;;  ad_buff         2   33[BANK0 ] unsigned int 
  2540 ;;  reg_val         2   22[BANK0 ] unsigned char [2]
  2541 ;;  ad_value_max    2   26[BANK0 ] unsigned int 
  2542 ;;  ad_value_min    2   24[BANK0 ] unsigned int 
  2543 ;;  ret             2   20[BANK0 ] int 
  2544 ;;  get_ad_times    1   32[BANK0 ] unsigned char 
  2545 ;; Return value:  Size  Location     Type
  2546 ;;                  2   13[BANK0 ] unsigned int 
  2547 ;; Registers used:
  2548 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2549 ;; Tracked objects:
  2550 ;;		On entry : 0/0
  2551 ;;		On exit  : 0/0
  2552 ;;		Unchanged: 0/0
  2553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2554 ;;      Params:         0       2       0       0
  2555 ;;      Locals:         0      15       0       0
  2556 ;;      Temps:          0       5       0       0
  2557 ;;      Totals:         0      22       0       0
  2558 ;;Total ram usage:       22 bytes
  2559 ;; Hardware stack levels used:    1
  2560 ;; Hardware stack levels required when called:    4
  2561 ;; This function calls:
  2562 ;;		___lldiv
  2563 ;;		___lmul
  2564 ;;		_cw_read_word
  2565 ;; This function is called by:
  2566 ;;		_update_vol
  2567 ;; This function uses a non-reentrant model
  2568 ;;
  2569                           
  2570                           
  2571                           ;psect for function _cw_get_vol
  2572  0648                     _cw_get_vol:	
  2573                           
  2574                           ;CW201x.c: 436: int ret = 0;
  2575                           
  2576                           ;incstack = 0
  2577                           ; Regs used in _cw_get_vol: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2578  0648  0140               	movlb	0	; select bank0
  2579  0649  01B4               	clrf	cw_get_vol@ret
  2580  064A  01B5               	clrf	cw_get_vol@ret+1
  2581                           
  2582                           ;CW201x.c: 437: unsigned char get_ad_times = 0;
  2583  064B  01C0               	clrf	cw_get_vol@get_ad_times
  2584                           
  2585                           ;CW201x.c: 438: unsigned char reg_val[2] = {0 , 0};
  2586  064C  084E               	movf	cw_get_vol@F80+1,w
  2587  064D  00B7               	movwf	cw_get_vol@reg_val+1
  2588  064E  084D               	movf	cw_get_vol@F80,w
  2589  064F  00B6               	movwf	cw_get_vol@reg_val
  2590                           
  2591                           ;CW201x.c: 439: unsigned long ad_value = 0;
  2592  0650  3000               	movlw	0
  2593  0651  00BF               	movwf	cw_get_vol@ad_value+3
  2594  0652  3000               	movlw	0
  2595  0653  00BE               	movwf	cw_get_vol@ad_value+2
  2596  0654  3000               	movlw	0
  2597  0655  00BD               	movwf	cw_get_vol@ad_value+1
  2598  0656  3000               	movlw	0
  2599  0657  00BC               	movwf	cw_get_vol@ad_value
  2600                           
  2601                           ;CW201x.c: 440: unsigned int ad_buff = 0;
  2602  0658  01C1               	clrf	cw_get_vol@ad_buff
  2603  0659  01C2               	clrf	cw_get_vol@ad_buff+1
  2604                           
  2605                           ;CW201x.c: 441: unsigned int ad_value_min = 0;
  2606  065A  01B8               	clrf	cw_get_vol@ad_value_min
  2607  065B  01B9               	clrf	cw_get_vol@ad_value_min+1
  2608                           
  2609                           ;CW201x.c: 442: unsigned int ad_value_max = 0;
  2610  065C  01BA               	clrf	cw_get_vol@ad_value_max
  2611  065D  01BB               	clrf	cw_get_vol@ad_value_max+1
  2612                           
  2613                           ;CW201x.c: 444: for(get_ad_times = 0; get_ad_times < 3; get_ad_times++)
  2614  065E  01C0               	clrf	cw_get_vol@get_ad_times
  2615  065F  3003               	movlw	3
  2616  0660  0240               	subwf	cw_get_vol@get_ad_times,w
  2617  0661  1803               	btfsc	3,0
  2618  0662  2EBC               	goto	l2257
  2619  0663                     l2237:	
  2620                           
  2621                           ;CW201x.c: 445: {
  2622                           ;CW201x.c: 446: ret = cw_read_word(0x2, &reg_val[0],2);
  2623  0663  3036               	movlw	(low (cw_get_vol@reg_val| 0))& (0+255)
  2624  0664  00AF               	movwf	??_cw_get_vol
  2625  0665  082F               	movf	??_cw_get_vol,w
  2626  0666  00A4               	movwf	cw_read_word@r_pdata
  2627  0667  3002               	movlw	2
  2628  0668  00A5               	movwf	cw_read_word@length
  2629  0669  3000               	movlw	0
  2630  066A  00A6               	movwf	cw_read_word@length+1
  2631  066B  3002               	movlw	2
  2632  066C  24B6               	fcall	_cw_read_word
  2633  066D  0140               	movlb	0	; select bank0
  2634  066E  0825               	movf	?_cw_read_word+1,w
  2635  066F  00B5               	movwf	cw_get_vol@ret+1
  2636  0670  0824               	movf	?_cw_read_word,w
  2637  0671  00B4               	movwf	cw_get_vol@ret
  2638                           
  2639                           ;CW201x.c: 447: if(ret)
  2640  0672  0834               	movf	cw_get_vol@ret,w
  2641  0673  0435               	iorwf	cw_get_vol@ret+1,w
  2642  0674  1903               	btfsc	3,2
  2643  0675  2E7B               	goto	l2245
  2644                           
  2645                           ;CW201x.c: 448: {
  2646                           ;CW201x.c: 449: return 1;
  2647  0676  3001               	movlw	1
  2648  0677  00AD               	movwf	?_cw_get_vol
  2649  0678  3000               	movlw	0
  2650  0679  00AE               	movwf	?_cw_get_vol+1
  2651  067A  0008               	return
  2652  067B                     l2245:	
  2653                           
  2654                           ;CW201x.c: 450: }
  2655                           ;CW201x.c: 451: ad_buff = (reg_val[0] << 8) + reg_val[1];
  2656  067B  0837               	movf	cw_get_vol@reg_val+1,w
  2657  067C  00AF               	movwf	??_cw_get_vol
  2658  067D  01B0               	clrf	??_cw_get_vol+1
  2659  067E  0836               	movf	cw_get_vol@reg_val,w
  2660  067F  00B1               	movwf	??_cw_get_vol+2
  2661  0680  01B2               	clrf	??_cw_get_vol+3
  2662  0681  0831               	movf	??_cw_get_vol+2,w
  2663  0682  00B2               	movwf	??_cw_get_vol+3
  2664  0683  01B1               	clrf	??_cw_get_vol+2
  2665  0684  082F               	movf	??_cw_get_vol,w
  2666  0685  0731               	addwf	??_cw_get_vol+2,w
  2667  0686  00C1               	movwf	cw_get_vol@ad_buff
  2668  0687  0830               	movf	??_cw_get_vol+1,w
  2669  0688  3D32               	addwfc	??_cw_get_vol+3,w
  2670  0689  00C2               	movwf	cw_get_vol@ad_buff+1
  2671                           
  2672                           ;CW201x.c: 453: if(get_ad_times == 0)
  2673  068A  0840               	movf	cw_get_vol@get_ad_times,w
  2674  068B  1D03               	btfss	3,2
  2675  068C  2E95               	goto	l279
  2676                           
  2677                           ;CW201x.c: 454: {
  2678                           ;CW201x.c: 455: ad_value_min = ad_buff;
  2679  068D  0842               	movf	cw_get_vol@ad_buff+1,w
  2680  068E  00B9               	movwf	cw_get_vol@ad_value_min+1
  2681  068F  0841               	movf	cw_get_vol@ad_buff,w
  2682  0690  00B8               	movwf	cw_get_vol@ad_value_min
  2683                           
  2684                           ;CW201x.c: 456: ad_value_max = ad_buff;
  2685  0691  0842               	movf	cw_get_vol@ad_buff+1,w
  2686  0692  00BB               	movwf	cw_get_vol@ad_value_max+1
  2687  0693  0841               	movf	cw_get_vol@ad_buff,w
  2688  0694  00BA               	movwf	cw_get_vol@ad_value_max
  2689  0695                     l279:	
  2690                           
  2691                           ;CW201x.c: 457: }
  2692                           ;CW201x.c: 458: if(ad_buff < ad_value_min)
  2693  0695  0839               	movf	cw_get_vol@ad_value_min+1,w
  2694  0696  0242               	subwf	cw_get_vol@ad_buff+1,w
  2695  0697  1D03               	skipz
  2696  0698  2E9B               	goto	u2075
  2697  0699  0838               	movf	cw_get_vol@ad_value_min,w
  2698  069A  0241               	subwf	cw_get_vol@ad_buff,w
  2699  069B                     u2075:	
  2700  069B  1803               	skipnc
  2701  069C  2EA1               	goto	l280
  2702                           
  2703                           ;CW201x.c: 459: {
  2704                           ;CW201x.c: 460: ad_value_min = ad_buff;
  2705  069D  0842               	movf	cw_get_vol@ad_buff+1,w
  2706  069E  00B9               	movwf	cw_get_vol@ad_value_min+1
  2707  069F  0841               	movf	cw_get_vol@ad_buff,w
  2708  06A0  00B8               	movwf	cw_get_vol@ad_value_min
  2709  06A1                     l280:	
  2710                           
  2711                           ;CW201x.c: 461: }
  2712                           ;CW201x.c: 462: if(ad_buff > ad_value_max)
  2713  06A1  0842               	movf	cw_get_vol@ad_buff+1,w
  2714  06A2  023B               	subwf	cw_get_vol@ad_value_max+1,w
  2715  06A3  1D03               	skipz
  2716  06A4  2EA7               	goto	u2085
  2717  06A5  0841               	movf	cw_get_vol@ad_buff,w
  2718  06A6  023A               	subwf	cw_get_vol@ad_value_max,w
  2719  06A7                     u2085:	
  2720  06A7  1803               	skipnc
  2721  06A8  2EAD               	goto	l281
  2722                           
  2723                           ;CW201x.c: 463: {
  2724                           ;CW201x.c: 464: ad_value_max = ad_buff;
  2725  06A9  0842               	movf	cw_get_vol@ad_buff+1,w
  2726  06AA  00BB               	movwf	cw_get_vol@ad_value_max+1
  2727  06AB  0841               	movf	cw_get_vol@ad_buff,w
  2728  06AC  00BA               	movwf	cw_get_vol@ad_value_max
  2729  06AD                     l281:	
  2730                           
  2731                           ;CW201x.c: 465: }
  2732                           ;CW201x.c: 466: ad_value += ad_buff;
  2733  06AD  0841               	movf	cw_get_vol@ad_buff,w
  2734  06AE  07BC               	addwf	cw_get_vol@ad_value,f
  2735  06AF  0842               	movf	cw_get_vol@ad_buff+1,w
  2736  06B0  3DBD               	addwfc	cw_get_vol@ad_value+1,f
  2737  06B1  3000               	movlw	0
  2738  06B2  3DBE               	addwfc	cw_get_vol@ad_value+2,f
  2739  06B3  3DBF               	addwfc	cw_get_vol@ad_value+3,f
  2740  06B4  3001               	movlw	1
  2741  06B5  00AF               	movwf	??_cw_get_vol
  2742  06B6  082F               	movf	??_cw_get_vol,w
  2743  06B7  07C0               	addwf	cw_get_vol@get_ad_times,f
  2744  06B8  3003               	movlw	3
  2745  06B9  0240               	subwf	cw_get_vol@get_ad_times,w
  2746  06BA  1C03               	skipc
  2747  06BB  2E63               	goto	l2237
  2748  06BC                     l2257:	
  2749                           
  2750                           ;CW201x.c: 467: }
  2751                           ;CW201x.c: 468: ad_value -= ad_value_min;
  2752  06BC  0838               	movf	cw_get_vol@ad_value_min,w
  2753  06BD  00AF               	movwf	??_cw_get_vol
  2754  06BE  0839               	movf	cw_get_vol@ad_value_min+1,w
  2755  06BF  00B0               	movwf	??_cw_get_vol+1
  2756  06C0  01B1               	clrf	??_cw_get_vol+2
  2757  06C1  01B2               	clrf	??_cw_get_vol+3
  2758  06C2  082F               	movf	??_cw_get_vol,w
  2759  06C3  02BC               	subwf	cw_get_vol@ad_value,f
  2760  06C4  0830               	movf	??_cw_get_vol+1,w
  2761  06C5  3BBD               	subwfb	cw_get_vol@ad_value+1,f
  2762  06C6  0831               	movf	??_cw_get_vol+2,w
  2763  06C7  3BBE               	subwfb	cw_get_vol@ad_value+2,f
  2764  06C8  0832               	movf	??_cw_get_vol+3,w
  2765  06C9  3BBF               	subwfb	cw_get_vol@ad_value+3,f
  2766                           
  2767                           ;CW201x.c: 469: ad_value -= ad_value_max;
  2768  06CA  083A               	movf	cw_get_vol@ad_value_max,w
  2769  06CB  00AF               	movwf	??_cw_get_vol
  2770  06CC  083B               	movf	cw_get_vol@ad_value_max+1,w
  2771  06CD  00B0               	movwf	??_cw_get_vol+1
  2772  06CE  01B1               	clrf	??_cw_get_vol+2
  2773  06CF  01B2               	clrf	??_cw_get_vol+3
  2774  06D0  082F               	movf	??_cw_get_vol,w
  2775  06D1  02BC               	subwf	cw_get_vol@ad_value,f
  2776  06D2  0830               	movf	??_cw_get_vol+1,w
  2777  06D3  3BBD               	subwfb	cw_get_vol@ad_value+1,f
  2778  06D4  0831               	movf	??_cw_get_vol+2,w
  2779  06D5  3BBE               	subwfb	cw_get_vol@ad_value+2,f
  2780  06D6  0832               	movf	??_cw_get_vol+3,w
  2781  06D7  3BBF               	subwfb	cw_get_vol@ad_value+3,f
  2782                           
  2783                           ;CW201x.c: 470: ad_value = (ad_value * 305 + 50000) / 100000;
  2784  06D8  3000               	movlw	0
  2785  06D9  00A3               	movwf	___lldiv@divisor+3
  2786  06DA  3001               	movlw	1
  2787  06DB  00A2               	movwf	___lldiv@divisor+2
  2788  06DC  3086               	movlw	134
  2789  06DD  00A1               	movwf	___lldiv@divisor+1
  2790  06DE  30A0               	movlw	160
  2791  06DF  00A0               	movwf	___lldiv@divisor
  2792  06E0  3050               	movlw	80
  2793  06E1  00AF               	movwf	??_cw_get_vol
  2794  06E2  30C3               	movlw	195
  2795  06E3  00B0               	movwf	??_cw_get_vol+1
  2796  06E4  3000               	movlw	0
  2797  06E5  00B1               	movwf	??_cw_get_vol+2
  2798  06E6  3000               	movlw	0
  2799  06E7  00B2               	movwf	??_cw_get_vol+3
  2800  06E8  083F               	movf	cw_get_vol@ad_value+3,w
  2801  06E9  00F3               	movwf	___lmul@multiplier+3
  2802  06EA  083E               	movf	cw_get_vol@ad_value+2,w
  2803  06EB  00F2               	movwf	___lmul@multiplier+2
  2804  06EC  083D               	movf	cw_get_vol@ad_value+1,w
  2805  06ED  00F1               	movwf	___lmul@multiplier+1
  2806  06EE  083C               	movf	cw_get_vol@ad_value,w
  2807  06EF  00F0               	movwf	___lmul@multiplier
  2808  06F0  3000               	movlw	0
  2809  06F1  00F7               	movwf	___lmul@multiplicand+3
  2810  06F2  3000               	movlw	0
  2811  06F3  00F6               	movwf	___lmul@multiplicand+2
  2812  06F4  3001               	movlw	1
  2813  06F5  00F5               	movwf	___lmul@multiplicand+1
  2814  06F6  3031               	movlw	49
  2815  06F7  00F4               	movwf	___lmul@multiplicand
  2816  06F8  228B               	fcall	___lmul
  2817  06F9  0870               	movf	?___lmul,w
  2818  06FA  0140               	movlb	0	; select bank0
  2819  06FB  07AF               	addwf	??_cw_get_vol,f
  2820  06FC  0871               	movf	?___lmul+1,w
  2821  06FD  3DB0               	addwfc	??_cw_get_vol+1,f
  2822  06FE  0872               	movf	?___lmul+2,w
  2823  06FF  3DB1               	addwfc	??_cw_get_vol+2,f
  2824  0700  0873               	movf	?___lmul+3,w
  2825  0701  3DB2               	addwfc	??_cw_get_vol+3,f
  2826  0702  0832               	movf	??_cw_get_vol+3,w
  2827  0703  00A7               	movwf	___lldiv@dividend+3
  2828  0704  0831               	movf	??_cw_get_vol+2,w
  2829  0705  00A6               	movwf	___lldiv@dividend+2
  2830  0706  0830               	movf	??_cw_get_vol+1,w
  2831  0707  00A5               	movwf	___lldiv@dividend+1
  2832  0708  082F               	movf	??_cw_get_vol,w
  2833  0709  00A4               	movwf	___lldiv@dividend
  2834  070A  2463               	fcall	___lldiv
  2835  070B  0140               	movlb	0	; select bank0
  2836  070C  0823               	movf	?___lldiv+3,w
  2837  070D  00BF               	movwf	cw_get_vol@ad_value+3
  2838  070E  0822               	movf	?___lldiv+2,w
  2839  070F  00BE               	movwf	cw_get_vol@ad_value+2
  2840  0710  0821               	movf	?___lldiv+1,w
  2841  0711  00BD               	movwf	cw_get_vol@ad_value+1
  2842  0712  0820               	movf	?___lldiv,w
  2843  0713  00BC               	movwf	cw_get_vol@ad_value
  2844                           
  2845                           ;CW201x.c: 471: return(ad_value);
  2846  0714  083D               	movf	cw_get_vol@ad_value+1,w
  2847  0715  00AE               	movwf	?_cw_get_vol+1
  2848  0716  083C               	movf	cw_get_vol@ad_value,w
  2849  0717  00AD               	movwf	?_cw_get_vol
  2850  0718  0008               	return
  2851  0719                     __end_of_cw_get_vol:	
  2852                           
  2853                           	psect	text4
  2854  04B6                     __ptext4:	
  2855 ;; *************** function _cw_read_word *****************
  2856 ;; Defined at:
  2857 ;;		line 189 in file "iic.c"
  2858 ;; Parameters:    Size  Location     Type
  2859 ;;  point_reg       1    wreg     unsigned char 
  2860 ;;  r_pdata         1    4[BANK0 ] PTR unsigned char 
  2861 ;;		 -> cw_get_vol@reg_val(2), 
  2862 ;;  length          2    5[BANK0 ] unsigned int 
  2863 ;; Auto vars:     Size  Location     Type
  2864 ;;  point_reg       1    7[BANK0 ] unsigned char 
  2865 ;;  count           1    8[BANK0 ] unsigned char 
  2866 ;; Return value:  Size  Location     Type
  2867 ;;                  2    4[BANK0 ] int 
  2868 ;; Registers used:
  2869 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2870 ;; Tracked objects:
  2871 ;;		On entry : 0/0
  2872 ;;		On exit  : 0/0
  2873 ;;		Unchanged: 0/0
  2874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2875 ;;      Params:         0       3       0       0
  2876 ;;      Locals:         0       2       0       0
  2877 ;;      Temps:          2       0       0       0
  2878 ;;      Totals:         2       5       0       0
  2879 ;;Total ram usage:        7 bytes
  2880 ;; Hardware stack levels used:    1
  2881 ;; Hardware stack levels required when called:    3
  2882 ;; This function calls:
  2883 ;;		_read_byte
  2884 ;;		_s_ack
  2885 ;;		_sn_ack
  2886 ;;		_start
  2887 ;;		_stop
  2888 ;;		_wait_r_ack
  2889 ;;		_write_byte
  2890 ;; This function is called by:
  2891 ;;		_cw_get_vol
  2892 ;; This function uses a non-reentrant model
  2893 ;;
  2894                           
  2895                           
  2896                           ;psect for function _cw_read_word
  2897  04B6                     _cw_read_word:	
  2898                           
  2899                           ;incstack = 0
  2900                           ; Regs used in _cw_read_word: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2901                           ;cw_read_word@point_reg stored from wreg
  2902  04B6  0140               	movlb	0	; select bank0
  2903  04B7  00A7               	movwf	cw_read_word@point_reg
  2904                           
  2905                           ;iic.c: 191: unsigned char count;
  2906                           ;iic.c: 193: start();
  2907  04B8  2116               	fcall	_start
  2908                           
  2909                           ;iic.c: 194: write_byte(0xc4);
  2910  04B9  30C4               	movlw	196
  2911  04BA  2199               	fcall	_write_byte
  2912                           
  2913                           ;iic.c: 195: if(wait_r_ack())
  2914  04BB  22BA               	fcall	_wait_r_ack
  2915  04BC  087A               	movf	?_wait_r_ack,w
  2916  04BD  047B               	iorwf	?_wait_r_ack+1,w
  2917  04BE  1903               	btfsc	3,2
  2918  04BF  2CC6               	goto	l2119
  2919                           
  2920                           ;iic.c: 196: {
  2921                           ;iic.c: 197: return 1;
  2922  04C0  3001               	movlw	1
  2923  04C1  0140               	movlb	0	; select bank0
  2924  04C2  00A4               	movwf	?_cw_read_word
  2925  04C3  3000               	movlw	0
  2926  04C4  00A5               	movwf	?_cw_read_word+1
  2927  04C5  0008               	return
  2928  04C6                     l2119:	
  2929                           
  2930                           ;iic.c: 198: }
  2931                           ;iic.c: 199: write_byte(point_reg);
  2932  04C6  0140               	movlb	0	; select bank0
  2933  04C7  0827               	movf	cw_read_word@point_reg,w
  2934  04C8  2199               	fcall	_write_byte
  2935                           
  2936                           ;iic.c: 200: if(wait_r_ack())
  2937  04C9  22BA               	fcall	_wait_r_ack
  2938  04CA  087A               	movf	?_wait_r_ack,w
  2939  04CB  047B               	iorwf	?_wait_r_ack+1,w
  2940  04CC  1903               	btfsc	3,2
  2941  04CD  2CD4               	goto	l2125
  2942                           
  2943                           ;iic.c: 201: {
  2944                           ;iic.c: 202: return 1;
  2945  04CE  3001               	movlw	1
  2946  04CF  0140               	movlb	0	; select bank0
  2947  04D0  00A4               	movwf	?_cw_read_word
  2948  04D1  3000               	movlw	0
  2949  04D2  00A5               	movwf	?_cw_read_word+1
  2950  04D3  0008               	return
  2951  04D4                     l2125:	
  2952                           
  2953                           ;iic.c: 203: }
  2954                           ;iic.c: 204: start();
  2955  04D4  2116               	fcall	_start
  2956                           
  2957                           ;iic.c: 205: write_byte(0xc5);
  2958  04D5  30C5               	movlw	197
  2959  04D6  2199               	fcall	_write_byte
  2960                           
  2961                           ;iic.c: 206: if(wait_r_ack())
  2962  04D7  22BA               	fcall	_wait_r_ack
  2963  04D8  087A               	movf	?_wait_r_ack,w
  2964  04D9  047B               	iorwf	?_wait_r_ack+1,w
  2965  04DA  1903               	btfsc	3,2
  2966  04DB  2CE2               	goto	l2131
  2967                           
  2968                           ;iic.c: 207: {
  2969                           ;iic.c: 208: return 1;
  2970  04DC  3001               	movlw	1
  2971  04DD  0140               	movlb	0	; select bank0
  2972  04DE  00A4               	movwf	?_cw_read_word
  2973  04DF  3000               	movlw	0
  2974  04E0  00A5               	movwf	?_cw_read_word+1
  2975  04E1  0008               	return
  2976  04E2                     l2131:	
  2977                           
  2978                           ;iic.c: 209: }
  2979                           ;iic.c: 210: for(count = 0; count < length; count++ ){
  2980  04E2  0140               	movlb	0	; select bank0
  2981  04E3  01A8               	clrf	cw_read_word@count
  2982  04E4                     l2143:	
  2983  04E4  0828               	movf	cw_read_word@count,w
  2984  04E5  00FC               	movwf	??_cw_read_word
  2985  04E6  01FD               	clrf	??_cw_read_word+1
  2986  04E7  0826               	movf	cw_read_word@length+1,w
  2987  04E8  027D               	subwf	??_cw_read_word+1,w
  2988  04E9  1D03               	skipz
  2989  04EA  2CED               	goto	u1885
  2990  04EB  0825               	movf	cw_read_word@length,w
  2991  04EC  027C               	subwf	??_cw_read_word,w
  2992  04ED                     u1885:	
  2993  04ED  1803               	btfsc	3,0
  2994  04EE  2D11               	goto	l2145
  2995                           
  2996                           ;iic.c: 211: *r_pdata = read_byte();
  2997  04EF  223A               	fcall	_read_byte
  2998  04F0  00FC               	movwf	??_cw_read_word
  2999  04F1  0140               	movlb	0	; select bank0
  3000  04F2  0824               	movf	cw_read_word@r_pdata,w
  3001  04F3  0086               	movwf	6
  3002  04F4  0187               	clrf	7
  3003  04F5  087C               	movf	??_cw_read_word,w
  3004  04F6  0081               	movwf	1
  3005                           
  3006                           ;iic.c: 212: if(count + 1 < length){
  3007  04F7  0828               	movf	cw_read_word@count,w
  3008  04F8  3E01               	addlw	1
  3009  04F9  00FC               	movwf	??_cw_read_word
  3010  04FA  3000               	movlw	0
  3011  04FB  1803               	skipnc
  3012  04FC  3001               	movlw	1
  3013  04FD  00FD               	movwf	??_cw_read_word+1
  3014  04FE  0826               	movf	cw_read_word@length+1,w
  3015  04FF  027D               	subwf	??_cw_read_word+1,w
  3016  0500  1D03               	skipz
  3017  0501  2D04               	goto	u1875
  3018  0502  0825               	movf	cw_read_word@length,w
  3019  0503  027C               	subwf	??_cw_read_word,w
  3020  0504                     u1875:	
  3021  0504  1803               	skipnc
  3022  0505  2D0B               	goto	l2141
  3023                           
  3024                           ;iic.c: 213: r_pdata++;
  3025  0506  3001               	movlw	1
  3026  0507  00FC               	movwf	??_cw_read_word
  3027  0508  087C               	movf	??_cw_read_word,w
  3028  0509  07A4               	addwf	cw_read_word@r_pdata,f
  3029                           
  3030                           ;iic.c: 214: sn_ack();
  3031  050A  2145               	fcall	_sn_ack
  3032  050B                     l2141:	
  3033  050B  3001               	movlw	1
  3034  050C  00FC               	movwf	??_cw_read_word
  3035  050D  087C               	movf	??_cw_read_word,w
  3036  050E  0140               	movlb	0	; select bank0
  3037  050F  07A8               	addwf	cw_read_word@count,f
  3038  0510  2CE4               	goto	l2143
  3039  0511                     l2145:	
  3040                           
  3041                           ;iic.c: 215: }
  3042                           ;iic.c: 216: }
  3043                           ;iic.c: 217: s_ack();
  3044  0511  210B               	fcall	_s_ack
  3045                           
  3046                           ;iic.c: 218: stop();
  3047  0512  2139               	fcall	_stop
  3048                           
  3049                           ;iic.c: 219: return 0;
  3050  0513  0140               	movlb	0	; select bank0
  3051  0514  01A4               	clrf	?_cw_read_word
  3052  0515  01A5               	clrf	?_cw_read_word+1
  3053  0516  0008               	return
  3054  0517                     __end_of_cw_read_word:	
  3055                           
  3056                           	psect	text5
  3057  0145                     __ptext5:	
  3058 ;; *************** function _sn_ack *****************
  3059 ;; Defined at:
  3060 ;;		line 113 in file "iic.c"
  3061 ;; Parameters:    Size  Location     Type
  3062 ;;		None
  3063 ;; Auto vars:     Size  Location     Type
  3064 ;;		None
  3065 ;; Return value:  Size  Location     Type
  3066 ;;                  1    wreg      void 
  3067 ;; Registers used:
  3068 ;;		wreg, status,2, status,0, pclath, cstack
  3069 ;; Tracked objects:
  3070 ;;		On entry : 0/0
  3071 ;;		On exit  : 0/0
  3072 ;;		Unchanged: 0/0
  3073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3074 ;;      Params:         0       0       0       0
  3075 ;;      Locals:         0       0       0       0
  3076 ;;      Temps:          0       0       0       0
  3077 ;;      Totals:         0       0       0       0
  3078 ;;Total ram usage:        0 bytes
  3079 ;; Hardware stack levels used:    1
  3080 ;; Hardware stack levels required when called:    1
  3081 ;; This function calls:
  3082 ;;		_Delay10us
  3083 ;; This function is called by:
  3084 ;;		_cw_read_word
  3085 ;; This function uses a non-reentrant model
  3086 ;;
  3087                           
  3088                           
  3089                           ;psect for function _sn_ack
  3090  0145                     _sn_ack:	
  3091                           
  3092                           ;incstack = 0
  3093                           ; Regs used in _sn_ack: [wreg+status,2+status,0+pclath+cstack]
  3094                           ;iic.c: 115: do { TRISCbits.TRISC1 = 0; } while(0);
  3095  0145  0140               	movlb	0	; select bank0
  3096  0146  1094               	bcf	20,1	;volatile
  3097                           
  3098                           ;iic.c: 116: do { LATCbits.LATC1 = 0; } while(0);
  3099  0147  109A               	bcf	26,1	;volatile
  3100                           
  3101                           ;iic.c: 117: Delay10us();
  3102  0148  21D8               	fcall	_Delay10us
  3103                           
  3104                           ;iic.c: 118: do { LATCbits.LATC0 = 1; } while(0);
  3105  0149  0140               	movlb	0	; select bank0
  3106  014A  141A               	bsf	26,0	;volatile
  3107                           
  3108                           ;iic.c: 119: Delay10us();
  3109  014B  21D8               	fcall	_Delay10us
  3110                           
  3111                           ;iic.c: 120: do { LATCbits.LATC0 = 0; } while(0);
  3112  014C  0140               	movlb	0	; select bank0
  3113  014D  101A               	bcf	26,0	;volatile
  3114                           
  3115                           ;iic.c: 121: do { LATCbits.LATC1 = 1; } while(0);
  3116  014E  149A               	bsf	26,1	;volatile
  3117                           
  3118                           ;iic.c: 122: Delay10us();
  3119  014F  21D8               	fcall	_Delay10us
  3120  0150  0008               	return
  3121  0151                     __end_of_sn_ack:	
  3122                           
  3123                           	psect	text6
  3124  028B                     __ptext6:	
  3125 ;; *************** function ___lmul *****************
  3126 ;; Defined at:
  3127 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul32.c"
  3128 ;; Parameters:    Size  Location     Type
  3129 ;;  multiplier      4    0[COMMON] unsigned long 
  3130 ;;  multiplicand    4    4[COMMON] unsigned long 
  3131 ;; Auto vars:     Size  Location     Type
  3132 ;;  product         4    8[COMMON] unsigned long 
  3133 ;; Return value:  Size  Location     Type
  3134 ;;                  4    0[COMMON] unsigned long 
  3135 ;; Registers used:
  3136 ;;		wreg, status,2, status,0
  3137 ;; Tracked objects:
  3138 ;;		On entry : 0/0
  3139 ;;		On exit  : 0/0
  3140 ;;		Unchanged: 0/0
  3141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3142 ;;      Params:         8       0       0       0
  3143 ;;      Locals:         4       0       0       0
  3144 ;;      Temps:          0       0       0       0
  3145 ;;      Totals:        12       0       0       0
  3146 ;;Total ram usage:       12 bytes
  3147 ;; Hardware stack levels used:    1
  3148 ;; This function calls:
  3149 ;;		Nothing
  3150 ;; This function is called by:
  3151 ;;		_cw_get_vol
  3152 ;; This function uses a non-reentrant model
  3153 ;;
  3154                           
  3155                           
  3156                           ;psect for function ___lmul
  3157  028B                     ___lmul:	
  3158                           
  3159                           ;incstack = 0
  3160                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3161  028B  3000               	movlw	0
  3162  028C  00FB               	movwf	___lmul@product+3
  3163  028D  3000               	movlw	0
  3164  028E  00FA               	movwf	___lmul@product+2
  3165  028F  3000               	movlw	0
  3166  0290  00F9               	movwf	___lmul@product+1
  3167  0291  3000               	movlw	0
  3168  0292  00F8               	movwf	___lmul@product
  3169  0293                     l2153:	
  3170  0293  1C70               	btfss	___lmul@multiplier,0
  3171  0294  2A9D               	goto	l2157
  3172  0295  0874               	movf	___lmul@multiplicand,w
  3173  0296  07F8               	addwf	___lmul@product,f
  3174  0297  0875               	movf	___lmul@multiplicand+1,w
  3175  0298  3DF9               	addwfc	___lmul@product+1,f
  3176  0299  0876               	movf	___lmul@multiplicand+2,w
  3177  029A  3DFA               	addwfc	___lmul@product+2,f
  3178  029B  0877               	movf	___lmul@multiplicand+3,w
  3179  029C  3DFB               	addwfc	___lmul@product+3,f
  3180  029D                     l2157:	
  3181  029D  3001               	movlw	1
  3182  029E                     u1905:	
  3183  029E  35F4               	lslf	___lmul@multiplicand,f
  3184  029F  0DF5               	rlf	___lmul@multiplicand+1,f
  3185  02A0  0DF6               	rlf	___lmul@multiplicand+2,f
  3186  02A1  0DF7               	rlf	___lmul@multiplicand+3,f
  3187  02A2  0B89               	decfsz	9,f
  3188  02A3  2A9E               	goto	u1905
  3189  02A4  3001               	movlw	1
  3190  02A5                     u1915:	
  3191  02A5  36F3               	lsrf	___lmul@multiplier+3,f
  3192  02A6  0CF2               	rrf	___lmul@multiplier+2,f
  3193  02A7  0CF1               	rrf	___lmul@multiplier+1,f
  3194  02A8  0CF0               	rrf	___lmul@multiplier,f
  3195  02A9  0B89               	decfsz	9,f
  3196  02AA  2AA5               	goto	u1915
  3197  02AB  0873               	movf	___lmul@multiplier+3,w
  3198  02AC  0472               	iorwf	___lmul@multiplier+2,w
  3199  02AD  0471               	iorwf	___lmul@multiplier+1,w
  3200  02AE  0470               	iorwf	___lmul@multiplier,w
  3201  02AF  1D03               	skipz
  3202  02B0  2A93               	goto	l2153
  3203  02B1  087B               	movf	___lmul@product+3,w
  3204  02B2  00F3               	movwf	?___lmul+3
  3205  02B3  087A               	movf	___lmul@product+2,w
  3206  02B4  00F2               	movwf	?___lmul+2
  3207  02B5  0879               	movf	___lmul@product+1,w
  3208  02B6  00F1               	movwf	?___lmul+1
  3209  02B7  0878               	movf	___lmul@product,w
  3210  02B8  00F0               	movwf	?___lmul
  3211  02B9  0008               	return
  3212  02BA                     __end_of___lmul:	
  3213                           
  3214                           	psect	text7
  3215  0463                     __ptext7:	
  3216 ;; *************** function ___lldiv *****************
  3217 ;; Defined at:
  3218 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
  3219 ;; Parameters:    Size  Location     Type
  3220 ;;  divisor         4    0[BANK0 ] unsigned long 
  3221 ;;  dividend        4    4[BANK0 ] unsigned long 
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;  quotient        4    8[BANK0 ] unsigned long 
  3224 ;;  counter         1   12[BANK0 ] unsigned char 
  3225 ;; Return value:  Size  Location     Type
  3226 ;;                  4    0[BANK0 ] unsigned long 
  3227 ;; Registers used:
  3228 ;;		wreg, status,2, status,0
  3229 ;; Tracked objects:
  3230 ;;		On entry : 0/0
  3231 ;;		On exit  : 0/0
  3232 ;;		Unchanged: 0/0
  3233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3234 ;;      Params:         0       8       0       0
  3235 ;;      Locals:         0       5       0       0
  3236 ;;      Temps:          1       0       0       0
  3237 ;;      Totals:         1      13       0       0
  3238 ;;Total ram usage:       14 bytes
  3239 ;; Hardware stack levels used:    1
  3240 ;; This function calls:
  3241 ;;		Nothing
  3242 ;; This function is called by:
  3243 ;;		_cw_get_vol
  3244 ;; This function uses a non-reentrant model
  3245 ;;
  3246                           
  3247                           
  3248                           ;psect for function ___lldiv
  3249  0463                     ___lldiv:	
  3250                           
  3251                           ;incstack = 0
  3252                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3253  0463  3000               	movlw	0
  3254  0464  0140               	movlb	0	; select bank0
  3255  0465  00AB               	movwf	___lldiv@quotient+3
  3256  0466  3000               	movlw	0
  3257  0467  00AA               	movwf	___lldiv@quotient+2
  3258  0468  3000               	movlw	0
  3259  0469  00A9               	movwf	___lldiv@quotient+1
  3260  046A  3000               	movlw	0
  3261  046B  00A8               	movwf	___lldiv@quotient
  3262  046C  0823               	movf	___lldiv@divisor+3,w
  3263  046D  0422               	iorwf	___lldiv@divisor+2,w
  3264  046E  0421               	iorwf	___lldiv@divisor+1,w
  3265  046F  0420               	iorwf	___lldiv@divisor,w
  3266  0470  1903               	skipnz
  3267  0471  2CAD               	goto	l2185
  3268  0472  01AC               	clrf	___lldiv@counter
  3269  0473  0AAC               	incf	___lldiv@counter,f
  3270  0474                     l2171:	
  3271  0474  1BA3               	btfsc	___lldiv@divisor+3,7
  3272  0475  2C82               	goto	l2173
  3273  0476  3001               	movlw	1
  3274  0477                     u1945:	
  3275  0477  35A0               	lslf	___lldiv@divisor,f
  3276  0478  0DA1               	rlf	___lldiv@divisor+1,f
  3277  0479  0DA2               	rlf	___lldiv@divisor+2,f
  3278  047A  0DA3               	rlf	___lldiv@divisor+3,f
  3279  047B  0B89               	decfsz	9,f
  3280  047C  2C77               	goto	u1945
  3281  047D  3001               	movlw	1
  3282  047E  00FC               	movwf	??___lldiv
  3283  047F  087C               	movf	??___lldiv,w
  3284  0480  07AC               	addwf	___lldiv@counter,f
  3285  0481  2C74               	goto	l2171
  3286  0482                     l2173:	
  3287  0482  3001               	movlw	1
  3288  0483                     u1965:	
  3289  0483  35A8               	lslf	___lldiv@quotient,f
  3290  0484  0DA9               	rlf	___lldiv@quotient+1,f
  3291  0485  0DAA               	rlf	___lldiv@quotient+2,f
  3292  0486  0DAB               	rlf	___lldiv@quotient+3,f
  3293  0487  0B89               	decfsz	9,f
  3294  0488  2C83               	goto	u1965
  3295  0489  0823               	movf	___lldiv@divisor+3,w
  3296  048A  0227               	subwf	___lldiv@dividend+3,w
  3297  048B  1D03               	skipz
  3298  048C  2C97               	goto	u1975
  3299  048D  0822               	movf	___lldiv@divisor+2,w
  3300  048E  0226               	subwf	___lldiv@dividend+2,w
  3301  048F  1D03               	skipz
  3302  0490  2C97               	goto	u1975
  3303  0491  0821               	movf	___lldiv@divisor+1,w
  3304  0492  0225               	subwf	___lldiv@dividend+1,w
  3305  0493  1D03               	skipz
  3306  0494  2C97               	goto	u1975
  3307  0495  0820               	movf	___lldiv@divisor,w
  3308  0496  0224               	subwf	___lldiv@dividend,w
  3309  0497                     u1975:	
  3310  0497  1C03               	skipc
  3311  0498  2CA2               	goto	l2181
  3312  0499  0820               	movf	___lldiv@divisor,w
  3313  049A  02A4               	subwf	___lldiv@dividend,f
  3314  049B  0821               	movf	___lldiv@divisor+1,w
  3315  049C  3BA5               	subwfb	___lldiv@dividend+1,f
  3316  049D  0822               	movf	___lldiv@divisor+2,w
  3317  049E  3BA6               	subwfb	___lldiv@dividend+2,f
  3318  049F  0823               	movf	___lldiv@divisor+3,w
  3319  04A0  3BA7               	subwfb	___lldiv@dividend+3,f
  3320  04A1  1428               	bsf	___lldiv@quotient,0
  3321  04A2                     l2181:	
  3322  04A2  3001               	movlw	1
  3323  04A3                     u1985:	
  3324  04A3  36A3               	lsrf	___lldiv@divisor+3,f
  3325  04A4  0CA2               	rrf	___lldiv@divisor+2,f
  3326  04A5  0CA1               	rrf	___lldiv@divisor+1,f
  3327  04A6  0CA0               	rrf	___lldiv@divisor,f
  3328  04A7  0B89               	decfsz	9,f
  3329  04A8  2CA3               	goto	u1985
  3330  04A9  3001               	movlw	1
  3331  04AA  02AC               	subwf	___lldiv@counter,f
  3332  04AB  1D03               	btfss	3,2
  3333  04AC  2C82               	goto	l2173
  3334  04AD                     l2185:	
  3335  04AD  082B               	movf	___lldiv@quotient+3,w
  3336  04AE  00A3               	movwf	?___lldiv+3
  3337  04AF  082A               	movf	___lldiv@quotient+2,w
  3338  04B0  00A2               	movwf	?___lldiv+2
  3339  04B1  0829               	movf	___lldiv@quotient+1,w
  3340  04B2  00A1               	movwf	?___lldiv+1
  3341  04B3  0828               	movf	___lldiv@quotient,w
  3342  04B4  00A0               	movwf	?___lldiv
  3343  04B5  0008               	return
  3344  04B6                     __end_of___lldiv:	
  3345                           
  3346                           	psect	text8
  3347  0102                     __ptext8:	
  3348 ;; *************** function _update_usb_online *****************
  3349 ;; Defined at:
  3350 ;;		line 544 in file "CW201x.c"
  3351 ;; Parameters:    Size  Location     Type
  3352 ;;		None
  3353 ;; Auto vars:     Size  Location     Type
  3354 ;;		None
  3355 ;; Return value:  Size  Location     Type
  3356 ;;                  1    wreg      void 
  3357 ;; Registers used:
  3358 ;;		wreg, status,2, status,0
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3364 ;;      Params:         0       0       0       0
  3365 ;;      Locals:         0       0       0       0
  3366 ;;      Temps:          0       0       0       0
  3367 ;;      Totals:         0       0       0       0
  3368 ;;Total ram usage:        0 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; This function calls:
  3371 ;;		Nothing
  3372 ;; This function is called by:
  3373 ;;		_cw_bat_work
  3374 ;; This function uses a non-reentrant model
  3375 ;;
  3376                           
  3377                           
  3378                           ;psect for function _update_usb_online
  3379  0102                     _update_usb_online:	
  3380                           
  3381                           ;CW201x.c: 546: if(CHARGE == 1)
  3382                           
  3383                           ;incstack = 0
  3384                           ; Regs used in _update_usb_online: [wreg+status,2+status,0]
  3385  0102  0140               	movlb	0	; select bank0
  3386  0103  0350               	decf	_CHARGE,w
  3387  0104  1D03               	btfss	3,2
  3388  0105  2909               	goto	l2329
  3389                           
  3390                           ;CW201x.c: 547: {
  3391                           ;CW201x.c: 548: cw_bat.usb_online = 1;
  3392  0106  01C7               	clrf	_cw_bat
  3393  0107  0AC7               	incf	_cw_bat,f
  3394                           
  3395                           ;CW201x.c: 549: }else{
  3396  0108  0008               	return
  3397  0109                     l2329:	
  3398                           
  3399                           ;CW201x.c: 550: cw_bat.usb_online = 0;
  3400  0109  01C7               	clrf	_cw_bat
  3401  010A  0008               	return
  3402  010B                     __end_of_update_usb_online:	
  3403                           
  3404                           	psect	text9
  3405  0219                     __ptext9:	
  3406 ;; *************** function _update_capacity *****************
  3407 ;; Defined at:
  3408 ;;		line 497 in file "CW201x.c"
  3409 ;; Parameters:    Size  Location     Type
  3410 ;;		None
  3411 ;; Auto vars:     Size  Location     Type
  3412 ;;  cw_capacity     2   35[BANK0 ] int 
  3413 ;; Return value:  Size  Location     Type
  3414 ;;                  1    wreg      void 
  3415 ;; Registers used:
  3416 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3417 ;; Tracked objects:
  3418 ;;		On entry : 0/0
  3419 ;;		On exit  : 0/0
  3420 ;;		Unchanged: 0/0
  3421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3422 ;;      Params:         0       0       0       0
  3423 ;;      Locals:         0       2       0       0
  3424 ;;      Temps:          0       1       0       0
  3425 ;;      Totals:         0       3       0       0
  3426 ;;Total ram usage:        3 bytes
  3427 ;; Hardware stack levels used:    1
  3428 ;; Hardware stack levels required when called:    8
  3429 ;; This function calls:
  3430 ;;		_cw_get_capacity
  3431 ;; This function is called by:
  3432 ;;		_cw_bat_work
  3433 ;; This function uses a non-reentrant model
  3434 ;;
  3435                           
  3436                           
  3437                           ;psect for function _update_capacity
  3438  0219                     _update_capacity:	
  3439                           
  3440                           ;CW201x.c: 499: int cw_capacity;
  3441                           ;CW201x.c: 500: cw_capacity = cw_get_capacity();
  3442                           
  3443                           ;incstack = 0
  3444                           ; Regs used in _update_capacity: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3445  0219  23D6               	fcall	_cw_get_capacity
  3446  021A  0140               	movlb	0	; select bank0
  3447  021B  083B               	movf	?_cw_get_capacity+1,w
  3448  021C  00C4               	movwf	update_capacity@cw_capacity+1
  3449  021D  083A               	movf	?_cw_get_capacity,w
  3450  021E  00C3               	movwf	update_capacity@cw_capacity
  3451                           
  3452                           ;CW201x.c: 501: if((cw_capacity >= 0) && (cw_capacity <= 100) && (cw_bat.capacity != cw_
      +                          capacity))
  3453  021F  1BC4               	btfsc	update_capacity@cw_capacity+1,7
  3454  0220  0008               	return
  3455  0221  0844               	movf	update_capacity@cw_capacity+1,w
  3456  0222  3A80               	xorlw	128
  3457  0223  00C2               	movwf	??_update_capacity
  3458  0224  3080               	movlw	128
  3459  0225  0242               	subwf	??_update_capacity,w
  3460  0226  1D03               	skipz
  3461  0227  2A2A               	goto	u2145
  3462  0228  3065               	movlw	101
  3463  0229  0243               	subwf	update_capacity@cw_capacity,w
  3464  022A                     u2145:	
  3465  022A  1803               	skipnc
  3466  022B  0008               	return
  3467  022C  0140               	movlb	0	; select bank0
  3468  022D  0844               	movf	update_capacity@cw_capacity+1,w
  3469  022E  0649               	xorwf	_cw_bat+2,w
  3470  022F  1D03               	skipz
  3471  0230  2A33               	goto	u2155
  3472  0231  0843               	movf	update_capacity@cw_capacity,w
  3473  0232  0648               	xorwf	_cw_bat+1,w
  3474  0233                     u2155:	
  3475  0233  1903               	skipnz
  3476  0234  0008               	return
  3477                           
  3478                           ;CW201x.c: 502: {
  3479                           ;CW201x.c: 503: cw_bat.capacity = cw_capacity;
  3480  0235  0844               	movf	update_capacity@cw_capacity+1,w
  3481  0236  00C9               	movwf	_cw_bat+2
  3482  0237  0843               	movf	update_capacity@cw_capacity,w
  3483  0238  00C8               	movwf	_cw_bat+1
  3484  0239  0008               	return
  3485  023A                     __end_of_update_capacity:	
  3486                           
  3487                           	psect	text10
  3488  03D6                     __ptext10:	
  3489 ;; *************** function _cw_get_capacity *****************
  3490 ;; Defined at:
  3491 ;;		line 325 in file "CW201x.c"
  3492 ;; Parameters:    Size  Location     Type
  3493 ;;		None
  3494 ;; Auto vars:     Size  Location     Type
  3495 ;;  ret             2   31[BANK0 ] int 
  3496 ;;  reg_val         1   33[BANK0 ] unsigned char 
  3497 ;;  cw_capacity     1   30[BANK0 ] unsigned char 
  3498 ;;  allow_capaci    1    0        unsigned char 
  3499 ;; Return value:  Size  Location     Type
  3500 ;;                  2   26[BANK0 ] int 
  3501 ;; Registers used:
  3502 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3503 ;; Tracked objects:
  3504 ;;		On entry : 0/0
  3505 ;;		On exit  : 0/0
  3506 ;;		Unchanged: 0/0
  3507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3508 ;;      Params:         0       2       0       0
  3509 ;;      Locals:         0       4       0       0
  3510 ;;      Temps:          0       2       0       0
  3511 ;;      Totals:         0       8       0       0
  3512 ;;Total ram usage:        8 bytes
  3513 ;; Hardware stack levels used:    1
  3514 ;; Hardware stack levels required when called:    7
  3515 ;; This function calls:
  3516 ;;		_cw_por
  3517 ;;		_cw_read
  3518 ;; This function is called by:
  3519 ;;		_update_capacity
  3520 ;; This function uses a non-reentrant model
  3521 ;;
  3522                           
  3523                           
  3524                           ;psect for function _cw_get_capacity
  3525  03D6                     _cw_get_capacity:	
  3526                           
  3527                           ;CW201x.c: 327: int ret = 0;
  3528                           
  3529                           ;incstack = 0
  3530                           ; Regs used in _cw_get_capacity: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3531  03D6  0140               	movlb	0	; select bank0
  3532  03D7  01BF               	clrf	cw_get_capacity@ret
  3533  03D8  01C0               	clrf	cw_get_capacity@ret+1
  3534                           
  3535                           ;CW201x.c: 328: unsigned char allow_capacity;
  3536                           ;CW201x.c: 329: unsigned char reg_val;
  3537                           ;CW201x.c: 331: unsigned char cw_capacity;
  3538                           ;CW201x.c: 334: ret = cw_read(0x4, &reg_val);
  3539  03D9  3041               	movlw	(low (cw_get_capacity@reg_val| 0))& (0+255)
  3540  03DA  00BC               	movwf	??_cw_get_capacity
  3541  03DB  083C               	movf	??_cw_get_capacity,w
  3542  03DC  00A4               	movwf	cw_read@r_pdata
  3543  03DD  3004               	movlw	4
  3544  03DE  231E               	fcall	_cw_read
  3545  03DF  0140               	movlb	0	; select bank0
  3546  03E0  0825               	movf	?_cw_read+1,w
  3547  03E1  00C0               	movwf	cw_get_capacity@ret+1
  3548  03E2  0824               	movf	?_cw_read,w
  3549  03E3  00BF               	movwf	cw_get_capacity@ret
  3550                           
  3551                           ;CW201x.c: 335: if(ret)
  3552  03E4  083F               	movf	cw_get_capacity@ret,w
  3553  03E5  0440               	iorwf	cw_get_capacity@ret+1,w
  3554  03E6  1903               	btfsc	3,2
  3555  03E7  2BED               	goto	l2199
  3556                           
  3557                           ;CW201x.c: 336: {
  3558                           ;CW201x.c: 337: return -1;
  3559  03E8  30FF               	movlw	255
  3560  03E9  00BA               	movwf	?_cw_get_capacity
  3561  03EA  30FF               	movlw	255
  3562  03EB  00BB               	movwf	?_cw_get_capacity+1
  3563  03EC  0008               	return
  3564  03ED                     l2199:	
  3565                           
  3566                           ;CW201x.c: 338: }
  3567                           ;CW201x.c: 340: cw_capacity = reg_val;
  3568  03ED  0841               	movf	cw_get_capacity@reg_val,w
  3569  03EE  00BC               	movwf	??_cw_get_capacity
  3570  03EF  083C               	movf	??_cw_get_capacity,w
  3571  03F0  00BE               	movwf	cw_get_capacity@cw_capacity
  3572                           
  3573                           ;CW201x.c: 342: if ((cw_capacity < 0) || (cw_capacity > 100)) {
  3574  03F1  3065               	movlw	101
  3575  03F2  023E               	subwf	cw_get_capacity@cw_capacity,w
  3576  03F3  1C03               	skipc
  3577  03F4  2C12               	goto	l2221
  3578                           
  3579                           ;CW201x.c: 344: reset_loop++;
  3580  03F5  3001               	movlw	1
  3581  03F6  00BC               	movwf	??_cw_get_capacity
  3582  03F7  083C               	movf	??_cw_get_capacity,w
  3583  03F8  07CF               	addwf	_reset_loop,f
  3584                           
  3585                           ;CW201x.c: 345: if (reset_loop >5) {
  3586  03F9  3006               	movlw	6
  3587  03FA  024F               	subwf	_reset_loop,w
  3588  03FB  1C03               	skipc
  3589  03FC  2C0D               	goto	l2215
  3590                           
  3591                           ;CW201x.c: 346: ret = cw_por();
  3592  03FD  241B               	fcall	_cw_por
  3593  03FE  0140               	movlb	0	; select bank0
  3594  03FF  0834               	movf	?_cw_por+1,w
  3595  0400  00C0               	movwf	cw_get_capacity@ret+1
  3596  0401  0833               	movf	?_cw_por,w
  3597  0402  00BF               	movwf	cw_get_capacity@ret
  3598                           
  3599                           ;CW201x.c: 347: if(ret)
  3600  0403  083F               	movf	cw_get_capacity@ret,w
  3601  0404  0440               	iorwf	cw_get_capacity@ret+1,w
  3602  0405  1903               	btfsc	3,2
  3603  0406  2C0C               	goto	l2213
  3604                           
  3605                           ;CW201x.c: 348: return -1;
  3606  0407  30FF               	movlw	255
  3607  0408  00BA               	movwf	?_cw_get_capacity
  3608  0409  30FF               	movlw	255
  3609  040A  00BB               	movwf	?_cw_get_capacity+1
  3610  040B  0008               	return
  3611  040C                     l2213:	
  3612                           
  3613                           ;CW201x.c: 349: reset_loop =0;
  3614  040C  01CF               	clrf	_reset_loop
  3615  040D                     l2215:	
  3616                           
  3617                           ;CW201x.c: 350: }
  3618                           ;CW201x.c: 351: return cw_bat.capacity;
  3619  040D  0849               	movf	_cw_bat+2,w
  3620  040E  00BB               	movwf	?_cw_get_capacity+1
  3621  040F  0848               	movf	_cw_bat+1,w
  3622  0410  00BA               	movwf	?_cw_get_capacity
  3623  0411  0008               	return
  3624  0412                     l2221:	
  3625                           ;CW201x.c: 352: }else {
  3626                           
  3627                           
  3628                           ;CW201x.c: 353: reset_loop =0;
  3629  0412  01CF               	clrf	_reset_loop
  3630                           
  3631                           ;CW201x.c: 354: }
  3632                           ;CW201x.c: 431: return(cw_capacity);
  3633  0413  083E               	movf	cw_get_capacity@cw_capacity,w
  3634  0414  00BC               	movwf	??_cw_get_capacity
  3635  0415  01BD               	clrf	??_cw_get_capacity+1
  3636  0416  083C               	movf	??_cw_get_capacity,w
  3637  0417  00BA               	movwf	?_cw_get_capacity
  3638  0418  083D               	movf	??_cw_get_capacity+1,w
  3639  0419  00BB               	movwf	?_cw_get_capacity+1
  3640  041A  0008               	return
  3641  041B                     __end_of_cw_get_capacity:	
  3642                           
  3643                           	psect	text11
  3644  041B                     __ptext11:	
  3645 ;; *************** function _cw_por *****************
  3646 ;; Defined at:
  3647 ;;		line 303 in file "CW201x.c"
  3648 ;; Parameters:    Size  Location     Type
  3649 ;;		None
  3650 ;; Auto vars:     Size  Location     Type
  3651 ;;  ret             2   24[BANK0 ] int 
  3652 ;;  reset_val       1   23[BANK0 ] unsigned char 
  3653 ;; Return value:  Size  Location     Type
  3654 ;;                  2   19[BANK0 ] int 
  3655 ;; Registers used:
  3656 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3657 ;; Tracked objects:
  3658 ;;		On entry : 0/0
  3659 ;;		On exit  : 0/0
  3660 ;;		Unchanged: 0/0
  3661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3662 ;;      Params:         0       2       0       0
  3663 ;;      Locals:         0       3       0       0
  3664 ;;      Temps:          0       2       0       0
  3665 ;;      Totals:         0       7       0       0
  3666 ;;Total ram usage:        7 bytes
  3667 ;; Hardware stack levels used:    1
  3668 ;; Hardware stack levels required when called:    6
  3669 ;; This function calls:
  3670 ;;		_CW_Delay100us
  3671 ;;		_cw_init
  3672 ;;		_cw_write
  3673 ;; This function is called by:
  3674 ;;		_cw_get_capacity
  3675 ;; This function uses a non-reentrant model
  3676 ;;
  3677                           
  3678                           
  3679                           ;psect for function _cw_por
  3680  041B                     _cw_por:	
  3681                           
  3682                           ;CW201x.c: 305: int ret = 0;
  3683                           
  3684                           ;incstack = 0
  3685                           ; Regs used in _cw_por: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3686  041B  0140               	movlb	0	; select bank0
  3687  041C  01B8               	clrf	cw_por@ret
  3688  041D  01B9               	clrf	cw_por@ret+1
  3689                           
  3690                           ;CW201x.c: 306: unsigned char reset_val = 0;
  3691  041E  01B7               	clrf	cw_por@reset_val
  3692                           
  3693                           ;CW201x.c: 307: reset_val = (0x3<<6);
  3694  041F  30C0               	movlw	192
  3695  0420  00B5               	movwf	??_cw_por
  3696  0421  0835               	movf	??_cw_por,w
  3697  0422  00B7               	movwf	cw_por@reset_val
  3698                           
  3699                           ;CW201x.c: 308: ret = cw_write(0xA, &reset_val);
  3700  0423  3037               	movlw	(low (cw_por@reset_val| 0))& (0+255)
  3701  0424  00B5               	movwf	??_cw_por
  3702  0425  0835               	movf	??_cw_por,w
  3703  0426  00A4               	movwf	cw_write@w_pdata
  3704  0427  300A               	movlw	10
  3705  0428  22EC               	fcall	_cw_write
  3706  0429  0140               	movlb	0	; select bank0
  3707  042A  0825               	movf	?_cw_write+1,w
  3708  042B  00B9               	movwf	cw_por@ret+1
  3709  042C  0824               	movf	?_cw_write,w
  3710  042D  00B8               	movwf	cw_por@ret
  3711                           
  3712                           ;CW201x.c: 309: if (ret)
  3713  042E  0838               	movf	cw_por@ret,w
  3714  042F  0439               	iorwf	cw_por@ret+1,w
  3715  0430  1903               	btfsc	3,2
  3716  0431  2C37               	goto	l2087
  3717                           
  3718                           ;CW201x.c: 310: return -1;
  3719  0432  30FF               	movlw	255
  3720  0433  00B3               	movwf	?_cw_por
  3721  0434  30FF               	movlw	255
  3722  0435  00B4               	movwf	?_cw_por+1
  3723  0436  0008               	return
  3724  0437                     l2087:	
  3725                           
  3726                           ;CW201x.c: 311: CW_Delay100us();
  3727  0437  21B8               	fcall	_CW_Delay100us
  3728                           
  3729                           ;CW201x.c: 313: reset_val = (0x0<<6);
  3730  0438  0140               	movlb	0	; select bank0
  3731  0439  01B7               	clrf	cw_por@reset_val
  3732                           
  3733                           ;CW201x.c: 314: ret = cw_write(0xA, &reset_val);
  3734  043A  3037               	movlw	(low (cw_por@reset_val| 0))& (0+255)
  3735  043B  00B5               	movwf	??_cw_por
  3736  043C  0835               	movf	??_cw_por,w
  3737  043D  00A4               	movwf	cw_write@w_pdata
  3738  043E  300A               	movlw	10
  3739  043F  22EC               	fcall	_cw_write
  3740  0440  0140               	movlb	0	; select bank0
  3741  0441  0825               	movf	?_cw_write+1,w
  3742  0442  00B9               	movwf	cw_por@ret+1
  3743  0443  0824               	movf	?_cw_write,w
  3744  0444  00B8               	movwf	cw_por@ret
  3745                           
  3746                           ;CW201x.c: 315: if (ret)
  3747  0445  0838               	movf	cw_por@ret,w
  3748  0446  0439               	iorwf	cw_por@ret+1,w
  3749  0447  1903               	btfsc	3,2
  3750  0448  2C4E               	goto	l2099
  3751                           
  3752                           ;CW201x.c: 316: return -1;
  3753  0449  30FF               	movlw	255
  3754  044A  00B3               	movwf	?_cw_por
  3755  044B  30FF               	movlw	255
  3756  044C  00B4               	movwf	?_cw_por+1
  3757  044D  0008               	return
  3758  044E                     l2099:	
  3759                           
  3760                           ;CW201x.c: 317: CW_Delay100us();
  3761  044E  21B8               	fcall	_CW_Delay100us
  3762                           
  3763                           ;CW201x.c: 319: ret = cw_init();
  3764  044F  2719               	fcall	_cw_init
  3765  0450  0140               	movlb	0	; select bank0
  3766  0451  00B5               	movwf	??_cw_por
  3767  0452  01B6               	clrf	??_cw_por+1
  3768  0453  0835               	movf	??_cw_por,w
  3769  0454  00B8               	movwf	cw_por@ret
  3770  0455  0836               	movf	??_cw_por+1,w
  3771  0456  00B9               	movwf	cw_por@ret+1
  3772                           
  3773                           ;CW201x.c: 320: if (ret)
  3774  0457  0838               	movf	cw_por@ret,w
  3775  0458  0439               	iorwf	cw_por@ret+1,w
  3776  0459  1903               	btfsc	3,2
  3777  045A  2C60               	goto	l2109
  3778                           
  3779                           ;CW201x.c: 321: return ret;
  3780  045B  0839               	movf	cw_por@ret+1,w
  3781  045C  00B4               	movwf	?_cw_por+1
  3782  045D  0838               	movf	cw_por@ret,w
  3783  045E  00B3               	movwf	?_cw_por
  3784  045F  0008               	return
  3785  0460                     l2109:	
  3786                           
  3787                           ;CW201x.c: 322: return 0;
  3788  0460  01B3               	clrf	?_cw_por
  3789  0461  01B4               	clrf	?_cw_por+1
  3790  0462  0008               	return
  3791  0463                     __end_of_cw_por:	
  3792                           
  3793                           	psect	text12
  3794  017E                     __ptext12:	
  3795 ;; *************** function _cw_bat_init *****************
  3796 ;; Defined at:
  3797 ;;		line 577 in file "CW201x.c"
  3798 ;; Parameters:    Size  Location     Type
  3799 ;;		None
  3800 ;; Auto vars:     Size  Location     Type
  3801 ;;  ret             1   21[BANK0 ] unsigned char 
  3802 ;;  loop            1   20[BANK0 ] unsigned char 
  3803 ;; Return value:  Size  Location     Type
  3804 ;;                  1    wreg      unsigned char 
  3805 ;; Registers used:
  3806 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3807 ;; Tracked objects:
  3808 ;;		On entry : 0/0
  3809 ;;		On exit  : 0/0
  3810 ;;		Unchanged: 0/0
  3811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3812 ;;      Params:         0       0       0       0
  3813 ;;      Locals:         0       2       0       0
  3814 ;;      Temps:          0       1       0       0
  3815 ;;      Totals:         0       3       0       0
  3816 ;;Total ram usage:        3 bytes
  3817 ;; Hardware stack levels used:    1
  3818 ;; Hardware stack levels required when called:    6
  3819 ;; This function calls:
  3820 ;;		_cw_init
  3821 ;; This function is called by:
  3822 ;;		_main
  3823 ;; This function uses a non-reentrant model
  3824 ;;
  3825                           
  3826                           
  3827                           ;psect for function _cw_bat_init
  3828  017E                     _cw_bat_init:	
  3829                           
  3830                           ;CW201x.c: 579: unsigned char ret;
  3831                           ;CW201x.c: 580: unsigned char loop = 0;
  3832                           
  3833                           ;incstack = 0
  3834                           ; Regs used in _cw_bat_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3835  017E  0140               	movlb	0	; select bank0
  3836  017F  01B4               	clrf	cw_bat_init@loop
  3837  0180                     l2341:	
  3838                           ;CW201x.c: 584: while((loop++ < 200) && (ret != 0))
  3839                           
  3840                           ;CW201x.c: 583: ret = cw_init();
  3841                           
  3842                           
  3843                           ;CW201x.c: 585: {
  3844                           ;CW201x.c: 586: ret = cw_init();
  3845  0180  2719               	fcall	_cw_init
  3846  0181  0140               	movlb	0	; select bank0
  3847  0182  00B3               	movwf	??_cw_bat_init
  3848  0183  0833               	movf	??_cw_bat_init,w
  3849  0184  00B5               	movwf	cw_bat_init@ret
  3850  0185  0834               	movf	cw_bat_init@loop,w
  3851  0186  0AB4               	incf	cw_bat_init@loop,f
  3852  0187  00B3               	movwf	??_cw_bat_init
  3853  0188  30C8               	movlw	200
  3854  0189  0233               	subwf	??_cw_bat_init,w
  3855  018A  1803               	skipnc
  3856  018B  298F               	goto	l2347
  3857  018C  0835               	movf	cw_bat_init@ret,w
  3858  018D  1D03               	btfss	3,2
  3859  018E  2980               	goto	l2341
  3860  018F                     l2347:	
  3861                           
  3862                           ;CW201x.c: 587: }
  3863                           ;CW201x.c: 589: cw_bat.usb_online = 0;
  3864  018F  01C7               	clrf	_cw_bat
  3865                           
  3866                           ;CW201x.c: 590: cw_bat.capacity = 2;
  3867  0190  3002               	movlw	2
  3868  0191  00C8               	movwf	_cw_bat+1
  3869  0192  3000               	movlw	0
  3870  0193  00C9               	movwf	_cw_bat+2
  3871                           
  3872                           ;CW201x.c: 591: cw_bat.voltage = 0;
  3873  0194  01CA               	clrf	_cw_bat+3
  3874  0195  01CB               	clrf	_cw_bat+4
  3875                           
  3876                           ;CW201x.c: 595: cw_bat.alt = 0;
  3877  0196  01CC               	clrf	_cw_bat+5
  3878                           
  3879                           ;CW201x.c: 597: return ret;
  3880  0197  0835               	movf	cw_bat_init@ret,w
  3881  0198  0008               	return
  3882  0199                     __end_of_cw_bat_init:	
  3883                           
  3884                           	psect	text13
  3885  0719                     __ptext13:	
  3886 ;; *************** function _cw_init *****************
  3887 ;; Defined at:
  3888 ;;		line 139 in file "CW201x.c"
  3889 ;; Parameters:    Size  Location     Type
  3890 ;;		None
  3891 ;; Auto vars:     Size  Location     Type
  3892 ;;  ret             2   16[BANK0 ] unsigned int 
  3893 ;;  reg_val         1   18[BANK0 ] unsigned char 
  3894 ;;  i               1   15[BANK0 ] unsigned char 
  3895 ;; Return value:  Size  Location     Type
  3896 ;;                  1    wreg      unsigned char 
  3897 ;; Registers used:
  3898 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3899 ;; Tracked objects:
  3900 ;;		On entry : 0/0
  3901 ;;		On exit  : 0/0
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3904 ;;      Params:         0       0       0       0
  3905 ;;      Locals:         0       4       0       0
  3906 ;;      Temps:          0       2       0       0
  3907 ;;      Totals:         0       6       0       0
  3908 ;;Total ram usage:        6 bytes
  3909 ;; Hardware stack levels used:    1
  3910 ;; Hardware stack levels required when called:    5
  3911 ;; This function calls:
  3912 ;;		_CW_Delay10ms
  3913 ;;		_cw_read
  3914 ;;		_cw_update_config_info
  3915 ;;		_cw_write
  3916 ;; This function is called by:
  3917 ;;		_cw_por
  3918 ;;		_cw_bat_init
  3919 ;; This function uses a non-reentrant model
  3920 ;;
  3921                           
  3922                           
  3923                           ;psect for function _cw_init
  3924  0719                     _cw_init:	
  3925                           
  3926                           ;CW201x.c: 141: unsigned ret;
  3927                           ;CW201x.c: 142: unsigned char i;
  3928                           ;CW201x.c: 143: unsigned char reg_val = (0x0<<6);
  3929                           
  3930                           ;incstack = 0
  3931                           ; Regs used in _cw_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3932  0719  0140               	movlb	0	; select bank0
  3933  071A  01B2               	clrf	cw_init@reg_val
  3934                           
  3935                           ;CW201x.c: 144: const unsigned char cw_bat_config_info[64] = {
  3936                           ;CW201x.c: 145: 0x14,0xA6,0x70,0x6C,0x6C,0x67,0x64,
  3937                           ;CW201x.c: 146: 0x62,0x60,0x5C,0x59,0x4E,0x50,0x42,
  3938                           ;CW201x.c: 147: 0x2E,0x26,0x25,0x24,0x27,0x2E,0x41,
  3939                           ;CW201x.c: 148: 0x5A,0x6D,0x4C,0x39,0xD7,0x06,0x66,
  3940                           ;CW201x.c: 149: 0x00,0x01,0x05,0x34,0x61,0x76,0x79,
  3941                           ;CW201x.c: 150: 0x7D,0x42,0x1E,0xA4,0x00,0x27,0x5A,
  3942                           ;CW201x.c: 151: 0x52,0x87,0x8F,0x91,0x94,0x52,0x82,
  3943                           ;CW201x.c: 152: 0x8C,0x92,0x96,0x2B,0x59,0x6E,0xCB,
  3944                           ;CW201x.c: 153: 0x2F,0x7D,0x72,0xA5,0xB5,0xC1,0x94,
  3945  071B  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  3946  071C  00AD               	movwf	??_cw_init
  3947  071D  082D               	movf	??_cw_init,w
  3948  071E  00A4               	movwf	cw_write@w_pdata
  3949  071F  300A               	movlw	10
  3950  0720  22EC               	fcall	_cw_write
  3951  0721  0140               	movlb	0	; select bank0
  3952  0722  0825               	movf	?_cw_write+1,w
  3953  0723  00B1               	movwf	cw_init@ret+1
  3954  0724  0824               	movf	?_cw_write,w
  3955  0725  00B0               	movwf	cw_init@ret
  3956                           
  3957                           ;CW201x.c: 159: if(ret)
  3958  0726  0830               	movf	cw_init@ret,w
  3959  0727  0431               	iorwf	cw_init@ret+1,w
  3960  0728  1903               	btfsc	3,2
  3961  0729  2F2C               	goto	l1959
  3962                           
  3963                           ;CW201x.c: 160: {
  3964                           ;CW201x.c: 161: return 1;
  3965  072A  3001               	movlw	1
  3966  072B  0008               	return
  3967  072C                     l1959:	
  3968                           
  3969                           ;CW201x.c: 162: }
  3970                           ;CW201x.c: 165: ret = cw_read(0x8, &reg_val);
  3971  072C  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  3972  072D  00AD               	movwf	??_cw_init
  3973  072E  082D               	movf	??_cw_init,w
  3974  072F  00A4               	movwf	cw_read@r_pdata
  3975  0730  3008               	movlw	8
  3976  0731  231E               	fcall	_cw_read
  3977  0732  0140               	movlb	0	; select bank0
  3978  0733  0825               	movf	?_cw_read+1,w
  3979  0734  00B1               	movwf	cw_init@ret+1
  3980  0735  0824               	movf	?_cw_read,w
  3981  0736  00B0               	movwf	cw_init@ret
  3982                           
  3983                           ;CW201x.c: 166: if(ret)
  3984  0737  0830               	movf	cw_init@ret,w
  3985  0738  0431               	iorwf	cw_init@ret+1,w
  3986  0739  1903               	btfsc	3,2
  3987  073A  2F3D               	goto	l1967
  3988                           
  3989                           ;CW201x.c: 167: {
  3990                           ;CW201x.c: 168: return 1;
  3991  073B  3001               	movlw	1
  3992  073C  0008               	return
  3993  073D                     l1967:	
  3994                           
  3995                           ;CW201x.c: 169: }
  3996                           ;CW201x.c: 170: if((reg_val & 0xf8) != (0x0<<3))
  3997  073D  0832               	movf	cw_init@reg_val,w
  3998  073E  39F8               	andlw	248
  3999  073F  1903               	btfsc	3,2
  4000  0740  2F56               	goto	l1979
  4001                           
  4002                           ;CW201x.c: 174: reg_val |= (0x0<<3);
  4003  0741  3007               	movlw	7
  4004  0742  00AD               	movwf	??_cw_init
  4005  0743  082D               	movf	??_cw_init,w
  4006  0744  05B2               	andwf	cw_init@reg_val,f
  4007                           
  4008                           ;CW201x.c: 175: ret = cw_write(0x8, &reg_val);
  4009  0745  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4010  0746  00AD               	movwf	??_cw_init
  4011  0747  082D               	movf	??_cw_init,w
  4012  0748  00A4               	movwf	cw_write@w_pdata
  4013  0749  3008               	movlw	8
  4014  074A  22EC               	fcall	_cw_write
  4015  074B  0140               	movlb	0	; select bank0
  4016  074C  0825               	movf	?_cw_write+1,w
  4017  074D  00B1               	movwf	cw_init@ret+1
  4018  074E  0824               	movf	?_cw_write,w
  4019  074F  00B0               	movwf	cw_init@ret
  4020                           
  4021                           ;CW201x.c: 176: if(ret)
  4022  0750  0830               	movf	cw_init@ret,w
  4023  0751  0431               	iorwf	cw_init@ret+1,w
  4024  0752  1903               	btfsc	3,2
  4025  0753  2F56               	goto	l1979
  4026                           
  4027                           ;CW201x.c: 177: {
  4028                           ;CW201x.c: 178: return 1;
  4029  0754  3001               	movlw	1
  4030  0755  0008               	return
  4031  0756                     l1979:	
  4032                           
  4033                           ;CW201x.c: 179: }
  4034                           ;CW201x.c: 180: }
  4035                           ;CW201x.c: 183: ret = cw_read(0x8, &reg_val);
  4036  0756  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4037  0757  00AD               	movwf	??_cw_init
  4038  0758  082D               	movf	??_cw_init,w
  4039  0759  00A4               	movwf	cw_read@r_pdata
  4040  075A  3008               	movlw	8
  4041  075B  231E               	fcall	_cw_read
  4042  075C  0140               	movlb	0	; select bank0
  4043  075D  0825               	movf	?_cw_read+1,w
  4044  075E  00B1               	movwf	cw_init@ret+1
  4045  075F  0824               	movf	?_cw_read,w
  4046  0760  00B0               	movwf	cw_init@ret
  4047                           
  4048                           ;CW201x.c: 184: if(ret)
  4049  0761  0830               	movf	cw_init@ret,w
  4050  0762  0431               	iorwf	cw_init@ret+1,w
  4051  0763  1903               	btfsc	3,2
  4052  0764  2F67               	goto	l241
  4053                           
  4054                           ;CW201x.c: 185: {
  4055                           ;CW201x.c: 186: return 1;
  4056  0765  3001               	movlw	1
  4057  0766  0008               	return
  4058  0767                     l241:	
  4059                           
  4060                           ;CW201x.c: 187: }
  4061                           ;CW201x.c: 188: if(!(reg_val & (0x1<<1)))
  4062  0767  18B2               	btfsc	cw_init@reg_val,1
  4063  0768  2F77               	goto	l1995
  4064                           
  4065                           ;CW201x.c: 189: {
  4066                           ;CW201x.c: 191: ret = cw_update_config_info();
  4067  0769  2583               	fcall	_cw_update_config_info
  4068  076A  0140               	movlb	0	; select bank0
  4069  076B  00AD               	movwf	??_cw_init
  4070  076C  01AE               	clrf	??_cw_init+1
  4071  076D  082D               	movf	??_cw_init,w
  4072  076E  00B0               	movwf	cw_init@ret
  4073  076F  082E               	movf	??_cw_init+1,w
  4074  0770  00B1               	movwf	cw_init@ret+1
  4075                           
  4076                           ;CW201x.c: 192: if(ret)
  4077  0771  0830               	movf	cw_init@ret,w
  4078  0772  0431               	iorwf	cw_init@ret+1,w
  4079  0773  1903               	btfsc	3,2
  4080  0774  2FB3               	goto	l2027
  4081                           
  4082                           ;CW201x.c: 193: {
  4083                           ;CW201x.c: 194: return ret;
  4084  0775  0830               	movf	cw_init@ret,w
  4085  0776  0008               	return
  4086  0777                     l1995:	
  4087                           ;CW201x.c: 195: }
  4088                           ;CW201x.c: 196: }
  4089                           
  4090                           
  4091                           ;CW201x.c: 197: else
  4092                           ;CW201x.c: 198: {
  4093                           ;CW201x.c: 199: for(i = 0; i < 64; i++)
  4094  0777  01AF               	clrf	cw_init@i
  4095  0778  3040               	movlw	64
  4096  0779  022F               	subwf	cw_init@i,w
  4097  077A  1803               	btfsc	3,0
  4098  077B  2FA1               	goto	l2017
  4099  077C                     l2001:	
  4100                           
  4101                           ;CW201x.c: 200: {
  4102                           ;CW201x.c: 201: ret = cw_read(0x10 +i, &reg_val);
  4103  077C  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4104  077D  00AD               	movwf	??_cw_init
  4105  077E  082D               	movf	??_cw_init,w
  4106  077F  00A4               	movwf	cw_read@r_pdata
  4107  0780  082F               	movf	cw_init@i,w
  4108  0781  3E10               	addlw	16
  4109  0782  231E               	fcall	_cw_read
  4110  0783  0140               	movlb	0	; select bank0
  4111  0784  0825               	movf	?_cw_read+1,w
  4112  0785  00B1               	movwf	cw_init@ret+1
  4113  0786  0824               	movf	?_cw_read,w
  4114  0787  00B0               	movwf	cw_init@ret
  4115                           
  4116                           ;CW201x.c: 202: if(ret)
  4117  0788  0830               	movf	cw_init@ret,w
  4118  0789  0431               	iorwf	cw_init@ret+1,w
  4119  078A  1903               	btfsc	3,2
  4120  078B  2F8E               	goto	l2009
  4121                           
  4122                           ;CW201x.c: 203: {
  4123                           ;CW201x.c: 204: return 1;
  4124  078C  3001               	movlw	1
  4125  078D  0008               	return
  4126  078E                     l2009:	
  4127                           
  4128                           ;CW201x.c: 205: }
  4129                           ;CW201x.c: 206: if(cw_bat_config_info[i] != reg_val)
  4130  078E  082F               	movf	cw_init@i,w
  4131  078F  3E96               	addlw	low (cw_init@cw_bat_config_info| (0+32768))
  4132  0790  0084               	movwf	4
  4133  0791  3083               	movlw	high (cw_init@cw_bat_config_info| (0+32768))
  4134  0792  1803               	skipnc
  4135  0793  3E01               	addlw	1
  4136  0794  0085               	movwf	5
  4137  0795  0800               	movf	0,w	;code access
  4138  0796  0632               	xorwf	cw_init@reg_val,w
  4139  0797  1D03               	btfss	3,2
  4140  0798  2FA1               	goto	l2017
  4141                           
  4142                           ;CW201x.c: 207: {
  4143                           ;CW201x.c: 208: break;
  4144  0799  3001               	movlw	1
  4145  079A  00AD               	movwf	??_cw_init
  4146  079B  082D               	movf	??_cw_init,w
  4147  079C  07AF               	addwf	cw_init@i,f
  4148  079D  3040               	movlw	64
  4149  079E  022F               	subwf	cw_init@i,w
  4150  079F  1C03               	skipc
  4151  07A0  2F7C               	goto	l2001
  4152  07A1                     l2017:	
  4153                           
  4154                           ;CW201x.c: 209: }
  4155                           ;CW201x.c: 210: }
  4156                           ;CW201x.c: 211: if(i != 64)
  4157  07A1  3040               	movlw	64
  4158  07A2  062F               	xorwf	cw_init@i,w
  4159  07A3  1903               	btfsc	3,2
  4160  07A4  2FB3               	goto	l2027
  4161                           
  4162                           ;CW201x.c: 212: {
  4163                           ;CW201x.c: 214: ret = cw_update_config_info();
  4164  07A5  2583               	fcall	_cw_update_config_info
  4165  07A6  0140               	movlb	0	; select bank0
  4166  07A7  00AD               	movwf	??_cw_init
  4167  07A8  01AE               	clrf	??_cw_init+1
  4168  07A9  082D               	movf	??_cw_init,w
  4169  07AA  00B0               	movwf	cw_init@ret
  4170  07AB  082E               	movf	??_cw_init+1,w
  4171  07AC  00B1               	movwf	cw_init@ret+1
  4172                           
  4173                           ;CW201x.c: 215: if(ret)
  4174  07AD  0830               	movf	cw_init@ret,w
  4175  07AE  0431               	iorwf	cw_init@ret+1,w
  4176  07AF  1903               	btfsc	3,2
  4177  07B0  2FB3               	goto	l2027
  4178                           
  4179                           ;CW201x.c: 216: {
  4180                           ;CW201x.c: 217: return ret;
  4181  07B1  0830               	movf	cw_init@ret,w
  4182  07B2  0008               	return
  4183  07B3                     l2027:	
  4184                           
  4185                           ;CW201x.c: 218: }
  4186                           ;CW201x.c: 219: }
  4187                           ;CW201x.c: 220: }
  4188                           ;CW201x.c: 222: for (i = 0; i < 30; i++) {
  4189  07B3  01AF               	clrf	cw_init@i
  4190  07B4  301E               	movlw	30
  4191  07B5  022F               	subwf	cw_init@i,w
  4192  07B6  1803               	btfsc	3,0
  4193  07B7  2FDB               	goto	l2053
  4194  07B8                     l2033:	
  4195                           
  4196                           ;CW201x.c: 223: CW_Delay10ms(10);
  4197  07B8  300A               	movlw	10
  4198  07B9  00F0               	movwf	CW_Delay10ms@c
  4199  07BA  3000               	movlw	0
  4200  07BB  00F1               	movwf	CW_Delay10ms@c+1
  4201  07BC  21F8               	fcall	_CW_Delay10ms
  4202                           
  4203                           ;CW201x.c: 224: ret = cw_read(0x4, &reg_val);
  4204  07BD  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4205  07BE  0140               	movlb	0	; select bank0
  4206  07BF  00AD               	movwf	??_cw_init
  4207  07C0  082D               	movf	??_cw_init,w
  4208  07C1  00A4               	movwf	cw_read@r_pdata
  4209  07C2  3004               	movlw	4
  4210  07C3  231E               	fcall	_cw_read
  4211  07C4  0140               	movlb	0	; select bank0
  4212  07C5  0825               	movf	?_cw_read+1,w
  4213  07C6  00B1               	movwf	cw_init@ret+1
  4214  07C7  0824               	movf	?_cw_read,w
  4215  07C8  00B0               	movwf	cw_init@ret
  4216                           
  4217                           ;CW201x.c: 225: if (ret)
  4218  07C9  0830               	movf	cw_init@ret,w
  4219  07CA  0431               	iorwf	cw_init@ret+1,w
  4220  07CB  1903               	btfsc	3,2
  4221  07CC  2FCF               	goto	l2045
  4222                           
  4223                           ;CW201x.c: 226: return 1;
  4224  07CD  3001               	movlw	1
  4225  07CE  0008               	return
  4226  07CF                     l2045:	
  4227                           
  4228                           ;CW201x.c: 227: else if (reg_val <= 100)
  4229  07CF  3065               	movlw	101
  4230  07D0  0232               	subwf	cw_init@reg_val,w
  4231  07D1  1C03               	btfss	3,0
  4232  07D2  2FDB               	goto	l2053
  4233                           
  4234                           ;CW201x.c: 228: break;
  4235  07D3  3001               	movlw	1
  4236  07D4  00AD               	movwf	??_cw_init
  4237  07D5  082D               	movf	??_cw_init,w
  4238  07D6  07AF               	addwf	cw_init@i,f
  4239  07D7  301E               	movlw	30
  4240  07D8  022F               	subwf	cw_init@i,w
  4241  07D9  1C03               	skipc
  4242  07DA  2FB8               	goto	l2033
  4243  07DB                     l2053:	
  4244                           
  4245                           ;CW201x.c: 229: }
  4246                           ;CW201x.c: 231: if (i >=30){
  4247  07DB  301E               	movlw	30
  4248  07DC  022F               	subwf	cw_init@i,w
  4249  07DD  1C03               	skipc
  4250  07DE  2FF0               	goto	l2063
  4251                           
  4252                           ;CW201x.c: 232: reg_val = (0x3<<6);
  4253  07DF  30C0               	movlw	192
  4254  07E0  00AD               	movwf	??_cw_init
  4255  07E1  082D               	movf	??_cw_init,w
  4256  07E2  00B2               	movwf	cw_init@reg_val
  4257                           
  4258                           ;CW201x.c: 233: ret = cw_write(0xA, &reg_val);
  4259  07E3  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4260  07E4  00AD               	movwf	??_cw_init
  4261  07E5  082D               	movf	??_cw_init,w
  4262  07E6  00A4               	movwf	cw_write@w_pdata
  4263  07E7  300A               	movlw	10
  4264  07E8  22EC               	fcall	_cw_write
  4265  07E9  0140               	movlb	0	; select bank0
  4266  07EA  0825               	movf	?_cw_write+1,w
  4267  07EB  00B1               	movwf	cw_init@ret+1
  4268  07EC  0824               	movf	?_cw_write,w
  4269  07ED  00B0               	movwf	cw_init@ret
  4270                           
  4271                           ;CW201x.c: 235: return 4;
  4272  07EE  3004               	movlw	4
  4273  07EF  0008               	return
  4274  07F0                     l2063:	
  4275                           
  4276                           ;CW201x.c: 236: }
  4277                           ;CW201x.c: 237: return 0;
  4278  07F0  3000               	movlw	0
  4279  07F1  0008               	return
  4280  07F2                     __end_of_cw_init:	
  4281                           
  4282                           	psect	text14
  4283  0583                     __ptext14:	
  4284 ;; *************** function _cw_update_config_info *****************
  4285 ;; Defined at:
  4286 ;;		line 53 in file "CW201x.c"
  4287 ;; Parameters:    Size  Location     Type
  4288 ;;		None
  4289 ;; Auto vars:     Size  Location     Type
  4290 ;;  ret             2    9[BANK0 ] int 
  4291 ;;  reg_val         1   12[BANK0 ] unsigned char 
  4292 ;;  i               1   11[BANK0 ] unsigned char 
  4293 ;;  reset_val       1    8[BANK0 ] unsigned char 
  4294 ;; Return value:  Size  Location     Type
  4295 ;;                  1    wreg      unsigned char 
  4296 ;; Registers used:
  4297 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4298 ;; Tracked objects:
  4299 ;;		On entry : 0/0
  4300 ;;		On exit  : 0/0
  4301 ;;		Unchanged: 0/0
  4302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4303 ;;      Params:         0       0       0       0
  4304 ;;      Locals:         0       5       0       0
  4305 ;;      Temps:          0       1       0       0
  4306 ;;      Totals:         0       6       0       0
  4307 ;;Total ram usage:        6 bytes
  4308 ;; Hardware stack levels used:    1
  4309 ;; Hardware stack levels required when called:    4
  4310 ;; This function calls:
  4311 ;;		_CW_Delay100us
  4312 ;;		_cw_read
  4313 ;;		_cw_write
  4314 ;; This function is called by:
  4315 ;;		_cw_init
  4316 ;; This function uses a non-reentrant model
  4317 ;;
  4318                           
  4319                           
  4320                           ;psect for function _cw_update_config_info
  4321  0583                     _cw_update_config_info:	
  4322                           
  4323                           ;CW201x.c: 55: int ret = 0;
  4324                           
  4325                           ;incstack = 0
  4326                           ; Regs used in _cw_update_config_info: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4327  0583  0140               	movlb	0	; select bank0
  4328  0584  01A9               	clrf	cw_update_config_info@ret
  4329  0585  01AA               	clrf	cw_update_config_info@ret+1
  4330                           
  4331                           ;CW201x.c: 56: unsigned char i;
  4332                           ;CW201x.c: 57: unsigned char reset_val;
  4333                           ;CW201x.c: 58: unsigned char reg_val;
  4334                           ;CW201x.c: 59: const unsigned char cw_bat_config_info[64] = {
  4335                           ;CW201x.c: 60: 0x14,0xA6,0x70,0x6C,0x6C,0x67,0x64,
  4336                           ;CW201x.c: 61: 0x62,0x60,0x5C,0x59,0x4E,0x50,0x42,
  4337                           ;CW201x.c: 62: 0x2E,0x26,0x25,0x24,0x27,0x2E,0x41,
  4338                           ;CW201x.c: 63: 0x5A,0x6D,0x4C,0x39,0xD7,0x06,0x66,
  4339                           ;CW201x.c: 64: 0x00,0x01,0x05,0x34,0x61,0x76,0x79,
  4340                           ;CW201x.c: 65: 0x7D,0x42,0x1E,0xA4,0x00,0x27,0x5A,
  4341                           ;CW201x.c: 66: 0x52,0x87,0x8F,0x91,0x94,0x52,0x82,
  4342  0586  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4343  0587  00A7               	movwf	??_cw_update_config_info
  4344  0588  0827               	movf	??_cw_update_config_info,w
  4345  0589  00A4               	movwf	cw_read@r_pdata
  4346  058A  300A               	movlw	10
  4347  058B  231E               	fcall	_cw_read
  4348  058C  0140               	movlb	0	; select bank0
  4349  058D  0825               	movf	?_cw_read+1,w
  4350  058E  00AA               	movwf	cw_update_config_info@ret+1
  4351  058F  0824               	movf	?_cw_read,w
  4352  0590  00A9               	movwf	cw_update_config_info@ret
  4353                           
  4354                           ;CW201x.c: 74: if(ret)
  4355  0591  0829               	movf	cw_update_config_info@ret,w
  4356  0592  042A               	iorwf	cw_update_config_info@ret+1,w
  4357  0593  1903               	btfsc	3,2
  4358  0594  2D97               	goto	l1855
  4359                           
  4360                           ;CW201x.c: 75: {
  4361                           ;CW201x.c: 76: return 1;
  4362  0595  3001               	movlw	1
  4363  0596  0008               	return
  4364  0597                     l1855:	
  4365                           
  4366                           ;CW201x.c: 77: }
  4367                           ;CW201x.c: 78: if((reg_val & (0x3<<6)) == (0x3<<6))
  4368  0597  30C0               	movlw	192
  4369  0598  052C               	andwf	cw_update_config_info@reg_val,w
  4370  0599  00A7               	movwf	??_cw_update_config_info
  4371  059A  30C0               	movlw	192
  4372  059B  0627               	xorwf	??_cw_update_config_info,w
  4373  059C  1D03               	btfss	3,2
  4374  059D  2DA0               	goto	l1861
  4375                           
  4376                           ;CW201x.c: 79: {
  4377                           ;CW201x.c: 80: return 2;
  4378  059E  3002               	movlw	2
  4379  059F  0008               	return
  4380  05A0                     l1861:	
  4381                           
  4382                           ;CW201x.c: 81: }
  4383                           ;CW201x.c: 83: for(i = 0; i < 64; i++)
  4384  05A0  01AB               	clrf	cw_update_config_info@i
  4385  05A1  3040               	movlw	64
  4386  05A2  022B               	subwf	cw_update_config_info@i,w
  4387  05A3  1803               	btfsc	3,0
  4388  05A4  2DCA               	goto	l1881
  4389  05A5                     l1867:	
  4390                           
  4391                           ;CW201x.c: 84: {
  4392                           ;CW201x.c: 85: reg_val = cw_bat_config_info[i];
  4393  05A5  082B               	movf	cw_update_config_info@i,w
  4394  05A6  3E56               	addlw	low (cw_update_config_info@cw_bat_config_info| (0+32768))
  4395  05A7  0084               	movwf	4
  4396  05A8  3083               	movlw	high (cw_update_config_info@cw_bat_config_info| (0+32768))
  4397  05A9  1803               	skipnc
  4398  05AA  3E01               	addlw	1
  4399  05AB  0085               	movwf	5
  4400  05AC  0800               	movf	0,w	;code access
  4401  05AD  00A7               	movwf	??_cw_update_config_info
  4402  05AE  0827               	movf	??_cw_update_config_info,w
  4403  05AF  00AC               	movwf	cw_update_config_info@reg_val
  4404                           
  4405                           ;CW201x.c: 86: ret = cw_write(0x10+i, &reg_val);
  4406  05B0  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4407  05B1  00A7               	movwf	??_cw_update_config_info
  4408  05B2  0827               	movf	??_cw_update_config_info,w
  4409  05B3  00A4               	movwf	cw_write@w_pdata
  4410  05B4  082B               	movf	cw_update_config_info@i,w
  4411  05B5  3E10               	addlw	16
  4412  05B6  22EC               	fcall	_cw_write
  4413  05B7  0140               	movlb	0	; select bank0
  4414  05B8  0825               	movf	?_cw_write+1,w
  4415  05B9  00AA               	movwf	cw_update_config_info@ret+1
  4416  05BA  0824               	movf	?_cw_write,w
  4417  05BB  00A9               	movwf	cw_update_config_info@ret
  4418                           
  4419                           ;CW201x.c: 87: if(ret)
  4420  05BC  0829               	movf	cw_update_config_info@ret,w
  4421  05BD  042A               	iorwf	cw_update_config_info@ret+1,w
  4422  05BE  1903               	btfsc	3,2
  4423  05BF  2DC2               	goto	l1877
  4424                           
  4425                           ;CW201x.c: 88: {
  4426                           ;CW201x.c: 89: return 1;
  4427  05C0  3001               	movlw	1
  4428  05C1  0008               	return
  4429  05C2                     l1877:	
  4430  05C2  3001               	movlw	1
  4431  05C3  00A7               	movwf	??_cw_update_config_info
  4432  05C4  0827               	movf	??_cw_update_config_info,w
  4433  05C5  07AB               	addwf	cw_update_config_info@i,f
  4434  05C6  3040               	movlw	64
  4435  05C7  022B               	subwf	cw_update_config_info@i,w
  4436  05C8  1C03               	skipc
  4437  05C9  2DA5               	goto	l1867
  4438  05CA                     l1881:	
  4439                           
  4440                           ;CW201x.c: 90: }
  4441                           ;CW201x.c: 91: }
  4442                           ;CW201x.c: 94: for(i = 0; i < 64; i++)
  4443  05CA  01AB               	clrf	cw_update_config_info@i
  4444  05CB  3040               	movlw	64
  4445  05CC  022B               	subwf	cw_update_config_info@i,w
  4446  05CD  1803               	btfsc	3,0
  4447  05CE  2DF6               	goto	l1905
  4448  05CF                     l1887:	
  4449                           
  4450                           ;CW201x.c: 95: {
  4451                           ;CW201x.c: 96: ret = cw_read(0x10+i, &reg_val);
  4452  05CF  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4453  05D0  00A7               	movwf	??_cw_update_config_info
  4454  05D1  0827               	movf	??_cw_update_config_info,w
  4455  05D2  00A4               	movwf	cw_read@r_pdata
  4456  05D3  082B               	movf	cw_update_config_info@i,w
  4457  05D4  3E10               	addlw	16
  4458  05D5  231E               	fcall	_cw_read
  4459  05D6  0140               	movlb	0	; select bank0
  4460  05D7  0825               	movf	?_cw_read+1,w
  4461  05D8  00AA               	movwf	cw_update_config_info@ret+1
  4462  05D9  0824               	movf	?_cw_read,w
  4463  05DA  00A9               	movwf	cw_update_config_info@ret
  4464                           
  4465                           ;CW201x.c: 97: if(ret)
  4466  05DB  0829               	movf	cw_update_config_info@ret,w
  4467  05DC  042A               	iorwf	cw_update_config_info@ret+1,w
  4468  05DD  1903               	btfsc	3,2
  4469  05DE  2DE1               	goto	l1895
  4470                           
  4471                           ;CW201x.c: 98: {
  4472                           ;CW201x.c: 99: return 1;
  4473  05DF  3001               	movlw	1
  4474  05E0  0008               	return
  4475  05E1                     l1895:	
  4476                           
  4477                           ;CW201x.c: 100: }
  4478                           ;CW201x.c: 101: if(reg_val != cw_bat_config_info[i])
  4479  05E1  082B               	movf	cw_update_config_info@i,w
  4480  05E2  3E56               	addlw	low (cw_update_config_info@cw_bat_config_info| (0+32768))
  4481  05E3  0084               	movwf	4
  4482  05E4  3083               	movlw	high (cw_update_config_info@cw_bat_config_info| (0+32768))
  4483  05E5  1803               	skipnc
  4484  05E6  3E01               	addlw	1
  4485  05E7  0085               	movwf	5
  4486  05E8  0800               	movf	0,w	;code access
  4487  05E9  062C               	xorwf	cw_update_config_info@reg_val,w
  4488  05EA  1903               	skipnz
  4489  05EB  2DEE               	goto	l1901
  4490                           
  4491                           ;CW201x.c: 102: {
  4492                           ;CW201x.c: 103: return 3;
  4493  05EC  3003               	movlw	3
  4494  05ED  0008               	return
  4495  05EE                     l1901:	
  4496  05EE  3001               	movlw	1
  4497  05EF  00A7               	movwf	??_cw_update_config_info
  4498  05F0  0827               	movf	??_cw_update_config_info,w
  4499  05F1  07AB               	addwf	cw_update_config_info@i,f
  4500  05F2  3040               	movlw	64
  4501  05F3  022B               	subwf	cw_update_config_info@i,w
  4502  05F4  1C03               	skipc
  4503  05F5  2DCF               	goto	l1887
  4504  05F6                     l1905:	
  4505                           
  4506                           ;CW201x.c: 104: }
  4507                           ;CW201x.c: 105: }
  4508                           ;CW201x.c: 107: ret = cw_read(0x8, &reg_val);
  4509  05F6  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4510  05F7  00A7               	movwf	??_cw_update_config_info
  4511  05F8  0827               	movf	??_cw_update_config_info,w
  4512  05F9  00A4               	movwf	cw_read@r_pdata
  4513  05FA  3008               	movlw	8
  4514  05FB  231E               	fcall	_cw_read
  4515  05FC  0140               	movlb	0	; select bank0
  4516  05FD  0825               	movf	?_cw_read+1,w
  4517  05FE  00AA               	movwf	cw_update_config_info@ret+1
  4518  05FF  0824               	movf	?_cw_read,w
  4519  0600  00A9               	movwf	cw_update_config_info@ret
  4520                           
  4521                           ;CW201x.c: 108: if(ret)
  4522  0601  0829               	movf	cw_update_config_info@ret,w
  4523  0602  042A               	iorwf	cw_update_config_info@ret+1,w
  4524  0603  1903               	btfsc	3,2
  4525  0604  2E07               	goto	l228
  4526                           
  4527                           ;CW201x.c: 109: {
  4528                           ;CW201x.c: 110: return 1;
  4529  0605  3001               	movlw	1
  4530  0606  0008               	return
  4531  0607                     l228:	
  4532                           
  4533                           ;CW201x.c: 111: }
  4534                           ;CW201x.c: 112: reg_val |= (0x1<<1);
  4535  0607  14AC               	bsf	cw_update_config_info@reg_val,1
  4536                           
  4537                           ;CW201x.c: 114: reg_val |= (0x0<<3);
  4538  0608  3007               	movlw	7
  4539  0609  00A7               	movwf	??_cw_update_config_info
  4540  060A  0827               	movf	??_cw_update_config_info,w
  4541  060B  05AC               	andwf	cw_update_config_info@reg_val,f
  4542                           
  4543                           ;CW201x.c: 115: ret = cw_write(0x8, &reg_val);
  4544  060C  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4545  060D  00A7               	movwf	??_cw_update_config_info
  4546  060E  0827               	movf	??_cw_update_config_info,w
  4547  060F  00A4               	movwf	cw_write@w_pdata
  4548  0610  3008               	movlw	8
  4549  0611  22EC               	fcall	_cw_write
  4550  0612  0140               	movlb	0	; select bank0
  4551  0613  0825               	movf	?_cw_write+1,w
  4552  0614  00AA               	movwf	cw_update_config_info@ret+1
  4553  0615  0824               	movf	?_cw_write,w
  4554  0616  00A9               	movwf	cw_update_config_info@ret
  4555                           
  4556                           ;CW201x.c: 116: if(ret)
  4557  0617  0829               	movf	cw_update_config_info@ret,w
  4558  0618  042A               	iorwf	cw_update_config_info@ret+1,w
  4559  0619  1903               	btfsc	3,2
  4560  061A  2E1D               	goto	l1923
  4561                           
  4562                           ;CW201x.c: 117: {
  4563                           ;CW201x.c: 118: return 1;
  4564  061B  3001               	movlw	1
  4565  061C  0008               	return
  4566  061D                     l1923:	
  4567                           
  4568                           ;CW201x.c: 119: }
  4569                           ;CW201x.c: 121: reset_val = (0x0<<6);
  4570  061D  01A8               	clrf	cw_update_config_info@reset_val
  4571                           
  4572                           ;CW201x.c: 122: reg_val = (0xf<<0);
  4573  061E  300F               	movlw	15
  4574  061F  00A7               	movwf	??_cw_update_config_info
  4575  0620  0827               	movf	??_cw_update_config_info,w
  4576  0621  00AC               	movwf	cw_update_config_info@reg_val
  4577                           
  4578                           ;CW201x.c: 123: ret = cw_write(0xA, &reg_val);
  4579  0622  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4580  0623  00A7               	movwf	??_cw_update_config_info
  4581  0624  0827               	movf	??_cw_update_config_info,w
  4582  0625  00A4               	movwf	cw_write@w_pdata
  4583  0626  300A               	movlw	10
  4584  0627  22EC               	fcall	_cw_write
  4585  0628  0140               	movlb	0	; select bank0
  4586  0629  0825               	movf	?_cw_write+1,w
  4587  062A  00AA               	movwf	cw_update_config_info@ret+1
  4588  062B  0824               	movf	?_cw_write,w
  4589  062C  00A9               	movwf	cw_update_config_info@ret
  4590                           
  4591                           ;CW201x.c: 124: if(ret)
  4592  062D  0829               	movf	cw_update_config_info@ret,w
  4593  062E  042A               	iorwf	cw_update_config_info@ret+1,w
  4594  062F  1903               	btfsc	3,2
  4595  0630  2E33               	goto	l1935
  4596                           
  4597                           ;CW201x.c: 125: {
  4598                           ;CW201x.c: 126: return 1;
  4599  0631  3001               	movlw	1
  4600  0632  0008               	return
  4601  0633                     l1935:	
  4602                           
  4603                           ;CW201x.c: 127: }
  4604                           ;CW201x.c: 128: CW_Delay100us();
  4605  0633  21B8               	fcall	_CW_Delay100us
  4606                           
  4607                           ;CW201x.c: 129: ret = cw_write(0xA, &reset_val);
  4608  0634  3028               	movlw	(low (cw_update_config_info@reset_val| 0))& (0+255)
  4609  0635  0140               	movlb	0	; select bank0
  4610  0636  00A7               	movwf	??_cw_update_config_info
  4611  0637  0827               	movf	??_cw_update_config_info,w
  4612  0638  00A4               	movwf	cw_write@w_pdata
  4613  0639  300A               	movlw	10
  4614  063A  22EC               	fcall	_cw_write
  4615  063B  0140               	movlb	0	; select bank0
  4616  063C  0825               	movf	?_cw_write+1,w
  4617  063D  00AA               	movwf	cw_update_config_info@ret+1
  4618  063E  0824               	movf	?_cw_write,w
  4619  063F  00A9               	movwf	cw_update_config_info@ret
  4620                           
  4621                           ;CW201x.c: 130: if(ret)
  4622  0640  0829               	movf	cw_update_config_info@ret,w
  4623  0641  042A               	iorwf	cw_update_config_info@ret+1,w
  4624  0642  1903               	btfsc	3,2
  4625  0643  2E46               	goto	l1945
  4626                           
  4627                           ;CW201x.c: 131: {
  4628                           ;CW201x.c: 132: return 1;
  4629  0644  3001               	movlw	1
  4630  0645  0008               	return
  4631  0646                     l1945:	
  4632                           
  4633                           ;CW201x.c: 133: }
  4634                           ;CW201x.c: 134: return 0;
  4635  0646  3000               	movlw	0
  4636  0647  0008               	return
  4637  0648                     __end_of_cw_update_config_info:	
  4638                           
  4639                           	psect	text15
  4640  02EC                     __ptext15:	
  4641 ;; *************** function _cw_write *****************
  4642 ;; Defined at:
  4643 ;;		line 222 in file "iic.c"
  4644 ;; Parameters:    Size  Location     Type
  4645 ;;  point_reg       1    wreg     unsigned char 
  4646 ;;  w_pdata         1    4[BANK0 ] PTR unsigned char 
  4647 ;;		 -> cw_por@reset_val(1), cw_init@reg_val(1), cw_update_config_info@reset_val(1), cw_update_config_info@reg_val(1), 
  4648 ;; Auto vars:     Size  Location     Type
  4649 ;;  point_reg       1   12[COMMON] unsigned char 
  4650 ;; Return value:  Size  Location     Type
  4651 ;;                  2    4[BANK0 ] int 
  4652 ;; Registers used:
  4653 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4654 ;; Tracked objects:
  4655 ;;		On entry : 0/0
  4656 ;;		On exit  : 0/0
  4657 ;;		Unchanged: 0/0
  4658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4659 ;;      Params:         0       3       0       0
  4660 ;;      Locals:         1       0       0       0
  4661 ;;      Temps:          0       0       0       0
  4662 ;;      Totals:         1       3       0       0
  4663 ;;Total ram usage:        4 bytes
  4664 ;; Hardware stack levels used:    1
  4665 ;; Hardware stack levels required when called:    3
  4666 ;; This function calls:
  4667 ;;		_start
  4668 ;;		_stop
  4669 ;;		_wait_r_ack
  4670 ;;		_write_byte
  4671 ;; This function is called by:
  4672 ;;		_cw_update_config_info
  4673 ;;		_cw_init
  4674 ;;		_cw_por
  4675 ;; This function uses a non-reentrant model
  4676 ;;
  4677                           
  4678                           
  4679                           ;psect for function _cw_write
  4680  02EC                     _cw_write:	
  4681                           
  4682                           ;incstack = 0
  4683                           ; Regs used in _cw_write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4684                           ;cw_write@point_reg stored from wreg
  4685  02EC  00FC               	movwf	cw_write@point_reg
  4686                           
  4687                           ;iic.c: 224: start();
  4688  02ED  2116               	fcall	_start
  4689                           
  4690                           ;iic.c: 225: write_byte(0xc4);
  4691  02EE  30C4               	movlw	196
  4692  02EF  2199               	fcall	_write_byte
  4693                           
  4694                           ;iic.c: 226: if(wait_r_ack())
  4695  02F0  22BA               	fcall	_wait_r_ack
  4696  02F1  087A               	movf	?_wait_r_ack,w
  4697  02F2  047B               	iorwf	?_wait_r_ack+1,w
  4698  02F3  1903               	btfsc	3,2
  4699  02F4  2AFB               	goto	l1801
  4700                           
  4701                           ;iic.c: 227: {
  4702                           ;iic.c: 228: return 1;
  4703  02F5  3001               	movlw	1
  4704  02F6  0140               	movlb	0	; select bank0
  4705  02F7  00A4               	movwf	?_cw_write
  4706  02F8  3000               	movlw	0
  4707  02F9  00A5               	movwf	?_cw_write+1
  4708  02FA  0008               	return
  4709  02FB                     l1801:	
  4710                           
  4711                           ;iic.c: 229: }
  4712                           ;iic.c: 230: write_byte(point_reg);
  4713  02FB  087C               	movf	cw_write@point_reg,w
  4714  02FC  2199               	fcall	_write_byte
  4715                           
  4716                           ;iic.c: 231: if(wait_r_ack())
  4717  02FD  22BA               	fcall	_wait_r_ack
  4718  02FE  087A               	movf	?_wait_r_ack,w
  4719  02FF  047B               	iorwf	?_wait_r_ack+1,w
  4720  0300  1903               	btfsc	3,2
  4721  0301  2B08               	goto	l1807
  4722                           
  4723                           ;iic.c: 232: {
  4724                           ;iic.c: 233: return 1;
  4725  0302  3001               	movlw	1
  4726  0303  0140               	movlb	0	; select bank0
  4727  0304  00A4               	movwf	?_cw_write
  4728  0305  3000               	movlw	0
  4729  0306  00A5               	movwf	?_cw_write+1
  4730  0307  0008               	return
  4731  0308                     l1807:	
  4732                           
  4733                           ;iic.c: 234: }
  4734                           ;iic.c: 235: write_byte(*w_pdata);
  4735  0308  0140               	movlb	0	; select bank0
  4736  0309  0824               	movf	cw_write@w_pdata,w
  4737  030A  0086               	movwf	6
  4738  030B  0187               	clrf	7
  4739  030C  0801               	movf	1,w
  4740  030D  2199               	fcall	_write_byte
  4741                           
  4742                           ;iic.c: 236: if(wait_r_ack())
  4743  030E  22BA               	fcall	_wait_r_ack
  4744  030F  087A               	movf	?_wait_r_ack,w
  4745  0310  047B               	iorwf	?_wait_r_ack+1,w
  4746  0311  1903               	btfsc	3,2
  4747  0312  2B19               	goto	l1815
  4748                           
  4749                           ;iic.c: 237: {
  4750                           ;iic.c: 238: return 1;
  4751  0313  3001               	movlw	1
  4752  0314  0140               	movlb	0	; select bank0
  4753  0315  00A4               	movwf	?_cw_write
  4754  0316  3000               	movlw	0
  4755  0317  00A5               	movwf	?_cw_write+1
  4756  0318  0008               	return
  4757  0319                     l1815:	
  4758                           
  4759                           ;iic.c: 239: }
  4760                           ;iic.c: 240: stop();
  4761  0319  2139               	fcall	_stop
  4762                           
  4763                           ;iic.c: 241: return 0;
  4764  031A  0140               	movlb	0	; select bank0
  4765  031B  01A4               	clrf	?_cw_write
  4766  031C  01A5               	clrf	?_cw_write+1
  4767  031D  0008               	return
  4768  031E                     __end_of_cw_write:	
  4769                           
  4770                           	psect	text16
  4771  031E                     __ptext16:	
  4772 ;; *************** function _cw_read *****************
  4773 ;; Defined at:
  4774 ;;		line 164 in file "iic.c"
  4775 ;; Parameters:    Size  Location     Type
  4776 ;;  point_reg       1    wreg     unsigned char 
  4777 ;;  r_pdata         1    4[BANK0 ] PTR unsigned char 
  4778 ;;		 -> cw_get_capacity@reg_val(1), cw_init@reg_val(1), cw_update_config_info@reg_val(1), 
  4779 ;; Auto vars:     Size  Location     Type
  4780 ;;  point_reg       1   13[COMMON] unsigned char 
  4781 ;; Return value:  Size  Location     Type
  4782 ;;                  2    4[BANK0 ] int 
  4783 ;; Registers used:
  4784 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4785 ;; Tracked objects:
  4786 ;;		On entry : 0/0
  4787 ;;		On exit  : 0/0
  4788 ;;		Unchanged: 0/0
  4789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4790 ;;      Params:         0       2       0       0
  4791 ;;      Locals:         1       0       0       0
  4792 ;;      Temps:          1       0       0       0
  4793 ;;      Totals:         2       2       0       0
  4794 ;;Total ram usage:        4 bytes
  4795 ;; Hardware stack levels used:    1
  4796 ;; Hardware stack levels required when called:    3
  4797 ;; This function calls:
  4798 ;;		_read_byte
  4799 ;;		_s_ack
  4800 ;;		_start
  4801 ;;		_stop
  4802 ;;		_wait_r_ack
  4803 ;;		_write_byte
  4804 ;; This function is called by:
  4805 ;;		_cw_update_config_info
  4806 ;;		_cw_init
  4807 ;;		_cw_get_capacity
  4808 ;; This function uses a non-reentrant model
  4809 ;;
  4810                           
  4811                           
  4812                           ;psect for function _cw_read
  4813  031E                     _cw_read:	
  4814                           
  4815                           ;incstack = 0
  4816                           ; Regs used in _cw_read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4817                           ;cw_read@point_reg stored from wreg
  4818  031E  00FD               	movwf	cw_read@point_reg
  4819                           
  4820                           ;iic.c: 166: start();
  4821  031F  2116               	fcall	_start
  4822                           
  4823                           ;iic.c: 167: write_byte(0xc4);
  4824  0320  30C4               	movlw	196
  4825  0321  2199               	fcall	_write_byte
  4826                           
  4827                           ;iic.c: 168: if(wait_r_ack())
  4828  0322  22BA               	fcall	_wait_r_ack
  4829  0323  087A               	movf	?_wait_r_ack,w
  4830  0324  047B               	iorwf	?_wait_r_ack+1,w
  4831  0325  1903               	btfsc	3,2
  4832  0326  2B2D               	goto	l1773
  4833                           
  4834                           ;iic.c: 169: {
  4835                           ;iic.c: 170: return 1;
  4836  0327  3001               	movlw	1
  4837  0328  0140               	movlb	0	; select bank0
  4838  0329  00A4               	movwf	?_cw_read
  4839  032A  3000               	movlw	0
  4840  032B  00A5               	movwf	?_cw_read+1
  4841  032C  0008               	return
  4842  032D                     l1773:	
  4843                           
  4844                           ;iic.c: 171: }
  4845                           ;iic.c: 172: write_byte(point_reg);
  4846  032D  087D               	movf	cw_read@point_reg,w
  4847  032E  2199               	fcall	_write_byte
  4848                           
  4849                           ;iic.c: 173: if(wait_r_ack())
  4850  032F  22BA               	fcall	_wait_r_ack
  4851  0330  087A               	movf	?_wait_r_ack,w
  4852  0331  047B               	iorwf	?_wait_r_ack+1,w
  4853  0332  1903               	btfsc	3,2
  4854  0333  2B3A               	goto	l1779
  4855                           
  4856                           ;iic.c: 174: {
  4857                           ;iic.c: 175: return 1;
  4858  0334  3001               	movlw	1
  4859  0335  0140               	movlb	0	; select bank0
  4860  0336  00A4               	movwf	?_cw_read
  4861  0337  3000               	movlw	0
  4862  0338  00A5               	movwf	?_cw_read+1
  4863  0339  0008               	return
  4864  033A                     l1779:	
  4865                           
  4866                           ;iic.c: 176: }
  4867                           ;iic.c: 177: start();
  4868  033A  2116               	fcall	_start
  4869                           
  4870                           ;iic.c: 178: write_byte(0xc5);
  4871  033B  30C5               	movlw	197
  4872  033C  2199               	fcall	_write_byte
  4873                           
  4874                           ;iic.c: 179: if(wait_r_ack())
  4875  033D  22BA               	fcall	_wait_r_ack
  4876  033E  087A               	movf	?_wait_r_ack,w
  4877  033F  047B               	iorwf	?_wait_r_ack+1,w
  4878  0340  1903               	btfsc	3,2
  4879  0341  2B48               	goto	l1785
  4880                           
  4881                           ;iic.c: 180: {
  4882                           ;iic.c: 181: return 1;
  4883  0342  3001               	movlw	1
  4884  0343  0140               	movlb	0	; select bank0
  4885  0344  00A4               	movwf	?_cw_read
  4886  0345  3000               	movlw	0
  4887  0346  00A5               	movwf	?_cw_read+1
  4888  0347  0008               	return
  4889  0348                     l1785:	
  4890                           
  4891                           ;iic.c: 182: }
  4892                           ;iic.c: 183: *r_pdata = read_byte();
  4893  0348  223A               	fcall	_read_byte
  4894  0349  00FC               	movwf	??_cw_read
  4895  034A  0140               	movlb	0	; select bank0
  4896  034B  0824               	movf	cw_read@r_pdata,w
  4897  034C  0086               	movwf	6
  4898  034D  0187               	clrf	7
  4899  034E  087C               	movf	??_cw_read,w
  4900  034F  0081               	movwf	1
  4901                           
  4902                           ;iic.c: 184: s_ack();
  4903  0350  210B               	fcall	_s_ack
  4904                           
  4905                           ;iic.c: 185: stop();
  4906  0351  2139               	fcall	_stop
  4907                           
  4908                           ;iic.c: 186: return 0;
  4909  0352  0140               	movlb	0	; select bank0
  4910  0353  01A4               	clrf	?_cw_read
  4911  0354  01A5               	clrf	?_cw_read+1
  4912  0355  0008               	return
  4913  0356                     __end_of_cw_read:	
  4914                           
  4915                           	psect	text17
  4916  0199                     __ptext17:	
  4917 ;; *************** function _write_byte *****************
  4918 ;; Defined at:
  4919 ;;		line 126 in file "iic.c"
  4920 ;; Parameters:    Size  Location     Type
  4921 ;;  w_data          1    wreg     unsigned char 
  4922 ;; Auto vars:     Size  Location     Type
  4923 ;;  w_data          1    5[COMMON] unsigned char 
  4924 ;;  i               1    6[COMMON] unsigned char 
  4925 ;; Return value:  Size  Location     Type
  4926 ;;                  1    wreg      void 
  4927 ;; Registers used:
  4928 ;;		wreg, status,2, status,0, pclath, cstack
  4929 ;; Tracked objects:
  4930 ;;		On entry : 0/0
  4931 ;;		On exit  : 0/0
  4932 ;;		Unchanged: 0/0
  4933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4934 ;;      Params:         0       0       0       0
  4935 ;;      Locals:         2       0       0       0
  4936 ;;      Temps:          1       0       0       0
  4937 ;;      Totals:         3       0       0       0
  4938 ;;Total ram usage:        3 bytes
  4939 ;; Hardware stack levels used:    1
  4940 ;; Hardware stack levels required when called:    1
  4941 ;; This function calls:
  4942 ;;		_Delay10us
  4943 ;; This function is called by:
  4944 ;;		_cw_read
  4945 ;;		_cw_read_word
  4946 ;;		_cw_write
  4947 ;; This function uses a non-reentrant model
  4948 ;;
  4949                           
  4950                           
  4951                           ;psect for function _write_byte
  4952  0199                     _write_byte:	
  4953                           
  4954                           ;incstack = 0
  4955                           ; Regs used in _write_byte: [wreg+status,2+status,0+pclath+cstack]
  4956                           ;write_byte@w_data stored from wreg
  4957  0199  00F5               	movwf	write_byte@w_data
  4958                           
  4959                           ;iic.c: 128: unsigned char i;
  4960                           ;iic.c: 129: do { TRISCbits.TRISC1 = 0; } while(0);
  4961  019A  0140               	movlb	0	; select bank0
  4962  019B  1094               	bcf	20,1	;volatile
  4963                           
  4964                           ;iic.c: 130: for(i = 0; i < 8; i++)
  4965  019C  01F6               	clrf	write_byte@i
  4966  019D                     L4:	
  4967  019D  3008               	movlw	8
  4968  019E  0276               	subwf	write_byte@i,w
  4969  019F  1803               	btfsc	3,0
  4970  01A0  0008               	return
  4971                           
  4972                           ;iic.c: 131: {
  4973                           ;iic.c: 132: LATCbits.LATC1 = (w_data & 0x80)?1:0;
  4974  01A1  1FF5               	btfss	write_byte@w_data,7
  4975  01A2  29A6               	goto	u1260
  4976  01A3  0140               	movlb	0	; select bank0
  4977  01A4  149A               	bsf	26,1	;volatile
  4978  01A5  29A8               	goto	l1703
  4979  01A6                     u1260:	
  4980  01A6  0140               	movlb	0	; select bank0
  4981  01A7  109A               	bcf	26,1	;volatile
  4982  01A8                     l1703:	
  4983                           
  4984                           ;iic.c: 133: Delay10us();
  4985  01A8  21D8               	fcall	_Delay10us
  4986                           
  4987                           ;iic.c: 134: do { LATCbits.LATC0 = 1; } while(0);
  4988  01A9  0140               	movlb	0	; select bank0
  4989  01AA  141A               	bsf	26,0	;volatile
  4990                           
  4991                           ;iic.c: 135: Delay10us();
  4992  01AB  21D8               	fcall	_Delay10us
  4993                           
  4994                           ;iic.c: 136: do { LATCbits.LATC0 = 0; } while(0);
  4995  01AC  0140               	movlb	0	; select bank0
  4996  01AD  101A               	bcf	26,0	;volatile
  4997                           
  4998                           ;iic.c: 137: Delay10us();
  4999  01AE  21D8               	fcall	_Delay10us
  5000                           
  5001                           ;iic.c: 138: w_data = w_data << 1;
  5002  01AF  3575               	lslf	write_byte@w_data,w
  5003  01B0  00F4               	movwf	??_write_byte
  5004  01B1  0874               	movf	??_write_byte,w
  5005  01B2  00F5               	movwf	write_byte@w_data
  5006  01B3  3001               	movlw	1
  5007  01B4  00F4               	movwf	??_write_byte
  5008  01B5  0874               	movf	??_write_byte,w
  5009  01B6  07F6               	addwf	write_byte@i,f
  5010  01B7  299D               	goto	L4
  5011  01B8                     __end_of_write_byte:	
  5012                           
  5013                           	psect	text18
  5014  02BA                     __ptext18:	
  5015 ;; *************** function _wait_r_ack *****************
  5016 ;; Defined at:
  5017 ;;		line 80 in file "iic.c"
  5018 ;; Parameters:    Size  Location     Type
  5019 ;;		None
  5020 ;; Auto vars:     Size  Location     Type
  5021 ;;  i               2    2[BANK0 ] unsigned int 
  5022 ;;  ack             2    0[BANK0 ] int 
  5023 ;; Return value:  Size  Location     Type
  5024 ;;                  2   10[COMMON] int 
  5025 ;; Registers used:
  5026 ;;		wreg, status,2, status,0, pclath, cstack
  5027 ;; Tracked objects:
  5028 ;;		On entry : 0/0
  5029 ;;		On exit  : 0/0
  5030 ;;		Unchanged: 0/0
  5031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5032 ;;      Params:         2       0       0       0
  5033 ;;      Locals:         0       4       0       0
  5034 ;;      Temps:          0       0       0       0
  5035 ;;      Totals:         2       4       0       0
  5036 ;;Total ram usage:        6 bytes
  5037 ;; Hardware stack levels used:    1
  5038 ;; Hardware stack levels required when called:    2
  5039 ;; This function calls:
  5040 ;;		_r_ack
  5041 ;;		_stop
  5042 ;; This function is called by:
  5043 ;;		_cw_read
  5044 ;;		_cw_read_word
  5045 ;;		_cw_write
  5046 ;; This function uses a non-reentrant model
  5047 ;;
  5048                           
  5049                           
  5050                           ;psect for function _wait_r_ack
  5051  02BA                     _wait_r_ack:	
  5052                           
  5053                           ;iic.c: 82: int ack;
  5054                           ;iic.c: 83: unsigned int i;
  5055                           ;iic.c: 84: ack = 1;
  5056                           
  5057                           ;incstack = 0
  5058                           ; Regs used in _wait_r_ack: [wreg+status,2+status,0+pclath+cstack]
  5059  02BA  3001               	movlw	1
  5060  02BB  0140               	movlb	0	; select bank0
  5061  02BC  00A0               	movwf	wait_r_ack@ack
  5062  02BD  3000               	movlw	0
  5063  02BE  00A1               	movwf	wait_r_ack@ack+1
  5064                           
  5065                           ;iic.c: 85: for(i = 0; i < 100; i++)
  5066  02BF  01A2               	clrf	wait_r_ack@i
  5067  02C0  01A3               	clrf	wait_r_ack@i+1
  5068  02C1  3000               	movlw	0
  5069  02C2  0223               	subwf	wait_r_ack@i+1,w
  5070  02C3  3064               	movlw	100
  5071  02C4  1903               	skipnz
  5072  02C5  0222               	subwf	wait_r_ack@i,w
  5073  02C6  1803               	btfsc	3,0
  5074  02C7  2AE9               	goto	l1687
  5075  02C8                     l1671:	
  5076                           
  5077                           ;iic.c: 86: {
  5078                           ;iic.c: 87: ack = r_ack();
  5079  02C8  2151               	fcall	_r_ack
  5080  02C9  0875               	movf	?_r_ack+1,w
  5081  02CA  0140               	movlb	0	; select bank0
  5082  02CB  00A1               	movwf	wait_r_ack@ack+1
  5083  02CC  0874               	movf	?_r_ack,w
  5084  02CD  00A0               	movwf	wait_r_ack@ack
  5085                           
  5086                           ;iic.c: 88: if(!ack)
  5087  02CE  0820               	movf	wait_r_ack@ack,w
  5088  02CF  0421               	iorwf	wait_r_ack@ack+1,w
  5089  02D0  1903               	btfsc	3,2
  5090  02D1  2AE9               	goto	l1687
  5091                           
  5092                           ;iic.c: 91: }
  5093                           ;iic.c: 92: if(i == 99)
  5094                           
  5095                           ;iic.c: 89: {
  5096                           ;iic.c: 90: break;
  5097  02D2  3063               	movlw	99
  5098  02D3  0622               	xorwf	wait_r_ack@i,w
  5099  02D4  0423               	iorwf	wait_r_ack@i+1,w
  5100  02D5  1D03               	btfss	3,2
  5101  02D6  2ADD               	goto	l1685
  5102                           
  5103                           ;iic.c: 93: {
  5104                           ;iic.c: 94: stop();
  5105  02D7  2139               	fcall	_stop
  5106                           
  5107                           ;iic.c: 95: return 1;
  5108  02D8  3001               	movlw	1
  5109  02D9  00FA               	movwf	?_wait_r_ack
  5110  02DA  3000               	movlw	0
  5111  02DB  00FB               	movwf	?_wait_r_ack+1
  5112  02DC  0008               	return
  5113  02DD                     l1685:	
  5114  02DD  3001               	movlw	1
  5115  02DE  0140               	movlb	0	; select bank0
  5116  02DF  07A2               	addwf	wait_r_ack@i,f
  5117  02E0  3000               	movlw	0
  5118  02E1  3DA3               	addwfc	wait_r_ack@i+1,f
  5119  02E2  3000               	movlw	0
  5120  02E3  0223               	subwf	wait_r_ack@i+1,w
  5121  02E4  3064               	movlw	100
  5122  02E5  1903               	skipnz
  5123  02E6  0222               	subwf	wait_r_ack@i,w
  5124  02E7  1C03               	skipc
  5125  02E8  2AC8               	goto	l1671
  5126  02E9                     l1687:	
  5127                           
  5128                           ;iic.c: 96: }
  5129                           ;iic.c: 97: }
  5130                           ;iic.c: 98: return 0;
  5131  02E9  01FA               	clrf	?_wait_r_ack
  5132  02EA  01FB               	clrf	?_wait_r_ack+1
  5133  02EB  0008               	return
  5134  02EC                     __end_of_wait_r_ack:	
  5135                           
  5136                           	psect	text19
  5137  0139                     __ptext19:	
  5138 ;; *************** function _stop *****************
  5139 ;; Defined at:
  5140 ;;		line 54 in file "iic.c"
  5141 ;; Parameters:    Size  Location     Type
  5142 ;;		None
  5143 ;; Auto vars:     Size  Location     Type
  5144 ;;		None
  5145 ;; Return value:  Size  Location     Type
  5146 ;;                  1    wreg      void 
  5147 ;; Registers used:
  5148 ;;		wreg, status,2, status,0, pclath, cstack
  5149 ;; Tracked objects:
  5150 ;;		On entry : 0/0
  5151 ;;		On exit  : 0/0
  5152 ;;		Unchanged: 0/0
  5153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5154 ;;      Params:         0       0       0       0
  5155 ;;      Locals:         0       0       0       0
  5156 ;;      Temps:          0       0       0       0
  5157 ;;      Totals:         0       0       0       0
  5158 ;;Total ram usage:        0 bytes
  5159 ;; Hardware stack levels used:    1
  5160 ;; Hardware stack levels required when called:    1
  5161 ;; This function calls:
  5162 ;;		_Delay10us
  5163 ;; This function is called by:
  5164 ;;		_wait_r_ack
  5165 ;;		_cw_read
  5166 ;;		_cw_read_word
  5167 ;;		_cw_write
  5168 ;; This function uses a non-reentrant model
  5169 ;;
  5170                           
  5171                           
  5172                           ;psect for function _stop
  5173  0139                     _stop:	
  5174                           
  5175                           ;incstack = 0
  5176                           ; Regs used in _stop: [wreg+status,2+status,0+pclath+cstack]
  5177                           ;iic.c: 56: do { TRISCbits.TRISC1 = 0; } while(0);
  5178  0139  0140               	movlb	0	; select bank0
  5179  013A  1094               	bcf	20,1	;volatile
  5180                           
  5181                           ;iic.c: 57: do { LATCbits.LATC1 = 0; } while(0);
  5182  013B  109A               	bcf	26,1	;volatile
  5183                           
  5184                           ;iic.c: 58: Delay10us();
  5185  013C  21D8               	fcall	_Delay10us
  5186                           
  5187                           ;iic.c: 59: do { LATCbits.LATC0 = 1; } while(0);
  5188  013D  0140               	movlb	0	; select bank0
  5189  013E  141A               	bsf	26,0	;volatile
  5190                           
  5191                           ;iic.c: 60: Delay10us();
  5192  013F  21D8               	fcall	_Delay10us
  5193                           
  5194                           ;iic.c: 61: do { LATCbits.LATC1 = 1; } while(0);
  5195  0140  0140               	movlb	0	; select bank0
  5196  0141  149A               	bsf	26,1	;volatile
  5197                           
  5198                           ;iic.c: 62: Delay10us();
  5199  0142  21D8               	fcall	_Delay10us
  5200                           
  5201                           ;iic.c: 64: Delay10us();
  5202  0143  21D8               	fcall	_Delay10us
  5203  0144  0008               	return
  5204  0145                     __end_of_stop:	
  5205                           
  5206                           	psect	text20
  5207  0151                     __ptext20:	
  5208 ;; *************** function _r_ack *****************
  5209 ;; Defined at:
  5210 ;;		line 67 in file "iic.c"
  5211 ;; Parameters:    Size  Location     Type
  5212 ;;		None
  5213 ;; Auto vars:     Size  Location     Type
  5214 ;;  ack             2    8[COMMON] int 
  5215 ;; Return value:  Size  Location     Type
  5216 ;;                  2    4[COMMON] int 
  5217 ;; Registers used:
  5218 ;;		wreg, status,2, status,0, pclath, cstack
  5219 ;; Tracked objects:
  5220 ;;		On entry : 0/0
  5221 ;;		On exit  : 0/0
  5222 ;;		Unchanged: 0/0
  5223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5224 ;;      Params:         2       0       0       0
  5225 ;;      Locals:         2       0       0       0
  5226 ;;      Temps:          2       0       0       0
  5227 ;;      Totals:         6       0       0       0
  5228 ;;Total ram usage:        6 bytes
  5229 ;; Hardware stack levels used:    1
  5230 ;; Hardware stack levels required when called:    1
  5231 ;; This function calls:
  5232 ;;		_Delay10us
  5233 ;; This function is called by:
  5234 ;;		_wait_r_ack
  5235 ;; This function uses a non-reentrant model
  5236 ;;
  5237                           
  5238                           
  5239                           ;psect for function _r_ack
  5240  0151                     _r_ack:	
  5241                           
  5242                           ;incstack = 0
  5243                           ; Regs used in _r_ack: [wreg+status,2+status,0+pclath+cstack]
  5244                           ;iic.c: 69: int ack;
  5245                           ;iic.c: 70: do { TRISCbits.TRISC1 = 1; } while(0);
  5246  0151  0140               	movlb	0	; select bank0
  5247  0152  1494               	bsf	20,1	;volatile
  5248                           
  5249                           ;iic.c: 71: do { LATCbits.LATC0 = 1; } while(0);
  5250  0153  141A               	bsf	26,0	;volatile
  5251                           
  5252                           ;iic.c: 72: Delay10us();
  5253  0154  21D8               	fcall	_Delay10us
  5254                           
  5255                           ;iic.c: 73: ack = PORTCbits.RC1;
  5256  0155  0140               	movlb	0	; select bank0
  5257  0156  0C0E               	rrf	14,w	;volatile
  5258  0157  3901               	andlw	1
  5259  0158  00F6               	movwf	??_r_ack
  5260  0159  01F7               	clrf	??_r_ack+1
  5261  015A  0876               	movf	??_r_ack,w
  5262  015B  00F8               	movwf	r_ack@ack
  5263  015C  0877               	movf	??_r_ack+1,w
  5264  015D  00F9               	movwf	r_ack@ack+1
  5265                           
  5266                           ;iic.c: 74: Delay10us();
  5267  015E  21D8               	fcall	_Delay10us
  5268                           
  5269                           ;iic.c: 75: do { LATCbits.LATC0 = 0; } while(0);
  5270  015F  0140               	movlb	0	; select bank0
  5271  0160  101A               	bcf	26,0	;volatile
  5272                           
  5273                           ;iic.c: 76: Delay10us();
  5274  0161  21D8               	fcall	_Delay10us
  5275                           
  5276                           ;iic.c: 77: return ack;
  5277  0162  0879               	movf	r_ack@ack+1,w
  5278  0163  00F5               	movwf	?_r_ack+1
  5279  0164  0878               	movf	r_ack@ack,w
  5280  0165  00F4               	movwf	?_r_ack
  5281  0166  0008               	return
  5282  0167                     __end_of_r_ack:	
  5283                           
  5284                           	psect	text21
  5285  0116                     __ptext21:	
  5286 ;; *************** function _start *****************
  5287 ;; Defined at:
  5288 ;;		line 43 in file "iic.c"
  5289 ;; Parameters:    Size  Location     Type
  5290 ;;		None
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;		None
  5293 ;; Return value:  Size  Location     Type
  5294 ;;                  1    wreg      void 
  5295 ;; Registers used:
  5296 ;;		wreg, status,2, status,0, pclath, cstack
  5297 ;; Tracked objects:
  5298 ;;		On entry : 0/0
  5299 ;;		On exit  : 0/0
  5300 ;;		Unchanged: 0/0
  5301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5302 ;;      Params:         0       0       0       0
  5303 ;;      Locals:         0       0       0       0
  5304 ;;      Temps:          0       0       0       0
  5305 ;;      Totals:         0       0       0       0
  5306 ;;Total ram usage:        0 bytes
  5307 ;; Hardware stack levels used:    1
  5308 ;; Hardware stack levels required when called:    1
  5309 ;; This function calls:
  5310 ;;		_Delay10us
  5311 ;; This function is called by:
  5312 ;;		_cw_read
  5313 ;;		_cw_read_word
  5314 ;;		_cw_write
  5315 ;; This function uses a non-reentrant model
  5316 ;;
  5317                           
  5318                           
  5319                           ;psect for function _start
  5320  0116                     _start:	
  5321                           
  5322                           ;incstack = 0
  5323                           ; Regs used in _start: [wreg+status,2+status,0+pclath+cstack]
  5324                           ;iic.c: 45: do { TRISCbits.TRISC1 = 0; } while(0);
  5325  0116  0140               	movlb	0	; select bank0
  5326  0117  1094               	bcf	20,1	;volatile
  5327                           
  5328                           ;iic.c: 46: do { LATCbits.LATC1 = 1; } while(0);
  5329  0118  149A               	bsf	26,1	;volatile
  5330                           
  5331                           ;iic.c: 47: do { LATCbits.LATC0 = 1; } while(0);
  5332  0119  141A               	bsf	26,0	;volatile
  5333                           
  5334                           ;iic.c: 48: Delay10us();
  5335  011A  21D8               	fcall	_Delay10us
  5336                           
  5337                           ;iic.c: 49: do { LATCbits.LATC1 = 0; } while(0);
  5338  011B  0140               	movlb	0	; select bank0
  5339  011C  109A               	bcf	26,1	;volatile
  5340                           
  5341                           ;iic.c: 50: Delay10us();
  5342  011D  21D8               	fcall	_Delay10us
  5343                           
  5344                           ;iic.c: 51: do { LATCbits.LATC0 = 0; } while(0);
  5345  011E  0140               	movlb	0	; select bank0
  5346  011F  101A               	bcf	26,0	;volatile
  5347  0120  0008               	return
  5348  0121                     __end_of_start:	
  5349                           
  5350                           	psect	text22
  5351  010B                     __ptext22:	
  5352 ;; *************** function _s_ack *****************
  5353 ;; Defined at:
  5354 ;;		line 101 in file "iic.c"
  5355 ;; Parameters:    Size  Location     Type
  5356 ;;		None
  5357 ;; Auto vars:     Size  Location     Type
  5358 ;;		None
  5359 ;; Return value:  Size  Location     Type
  5360 ;;                  1    wreg      void 
  5361 ;; Registers used:
  5362 ;;		wreg, status,2, status,0, pclath, cstack
  5363 ;; Tracked objects:
  5364 ;;		On entry : 0/0
  5365 ;;		On exit  : 0/0
  5366 ;;		Unchanged: 0/0
  5367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5368 ;;      Params:         0       0       0       0
  5369 ;;      Locals:         0       0       0       0
  5370 ;;      Temps:          0       0       0       0
  5371 ;;      Totals:         0       0       0       0
  5372 ;;Total ram usage:        0 bytes
  5373 ;; Hardware stack levels used:    1
  5374 ;; Hardware stack levels required when called:    1
  5375 ;; This function calls:
  5376 ;;		_Delay10us
  5377 ;; This function is called by:
  5378 ;;		_cw_read
  5379 ;;		_cw_read_word
  5380 ;; This function uses a non-reentrant model
  5381 ;;
  5382                           
  5383                           
  5384                           ;psect for function _s_ack
  5385  010B                     _s_ack:	
  5386                           
  5387                           ;incstack = 0
  5388                           ; Regs used in _s_ack: [wreg+status,2+status,0+pclath+cstack]
  5389                           ;iic.c: 103: do { TRISCbits.TRISC1 = 0; } while(0);
  5390  010B  0140               	movlb	0	; select bank0
  5391  010C  1094               	bcf	20,1	;volatile
  5392                           
  5393                           ;iic.c: 104: do { LATCbits.LATC1 = 1; } while(0);
  5394  010D  149A               	bsf	26,1	;volatile
  5395                           
  5396                           ;iic.c: 105: Delay10us();
  5397  010E  21D8               	fcall	_Delay10us
  5398                           
  5399                           ;iic.c: 106: do { LATCbits.LATC0 = 1; } while(0);
  5400  010F  0140               	movlb	0	; select bank0
  5401  0110  141A               	bsf	26,0	;volatile
  5402                           
  5403                           ;iic.c: 107: Delay10us();
  5404  0111  21D8               	fcall	_Delay10us
  5405                           
  5406                           ;iic.c: 108: do { LATCbits.LATC0 = 0; } while(0);
  5407  0112  0140               	movlb	0	; select bank0
  5408  0113  101A               	bcf	26,0	;volatile
  5409                           
  5410                           ;iic.c: 109: Delay10us();
  5411  0114  21D8               	fcall	_Delay10us
  5412  0115  0008               	return
  5413  0116                     __end_of_s_ack:	
  5414                           
  5415                           	psect	text23
  5416  023A                     __ptext23:	
  5417 ;; *************** function _read_byte *****************
  5418 ;; Defined at:
  5419 ;;		line 142 in file "iic.c"
  5420 ;; Parameters:    Size  Location     Type
  5421 ;;		None
  5422 ;; Auto vars:     Size  Location     Type
  5423 ;;  r_data          1    6[COMMON] unsigned char 
  5424 ;;  i               1    5[COMMON] unsigned char 
  5425 ;; Return value:  Size  Location     Type
  5426 ;;                  1    wreg      unsigned char 
  5427 ;; Registers used:
  5428 ;;		wreg, status,2, status,0, pclath, cstack
  5429 ;; Tracked objects:
  5430 ;;		On entry : 0/0
  5431 ;;		On exit  : 0/0
  5432 ;;		Unchanged: 0/0
  5433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5434 ;;      Params:         0       0       0       0
  5435 ;;      Locals:         2       0       0       0
  5436 ;;      Temps:          1       0       0       0
  5437 ;;      Totals:         3       0       0       0
  5438 ;;Total ram usage:        3 bytes
  5439 ;; Hardware stack levels used:    1
  5440 ;; Hardware stack levels required when called:    1
  5441 ;; This function calls:
  5442 ;;		_Delay10us
  5443 ;; This function is called by:
  5444 ;;		_cw_read
  5445 ;;		_cw_read_word
  5446 ;; This function uses a non-reentrant model
  5447 ;;
  5448                           
  5449                           
  5450                           ;psect for function _read_byte
  5451  023A                     _read_byte:	
  5452                           
  5453                           ;incstack = 0
  5454                           ; Regs used in _read_byte: [wreg+status,2+status,0+pclath+cstack]
  5455                           ;iic.c: 144: unsigned char i;
  5456                           ;iic.c: 145: unsigned char r_data;
  5457                           ;iic.c: 146: do { TRISCbits.TRISC1 = 1; } while(0);
  5458  023A  0140               	movlb	0	; select bank0
  5459  023B  1494               	bsf	20,1	;volatile
  5460                           
  5461                           ;iic.c: 147: for(i = 0; i < 8; i++)
  5462  023C  01F5               	clrf	read_byte@i
  5463  023D  3008               	movlw	8
  5464  023E  0275               	subwf	read_byte@i,w
  5465  023F  1803               	btfsc	3,0
  5466  0240  2A5B               	goto	l1739
  5467  0241                     l404:	
  5468                           ;iic.c: 148: {
  5469                           ;iic.c: 149: do { LATCbits.LATC0 = 1; } while(0);
  5470                           
  5471  0241  0140               	movlb	0	; select bank0
  5472  0242  141A               	bsf	26,0	;volatile
  5473                           
  5474                           ;iic.c: 150: Delay10us();
  5475  0243  21D8               	fcall	_Delay10us
  5476                           
  5477                           ;iic.c: 151: r_data = r_data << 1;
  5478  0244  3576               	lslf	read_byte@r_data,w
  5479  0245  00F4               	movwf	??_read_byte
  5480  0246  0874               	movf	??_read_byte,w
  5481  0247  00F6               	movwf	read_byte@r_data
  5482                           
  5483                           ;iic.c: 152: Delay10us();
  5484  0248  21D8               	fcall	_Delay10us
  5485                           
  5486                           ;iic.c: 153: if(PORTCbits.RC1)
  5487  0249  0140               	movlb	0	; select bank0
  5488  024A  1C8E               	btfss	14,1	;volatile
  5489  024B  2A51               	goto	l1731
  5490                           
  5491                           ;iic.c: 154: {
  5492                           ;iic.c: 155: r_data = r_data | 0x1;
  5493  024C  0876               	movf	read_byte@r_data,w
  5494  024D  3801               	iorlw	1
  5495  024E  00F4               	movwf	??_read_byte
  5496  024F  0874               	movf	??_read_byte,w
  5497  0250  00F6               	movwf	read_byte@r_data
  5498  0251                     l1731:	
  5499                           ;iic.c: 156: }
  5500                           ;iic.c: 157: do { LATCbits.LATC0 = 0; } while(0);
  5501                           
  5502  0251  101A               	bcf	26,0	;volatile
  5503                           
  5504                           ;iic.c: 158: Delay10us();
  5505  0252  21D8               	fcall	_Delay10us
  5506  0253  3001               	movlw	1
  5507  0254  00F4               	movwf	??_read_byte
  5508  0255  0874               	movf	??_read_byte,w
  5509  0256  07F5               	addwf	read_byte@i,f
  5510  0257  3008               	movlw	8
  5511  0258  0275               	subwf	read_byte@i,w
  5512  0259  1C03               	skipc
  5513  025A  2A41               	goto	l404
  5514  025B                     l1739:	
  5515                           
  5516                           ;iic.c: 159: }
  5517                           ;iic.c: 160: return r_data;
  5518  025B  0876               	movf	read_byte@r_data,w
  5519  025C  0008               	return
  5520  025D                     __end_of_read_byte:	
  5521                           
  5522                           	psect	text24
  5523  01D8                     __ptext24:	
  5524 ;; *************** function _Delay10us *****************
  5525 ;; Defined at:
  5526 ;;		line 22 in file "iic.c"
  5527 ;; Parameters:    Size  Location     Type
  5528 ;;		None
  5529 ;; Auto vars:     Size  Location     Type
  5530 ;;  i               1    3[COMMON] unsigned char 
  5531 ;;  b               1    2[COMMON] unsigned char 
  5532 ;;  a               1    1[COMMON] unsigned char 
  5533 ;; Return value:  Size  Location     Type
  5534 ;;                  1    wreg      void 
  5535 ;; Registers used:
  5536 ;;		wreg, status,2, status,0
  5537 ;; Tracked objects:
  5538 ;;		On entry : 0/0
  5539 ;;		On exit  : 0/0
  5540 ;;		Unchanged: 0/0
  5541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5542 ;;      Params:         0       0       0       0
  5543 ;;      Locals:         3       0       0       0
  5544 ;;      Temps:          1       0       0       0
  5545 ;;      Totals:         4       0       0       0
  5546 ;;Total ram usage:        4 bytes
  5547 ;; Hardware stack levels used:    1
  5548 ;; This function calls:
  5549 ;;		Nothing
  5550 ;; This function is called by:
  5551 ;;		_start
  5552 ;;		_stop
  5553 ;;		_r_ack
  5554 ;;		_s_ack
  5555 ;;		_sn_ack
  5556 ;;		_write_byte
  5557 ;;		_read_byte
  5558 ;; This function uses a non-reentrant model
  5559 ;;
  5560                           
  5561                           
  5562                           ;psect for function _Delay10us
  5563  01D8                     _Delay10us:	
  5564                           
  5565                           ;iic.c: 24: unsigned char a, b;
  5566                           ;iic.c: 25: unsigned char i;
  5567                           ;iic.c: 26: for(i = 0; i < 2; i++)
  5568                           
  5569                           ;incstack = 0
  5570                           ; Regs used in _Delay10us: [wreg+status,2+status,0]
  5571  01D8  01F3               	clrf	Delay10us@i
  5572  01D9                     L5:	
  5573  01D9  3002               	movlw	2
  5574  01DA  0273               	subwf	Delay10us@i,w
  5575  01DB  1803               	btfsc	3,0
  5576  01DC  0008               	return
  5577                           
  5578                           ;iic.c: 27: {
  5579                           ;iic.c: 28: for(b = 1;b > 0;b --)
  5580  01DD  01F2               	clrf	Delay10us@b
  5581  01DE  0AF2               	incf	Delay10us@b,f
  5582  01DF  0872               	movf	Delay10us@b,w
  5583  01E0  1903               	btfsc	3,2
  5584  01E1  29F3               	goto	l1633
  5585  01E2                     l1623:	
  5586                           
  5587                           ;iic.c: 29: {
  5588                           ;iic.c: 30: for(a = 7;a > 0;a --) ;
  5589  01E2  3007               	movlw	7
  5590  01E3  00F0               	movwf	??_Delay10us
  5591  01E4  0870               	movf	??_Delay10us,w
  5592  01E5  00F1               	movwf	Delay10us@a
  5593  01E6  0871               	movf	Delay10us@a,w
  5594  01E7  1903               	btfsc	3,2
  5595  01E8  29EE               	goto	l1631
  5596  01E9                     l1629:	
  5597  01E9  3001               	movlw	1
  5598  01EA  02F1               	subwf	Delay10us@a,f
  5599  01EB  0871               	movf	Delay10us@a,w
  5600  01EC  1D03               	btfss	3,2
  5601  01ED  29E9               	goto	l1629
  5602  01EE                     l1631:	
  5603  01EE  3001               	movlw	1
  5604  01EF  02F2               	subwf	Delay10us@b,f
  5605  01F0  0872               	movf	Delay10us@b,w
  5606  01F1  1D03               	btfss	3,2
  5607  01F2  29E2               	goto	l1623
  5608  01F3                     l1633:	
  5609  01F3  3001               	movlw	1
  5610  01F4  00F0               	movwf	??_Delay10us
  5611  01F5  0870               	movf	??_Delay10us,w
  5612  01F6  07F3               	addwf	Delay10us@i,f
  5613  01F7  29D9               	goto	L5
  5614  01F8                     __end_of_Delay10us:	
  5615                           
  5616                           	psect	text25
  5617  01B8                     __ptext25:	
  5618 ;; *************** function _CW_Delay100us *****************
  5619 ;; Defined at:
  5620 ;;		line 38 in file "CW201x.c"
  5621 ;; Parameters:    Size  Location     Type
  5622 ;;		None
  5623 ;; Auto vars:     Size  Location     Type
  5624 ;;  i               1    3[COMMON] unsigned char 
  5625 ;;  b               1    2[COMMON] unsigned char 
  5626 ;;  a               1    1[COMMON] unsigned char 
  5627 ;; Return value:  Size  Location     Type
  5628 ;;                  1    wreg      void 
  5629 ;; Registers used:
  5630 ;;		wreg, status,2, status,0
  5631 ;; Tracked objects:
  5632 ;;		On entry : 0/0
  5633 ;;		On exit  : 0/0
  5634 ;;		Unchanged: 0/0
  5635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5636 ;;      Params:         0       0       0       0
  5637 ;;      Locals:         3       0       0       0
  5638 ;;      Temps:          1       0       0       0
  5639 ;;      Totals:         4       0       0       0
  5640 ;;Total ram usage:        4 bytes
  5641 ;; Hardware stack levels used:    1
  5642 ;; This function calls:
  5643 ;;		Nothing
  5644 ;; This function is called by:
  5645 ;;		_cw_update_config_info
  5646 ;;		_cw_por
  5647 ;; This function uses a non-reentrant model
  5648 ;;
  5649                           
  5650                           
  5651                           ;psect for function _CW_Delay100us
  5652  01B8                     _CW_Delay100us:	
  5653                           
  5654                           ;CW201x.c: 40: unsigned char a, b;
  5655                           ;CW201x.c: 41: unsigned char i;
  5656                           ;CW201x.c: 42: for(i = 0; i < 10; i++)
  5657                           
  5658                           ;incstack = 0
  5659                           ; Regs used in _CW_Delay100us: [wreg+status,2+status,0]
  5660  01B8  01F3               	clrf	CW_Delay100us@i
  5661  01B9                     L6:	
  5662  01B9  300A               	movlw	10
  5663  01BA  0273               	subwf	CW_Delay100us@i,w
  5664  01BB  1803               	btfsc	3,0
  5665  01BC  0008               	return
  5666                           
  5667                           ;CW201x.c: 43: {
  5668                           ;CW201x.c: 44: for(b = 1;b > 0;b --)
  5669  01BD  01F2               	clrf	CW_Delay100us@b
  5670  01BE  0AF2               	incf	CW_Delay100us@b,f
  5671  01BF  0872               	movf	CW_Delay100us@b,w
  5672  01C0  1903               	btfsc	3,2
  5673  01C1  29D3               	goto	l1763
  5674  01C2                     l1753:	
  5675                           
  5676                           ;CW201x.c: 45: {
  5677                           ;CW201x.c: 46: for(a = 7;a > 0;a --);
  5678  01C2  3007               	movlw	7
  5679  01C3  00F0               	movwf	??_CW_Delay100us
  5680  01C4  0870               	movf	??_CW_Delay100us,w
  5681  01C5  00F1               	movwf	CW_Delay100us@a
  5682  01C6  0871               	movf	CW_Delay100us@a,w
  5683  01C7  1903               	btfsc	3,2
  5684  01C8  29CE               	goto	l1761
  5685  01C9                     l1759:	
  5686  01C9  3001               	movlw	1
  5687  01CA  02F1               	subwf	CW_Delay100us@a,f
  5688  01CB  0871               	movf	CW_Delay100us@a,w
  5689  01CC  1D03               	btfss	3,2
  5690  01CD  29C9               	goto	l1759
  5691  01CE                     l1761:	
  5692  01CE  3001               	movlw	1
  5693  01CF  02F2               	subwf	CW_Delay100us@b,f
  5694  01D0  0872               	movf	CW_Delay100us@b,w
  5695  01D1  1D03               	btfss	3,2
  5696  01D2  29C2               	goto	l1753
  5697  01D3                     l1763:	
  5698  01D3  3001               	movlw	1
  5699  01D4  00F0               	movwf	??_CW_Delay100us
  5700  01D5  0870               	movf	??_CW_Delay100us,w
  5701  01D6  07F3               	addwf	CW_Delay100us@i,f
  5702  01D7  29B9               	goto	L6
  5703  01D8                     __end_of_CW_Delay100us:	
  5704                           
  5705                           	psect	text26
  5706  01F8                     __ptext26:	
  5707 ;; *************** function _CW_Delay10ms *****************
  5708 ;; Defined at:
  5709 ;;		line 26 in file "CW201x.c"
  5710 ;; Parameters:    Size  Location     Type
  5711 ;;  c               2    0[COMMON] unsigned int 
  5712 ;; Auto vars:     Size  Location     Type
  5713 ;;  b               1    4[COMMON] unsigned char 
  5714 ;;  a               1    3[COMMON] unsigned char 
  5715 ;;  d               1    0        unsigned char 
  5716 ;; Return value:  Size  Location     Type
  5717 ;;                  1    wreg      void 
  5718 ;; Registers used:
  5719 ;;		wreg, status,2, status,0
  5720 ;; Tracked objects:
  5721 ;;		On entry : 0/0
  5722 ;;		On exit  : 0/0
  5723 ;;		Unchanged: 0/0
  5724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5725 ;;      Params:         2       0       0       0
  5726 ;;      Locals:         2       0       0       0
  5727 ;;      Temps:          1       0       0       0
  5728 ;;      Totals:         5       0       0       0
  5729 ;;Total ram usage:        5 bytes
  5730 ;; Hardware stack levels used:    1
  5731 ;; This function calls:
  5732 ;;		Nothing
  5733 ;; This function is called by:
  5734 ;;		_main
  5735 ;;		_cw_init
  5736 ;; This function uses a non-reentrant model
  5737 ;;
  5738                           
  5739                           
  5740                           ;psect for function _CW_Delay10ms
  5741  01F8                     _CW_Delay10ms:	
  5742                           
  5743                           ;CW201x.c: 28: unsigned char a, b, d;
  5744                           ;CW201x.c: 29: for (;c>0;c--)
  5745                           
  5746                           ;incstack = 0
  5747                           ; Regs used in _CW_Delay10ms: [wreg+status,2+status,0]
  5748  01F8  0870               	movf	CW_Delay10ms@c,w
  5749  01F9  0471               	iorwf	CW_Delay10ms@c+1,w
  5750  01FA  1903               	btfsc	3,2
  5751  01FB  0008               	return
  5752                           
  5753                           ;CW201x.c: 30: {
  5754                           ;CW201x.c: 31: for(b=95;b>0;b--)
  5755  01FC  305F               	movlw	95
  5756  01FD  00F2               	movwf	??_CW_Delay10ms
  5757  01FE  0872               	movf	??_CW_Delay10ms,w
  5758  01FF  00F4               	movwf	CW_Delay10ms@b
  5759  0200  0874               	movf	CW_Delay10ms@b,w
  5760  0201  1903               	btfsc	3,2
  5761  0202  2A14               	goto	l1841
  5762  0203                     l1831:	
  5763                           
  5764                           ;CW201x.c: 32: {
  5765                           ;CW201x.c: 33: for(a=209;a>0;a--) ;
  5766  0203  30D1               	movlw	209
  5767  0204  00F2               	movwf	??_CW_Delay10ms
  5768  0205  0872               	movf	??_CW_Delay10ms,w
  5769  0206  00F3               	movwf	CW_Delay10ms@a
  5770  0207  0873               	movf	CW_Delay10ms@a,w
  5771  0208  1903               	btfsc	3,2
  5772  0209  2A0F               	goto	l1839
  5773  020A                     l1837:	
  5774  020A  3001               	movlw	1
  5775  020B  02F3               	subwf	CW_Delay10ms@a,f
  5776  020C  0873               	movf	CW_Delay10ms@a,w
  5777  020D  1D03               	btfss	3,2
  5778  020E  2A0A               	goto	l1837
  5779  020F                     l1839:	
  5780  020F  3001               	movlw	1
  5781  0210  02F4               	subwf	CW_Delay10ms@b,f
  5782  0211  0874               	movf	CW_Delay10ms@b,w
  5783  0212  1D03               	btfss	3,2
  5784  0213  2A03               	goto	l1831
  5785  0214                     l1841:	
  5786  0214  3001               	movlw	1
  5787  0215  02F0               	subwf	CW_Delay10ms@c,f
  5788  0216  3000               	movlw	0
  5789  0217  3BF1               	subwfb	CW_Delay10ms@c+1,f
  5790  0218  29F8               	goto	_CW_Delay10ms
  5791  0219                     __end_of_CW_Delay10ms:	
  5792                           
  5793                           	psect	text27
  5794  00F2                     __ptext27:	
  5795 ;; *************** function _SYSTEM_Initialize *****************
  5796 ;; Defined at:
  5797 ;;		line 86 in file "mcc_generated_files/mcc.c"
  5798 ;; Parameters:    Size  Location     Type
  5799 ;;		None
  5800 ;; Auto vars:     Size  Location     Type
  5801 ;;		None
  5802 ;; Return value:  Size  Location     Type
  5803 ;;                  1    wreg      void 
  5804 ;; Registers used:
  5805 ;;		wreg, status,2, status,0, pclath, cstack
  5806 ;; Tracked objects:
  5807 ;;		On entry : 0/0
  5808 ;;		On exit  : 0/0
  5809 ;;		Unchanged: 0/0
  5810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5811 ;;      Params:         0       0       0       0
  5812 ;;      Locals:         0       0       0       0
  5813 ;;      Temps:          0       0       0       0
  5814 ;;      Totals:         0       0       0       0
  5815 ;;Total ram usage:        0 bytes
  5816 ;; Hardware stack levels used:    1
  5817 ;; Hardware stack levels required when called:    1
  5818 ;; This function calls:
  5819 ;;		_EUSART1_Initialize
  5820 ;;		_OSCILLATOR_Initialize
  5821 ;;		_PIN_MANAGER_Initialize
  5822 ;; This function is called by:
  5823 ;;		_main
  5824 ;; This function uses a non-reentrant model
  5825 ;;
  5826                           
  5827                           
  5828                           ;psect for function _SYSTEM_Initialize
  5829  00F2                     _SYSTEM_Initialize:	
  5830                           
  5831                           ;mcc.c: 89: PIN_MANAGER_Initialize();
  5832                           
  5833                           ;incstack = 0
  5834                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5835  00F2  225D               	fcall	_PIN_MANAGER_Initialize
  5836                           
  5837                           ;mcc.c: 90: OSCILLATOR_Initialize();
  5838  00F3  212D               	fcall	_OSCILLATOR_Initialize
  5839                           
  5840                           ;mcc.c: 91: EUSART1_Initialize();
  5841  00F4  2121               	fcall	_EUSART1_Initialize
  5842  00F5  0008               	return
  5843  00F6                     __end_of_SYSTEM_Initialize:	
  5844                           
  5845                           	psect	text28
  5846  025D                     __ptext28:	
  5847 ;; *************** function _PIN_MANAGER_Initialize *****************
  5848 ;; Defined at:
  5849 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  5850 ;; Parameters:    Size  Location     Type
  5851 ;;		None
  5852 ;; Auto vars:     Size  Location     Type
  5853 ;;  state           1    0[COMMON] unsigned char 
  5854 ;; Return value:  Size  Location     Type
  5855 ;;                  1    wreg      void 
  5856 ;; Registers used:
  5857 ;;		wreg, status,2, status,0
  5858 ;; Tracked objects:
  5859 ;;		On entry : 0/0
  5860 ;;		On exit  : 0/0
  5861 ;;		Unchanged: 0/0
  5862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5863 ;;      Params:         0       0       0       0
  5864 ;;      Locals:         1       0       0       0
  5865 ;;      Temps:          0       0       0       0
  5866 ;;      Totals:         1       0       0       0
  5867 ;;Total ram usage:        1 bytes
  5868 ;; Hardware stack levels used:    1
  5869 ;; This function calls:
  5870 ;;		Nothing
  5871 ;; This function is called by:
  5872 ;;		_SYSTEM_Initialize
  5873 ;; This function uses a non-reentrant model
  5874 ;;
  5875                           
  5876                           
  5877                           ;psect for function _PIN_MANAGER_Initialize
  5878  025D                     _PIN_MANAGER_Initialize:	
  5879                           
  5880                           ;pin_manager.c: 56: LATA = 0x00;
  5881                           
  5882                           ;incstack = 0
  5883                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  5884  025D  0140               	movlb	0	; select bank0
  5885  025E  0198               	clrf	24	;volatile
  5886                           
  5887                           ;pin_manager.c: 57: LATC = 0x00;
  5888  025F  019A               	clrf	26	;volatile
  5889                           
  5890                           ;pin_manager.c: 62: TRISA = 0x03;
  5891  0260  3003               	movlw	3
  5892  0261  0092               	movwf	18	;volatile
  5893                           
  5894                           ;pin_manager.c: 63: TRISC = 0x2A;
  5895  0262  302A               	movlw	42
  5896  0263  0094               	movwf	20	;volatile
  5897                           
  5898                           ;pin_manager.c: 68: ANSELC = 0x1D;
  5899  0264  301D               	movlw	29
  5900  0265  017E               	movlb	62	; select bank62
  5901  0266  00CE               	movwf	78	;volatile
  5902                           
  5903                           ;pin_manager.c: 69: ANSELA = 0x37;
  5904  0267  3037               	movlw	55
  5905  0268  00B8               	movwf	56	;volatile
  5906                           
  5907                           ;pin_manager.c: 74: WPUA = 0x00;
  5908  0269  01B9               	clrf	57	;volatile
  5909                           
  5910                           ;pin_manager.c: 75: WPUC = 0x00;
  5911  026A  01CF               	clrf	79	;volatile
  5912                           
  5913                           ;pin_manager.c: 80: ODCONA = 0x00;
  5914  026B  01BA               	clrf	58	;volatile
  5915                           
  5916                           ;pin_manager.c: 81: ODCONC = 0x00;
  5917  026C  01D0               	clrf	80	;volatile
  5918                           
  5919                           ;pin_manager.c: 88: bool state = GIE;
  5920  026D  3000               	movlw	0
  5921  026E  1B8B               	btfsc	11,7	;volatile
  5922  026F  3001               	movlw	1
  5923  0270  00F0               	movwf	PIN_MANAGER_Initialize@state
  5924                           
  5925                           ;pin_manager.c: 89: GIE = 0;
  5926  0271  138B               	bcf	11,7	;volatile
  5927                           
  5928                           ;pin_manager.c: 90: PPSLOCK = 0x55;
  5929  0272  3055               	movlw	85
  5930  0273  017D               	movlb	61	; select bank61
  5931  0274  008F               	movwf	15	;volatile
  5932                           
  5933                           ;pin_manager.c: 91: PPSLOCK = 0xAA;
  5934  0275  30AA               	movlw	170
  5935  0276  008F               	movwf	15	;volatile
  5936                           
  5937                           ;pin_manager.c: 92: PPSLOCKbits.PPSLOCKED = 0x00;
  5938  0277  100F               	bcf	15,0	;volatile
  5939                           
  5940                           ;pin_manager.c: 94: RX1DTPPSbits.RX1DTPPS = 0x15;
  5941  0278  084B               	movf	75,w	;volatile
  5942  0279  39C0               	andlw	-64
  5943  027A  3815               	iorlw	21
  5944  027B  00CB               	movwf	75	;volatile
  5945                           
  5946                           ;pin_manager.c: 95: RC4PPS = 0x0F;
  5947  027C  300F               	movlw	15
  5948  027D  017E               	movlb	62	; select bank62
  5949  027E  00A4               	movwf	36	;volatile
  5950                           
  5951                           ;pin_manager.c: 97: PPSLOCK = 0x55;
  5952  027F  3055               	movlw	85
  5953  0280  017D               	movlb	61	; select bank61
  5954  0281  008F               	movwf	15	;volatile
  5955                           
  5956                           ;pin_manager.c: 98: PPSLOCK = 0xAA;
  5957  0282  30AA               	movlw	170
  5958  0283  008F               	movwf	15	;volatile
  5959                           
  5960                           ;pin_manager.c: 99: PPSLOCKbits.PPSLOCKED = 0x01;
  5961  0284  140F               	bsf	15,0	;volatile
  5962                           
  5963                           ;pin_manager.c: 101: GIE = state;
  5964  0285  1C70               	btfss	PIN_MANAGER_Initialize@state,0
  5965  0286  2A89               	goto	u2100
  5966  0287  178B               	bsf	11,7	;volatile
  5967  0288  0008               	return
  5968  0289                     u2100:	
  5969  0289  138B               	bcf	11,7	;volatile
  5970  028A  0008               	return
  5971  028B                     __end_of_PIN_MANAGER_Initialize:	
  5972                           
  5973                           	psect	text29
  5974  012D                     __ptext29:	
  5975 ;; *************** function _OSCILLATOR_Initialize *****************
  5976 ;; Defined at:
  5977 ;;		line 94 in file "mcc_generated_files/mcc.c"
  5978 ;; Parameters:    Size  Location     Type
  5979 ;;		None
  5980 ;; Auto vars:     Size  Location     Type
  5981 ;;		None
  5982 ;; Return value:  Size  Location     Type
  5983 ;;                  1    wreg      void 
  5984 ;; Registers used:
  5985 ;;		wreg, status,2
  5986 ;; Tracked objects:
  5987 ;;		On entry : 0/0
  5988 ;;		On exit  : 0/0
  5989 ;;		Unchanged: 0/0
  5990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5991 ;;      Params:         0       0       0       0
  5992 ;;      Locals:         0       0       0       0
  5993 ;;      Temps:          0       0       0       0
  5994 ;;      Totals:         0       0       0       0
  5995 ;;Total ram usage:        0 bytes
  5996 ;; Hardware stack levels used:    1
  5997 ;; This function calls:
  5998 ;;		Nothing
  5999 ;; This function is called by:
  6000 ;;		_SYSTEM_Initialize
  6001 ;; This function uses a non-reentrant model
  6002 ;;
  6003                           
  6004                           
  6005                           ;psect for function _OSCILLATOR_Initialize
  6006  012D                     _OSCILLATOR_Initialize:	
  6007                           
  6008                           ;mcc.c: 97: OSCCON1 = 0x10;
  6009                           
  6010                           ;incstack = 0
  6011                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6012  012D  3010               	movlw	16
  6013  012E  0151               	movlb	17	; select bank17
  6014  012F  008D               	movwf	13	;volatile
  6015                           
  6016                           ;mcc.c: 99: OSCCON3 = 0x00;
  6017  0130  018F               	clrf	15	;volatile
  6018                           
  6019                           ;mcc.c: 101: OSCEN = 0x00;
  6020  0131  0191               	clrf	17	;volatile
  6021                           
  6022                           ;mcc.c: 103: OSCFRQ = 0x05;
  6023  0132  3005               	movlw	5
  6024  0133  0093               	movwf	19	;volatile
  6025                           
  6026                           ;mcc.c: 105: OSCSTAT = 0x00;
  6027  0134  0190               	clrf	16	;volatile
  6028                           
  6029                           ;mcc.c: 107: OSCTUNE = 0x00;
  6030  0135  0192               	clrf	18	;volatile
  6031  0136                     l60:	
  6032                           ;mcc.c: 110: {
  6033                           
  6034                           ;mcc.c: 109: while(PLLR == 0)
  6035                           
  6036  0136  1810               	btfsc	16,0	;volatile
  6037  0137  0008               	return
  6038  0138  2936               	goto	l60
  6039  0139                     __end_of_OSCILLATOR_Initialize:	
  6040                           
  6041                           	psect	text30
  6042  0121                     __ptext30:	
  6043 ;; *************** function _EUSART1_Initialize *****************
  6044 ;; Defined at:
  6045 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  6046 ;; Parameters:    Size  Location     Type
  6047 ;;		None
  6048 ;; Auto vars:     Size  Location     Type
  6049 ;;		None
  6050 ;; Return value:  Size  Location     Type
  6051 ;;                  1    wreg      void 
  6052 ;; Registers used:
  6053 ;;		wreg
  6054 ;; Tracked objects:
  6055 ;;		On entry : 0/0
  6056 ;;		On exit  : 0/0
  6057 ;;		Unchanged: 0/0
  6058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6059 ;;      Params:         0       0       0       0
  6060 ;;      Locals:         0       0       0       0
  6061 ;;      Temps:          0       0       0       0
  6062 ;;      Totals:         0       0       0       0
  6063 ;;Total ram usage:        0 bytes
  6064 ;; Hardware stack levels used:    1
  6065 ;; This function calls:
  6066 ;;		Nothing
  6067 ;; This function is called by:
  6068 ;;		_SYSTEM_Initialize
  6069 ;; This function uses a non-reentrant model
  6070 ;;
  6071                           
  6072                           
  6073                           ;psect for function _EUSART1_Initialize
  6074  0121                     _EUSART1_Initialize:	
  6075                           
  6076                           ;eusart1.c: 60: BAUD1CON = 0x08;
  6077                           
  6078                           ;incstack = 0
  6079                           ; Regs used in _EUSART1_Initialize: [wreg]
  6080  0121  3008               	movlw	8
  6081  0122  0142               	movlb	2	; select bank2
  6082  0123  009F               	movwf	31	;volatile
  6083                           
  6084                           ;eusart1.c: 63: RC1STA = 0x90;
  6085  0124  3090               	movlw	144
  6086  0125  009D               	movwf	29	;volatile
  6087                           
  6088                           ;eusart1.c: 66: TX1STA = 0x24;
  6089  0126  3024               	movlw	36
  6090  0127  009E               	movwf	30	;volatile
  6091                           
  6092                           ;eusart1.c: 69: SP1BRGL = 0x40;
  6093  0128  3040               	movlw	64
  6094  0129  009B               	movwf	27	;volatile
  6095                           
  6096                           ;eusart1.c: 72: SP1BRGH = 0x03;
  6097  012A  3003               	movlw	3
  6098  012B  009C               	movwf	28	;volatile
  6099  012C  0008               	return
  6100  012D                     __end_of_EUSART1_Initialize:	
  6101                           
  6102                           	psect	text31
  6103  00FA                     __ptext31:	
  6104 ;; *************** function _EUSART1_Write *****************
  6105 ;; Defined at:
  6106 ;;		line 96 in file "mcc_generated_files/eusart1.c"
  6107 ;; Parameters:    Size  Location     Type
  6108 ;;  txData          1    wreg     unsigned char 
  6109 ;; Auto vars:     Size  Location     Type
  6110 ;;  txData          1    0[COMMON] unsigned char 
  6111 ;; Return value:  Size  Location     Type
  6112 ;;                  1    wreg      void 
  6113 ;; Registers used:
  6114 ;;		wreg
  6115 ;; Tracked objects:
  6116 ;;		On entry : 0/0
  6117 ;;		On exit  : 0/0
  6118 ;;		Unchanged: 0/0
  6119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6120 ;;      Params:         0       0       0       0
  6121 ;;      Locals:         1       0       0       0
  6122 ;;      Temps:          0       0       0       0
  6123 ;;      Totals:         1       0       0       0
  6124 ;;Total ram usage:        1 bytes
  6125 ;; Hardware stack levels used:    1
  6126 ;; This function calls:
  6127 ;;		Nothing
  6128 ;; This function is called by:
  6129 ;;		_main
  6130 ;; This function uses a non-reentrant model
  6131 ;;
  6132                           
  6133                           
  6134                           ;psect for function _EUSART1_Write
  6135  00FA                     _EUSART1_Write:	
  6136                           
  6137                           ;incstack = 0
  6138                           ; Regs used in _EUSART1_Write: [wreg]
  6139                           ;EUSART1_Write@txData stored from wreg
  6140  00FA  00F0               	movwf	EUSART1_Write@txData
  6141  00FB                     l31:	
  6142                           ;eusart1.c: 99: {
  6143                           
  6144                           ;eusart1.c: 98: while(0 == PIR3bits.TX1IF)
  6145                           
  6146  00FB  014E               	movlb	14	; select bank14
  6147  00FC  1E0F               	btfss	15,4	;volatile
  6148  00FD  28FB               	goto	l31
  6149                           
  6150                           ;eusart1.c: 100: }
  6151                           ;eusart1.c: 102: TX1REG = txData;
  6152  00FE  0870               	movf	EUSART1_Write@txData,w
  6153  00FF  0142               	movlb	2	; select bank2
  6154  0100  009A               	movwf	26	;volatile
  6155  0101  0008               	return
  6156  0102                     __end_of_EUSART1_Write:	
  6157  007E                     btemp	set	126	;btemp
  6158  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    128
    Data        0
    BSS         11
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     39      50
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    cw_write@w_pdata	PTR unsigned char  size(1) Largest target is 1
		 -> cw_por@reset_val(BANK0[1]), cw_init@reg_val(BANK0[1]), cw_update_config_info@reset_val(BANK0[1]), cw_update_config_info@reg_val(BANK0[1]), 

    cw_read_word@r_pdata	PTR unsigned char  size(1) Largest target is 2
		 -> cw_get_vol@reg_val(BANK0[2]), 

    cw_read@r_pdata	PTR unsigned char  size(1) Largest target is 1
		 -> cw_get_capacity@reg_val(BANK0[1]), cw_init@reg_val(BANK0[1]), cw_update_config_info@reg_val(BANK0[1]), 


Critical Paths under _main in COMMON

    _cw_get_vol->_cw_read_word
    _cw_read_word->_wait_r_ack
    _sn_ack->_Delay10us
    ___lldiv->___lmul
    _cw_get_capacity->_cw_read
    _cw_init->_cw_read
    _cw_update_config_info->_cw_read
    _cw_write->_wait_r_ack
    _cw_read->_wait_r_ack
    _write_byte->_Delay10us
    _wait_r_ack->_r_ack
    _stop->_Delay10us
    _r_ack->_Delay10us
    _start->_Delay10us
    _s_ack->_Delay10us
    _read_byte->_Delay10us
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize

Critical Paths under _main in BANK0

    _cw_bat_work->_update_capacity
    _cw_bat_work->_update_vol
    _update_vol->_cw_get_vol
    _cw_get_vol->___lldiv
    _cw_read_word->_wait_r_ack
    _update_capacity->_cw_get_capacity
    _cw_get_capacity->_cw_por
    _cw_por->_cw_init
    _cw_bat_init->_cw_init
    _cw_init->_cw_update_config_info
    _cw_update_config_info->_cw_write
    _cw_write->_wait_r_ack
    _cw_read->_wait_r_ack

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   24421
                                             37 BANK0      2     2      0
                       _CW_Delay10ms
                      _EUSART1_Write
                  _SYSTEM_Initialize
                        _cw_bat_init
                        _cw_bat_work
 ---------------------------------------------------------------------------------
 (1) _cw_bat_work                                          0     0      0   15199
                    _update_capacity
                  _update_usb_online
                         _update_vol
 ---------------------------------------------------------------------------------
 (2) _update_vol                                           2     2      0    2755
                                             35 BANK0      2     2      0
                         _cw_get_vol
 ---------------------------------------------------------------------------------
 (3) _cw_get_vol                                          22    20      2    2659
                                             13 BANK0     22    20      2
                            ___lldiv
                             ___lmul
                       _cw_read_word
 ---------------------------------------------------------------------------------
 (4) _cw_read_word                                         7     4      3    1687
                                             12 COMMON     2     2      0
                                              4 BANK0      5     2      3
                          _read_byte
                              _s_ack
                             _sn_ack
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (5) _sn_ack                                               0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     220
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     290
                                             12 COMMON     1     1      0
                                              0 BANK0     13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _update_usb_online                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _update_capacity                                      3     3      0   12444
                                             34 BANK0      3     3      0
                    _cw_get_capacity
 ---------------------------------------------------------------------------------
 (3) _cw_get_capacity                                      9     7      2   12355
                                             26 BANK0      8     6      2
                             _cw_por
                            _cw_read
 ---------------------------------------------------------------------------------
 (4) _cw_por                                               7     5      2   10375
                                             19 BANK0      7     5      2
                      _CW_Delay100us
                            _cw_init
                           _cw_write
 ---------------------------------------------------------------------------------
 (1) _cw_bat_init                                          3     3      0    8650
                                             19 BANK0      3     3      0
                            _cw_init
 ---------------------------------------------------------------------------------
 (5) _cw_init                                              6     6      0    8581
                                             13 BANK0      6     6      0
                       _CW_Delay10ms
                            _cw_read
              _cw_update_config_info
                           _cw_write
 ---------------------------------------------------------------------------------
 (6) _cw_update_config_info                                6     6      0    4045
                                              7 BANK0      6     6      0
                      _CW_Delay100us
                            _cw_read
                           _cw_write
 ---------------------------------------------------------------------------------
 (5) _cw_write                                             4     1      3    1516
                                             12 COMMON     1     1      0
                                              4 BANK0      3     0      3
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (4) _cw_read                                              4     2      2    1842
                                             12 COMMON     2     2      0
                                              4 BANK0      2     0      2
                          _read_byte
                              _s_ack
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (5) _write_byte                                           3     3      0     229
                                              4 COMMON     3     3      0
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _wait_r_ack                                           6     4      2     391
                                             10 COMMON     2     0      2
                                              0 BANK0      4     4      0
                              _r_ack
                               _stop
 ---------------------------------------------------------------------------------
 (6) _stop                                                 0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (6) _r_ack                                                6     4      2     161
                                              4 COMMON     6     4      2
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _start                                                0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _s_ack                                                0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _read_byte                                            3     3      0     252
                                              4 COMMON     3     3      0
                          _Delay10us
 ---------------------------------------------------------------------------------
 (6) _Delay10us                                            4     4      0     138
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (7) _CW_Delay100us                                        4     4      0     138
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (6) _CW_Delay10ms                                         6     4      2     521
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      23
                 _EUSART1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Write                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CW_Delay10ms
   _EUSART1_Write
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _cw_bat_init
     _cw_init
       _CW_Delay10ms
       _cw_read
         _read_byte
           _Delay10us
         _s_ack
           _Delay10us
         _start
           _Delay10us
         _stop
           _Delay10us
         _wait_r_ack
           _r_ack
             _Delay10us
           _stop
             _Delay10us
         _write_byte
           _Delay10us
       _cw_update_config_info
         _CW_Delay100us
         _cw_read
           _read_byte
             _Delay10us
           _s_ack
             _Delay10us
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us
         _cw_write
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us
       _cw_write
         _start
           _Delay10us
         _stop
           _Delay10us
         _wait_r_ack
           _r_ack
             _Delay10us
           _stop
             _Delay10us
         _write_byte
           _Delay10us
   _cw_bat_work
     _update_capacity
       _cw_get_capacity
         _cw_por
           _CW_Delay100us
           _cw_init
             _CW_Delay10ms
             _cw_read
               _read_byte
                 _Delay10us
               _s_ack
                 _Delay10us
               _start
                 _Delay10us
               _stop
                 _Delay10us
               _wait_r_ack
                 _r_ack
                   _Delay10us
                 _stop
                   _Delay10us
               _write_byte
                 _Delay10us
             _cw_update_config_info
               _CW_Delay100us
               _cw_read
                 _read_byte
                   _Delay10us
                 _s_ack
                   _Delay10us
                 _start
                   _Delay10us
                 _stop
                   _Delay10us
                 _wait_r_ack
                   _r_ack
                     _Delay10us
                   _stop
                     _Delay10us
                 _write_byte
                   _Delay10us
               _cw_write
                 _start
                   _Delay10us
                 _stop
                   _Delay10us
                 _wait_r_ack
                   _r_ack
                     _Delay10us
                   _stop
                     _Delay10us
                 _write_byte
                   _Delay10us
             _cw_write
               _start
                 _Delay10us
               _stop
                 _Delay10us
               _wait_r_ack
                 _r_ack
                   _Delay10us
                 _stop
                   _Delay10us
               _write_byte
                 _Delay10us
           _cw_write
             _start
               _Delay10us
             _stop
               _Delay10us
             _wait_r_ack
               _r_ack
                 _Delay10us
               _stop
                 _Delay10us
             _write_byte
               _Delay10us
         _cw_read
           _read_byte
             _Delay10us
           _s_ack
             _Delay10us
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us
     _update_usb_online
     _update_vol
       _cw_get_vol
         ___lldiv
           ___lmul (ARG)
         ___lmul
         _cw_read_word
           _read_byte
             _Delay10us
           _s_ack
             _Delay10us
           _sn_ack
             _Delay10us
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     27      32       5       62.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
ABS                  0      0      40      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      40      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Wed Sep 13 01:46:01 2017

                                    __CFG_CP$OFF 0000                                               l31 00FB  
                                             l60 0136                                  _update_capacity 0219  
                                    __CFG_LVP$ON 0000                                              l241 0767  
                                            l171 0550                                              l404 0241  
                                            l228 0607                                              l280 06A1  
                                            l168 054E                                              l281 06AD  
                                            l279 0695                                              _GIE 005F  
                                   __CFG_BORV$LO 0000                                              wreg 0009  
                                  __CFG_BBEN$OFF 0000                                     __CFG_ZCD$OFF 0000  
                                  ?_cw_read_word 0024                                             l2001 077C  
                                  CW_Delay10ms@a 0073                                    CW_Delay10ms@b 0074  
                                  CW_Delay10ms@c 0070                                             l2033 07B8  
                                           l2009 078E                                             l2017 07A1  
                                           l2027 07B3                                             l2131 04E2  
                                           l2045 07CF                                             l2053 07DB  
                                           l2109 0460                                             l2213 040C  
                                           l2221 0412                                             l2141 050B  
                                           l2125 04D4                                             l2063 07F0  
                                           l2215 040D                                             l2143 04E4  
                                           l2119 04C6                                             l2153 0293  
                                           l2145 0511                                             l2171 0474  
                                           l2341 0180                                             l2181 04A2  
                                           l2173 0482                                             l2157 029D  
                                           l2245 067B                                             l2237 0663  
                                           l1631 01EE                                             l1623 01E2  
                                           l1703 01A8                                             l2087 0437  
                                           l1633 01F3                                             l1801 02FB  
                                           l2329 0109                                             l2185 04AD  
                                           l2257 06BC                                             l2441 052F  
                                           l1731 0251                                             l2347 018F  
                                           l2099 044E                                             l2443 0539  
                                           l1629 01E9                                             l1901 05EE  
                                           l2453 0563                                             l2445 0544  
                                           l1831 0203                                             l1671 02C8  
                                           l1815 0319                                             l1807 0308  
                                           l2199 03ED                                             l2455 0577  
                                           l2447 0554                                             l2439 0525  
                                           l1841 0214                                             l1761 01CE  
                                           l1753 01C2                                             l1905 05F6  
                                           l1763 01D3                                             l1739 025B  
                                           l1923 061D                                             l1837 020A  
                                           l1685 02DD                                             l1773 032D  
                                           l1861 05A0                                             l1839 020F  
                                           l1759 01C9                                             l1687 02E9  
                                           l1935 0633                                             l1855 0597  
                                           l1785 0348                                             l1945 0646  
                                           l1881 05CA                                             l1779 033A  
                                           l1867 05A5                                             l1877 05C2  
                                           l1895 05E1                                             l1887 05CF  
                                           l1967 073D                                             l1959 072C  
                                           l1995 0777                                             l1979 0756  
                                           u2100 0289                                             u1260 01A6  
                                           _LATA 0018                                             _LATC 001A  
                                           u2145 022A                                             u2155 0233  
                                           u2075 069B                                             u2085 06A7  
                                           u2285 0177                                             u1905 029E  
                                           u1915 02A5                                             u1945 0477  
                                           u1875 0504                                             u1965 0483  
                                           u1885 04ED                                             u1975 0497  
                                           u1985 04A3                                             _PLLR 4480  
                                           _WPUA 1F39                                             _WPUC 1F4F  
                                  _EUSART1_Write 00FA                                    __CFG_FCMEN$ON 0000  
                                           _main 0517                                             fsr0h 0005  
                                           fsr1h 0007                                             indf0 0000  
                                           fsr0l 0004                                             indf1 0001  
                                           fsr1l 0006                                             btemp 007E  
                                           _stop 0139                                    __CFG_BOREN$ON 0000  
                                           start 0001                                    __CFG_CSWEN$ON 0000  
                                 CW_Delay100us@a 0071                                   CW_Delay100us@b 0072  
                                 CW_Delay100us@i 0073                                 ?_cw_get_capacity 003A  
                     update_capacity@cw_capacity 0043                   __size_of_OSCILLATOR_Initialize 000C  
                  __end_of_OSCILLATOR_Initialize 0139                            _cw_update_config_info 0583  
                                          ?_main 0070                                    __CFG_WDTE$OFF 0000  
                                __end_of___lldiv 04B6                                            ?_stop 0070  
                                          _OSCEN 0891                                            _TRISA 0012  
                                          _TRISC 0014                              ___lmul@multiplicand 0074  
                                  __CFG_WRTB$OFF 0000                                    __CFG_WRTC$OFF 0000  
                                __end_of_cw_init 07F2                                  __end_of_cw_read 0356  
                                 ??_cw_read_word 007C                                            _count 0051  
                                          _r_ack 0151                                            _s_ack 010B  
                                          _start 0116                                   ?_EUSART1_Write 0070  
                      cw_init@cw_bat_config_info 0396                                            status 0003  
                                          wtemp0 007E                                   __CFG_MCLRE$OFF 0000  
                        __end_of_update_capacity 023A                                  __initialization 07F2  
                     __end_of_EUSART1_Initialize 012D                                     __end_of_main 0583  
                             __size_of_Delay10us 0020                                     __end_of_stop 0145  
                                 __CFG_SAFEN$OFF 0000                                   cw_bat_init@ret 0035  
                                         ??_main 0045                                           ??_stop 0074  
                                         ?_r_ack 0074                                           ?_s_ack 0070  
                               cw_read@point_reg 007D                                           _CHARGE 0050  
                                         _ANSELA 1F38                                           _ANSELC 1F4E  
                                         ?_start 0070                                           _RC1REG 0119  
                                         _RC1STA 011D                                           _RC4PPS 1F24  
                                         _ODCONA 1F3A                                           _ODCONC 1F50  
                                 __CFG_WDTCCS$SC 0000                                           _OSCFRQ 0893  
                                         _TX1REG 011A                                           _TX1STA 011E  
                                cw_write@w_pdata 0024                                   __CFG_PWRTE$OFF 0000  
                                  cw_get_vol@F80 004D                             __size_of_cw_bat_init 001B  
                           __size_of_cw_bat_work 0004                                           ___lmul 028B  
                                  cw_get_vol@ret 0034                                   __CFG_STVREN$ON 0000  
                                      ??___lldiv 007C                                 __end_of_cw_write 031E  
                                         _cw_bat 0047                                           _cw_por 041B  
                         ?_cw_update_config_info 0070                                           _sn_ack 0145  
                                      ??_cw_init 002D                                        ??_cw_read 007C  
                                  ?_CW_Delay10ms 0070                                  ??_EUSART1_Write 0070  
                              __end_of_Delay10us 01F8                                _SYSTEM_Initialize 00F2  
                        __end_of__initialization 07FE                               ?_SYSTEM_Initialize 0070  
                              _update_usb_online 0102                                 ?_update_capacity 0070  
                              cw_get_vol@ad_buff 0041                                   __pcstackCOMMON 0070  
                             ?_update_usb_online 0070                              ??_SYSTEM_Initialize 0071  
                           __end_of_cw_read_word 0517                                    __end_of_r_ack 0167  
                                  __end_of_s_ack 0116                                    __end_of_start 0121  
                         __size_of_CW_Delay100us 0020                                   ??_CW_Delay10ms 0072  
                            ??_update_usb_online 0070                                cw_get_vol@reg_val 0036  
                                cw_bat_init@loop 0034                                          ??_r_ack 0076  
                                        ??_s_ack 0074                        __end_of_SYSTEM_Initialize 00F6  
                                        ??_start 0074                                       __pbssBANK0 0047  
                      __end_of_update_usb_online 010B                               __size_of_read_byte 0023  
                                     __pmaintext 0517                                          ?___lmul 0070  
                                __CFG_PPS1WAY$ON 0000                                          ?_cw_por 0033  
                                 ___lmul@product 0078                                          ?_sn_ack 0070  
                                        _SP1BRGH 011C                                          _SP1BRGL 011B  
                                        _OSCCON1 088D                                          _OSCCON3 088F  
                                        _OSCSTAT 0890                                          _OSCTUNE 0892  
                                        _PPSLOCK 1E8F                                       _cw_get_vol 0648  
                                      ?_cw_write 0024                                    _CW_Delay100us 01B8  
                           update_vol@cw_voltage 0043                                  __size_of___lmul 002F  
              __end_ofcw_init@cw_bat_config_info 03D6                                          ___lldiv 0463  
                                __size_of_cw_por 0048                                  __size_of_sn_ack 000C  
                                        __ptext1 00F6                                          __ptext2 0167  
                                        __ptext3 0648                                          __ptext4 04B6  
                                        __ptext5 0145                                          __ptext6 028B  
                                        __ptext7 0463                                          __ptext8 0102  
                                        __ptext9 0219                                          _cw_init 0719  
                                        _cw_read 031E                                  __CFG_WRTAPP$OFF 0000  
                          _OSCILLATOR_Initialize 012D                                __end_of_read_byte 025D  
                             _EUSART1_Initialize 0121                         __size_of_cw_get_capacity 0045  
                       ??_PIN_MANAGER_Initialize 0070                                  __CFG_WRTSAF$OFF 0000  
                     __size_of_SYSTEM_Initialize 0004                                          main@ret 0046  
                           end_of_initialization 07FE                                 write_byte@w_data 0075  
                                 ?_CW_Delay100us 0070                              ?_EUSART1_Initialize 0070  
                                     ??_cw_write 007C                       __size_of_update_usb_online 0009  
                           __end_of_CW_Delay10ms 0219                            __size_of_cw_read_word 0061  
                                ___lldiv@divisor 0020                                  cw_por@reset_val 0037  
                                ___lldiv@counter 002C                                       _reset_loop 004F  
                   cw_update_config_info@reg_val 002C                          ??_cw_update_config_info 0027  
                                    wait_r_ack@i 0022                                       _wait_r_ack 02BA  
                           ??_EUSART1_Initialize 0070                            __CFG_WDTCPS$WDTCPS_31 0000  
                                      _PORTCbits 000E                         cw_update_config_info@ret 0029  
                                      _TRISCbits 0014                                       _update_vol 0167  
                                    ?_cw_get_vol 002D                              EUSART1_Write@txData 0070  
                               __CFG_FEXTOSC$OFF 0000                                     _cw_read_word 04B6  
                                      _Delay10us 01D8                                   cw_init@reg_val 0032  
                                  ??_cw_bat_init 0033                                    ??_cw_bat_work 007E  
                                     cw_init@ret 0030                                   cw_read@r_pdata 0024  
                             cw_get_vol@ad_value 003C                                   __end_of___lmul 02BA  
                                     _write_byte 0199                                   __end_of_cw_por 0463  
                         ?_OSCILLATOR_Initialize 0070                                   __end_of_sn_ack 0151  
                            start_initialization 07F2                  __size_of_PIN_MANAGER_Initialize 002E  
                                ??_CW_Delay100us 0070                            __end_of_EUSART1_Write 0102  
                     cw_get_capacity@cw_capacity 003E                                ??_cw_get_capacity 003C  
                                     ?_Delay10us 0070                                 __CFG_LPBOREN$OFF 0000  
                                       ??___lmul 0078                              __end_of_cw_bat_init 0199  
                            __size_of_cw_get_vol 00D1                                      ?_wait_r_ack 007A  
                            __end_of_cw_bat_work 00FA                                         ??_cw_por 0035  
                                       ??_sn_ack 0074                                       read_byte@i 0075  
                       __size_of_update_capacity 0021                           cw_update_config_info@i 002B  
                         cw_get_capacity@reg_val 0041                                        ___latbits 0000  
                                  __pcstackBANK0 0020                                      ?_update_vol 0070  
                          __size_of_CW_Delay10ms 0021                                __size_of_cw_write 0032  
                         cw_get_vol@ad_value_max 003A                           cw_get_vol@ad_value_min 0038  
                            cw_read_word@r_pdata 0024                           _PIN_MANAGER_Initialize 025D  
                                       ?___lldiv 0020                                      ?_write_byte 0070  
                          cw_read_word@point_reg 0027                                         ?_cw_init 0070  
                                       ?_cw_read 0024                                         _BAUD1CON 011F  
                                   _CW_Delay10ms 01F8                             __CFG_RSTOSC$HFINTPLL 0000  
                                 __size_of_r_ack 0016                                   __size_of_s_ack 000B  
                                      _read_byte 023A                                   __size_of_start 000B  
                            __size_of_wait_r_ack 0032                                      ??_Delay10us 0070  
                                       _LATAbits 0018                                         _LATCbits 001A  
                                    _cw_bat_init 017E                                      _cw_bat_work 00F6  
                                       _PIR3bits 070F                                __CFG_BBSIZE$BB512 0000  
                            __size_of_update_vol 0017                   __size_of_cw_update_config_info 00C5  
                  __end_of_cw_update_config_info 0648                                     _RX1DTPPSbits 1ECB  
                                    write_byte@i 0076                                     ??_cw_get_vol 002F  
                              ??_update_capacity 0042                                        cw_por@ret 0038  
                              ___lmul@multiplier 0070                                       ?_read_byte 0070  
                              cw_write@point_reg 007C                              __size_of_write_byte 001F  
                                read_byte@r_data 0076                          ??_OSCILLATOR_Initialize 0070  
                             __end_of_cw_get_vol 0719                                 __size_of___lldiv 0053  
                    __size_of_EUSART1_Initialize 000C                                  _cw_get_capacity 03D6  
                               __size_of_cw_init 00D9                                 __size_of_cw_read 0038  
                             cw_read_word@length 0025                                         __ptext10 03D6  
                                       __ptext11 041B                                         __ptext20 0151  
                                       __ptext12 017E                                         __ptext21 0116  
                                       __ptext13 0719                                         __ptext30 0121  
                                       __ptext22 010B                                         __ptext14 0583  
                                       __ptext31 00FA                                         __ptext23 023A  
                                       __ptext15 02EC                                         __ptext24 01D8  
                                       __ptext16 031E                                         __ptext25 01B8  
                                       __ptext17 0199                                         __ptext26 01F8  
                                       __ptext18 02BA                                         __ptext27 00F2  
                                       __ptext19 0139                                         __ptext28 025D  
                                       __ptext29 012D                                         _cw_write 02EC  
                             cw_get_capacity@ret 003F                                    __size_of_main 006C  
                                  __size_of_stop 000C                             __CFG_WDTCWS$WDTCWS_7 0000  
                                     Delay10us@a 0071                                       Delay10us@b 0072  
                                     Delay10us@i 0073                                       _RC1STAbits 011D  
                                   ??_wait_r_ack 007C                                         cw_init@i 002F  
                 cw_update_config_info@reset_val 0028                      PIN_MANAGER_Initialize@state 0070  
                                       r_ack@ack 0078                                    wait_r_ack@ack 0020  
__end_ofcw_update_config_info@cw_bat_config_info 0396          cw_update_config_info@cw_bat_config_info 0356  
                                   ??_update_vol 007E                                      ??_read_byte 0074  
                          __end_of_CW_Delay100us 01D8                                cw_read_word@count 0028  
                             __end_of_wait_r_ack 02EC                                 ___lldiv@dividend 0024  
                        ?_PIN_MANAGER_Initialize 0070                                __CFG_CLKOUTEN$OFF 0000  
                                    _PPSLOCKbits 1E8F                          __end_of_cw_get_capacity 041B  
                             __end_of_update_vol 017E                           cw_get_vol@get_ad_times 0040  
                                   ??_write_byte 0074                           __size_of_EUSART1_Write 0008  
                                  __pstringtext1 0396                                    __pstringtext2 0356  
                               ___lldiv@quotient 0028                   __end_of_PIN_MANAGER_Initialize 028B  
                             __end_of_write_byte 01B8                                     ?_cw_bat_init 0070  
                                   ?_cw_bat_work 0070  
