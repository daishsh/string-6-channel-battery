

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Mon Aug 28 22:01:26 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F15323
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	dabs	1,0x7E,2
    47  0000                     
    48                           ; Version 1.43
    49                           ; Generated 25/07/2017 GMT
    50                           ; 
    51                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC16F15323 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     	;# 
    83  0001                     	;# 
    84  0002                     	;# 
    85  0003                     	;# 
    86  0004                     	;# 
    87  0005                     	;# 
    88  0006                     	;# 
    89  0007                     	;# 
    90  0008                     	;# 
    91  0009                     	;# 
    92  000A                     	;# 
    93  000B                     	;# 
    94  000C                     	;# 
    95  000E                     	;# 
    96  0012                     	;# 
    97  0014                     	;# 
    98  0018                     	;# 
    99  001A                     	;# 
   100  009B                     	;# 
   101  009B                     	;# 
   102  009C                     	;# 
   103  009D                     	;# 
   104  009E                     	;# 
   105  009F                     	;# 
   106  0119                     	;# 
   107  0119                     	;# 
   108  0119                     	;# 
   109  011A                     	;# 
   110  011A                     	;# 
   111  011A                     	;# 
   112  011B                     	;# 
   113  011B                     	;# 
   114  011B                     	;# 
   115  011B                     	;# 
   116  011B                     	;# 
   117  011C                     	;# 
   118  011C                     	;# 
   119  011C                     	;# 
   120  011D                     	;# 
   121  011D                     	;# 
   122  011D                     	;# 
   123  011E                     	;# 
   124  011E                     	;# 
   125  011E                     	;# 
   126  011F                     	;# 
   127  011F                     	;# 
   128  011F                     	;# 
   129  011F                     	;# 
   130  011F                     	;# 
   131  018C                     	;# 
   132  018D                     	;# 
   133  018E                     	;# 
   134  018F                     	;# 
   135  0190                     	;# 
   136  0191                     	;# 
   137  0192                     	;# 
   138  020C                     	;# 
   139  020C                     	;# 
   140  020D                     	;# 
   141  020E                     	;# 
   142  020F                     	;# 
   143  020F                     	;# 
   144  0210                     	;# 
   145  0210                     	;# 
   146  0211                     	;# 
   147  0211                     	;# 
   148  028C                     	;# 
   149  028C                     	;# 
   150  028D                     	;# 
   151  028D                     	;# 
   152  028E                     	;# 
   153  028F                     	;# 
   154  0290                     	;# 
   155  0291                     	;# 
   156  030C                     	;# 
   157  030C                     	;# 
   158  030D                     	;# 
   159  030E                     	;# 
   160  030F                     	;# 
   161  0310                     	;# 
   162  0310                     	;# 
   163  0311                     	;# 
   164  0312                     	;# 
   165  0313                     	;# 
   166  0314                     	;# 
   167  0315                     	;# 
   168  0316                     	;# 
   169  0318                     	;# 
   170  0319                     	;# 
   171  031A                     	;# 
   172  031C                     	;# 
   173  031D                     	;# 
   174  031E                     	;# 
   175  038C                     	;# 
   176  038D                     	;# 
   177  038E                     	;# 
   178  058C                     	;# 
   179  058C                     	;# 
   180  058D                     	;# 
   181  058E                     	;# 
   182  058F                     	;# 
   183  058F                     	;# 
   184  0590                     	;# 
   185  0591                     	;# 
   186  0592                     	;# 
   187  0593                     	;# 
   188  059C                     	;# 
   189  059C                     	;# 
   190  059D                     	;# 
   191  059D                     	;# 
   192  059E                     	;# 
   193  059F                     	;# 
   194  060C                     	;# 
   195  060D                     	;# 
   196  060E                     	;# 
   197  060F                     	;# 
   198  0610                     	;# 
   199  0611                     	;# 
   200  0612                     	;# 
   201  0613                     	;# 
   202  0614                     	;# 
   203  070C                     	;# 
   204  070D                     	;# 
   205  070E                     	;# 
   206  070F                     	;# 
   207  0710                     	;# 
   208  0711                     	;# 
   209  0712                     	;# 
   210  0713                     	;# 
   211  0716                     	;# 
   212  0717                     	;# 
   213  0718                     	;# 
   214  0719                     	;# 
   215  071A                     	;# 
   216  071B                     	;# 
   217  071C                     	;# 
   218  071D                     	;# 
   219  0796                     	;# 
   220  0797                     	;# 
   221  0798                     	;# 
   222  0799                     	;# 
   223  079A                     	;# 
   224  079B                     	;# 
   225  080C                     	;# 
   226  080D                     	;# 
   227  080E                     	;# 
   228  080F                     	;# 
   229  0810                     	;# 
   230  0811                     	;# 
   231  0812                     	;# 
   232  0813                     	;# 
   233  0814                     	;# 
   234  081A                     	;# 
   235  081A                     	;# 
   236  081B                     	;# 
   237  081C                     	;# 
   238  081C                     	;# 
   239  081D                     	;# 
   240  081E                     	;# 
   241  081F                     	;# 
   242  088C                     	;# 
   243  088D                     	;# 
   244  088E                     	;# 
   245  088F                     	;# 
   246  0890                     	;# 
   247  0891                     	;# 
   248  0892                     	;# 
   249  0893                     	;# 
   250  0895                     	;# 
   251  0896                     	;# 
   252  090C                     	;# 
   253  090E                     	;# 
   254  090F                     	;# 
   255  091F                     	;# 
   256  098F                     	;# 
   257  098F                     	;# 
   258  0990                     	;# 
   259  0991                     	;# 
   260  0992                     	;# 
   261  0993                     	;# 
   262  0994                     	;# 
   263  0995                     	;# 
   264  0996                     	;# 
   265  0997                     	;# 
   266  1E0F                     	;# 
   267  1E10                     	;# 
   268  1E11                     	;# 
   269  1E12                     	;# 
   270  1E13                     	;# 
   271  1E14                     	;# 
   272  1E15                     	;# 
   273  1E16                     	;# 
   274  1E17                     	;# 
   275  1E18                     	;# 
   276  1E19                     	;# 
   277  1E1A                     	;# 
   278  1E1B                     	;# 
   279  1E1C                     	;# 
   280  1E1D                     	;# 
   281  1E1E                     	;# 
   282  1E1F                     	;# 
   283  1E20                     	;# 
   284  1E21                     	;# 
   285  1E22                     	;# 
   286  1E23                     	;# 
   287  1E24                     	;# 
   288  1E25                     	;# 
   289  1E26                     	;# 
   290  1E27                     	;# 
   291  1E28                     	;# 
   292  1E29                     	;# 
   293  1E2A                     	;# 
   294  1E2B                     	;# 
   295  1E2C                     	;# 
   296  1E2D                     	;# 
   297  1E2E                     	;# 
   298  1E2F                     	;# 
   299  1E30                     	;# 
   300  1E31                     	;# 
   301  1E32                     	;# 
   302  1E33                     	;# 
   303  1E34                     	;# 
   304  1E35                     	;# 
   305  1E36                     	;# 
   306  1E37                     	;# 
   307  1E8F                     	;# 
   308  1E90                     	;# 
   309  1E91                     	;# 
   310  1E92                     	;# 
   311  1E93                     	;# 
   312  1E9C                     	;# 
   313  1EA1                     	;# 
   314  1EA2                     	;# 
   315  1EB1                     	;# 
   316  1EBB                     	;# 
   317  1EBC                     	;# 
   318  1EBD                     	;# 
   319  1EBE                     	;# 
   320  1EC3                     	;# 
   321  1EC5                     	;# 
   322  1EC6                     	;# 
   323  1EC7                     	;# 
   324  1ECB                     	;# 
   325  1ECC                     	;# 
   326  1F10                     	;# 
   327  1F11                     	;# 
   328  1F12                     	;# 
   329  1F13                     	;# 
   330  1F14                     	;# 
   331  1F15                     	;# 
   332  1F20                     	;# 
   333  1F21                     	;# 
   334  1F22                     	;# 
   335  1F23                     	;# 
   336  1F24                     	;# 
   337  1F25                     	;# 
   338  1F38                     	;# 
   339  1F39                     	;# 
   340  1F3A                     	;# 
   341  1F3B                     	;# 
   342  1F3C                     	;# 
   343  1F3D                     	;# 
   344  1F3E                     	;# 
   345  1F3F                     	;# 
   346  1F4E                     	;# 
   347  1F4F                     	;# 
   348  1F50                     	;# 
   349  1F51                     	;# 
   350  1F52                     	;# 
   351  1F53                     	;# 
   352  1F54                     	;# 
   353  1F55                     	;# 
   354  1FE4                     	;# 
   355  1FE5                     	;# 
   356  1FE6                     	;# 
   357  1FE7                     	;# 
   358  1FE8                     	;# 
   359  1FE8                     	;# 
   360  1FE9                     	;# 
   361  1FEA                     	;# 
   362  1FEA                     	;# 
   363  1FEB                     	;# 
   364  1FED                     	;# 
   365  1FEE                     	;# 
   366  1FEF                     	;# 
   367  0000                     	;# 
   368  0001                     	;# 
   369  0002                     	;# 
   370  0003                     	;# 
   371  0004                     	;# 
   372  0005                     	;# 
   373  0006                     	;# 
   374  0007                     	;# 
   375  0008                     	;# 
   376  0009                     	;# 
   377  000A                     	;# 
   378  000B                     	;# 
   379  000C                     	;# 
   380  000E                     	;# 
   381  0012                     	;# 
   382  0014                     	;# 
   383  0018                     	;# 
   384  001A                     	;# 
   385  009B                     	;# 
   386  009B                     	;# 
   387  009C                     	;# 
   388  009D                     	;# 
   389  009E                     	;# 
   390  009F                     	;# 
   391  0119                     	;# 
   392  0119                     	;# 
   393  0119                     	;# 
   394  011A                     	;# 
   395  011A                     	;# 
   396  011A                     	;# 
   397  011B                     	;# 
   398  011B                     	;# 
   399  011B                     	;# 
   400  011B                     	;# 
   401  011B                     	;# 
   402  011C                     	;# 
   403  011C                     	;# 
   404  011C                     	;# 
   405  011D                     	;# 
   406  011D                     	;# 
   407  011D                     	;# 
   408  011E                     	;# 
   409  011E                     	;# 
   410  011E                     	;# 
   411  011F                     	;# 
   412  011F                     	;# 
   413  011F                     	;# 
   414  011F                     	;# 
   415  011F                     	;# 
   416  018C                     	;# 
   417  018D                     	;# 
   418  018E                     	;# 
   419  018F                     	;# 
   420  0190                     	;# 
   421  0191                     	;# 
   422  0192                     	;# 
   423  020C                     	;# 
   424  020C                     	;# 
   425  020D                     	;# 
   426  020E                     	;# 
   427  020F                     	;# 
   428  020F                     	;# 
   429  0210                     	;# 
   430  0210                     	;# 
   431  0211                     	;# 
   432  0211                     	;# 
   433  028C                     	;# 
   434  028C                     	;# 
   435  028D                     	;# 
   436  028D                     	;# 
   437  028E                     	;# 
   438  028F                     	;# 
   439  0290                     	;# 
   440  0291                     	;# 
   441  030C                     	;# 
   442  030C                     	;# 
   443  030D                     	;# 
   444  030E                     	;# 
   445  030F                     	;# 
   446  0310                     	;# 
   447  0310                     	;# 
   448  0311                     	;# 
   449  0312                     	;# 
   450  0313                     	;# 
   451  0314                     	;# 
   452  0315                     	;# 
   453  0316                     	;# 
   454  0318                     	;# 
   455  0319                     	;# 
   456  031A                     	;# 
   457  031C                     	;# 
   458  031D                     	;# 
   459  031E                     	;# 
   460  038C                     	;# 
   461  038D                     	;# 
   462  038E                     	;# 
   463  058C                     	;# 
   464  058C                     	;# 
   465  058D                     	;# 
   466  058E                     	;# 
   467  058F                     	;# 
   468  058F                     	;# 
   469  0590                     	;# 
   470  0591                     	;# 
   471  0592                     	;# 
   472  0593                     	;# 
   473  059C                     	;# 
   474  059C                     	;# 
   475  059D                     	;# 
   476  059D                     	;# 
   477  059E                     	;# 
   478  059F                     	;# 
   479  060C                     	;# 
   480  060D                     	;# 
   481  060E                     	;# 
   482  060F                     	;# 
   483  0610                     	;# 
   484  0611                     	;# 
   485  0612                     	;# 
   486  0613                     	;# 
   487  0614                     	;# 
   488  070C                     	;# 
   489  070D                     	;# 
   490  070E                     	;# 
   491  070F                     	;# 
   492  0710                     	;# 
   493  0711                     	;# 
   494  0712                     	;# 
   495  0713                     	;# 
   496  0716                     	;# 
   497  0717                     	;# 
   498  0718                     	;# 
   499  0719                     	;# 
   500  071A                     	;# 
   501  071B                     	;# 
   502  071C                     	;# 
   503  071D                     	;# 
   504  0796                     	;# 
   505  0797                     	;# 
   506  0798                     	;# 
   507  0799                     	;# 
   508  079A                     	;# 
   509  079B                     	;# 
   510  080C                     	;# 
   511  080D                     	;# 
   512  080E                     	;# 
   513  080F                     	;# 
   514  0810                     	;# 
   515  0811                     	;# 
   516  0812                     	;# 
   517  0813                     	;# 
   518  0814                     	;# 
   519  081A                     	;# 
   520  081A                     	;# 
   521  081B                     	;# 
   522  081C                     	;# 
   523  081C                     	;# 
   524  081D                     	;# 
   525  081E                     	;# 
   526  081F                     	;# 
   527  088C                     	;# 
   528  088D                     	;# 
   529  088E                     	;# 
   530  088F                     	;# 
   531  0890                     	;# 
   532  0891                     	;# 
   533  0892                     	;# 
   534  0893                     	;# 
   535  0895                     	;# 
   536  0896                     	;# 
   537  090C                     	;# 
   538  090E                     	;# 
   539  090F                     	;# 
   540  091F                     	;# 
   541  098F                     	;# 
   542  098F                     	;# 
   543  0990                     	;# 
   544  0991                     	;# 
   545  0992                     	;# 
   546  0993                     	;# 
   547  0994                     	;# 
   548  0995                     	;# 
   549  0996                     	;# 
   550  0997                     	;# 
   551  1E0F                     	;# 
   552  1E10                     	;# 
   553  1E11                     	;# 
   554  1E12                     	;# 
   555  1E13                     	;# 
   556  1E14                     	;# 
   557  1E15                     	;# 
   558  1E16                     	;# 
   559  1E17                     	;# 
   560  1E18                     	;# 
   561  1E19                     	;# 
   562  1E1A                     	;# 
   563  1E1B                     	;# 
   564  1E1C                     	;# 
   565  1E1D                     	;# 
   566  1E1E                     	;# 
   567  1E1F                     	;# 
   568  1E20                     	;# 
   569  1E21                     	;# 
   570  1E22                     	;# 
   571  1E23                     	;# 
   572  1E24                     	;# 
   573  1E25                     	;# 
   574  1E26                     	;# 
   575  1E27                     	;# 
   576  1E28                     	;# 
   577  1E29                     	;# 
   578  1E2A                     	;# 
   579  1E2B                     	;# 
   580  1E2C                     	;# 
   581  1E2D                     	;# 
   582  1E2E                     	;# 
   583  1E2F                     	;# 
   584  1E30                     	;# 
   585  1E31                     	;# 
   586  1E32                     	;# 
   587  1E33                     	;# 
   588  1E34                     	;# 
   589  1E35                     	;# 
   590  1E36                     	;# 
   591  1E37                     	;# 
   592  1E8F                     	;# 
   593  1E90                     	;# 
   594  1E91                     	;# 
   595  1E92                     	;# 
   596  1E93                     	;# 
   597  1E9C                     	;# 
   598  1EA1                     	;# 
   599  1EA2                     	;# 
   600  1EB1                     	;# 
   601  1EBB                     	;# 
   602  1EBC                     	;# 
   603  1EBD                     	;# 
   604  1EBE                     	;# 
   605  1EC3                     	;# 
   606  1EC5                     	;# 
   607  1EC6                     	;# 
   608  1EC7                     	;# 
   609  1ECB                     	;# 
   610  1ECC                     	;# 
   611  1F10                     	;# 
   612  1F11                     	;# 
   613  1F12                     	;# 
   614  1F13                     	;# 
   615  1F14                     	;# 
   616  1F15                     	;# 
   617  1F20                     	;# 
   618  1F21                     	;# 
   619  1F22                     	;# 
   620  1F23                     	;# 
   621  1F24                     	;# 
   622  1F25                     	;# 
   623  1F38                     	;# 
   624  1F39                     	;# 
   625  1F3A                     	;# 
   626  1F3B                     	;# 
   627  1F3C                     	;# 
   628  1F3D                     	;# 
   629  1F3E                     	;# 
   630  1F3F                     	;# 
   631  1F4E                     	;# 
   632  1F4F                     	;# 
   633  1F50                     	;# 
   634  1F51                     	;# 
   635  1F52                     	;# 
   636  1F53                     	;# 
   637  1F54                     	;# 
   638  1F55                     	;# 
   639  1FE4                     	;# 
   640  1FE5                     	;# 
   641  1FE6                     	;# 
   642  1FE7                     	;# 
   643  1FE8                     	;# 
   644  1FE8                     	;# 
   645  1FE9                     	;# 
   646  1FEA                     	;# 
   647  1FEA                     	;# 
   648  1FEB                     	;# 
   649  1FED                     	;# 
   650  1FEE                     	;# 
   651  1FEF                     	;# 
   652  0000                     	;# 
   653  0001                     	;# 
   654  0002                     	;# 
   655  0003                     	;# 
   656  0004                     	;# 
   657  0005                     	;# 
   658  0006                     	;# 
   659  0007                     	;# 
   660  0008                     	;# 
   661  0009                     	;# 
   662  000A                     	;# 
   663  000B                     	;# 
   664  000C                     	;# 
   665  000E                     	;# 
   666  0012                     	;# 
   667  0014                     	;# 
   668  0018                     	;# 
   669  001A                     	;# 
   670  009B                     	;# 
   671  009B                     	;# 
   672  009C                     	;# 
   673  009D                     	;# 
   674  009E                     	;# 
   675  009F                     	;# 
   676  0119                     	;# 
   677  0119                     	;# 
   678  0119                     	;# 
   679  011A                     	;# 
   680  011A                     	;# 
   681  011A                     	;# 
   682  011B                     	;# 
   683  011B                     	;# 
   684  011B                     	;# 
   685  011B                     	;# 
   686  011B                     	;# 
   687  011C                     	;# 
   688  011C                     	;# 
   689  011C                     	;# 
   690  011D                     	;# 
   691  011D                     	;# 
   692  011D                     	;# 
   693  011E                     	;# 
   694  011E                     	;# 
   695  011E                     	;# 
   696  011F                     	;# 
   697  011F                     	;# 
   698  011F                     	;# 
   699  011F                     	;# 
   700  011F                     	;# 
   701  018C                     	;# 
   702  018D                     	;# 
   703  018E                     	;# 
   704  018F                     	;# 
   705  0190                     	;# 
   706  0191                     	;# 
   707  0192                     	;# 
   708  020C                     	;# 
   709  020C                     	;# 
   710  020D                     	;# 
   711  020E                     	;# 
   712  020F                     	;# 
   713  020F                     	;# 
   714  0210                     	;# 
   715  0210                     	;# 
   716  0211                     	;# 
   717  0211                     	;# 
   718  028C                     	;# 
   719  028C                     	;# 
   720  028D                     	;# 
   721  028D                     	;# 
   722  028E                     	;# 
   723  028F                     	;# 
   724  0290                     	;# 
   725  0291                     	;# 
   726  030C                     	;# 
   727  030C                     	;# 
   728  030D                     	;# 
   729  030E                     	;# 
   730  030F                     	;# 
   731  0310                     	;# 
   732  0310                     	;# 
   733  0311                     	;# 
   734  0312                     	;# 
   735  0313                     	;# 
   736  0314                     	;# 
   737  0315                     	;# 
   738  0316                     	;# 
   739  0318                     	;# 
   740  0319                     	;# 
   741  031A                     	;# 
   742  031C                     	;# 
   743  031D                     	;# 
   744  031E                     	;# 
   745  038C                     	;# 
   746  038D                     	;# 
   747  038E                     	;# 
   748  058C                     	;# 
   749  058C                     	;# 
   750  058D                     	;# 
   751  058E                     	;# 
   752  058F                     	;# 
   753  058F                     	;# 
   754  0590                     	;# 
   755  0591                     	;# 
   756  0592                     	;# 
   757  0593                     	;# 
   758  059C                     	;# 
   759  059C                     	;# 
   760  059D                     	;# 
   761  059D                     	;# 
   762  059E                     	;# 
   763  059F                     	;# 
   764  060C                     	;# 
   765  060D                     	;# 
   766  060E                     	;# 
   767  060F                     	;# 
   768  0610                     	;# 
   769  0611                     	;# 
   770  0612                     	;# 
   771  0613                     	;# 
   772  0614                     	;# 
   773  070C                     	;# 
   774  070D                     	;# 
   775  070E                     	;# 
   776  070F                     	;# 
   777  0710                     	;# 
   778  0711                     	;# 
   779  0712                     	;# 
   780  0713                     	;# 
   781  0716                     	;# 
   782  0717                     	;# 
   783  0718                     	;# 
   784  0719                     	;# 
   785  071A                     	;# 
   786  071B                     	;# 
   787  071C                     	;# 
   788  071D                     	;# 
   789  0796                     	;# 
   790  0797                     	;# 
   791  0798                     	;# 
   792  0799                     	;# 
   793  079A                     	;# 
   794  079B                     	;# 
   795  080C                     	;# 
   796  080D                     	;# 
   797  080E                     	;# 
   798  080F                     	;# 
   799  0810                     	;# 
   800  0811                     	;# 
   801  0812                     	;# 
   802  0813                     	;# 
   803  0814                     	;# 
   804  081A                     	;# 
   805  081A                     	;# 
   806  081B                     	;# 
   807  081C                     	;# 
   808  081C                     	;# 
   809  081D                     	;# 
   810  081E                     	;# 
   811  081F                     	;# 
   812  088C                     	;# 
   813  088D                     	;# 
   814  088E                     	;# 
   815  088F                     	;# 
   816  0890                     	;# 
   817  0891                     	;# 
   818  0892                     	;# 
   819  0893                     	;# 
   820  0895                     	;# 
   821  0896                     	;# 
   822  090C                     	;# 
   823  090E                     	;# 
   824  090F                     	;# 
   825  091F                     	;# 
   826  098F                     	;# 
   827  098F                     	;# 
   828  0990                     	;# 
   829  0991                     	;# 
   830  0992                     	;# 
   831  0993                     	;# 
   832  0994                     	;# 
   833  0995                     	;# 
   834  0996                     	;# 
   835  0997                     	;# 
   836  1E0F                     	;# 
   837  1E10                     	;# 
   838  1E11                     	;# 
   839  1E12                     	;# 
   840  1E13                     	;# 
   841  1E14                     	;# 
   842  1E15                     	;# 
   843  1E16                     	;# 
   844  1E17                     	;# 
   845  1E18                     	;# 
   846  1E19                     	;# 
   847  1E1A                     	;# 
   848  1E1B                     	;# 
   849  1E1C                     	;# 
   850  1E1D                     	;# 
   851  1E1E                     	;# 
   852  1E1F                     	;# 
   853  1E20                     	;# 
   854  1E21                     	;# 
   855  1E22                     	;# 
   856  1E23                     	;# 
   857  1E24                     	;# 
   858  1E25                     	;# 
   859  1E26                     	;# 
   860  1E27                     	;# 
   861  1E28                     	;# 
   862  1E29                     	;# 
   863  1E2A                     	;# 
   864  1E2B                     	;# 
   865  1E2C                     	;# 
   866  1E2D                     	;# 
   867  1E2E                     	;# 
   868  1E2F                     	;# 
   869  1E30                     	;# 
   870  1E31                     	;# 
   871  1E32                     	;# 
   872  1E33                     	;# 
   873  1E34                     	;# 
   874  1E35                     	;# 
   875  1E36                     	;# 
   876  1E37                     	;# 
   877  1E8F                     	;# 
   878  1E90                     	;# 
   879  1E91                     	;# 
   880  1E92                     	;# 
   881  1E93                     	;# 
   882  1E9C                     	;# 
   883  1EA1                     	;# 
   884  1EA2                     	;# 
   885  1EB1                     	;# 
   886  1EBB                     	;# 
   887  1EBC                     	;# 
   888  1EBD                     	;# 
   889  1EBE                     	;# 
   890  1EC3                     	;# 
   891  1EC5                     	;# 
   892  1EC6                     	;# 
   893  1EC7                     	;# 
   894  1ECB                     	;# 
   895  1ECC                     	;# 
   896  1F10                     	;# 
   897  1F11                     	;# 
   898  1F12                     	;# 
   899  1F13                     	;# 
   900  1F14                     	;# 
   901  1F15                     	;# 
   902  1F20                     	;# 
   903  1F21                     	;# 
   904  1F22                     	;# 
   905  1F23                     	;# 
   906  1F24                     	;# 
   907  1F25                     	;# 
   908  1F38                     	;# 
   909  1F39                     	;# 
   910  1F3A                     	;# 
   911  1F3B                     	;# 
   912  1F3C                     	;# 
   913  1F3D                     	;# 
   914  1F3E                     	;# 
   915  1F3F                     	;# 
   916  1F4E                     	;# 
   917  1F4F                     	;# 
   918  1F50                     	;# 
   919  1F51                     	;# 
   920  1F52                     	;# 
   921  1F53                     	;# 
   922  1F54                     	;# 
   923  1F55                     	;# 
   924  1FE4                     	;# 
   925  1FE5                     	;# 
   926  1FE6                     	;# 
   927  1FE7                     	;# 
   928  1FE8                     	;# 
   929  1FE8                     	;# 
   930  1FE9                     	;# 
   931  1FEA                     	;# 
   932  1FEA                     	;# 
   933  1FEB                     	;# 
   934  1FED                     	;# 
   935  1FEE                     	;# 
   936  1FEF                     	;# 
   937  0000                     	;# 
   938  0001                     	;# 
   939  0002                     	;# 
   940  0003                     	;# 
   941  0004                     	;# 
   942  0005                     	;# 
   943  0006                     	;# 
   944  0007                     	;# 
   945  0008                     	;# 
   946  0009                     	;# 
   947  000A                     	;# 
   948  000B                     	;# 
   949  000C                     	;# 
   950  000E                     	;# 
   951  0012                     	;# 
   952  0014                     	;# 
   953  0018                     	;# 
   954  001A                     	;# 
   955  009B                     	;# 
   956  009B                     	;# 
   957  009C                     	;# 
   958  009D                     	;# 
   959  009E                     	;# 
   960  009F                     	;# 
   961  0119                     	;# 
   962  0119                     	;# 
   963  0119                     	;# 
   964  011A                     	;# 
   965  011A                     	;# 
   966  011A                     	;# 
   967  011B                     	;# 
   968  011B                     	;# 
   969  011B                     	;# 
   970  011B                     	;# 
   971  011B                     	;# 
   972  011C                     	;# 
   973  011C                     	;# 
   974  011C                     	;# 
   975  011D                     	;# 
   976  011D                     	;# 
   977  011D                     	;# 
   978  011E                     	;# 
   979  011E                     	;# 
   980  011E                     	;# 
   981  011F                     	;# 
   982  011F                     	;# 
   983  011F                     	;# 
   984  011F                     	;# 
   985  011F                     	;# 
   986  018C                     	;# 
   987  018D                     	;# 
   988  018E                     	;# 
   989  018F                     	;# 
   990  0190                     	;# 
   991  0191                     	;# 
   992  0192                     	;# 
   993  020C                     	;# 
   994  020C                     	;# 
   995  020D                     	;# 
   996  020E                     	;# 
   997  020F                     	;# 
   998  020F                     	;# 
   999  0210                     	;# 
  1000  0210                     	;# 
  1001  0211                     	;# 
  1002  0211                     	;# 
  1003  028C                     	;# 
  1004  028C                     	;# 
  1005  028D                     	;# 
  1006  028D                     	;# 
  1007  028E                     	;# 
  1008  028F                     	;# 
  1009  0290                     	;# 
  1010  0291                     	;# 
  1011  030C                     	;# 
  1012  030C                     	;# 
  1013  030D                     	;# 
  1014  030E                     	;# 
  1015  030F                     	;# 
  1016  0310                     	;# 
  1017  0310                     	;# 
  1018  0311                     	;# 
  1019  0312                     	;# 
  1020  0313                     	;# 
  1021  0314                     	;# 
  1022  0315                     	;# 
  1023  0316                     	;# 
  1024  0318                     	;# 
  1025  0319                     	;# 
  1026  031A                     	;# 
  1027  031C                     	;# 
  1028  031D                     	;# 
  1029  031E                     	;# 
  1030  038C                     	;# 
  1031  038D                     	;# 
  1032  038E                     	;# 
  1033  058C                     	;# 
  1034  058C                     	;# 
  1035  058D                     	;# 
  1036  058E                     	;# 
  1037  058F                     	;# 
  1038  058F                     	;# 
  1039  0590                     	;# 
  1040  0591                     	;# 
  1041  0592                     	;# 
  1042  0593                     	;# 
  1043  059C                     	;# 
  1044  059C                     	;# 
  1045  059D                     	;# 
  1046  059D                     	;# 
  1047  059E                     	;# 
  1048  059F                     	;# 
  1049  060C                     	;# 
  1050  060D                     	;# 
  1051  060E                     	;# 
  1052  060F                     	;# 
  1053  0610                     	;# 
  1054  0611                     	;# 
  1055  0612                     	;# 
  1056  0613                     	;# 
  1057  0614                     	;# 
  1058  070C                     	;# 
  1059  070D                     	;# 
  1060  070E                     	;# 
  1061  070F                     	;# 
  1062  0710                     	;# 
  1063  0711                     	;# 
  1064  0712                     	;# 
  1065  0713                     	;# 
  1066  0716                     	;# 
  1067  0717                     	;# 
  1068  0718                     	;# 
  1069  0719                     	;# 
  1070  071A                     	;# 
  1071  071B                     	;# 
  1072  071C                     	;# 
  1073  071D                     	;# 
  1074  0796                     	;# 
  1075  0797                     	;# 
  1076  0798                     	;# 
  1077  0799                     	;# 
  1078  079A                     	;# 
  1079  079B                     	;# 
  1080  080C                     	;# 
  1081  080D                     	;# 
  1082  080E                     	;# 
  1083  080F                     	;# 
  1084  0810                     	;# 
  1085  0811                     	;# 
  1086  0812                     	;# 
  1087  0813                     	;# 
  1088  0814                     	;# 
  1089  081A                     	;# 
  1090  081A                     	;# 
  1091  081B                     	;# 
  1092  081C                     	;# 
  1093  081C                     	;# 
  1094  081D                     	;# 
  1095  081E                     	;# 
  1096  081F                     	;# 
  1097  088C                     	;# 
  1098  088D                     	;# 
  1099  088E                     	;# 
  1100  088F                     	;# 
  1101  0890                     	;# 
  1102  0891                     	;# 
  1103  0892                     	;# 
  1104  0893                     	;# 
  1105  0895                     	;# 
  1106  0896                     	;# 
  1107  090C                     	;# 
  1108  090E                     	;# 
  1109  090F                     	;# 
  1110  091F                     	;# 
  1111  098F                     	;# 
  1112  098F                     	;# 
  1113  0990                     	;# 
  1114  0991                     	;# 
  1115  0992                     	;# 
  1116  0993                     	;# 
  1117  0994                     	;# 
  1118  0995                     	;# 
  1119  0996                     	;# 
  1120  0997                     	;# 
  1121  1E0F                     	;# 
  1122  1E10                     	;# 
  1123  1E11                     	;# 
  1124  1E12                     	;# 
  1125  1E13                     	;# 
  1126  1E14                     	;# 
  1127  1E15                     	;# 
  1128  1E16                     	;# 
  1129  1E17                     	;# 
  1130  1E18                     	;# 
  1131  1E19                     	;# 
  1132  1E1A                     	;# 
  1133  1E1B                     	;# 
  1134  1E1C                     	;# 
  1135  1E1D                     	;# 
  1136  1E1E                     	;# 
  1137  1E1F                     	;# 
  1138  1E20                     	;# 
  1139  1E21                     	;# 
  1140  1E22                     	;# 
  1141  1E23                     	;# 
  1142  1E24                     	;# 
  1143  1E25                     	;# 
  1144  1E26                     	;# 
  1145  1E27                     	;# 
  1146  1E28                     	;# 
  1147  1E29                     	;# 
  1148  1E2A                     	;# 
  1149  1E2B                     	;# 
  1150  1E2C                     	;# 
  1151  1E2D                     	;# 
  1152  1E2E                     	;# 
  1153  1E2F                     	;# 
  1154  1E30                     	;# 
  1155  1E31                     	;# 
  1156  1E32                     	;# 
  1157  1E33                     	;# 
  1158  1E34                     	;# 
  1159  1E35                     	;# 
  1160  1E36                     	;# 
  1161  1E37                     	;# 
  1162  1E8F                     	;# 
  1163  1E90                     	;# 
  1164  1E91                     	;# 
  1165  1E92                     	;# 
  1166  1E93                     	;# 
  1167  1E9C                     	;# 
  1168  1EA1                     	;# 
  1169  1EA2                     	;# 
  1170  1EB1                     	;# 
  1171  1EBB                     	;# 
  1172  1EBC                     	;# 
  1173  1EBD                     	;# 
  1174  1EBE                     	;# 
  1175  1EC3                     	;# 
  1176  1EC5                     	;# 
  1177  1EC6                     	;# 
  1178  1EC7                     	;# 
  1179  1ECB                     	;# 
  1180  1ECC                     	;# 
  1181  1F10                     	;# 
  1182  1F11                     	;# 
  1183  1F12                     	;# 
  1184  1F13                     	;# 
  1185  1F14                     	;# 
  1186  1F15                     	;# 
  1187  1F20                     	;# 
  1188  1F21                     	;# 
  1189  1F22                     	;# 
  1190  1F23                     	;# 
  1191  1F24                     	;# 
  1192  1F25                     	;# 
  1193  1F38                     	;# 
  1194  1F39                     	;# 
  1195  1F3A                     	;# 
  1196  1F3B                     	;# 
  1197  1F3C                     	;# 
  1198  1F3D                     	;# 
  1199  1F3E                     	;# 
  1200  1F3F                     	;# 
  1201  1F4E                     	;# 
  1202  1F4F                     	;# 
  1203  1F50                     	;# 
  1204  1F51                     	;# 
  1205  1F52                     	;# 
  1206  1F53                     	;# 
  1207  1F54                     	;# 
  1208  1F55                     	;# 
  1209  1FE4                     	;# 
  1210  1FE5                     	;# 
  1211  1FE6                     	;# 
  1212  1FE7                     	;# 
  1213  1FE8                     	;# 
  1214  1FE8                     	;# 
  1215  1FE9                     	;# 
  1216  1FEA                     	;# 
  1217  1FEA                     	;# 
  1218  1FEB                     	;# 
  1219  1FED                     	;# 
  1220  1FEE                     	;# 
  1221  1FEF                     	;# 
  1222  0000                     	;# 
  1223  0001                     	;# 
  1224  0002                     	;# 
  1225  0003                     	;# 
  1226  0004                     	;# 
  1227  0005                     	;# 
  1228  0006                     	;# 
  1229  0007                     	;# 
  1230  0008                     	;# 
  1231  0009                     	;# 
  1232  000A                     	;# 
  1233  000B                     	;# 
  1234  000C                     	;# 
  1235  000E                     	;# 
  1236  0012                     	;# 
  1237  0014                     	;# 
  1238  0018                     	;# 
  1239  001A                     	;# 
  1240  009B                     	;# 
  1241  009B                     	;# 
  1242  009C                     	;# 
  1243  009D                     	;# 
  1244  009E                     	;# 
  1245  009F                     	;# 
  1246  0119                     	;# 
  1247  0119                     	;# 
  1248  0119                     	;# 
  1249  011A                     	;# 
  1250  011A                     	;# 
  1251  011A                     	;# 
  1252  011B                     	;# 
  1253  011B                     	;# 
  1254  011B                     	;# 
  1255  011B                     	;# 
  1256  011B                     	;# 
  1257  011C                     	;# 
  1258  011C                     	;# 
  1259  011C                     	;# 
  1260  011D                     	;# 
  1261  011D                     	;# 
  1262  011D                     	;# 
  1263  011E                     	;# 
  1264  011E                     	;# 
  1265  011E                     	;# 
  1266  011F                     	;# 
  1267  011F                     	;# 
  1268  011F                     	;# 
  1269  011F                     	;# 
  1270  011F                     	;# 
  1271  018C                     	;# 
  1272  018D                     	;# 
  1273  018E                     	;# 
  1274  018F                     	;# 
  1275  0190                     	;# 
  1276  0191                     	;# 
  1277  0192                     	;# 
  1278  020C                     	;# 
  1279  020C                     	;# 
  1280  020D                     	;# 
  1281  020E                     	;# 
  1282  020F                     	;# 
  1283  020F                     	;# 
  1284  0210                     	;# 
  1285  0210                     	;# 
  1286  0211                     	;# 
  1287  0211                     	;# 
  1288  028C                     	;# 
  1289  028C                     	;# 
  1290  028D                     	;# 
  1291  028D                     	;# 
  1292  028E                     	;# 
  1293  028F                     	;# 
  1294  0290                     	;# 
  1295  0291                     	;# 
  1296  030C                     	;# 
  1297  030C                     	;# 
  1298  030D                     	;# 
  1299  030E                     	;# 
  1300  030F                     	;# 
  1301  0310                     	;# 
  1302  0310                     	;# 
  1303  0311                     	;# 
  1304  0312                     	;# 
  1305  0313                     	;# 
  1306  0314                     	;# 
  1307  0315                     	;# 
  1308  0316                     	;# 
  1309  0318                     	;# 
  1310  0319                     	;# 
  1311  031A                     	;# 
  1312  031C                     	;# 
  1313  031D                     	;# 
  1314  031E                     	;# 
  1315  038C                     	;# 
  1316  038D                     	;# 
  1317  038E                     	;# 
  1318  058C                     	;# 
  1319  058C                     	;# 
  1320  058D                     	;# 
  1321  058E                     	;# 
  1322  058F                     	;# 
  1323  058F                     	;# 
  1324  0590                     	;# 
  1325  0591                     	;# 
  1326  0592                     	;# 
  1327  0593                     	;# 
  1328  059C                     	;# 
  1329  059C                     	;# 
  1330  059D                     	;# 
  1331  059D                     	;# 
  1332  059E                     	;# 
  1333  059F                     	;# 
  1334  060C                     	;# 
  1335  060D                     	;# 
  1336  060E                     	;# 
  1337  060F                     	;# 
  1338  0610                     	;# 
  1339  0611                     	;# 
  1340  0612                     	;# 
  1341  0613                     	;# 
  1342  0614                     	;# 
  1343  070C                     	;# 
  1344  070D                     	;# 
  1345  070E                     	;# 
  1346  070F                     	;# 
  1347  0710                     	;# 
  1348  0711                     	;# 
  1349  0712                     	;# 
  1350  0713                     	;# 
  1351  0716                     	;# 
  1352  0717                     	;# 
  1353  0718                     	;# 
  1354  0719                     	;# 
  1355  071A                     	;# 
  1356  071B                     	;# 
  1357  071C                     	;# 
  1358  071D                     	;# 
  1359  0796                     	;# 
  1360  0797                     	;# 
  1361  0798                     	;# 
  1362  0799                     	;# 
  1363  079A                     	;# 
  1364  079B                     	;# 
  1365  080C                     	;# 
  1366  080D                     	;# 
  1367  080E                     	;# 
  1368  080F                     	;# 
  1369  0810                     	;# 
  1370  0811                     	;# 
  1371  0812                     	;# 
  1372  0813                     	;# 
  1373  0814                     	;# 
  1374  081A                     	;# 
  1375  081A                     	;# 
  1376  081B                     	;# 
  1377  081C                     	;# 
  1378  081C                     	;# 
  1379  081D                     	;# 
  1380  081E                     	;# 
  1381  081F                     	;# 
  1382  088C                     	;# 
  1383  088D                     	;# 
  1384  088E                     	;# 
  1385  088F                     	;# 
  1386  0890                     	;# 
  1387  0891                     	;# 
  1388  0892                     	;# 
  1389  0893                     	;# 
  1390  0895                     	;# 
  1391  0896                     	;# 
  1392  090C                     	;# 
  1393  090E                     	;# 
  1394  090F                     	;# 
  1395  091F                     	;# 
  1396  098F                     	;# 
  1397  098F                     	;# 
  1398  0990                     	;# 
  1399  0991                     	;# 
  1400  0992                     	;# 
  1401  0993                     	;# 
  1402  0994                     	;# 
  1403  0995                     	;# 
  1404  0996                     	;# 
  1405  0997                     	;# 
  1406  1E0F                     	;# 
  1407  1E10                     	;# 
  1408  1E11                     	;# 
  1409  1E12                     	;# 
  1410  1E13                     	;# 
  1411  1E14                     	;# 
  1412  1E15                     	;# 
  1413  1E16                     	;# 
  1414  1E17                     	;# 
  1415  1E18                     	;# 
  1416  1E19                     	;# 
  1417  1E1A                     	;# 
  1418  1E1B                     	;# 
  1419  1E1C                     	;# 
  1420  1E1D                     	;# 
  1421  1E1E                     	;# 
  1422  1E1F                     	;# 
  1423  1E20                     	;# 
  1424  1E21                     	;# 
  1425  1E22                     	;# 
  1426  1E23                     	;# 
  1427  1E24                     	;# 
  1428  1E25                     	;# 
  1429  1E26                     	;# 
  1430  1E27                     	;# 
  1431  1E28                     	;# 
  1432  1E29                     	;# 
  1433  1E2A                     	;# 
  1434  1E2B                     	;# 
  1435  1E2C                     	;# 
  1436  1E2D                     	;# 
  1437  1E2E                     	;# 
  1438  1E2F                     	;# 
  1439  1E30                     	;# 
  1440  1E31                     	;# 
  1441  1E32                     	;# 
  1442  1E33                     	;# 
  1443  1E34                     	;# 
  1444  1E35                     	;# 
  1445  1E36                     	;# 
  1446  1E37                     	;# 
  1447  1E8F                     	;# 
  1448  1E90                     	;# 
  1449  1E91                     	;# 
  1450  1E92                     	;# 
  1451  1E93                     	;# 
  1452  1E9C                     	;# 
  1453  1EA1                     	;# 
  1454  1EA2                     	;# 
  1455  1EB1                     	;# 
  1456  1EBB                     	;# 
  1457  1EBC                     	;# 
  1458  1EBD                     	;# 
  1459  1EBE                     	;# 
  1460  1EC3                     	;# 
  1461  1EC5                     	;# 
  1462  1EC6                     	;# 
  1463  1EC7                     	;# 
  1464  1ECB                     	;# 
  1465  1ECC                     	;# 
  1466  1F10                     	;# 
  1467  1F11                     	;# 
  1468  1F12                     	;# 
  1469  1F13                     	;# 
  1470  1F14                     	;# 
  1471  1F15                     	;# 
  1472  1F20                     	;# 
  1473  1F21                     	;# 
  1474  1F22                     	;# 
  1475  1F23                     	;# 
  1476  1F24                     	;# 
  1477  1F25                     	;# 
  1478  1F38                     	;# 
  1479  1F39                     	;# 
  1480  1F3A                     	;# 
  1481  1F3B                     	;# 
  1482  1F3C                     	;# 
  1483  1F3D                     	;# 
  1484  1F3E                     	;# 
  1485  1F3F                     	;# 
  1486  1F4E                     	;# 
  1487  1F4F                     	;# 
  1488  1F50                     	;# 
  1489  1F51                     	;# 
  1490  1F52                     	;# 
  1491  1F53                     	;# 
  1492  1F54                     	;# 
  1493  1F55                     	;# 
  1494  1FE4                     	;# 
  1495  1FE5                     	;# 
  1496  1FE6                     	;# 
  1497  1FE7                     	;# 
  1498  1FE8                     	;# 
  1499  1FE8                     	;# 
  1500  1FE9                     	;# 
  1501  1FEA                     	;# 
  1502  1FEA                     	;# 
  1503  1FEB                     	;# 
  1504  1FED                     	;# 
  1505  1FEE                     	;# 
  1506  1FEF                     	;# 
  1507                           
  1508                           	psect	idataBANK1
  1509  03C8                     __pidataBANK1:	
  1510                           
  1511                           ;initializer for CW201x@cw_bat_config_info
  1512  03C8  3414               	retlw	20
  1513  03C9  34A6               	retlw	166
  1514  03CA  3470               	retlw	112
  1515  03CB  346C               	retlw	108
  1516  03CC  346C               	retlw	108
  1517  03CD  3467               	retlw	103
  1518  03CE  3464               	retlw	100
  1519  03CF  3462               	retlw	98
  1520  03D0  3460               	retlw	96
  1521  03D1  345C               	retlw	92
  1522  03D2  3459               	retlw	89
  1523  03D3  344E               	retlw	78
  1524  03D4  3450               	retlw	80
  1525  03D5  3442               	retlw	66
  1526  03D6  342E               	retlw	46
  1527  03D7  3426               	retlw	38
  1528  03D8  3425               	retlw	37
  1529  03D9  3424               	retlw	36
  1530  03DA  3427               	retlw	39
  1531  03DB  342E               	retlw	46
  1532  03DC  3441               	retlw	65
  1533  03DD  345A               	retlw	90
  1534  03DE  346D               	retlw	109
  1535  03DF  344C               	retlw	76
  1536  03E0  3439               	retlw	57
  1537  03E1  34D7               	retlw	215
  1538  03E2  3406               	retlw	6
  1539  03E3  3466               	retlw	102
  1540  03E4  3400               	retlw	0
  1541  03E5  3401               	retlw	1
  1542  03E6  3405               	retlw	5
  1543  03E7  3434               	retlw	52
  1544  03E8  3461               	retlw	97
  1545  03E9  3476               	retlw	118
  1546  03EA  3479               	retlw	121
  1547  03EB  347D               	retlw	125
  1548  03EC  3442               	retlw	66
  1549  03ED  341E               	retlw	30
  1550  03EE  34A4               	retlw	164
  1551  03EF  3400               	retlw	0
  1552  03F0  3427               	retlw	39
  1553  03F1  345A               	retlw	90
  1554  03F2  3452               	retlw	82
  1555  03F3  3487               	retlw	135
  1556  03F4  348F               	retlw	143
  1557  03F5  3491               	retlw	145
  1558  03F6  3494               	retlw	148
  1559  03F7  3452               	retlw	82
  1560  03F8  3482               	retlw	130
  1561  03F9  348C               	retlw	140
  1562  03FA  3492               	retlw	146
  1563  03FB  3496               	retlw	150
  1564  03FC  342B               	retlw	43
  1565  03FD  3459               	retlw	89
  1566  03FE  346E               	retlw	110
  1567  03FF  34CB               	retlw	203
  1568  0400  342F               	retlw	47
  1569  0401  347D               	retlw	125
  1570  0402  3472               	retlw	114
  1571  0403  34A5               	retlw	165
  1572  0404  34B5               	retlw	181
  1573  0405  34C1               	retlw	193
  1574  0406  3494               	retlw	148
  1575  0407  3499               	retlw	153
  1576                           
  1577                           	psect	idataBANK2
  1578  0388                     __pidataBANK2:	
  1579                           ;initializer for _cw_bat_config_info
  1580                           
  1581  0388  3414               	retlw	20
  1582  0389  34A6               	retlw	166
  1583  038A  3470               	retlw	112
  1584  038B  346C               	retlw	108
  1585  038C  346C               	retlw	108
  1586  038D  3467               	retlw	103
  1587  038E  3464               	retlw	100
  1588  038F  3462               	retlw	98
  1589  0390  3460               	retlw	96
  1590  0391  345C               	retlw	92
  1591  0392  3459               	retlw	89
  1592  0393  344E               	retlw	78
  1593  0394  3450               	retlw	80
  1594  0395  3442               	retlw	66
  1595  0396  342E               	retlw	46
  1596  0397  3426               	retlw	38
  1597  0398  3425               	retlw	37
  1598  0399  3424               	retlw	36
  1599  039A  3427               	retlw	39
  1600  039B  342E               	retlw	46
  1601  039C  3441               	retlw	65
  1602  039D  345A               	retlw	90
  1603  039E  346D               	retlw	109
  1604  039F  344C               	retlw	76
  1605  03A0  3439               	retlw	57
  1606  03A1  34D7               	retlw	215
  1607  03A2  3406               	retlw	6
  1608  03A3  3466               	retlw	102
  1609  03A4  3400               	retlw	0
  1610  03A5  3401               	retlw	1
  1611  03A6  3405               	retlw	5
  1612  03A7  3434               	retlw	52
  1613  03A8  3461               	retlw	97
  1614  03A9  3476               	retlw	118
  1615  03AA  3479               	retlw	121
  1616  03AB  347D               	retlw	125
  1617  03AC  3442               	retlw	66
  1618  03AD  341E               	retlw	30
  1619  03AE  34A4               	retlw	164
  1620  03AF  3400               	retlw	0
  1621  03B0  3427               	retlw	39
  1622  03B1  345A               	retlw	90
  1623  03B2  3452               	retlw	82
  1624  03B3  3487               	retlw	135
  1625  03B4  348F               	retlw	143
  1626  03B5  3491               	retlw	145
  1627  03B6  3494               	retlw	148
  1628  03B7  3452               	retlw	82
  1629  03B8  3482               	retlw	130
  1630  03B9  348C               	retlw	140
  1631  03BA  3492               	retlw	146
  1632  03BB  3496               	retlw	150
  1633  03BC  342B               	retlw	43
  1634  03BD  3459               	retlw	89
  1635  03BE  346E               	retlw	110
  1636  03BF  34CB               	retlw	203
  1637  03C0  342F               	retlw	47
  1638  03C1  347D               	retlw	125
  1639  03C2  3472               	retlw	114
  1640  03C3  34A5               	retlw	165
  1641  03C4  34B5               	retlw	181
  1642  03C5  34C1               	retlw	193
  1643  03C6  3494               	retlw	148
  1644  03C7  3499               	retlw	153
  1645  000E                     _PORTCbits	set	14
  1646  0014                     _TRISCbits	set	20
  1647  0018                     _LATAbits	set	24
  1648  001A                     _LATCbits	set	26
  1649  0014                     _TRISC	set	20
  1650  0012                     _TRISA	set	18
  1651  001A                     _LATC	set	26
  1652  0018                     _LATA	set	24
  1653  005F                     _GIE	set	95
  1654  011A                     _TX1REG	set	282
  1655  0119                     _RC1REG	set	281
  1656  011D                     _RC1STAbits	set	285
  1657  011C                     _SP1BRGH	set	284
  1658  011B                     _SP1BRGL	set	283
  1659  011E                     _TX1STA	set	286
  1660  011D                     _RC1STA	set	285
  1661  011F                     _BAUD1CON	set	287
  1662  070F                     _PIR3bits	set	1807
  1663  0892                     _OSCTUNE	set	2194
  1664  0890                     _OSCSTAT	set	2192
  1665  0893                     _OSCFRQ	set	2195
  1666  0891                     _OSCEN	set	2193
  1667  088F                     _OSCCON3	set	2191
  1668  088D                     _OSCCON1	set	2189
  1669  4480                     _PLLR	set	17536
  1670  1ECB                     _RX1DTPPSbits	set	7883
  1671  1E8F                     _PPSLOCKbits	set	7823
  1672  1E8F                     _PPSLOCK	set	7823
  1673  1F24                     _RC4PPS	set	7972
  1674  1F50                     _ODCONC	set	8016
  1675  1F3A                     _ODCONA	set	7994
  1676  1F4F                     _WPUC	set	8015
  1677  1F39                     _WPUA	set	7993
  1678  1F38                     _ANSELA	set	7992
  1679  1F4E                     _ANSELC	set	8014
  1680                           
  1681                           ; #config settings
  1682  0000                     
  1683                           	psect	cinit
  1684  07E4                     start_initialization:	
  1685  07E4                     __initialization:	
  1686                           
  1687                           ; Initialize objects allocated to BANK1
  1688  07E4  30C8               	movlw	low __pidataBANK1
  1689  07E5  0084               	movwf	4
  1690  07E6  3083               	movlw	(high __pidataBANK1)| (0+128)
  1691  07E7  0085               	movwf	5
  1692  07E8  30A0               	movlw	low __pdataBANK1
  1693  07E9  0086               	movwf	6
  1694  07EA  3000               	movlw	high __pdataBANK1
  1695  07EB  0087               	movwf	7
  1696  07EC  3040               	movlw	64
  1697  07ED  2125               	fcall	init_ram
  1698                           
  1699                           ; Initialize objects allocated to BANK2
  1700  07EE  3088               	movlw	low __pidataBANK2
  1701  07EF  0084               	movwf	4
  1702  07F0  3083               	movlw	(high __pidataBANK2)| (0+128)
  1703  07F1  0085               	movwf	5
  1704  07F2  3020               	movlw	low __pdataBANK2
  1705  07F3  0086               	movwf	6
  1706  07F4  3001               	movlw	high __pdataBANK2
  1707  07F5  0087               	movwf	7
  1708  07F6  3040               	movlw	64
  1709  07F7  2125               	fcall	init_ram
  1710                           
  1711                           ; Clear objects allocated to BANK0
  1712  07F8  3047               	movlw	low __pbssBANK0
  1713  07F9  0084               	movwf	4
  1714  07FA  3000               	movlw	high __pbssBANK0
  1715  07FB  0085               	movwf	5
  1716  07FC  3012               	movlw	18
  1717  07FD  211F               	fcall	clear_ram0
  1718  07FE                     end_of_initialization:	
  1719                           ;End of C runtime variable initialization code
  1720                           
  1721  07FE                     __end_of__initialization:	
  1722  07FE  0140               	movlb	0
  1723  07FF  2C4D               	ljmp	_main	;jump to C main() function
  1724                           
  1725                           	psect	bssBANK0
  1726  0047                     __pbssBANK0:	
  1727  0047                     _cw_bat:	
  1728  0047                     	ds	6
  1729  004D                     cw_get_vol@F83:	
  1730  004D                     	ds	2
  1731  004F                     _allow_charger_always_zero:	
  1732  004F                     	ds	2
  1733  0051                     _allow_no_charger_full:	
  1734  0051                     	ds	2
  1735  0053                     _no_charger_full_jump:	
  1736  0053                     	ds	2
  1737  0055                     _CHARGE:	
  1738  0055                     	ds	2
  1739  0057                     _reset_loop:	
  1740  0057                     	ds	1
  1741  0058                     _if_quickstart:	
  1742  0058                     	ds	1
  1743                           
  1744                           	psect	dataBANK1
  1745  00A0                     __pdataBANK1:	
  1746  00A0                     CW201x@cw_bat_config_info:	
  1747  00A0                     	ds	64
  1748                           
  1749                           	psect	dataBANK2
  1750  0120                     __pdataBANK2:	
  1751  0120                     _cw_bat_config_info:	
  1752  0120                     	ds	64
  1753                           
  1754                           	psect	inittext
  1755  0125                     init_ram:	
  1756  0125  00FE               	movwf	126
  1757  0126                     initloop:	
  1758  0126  0012               	moviw fsr0++
  1759  0127  001E               	movwi fsr1++
  1760  0128  0BFE               	decfsz	126,f
  1761  0129  2926               	goto	initloop
  1762  012A  3400               	retlw	0
  1763                           
  1764                           	psect	clrtext
  1765  011F                     clear_ram0:	
  1766                           ;	Called with FSR0 containing the base address, and
  1767                           ;	WREG with the size to clear
  1768                           
  1769  011F  0064               	clrwdt	;clear the watchdog before getting into this loop
  1770  0120                     clrloop0:	
  1771  0120  0180               	clrf	0	;clear RAM location pointed to by FSR
  1772  0121  3101               	addfsr 0,1
  1773  0122  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1774  0123  2920               	goto	clrloop0	;have we reached the end yet?
  1775  0124  3400               	retlw	0	;all done for this memory range, return
  1776                           
  1777                           	psect	cstackCOMMON
  1778  0070                     __pcstackCOMMON:	
  1779  0070                     ?_PIN_MANAGER_Initialize:	
  1780  0070                     ??_PIN_MANAGER_Initialize:	
  1781                           ; 1 bytes @ 0x0
  1782                           
  1783  0070                     ?_OSCILLATOR_Initialize:	
  1784                           ; 1 bytes @ 0x0
  1785                           
  1786  0070                     ??_OSCILLATOR_Initialize:	
  1787                           ; 1 bytes @ 0x0
  1788                           
  1789  0070                     ?_cw_bat_init:	
  1790                           ; 1 bytes @ 0x0
  1791                           
  1792  0070                     ?_CW_Delay10ms:	
  1793                           ; 1 bytes @ 0x0
  1794                           
  1795  0070                     ?_cw_bat_work:	
  1796                           ; 1 bytes @ 0x0
  1797                           
  1798  0070                     ?_EUSART1_Initialize:	
  1799                           ; 1 bytes @ 0x0
  1800                           
  1801  0070                     ??_EUSART1_Initialize:	
  1802                           ; 1 bytes @ 0x0
  1803                           
  1804  0070                     ?_EUSART1_Write:	
  1805                           ; 1 bytes @ 0x0
  1806                           
  1807  0070                     ??_EUSART1_Write:	
  1808                           ; 1 bytes @ 0x0
  1809                           
  1810  0070                     ?_SYSTEM_Initialize:	
  1811                           ; 1 bytes @ 0x0
  1812                           
  1813  0070                     ?_main:	
  1814                           ; 1 bytes @ 0x0
  1815                           
  1816  0070                     ?_CW_Delay100us:	
  1817                           ; 1 bytes @ 0x0
  1818                           
  1819  0070                     ??_CW_Delay100us:	
  1820                           ; 1 bytes @ 0x0
  1821                           
  1822  0070                     ?_cw_update_config_info:	
  1823                           ; 1 bytes @ 0x0
  1824                           
  1825  0070                     ?_cw_init:	
  1826                           ; 1 bytes @ 0x0
  1827                           
  1828  0070                     ?_update_capacity:	
  1829                           ; 1 bytes @ 0x0
  1830                           
  1831  0070                     ?_update_vol:	
  1832                           ; 1 bytes @ 0x0
  1833                           
  1834  0070                     ?_update_usb_online:	
  1835                           ; 1 bytes @ 0x0
  1836                           
  1837  0070                     ??_update_usb_online:	
  1838                           ; 1 bytes @ 0x0
  1839                           
  1840  0070                     ?_Delay10us:	
  1841                           ; 1 bytes @ 0x0
  1842                           
  1843  0070                     ??_Delay10us:	
  1844                           ; 1 bytes @ 0x0
  1845                           
  1846  0070                     ?_start:	
  1847                           ; 1 bytes @ 0x0
  1848                           
  1849  0070                     ?_stop:	
  1850                           ; 1 bytes @ 0x0
  1851                           
  1852  0070                     ?_s_ack:	
  1853                           ; 1 bytes @ 0x0
  1854                           
  1855  0070                     ?_sn_ack:	
  1856                           ; 1 bytes @ 0x0
  1857                           
  1858  0070                     ?_write_byte:	
  1859                           ; 1 bytes @ 0x0
  1860                           
  1861  0070                     ?_read_byte:	
  1862                           ; 1 bytes @ 0x0
  1863                           
  1864  0070                     ?___lmul:	
  1865                           ; 1 bytes @ 0x0
  1866                           
  1867  0070                     EUSART1_Write@txData:	
  1868                           ; 4 bytes @ 0x0
  1869                           
  1870  0070                     PIN_MANAGER_Initialize@state:	
  1871                           ; 1 bytes @ 0x0
  1872                           
  1873  0070                     CW_Delay10ms@c:	
  1874                           ; 1 bytes @ 0x0
  1875                           
  1876  0070                     ___lmul@multiplier:	
  1877                           ; 2 bytes @ 0x0
  1878                           
  1879                           
  1880                           ; 4 bytes @ 0x0
  1881  0070                     	ds	1
  1882  0071                     ??_SYSTEM_Initialize:	
  1883  0071                     CW_Delay100us@a:	
  1884                           ; 1 bytes @ 0x1
  1885                           
  1886  0071                     Delay10us@a:	
  1887                           ; 1 bytes @ 0x1
  1888                           
  1889                           
  1890                           ; 1 bytes @ 0x1
  1891  0071                     	ds	1
  1892  0072                     ??_CW_Delay10ms:	
  1893  0072                     CW_Delay100us@b:	
  1894                           ; 1 bytes @ 0x2
  1895                           
  1896  0072                     Delay10us@b:	
  1897                           ; 1 bytes @ 0x2
  1898                           
  1899                           
  1900                           ; 1 bytes @ 0x2
  1901  0072                     	ds	1
  1902  0073                     CW_Delay10ms@a:	
  1903  0073                     CW_Delay100us@i:	
  1904                           ; 1 bytes @ 0x3
  1905                           
  1906  0073                     Delay10us@i:	
  1907                           ; 1 bytes @ 0x3
  1908                           
  1909                           
  1910                           ; 1 bytes @ 0x3
  1911  0073                     	ds	1
  1912  0074                     ??_start:	
  1913  0074                     ??_stop:	
  1914                           ; 1 bytes @ 0x4
  1915                           
  1916  0074                     ??_s_ack:	
  1917                           ; 1 bytes @ 0x4
  1918                           
  1919  0074                     ??_sn_ack:	
  1920                           ; 1 bytes @ 0x4
  1921                           
  1922  0074                     ??_write_byte:	
  1923                           ; 1 bytes @ 0x4
  1924                           
  1925  0074                     ??_read_byte:	
  1926                           ; 1 bytes @ 0x4
  1927                           
  1928  0074                     ?_r_ack:	
  1929                           ; 1 bytes @ 0x4
  1930                           
  1931  0074                     CW_Delay10ms@b:	
  1932                           ; 2 bytes @ 0x4
  1933                           
  1934  0074                     ___lmul@multiplicand:	
  1935                           ; 1 bytes @ 0x4
  1936                           
  1937                           
  1938                           ; 4 bytes @ 0x4
  1939  0074                     	ds	1
  1940  0075                     write_byte@w_data:	
  1941  0075                     read_byte@i:	
  1942                           ; 1 bytes @ 0x5
  1943                           
  1944                           
  1945                           ; 1 bytes @ 0x5
  1946  0075                     	ds	1
  1947  0076                     ??_r_ack:	
  1948  0076                     write_byte@i:	
  1949                           ; 1 bytes @ 0x6
  1950                           
  1951  0076                     read_byte@r_data:	
  1952                           ; 1 bytes @ 0x6
  1953                           
  1954                           
  1955                           ; 1 bytes @ 0x6
  1956  0076                     	ds	2
  1957  0078                     ??___lmul:	
  1958  0078                     r_ack@ack:	
  1959                           ; 1 bytes @ 0x8
  1960                           
  1961  0078                     ___lmul@product:	
  1962                           ; 2 bytes @ 0x8
  1963                           
  1964                           
  1965                           ; 4 bytes @ 0x8
  1966  0078                     	ds	2
  1967  007A                     ?_wait_r_ack:	
  1968                           
  1969                           ; 2 bytes @ 0xA
  1970  007A                     	ds	2
  1971  007C                     ??_cw_read:	
  1972  007C                     ??_cw_write:	
  1973                           ; 1 bytes @ 0xC
  1974                           
  1975  007C                     ??_cw_read_word:	
  1976                           ; 1 bytes @ 0xC
  1977                           
  1978  007C                     ??_wait_r_ack:	
  1979                           ; 1 bytes @ 0xC
  1980                           
  1981  007C                     ??___lldiv:	
  1982                           ; 1 bytes @ 0xC
  1983                           
  1984  007C                     cw_write@point_reg:	
  1985                           ; 1 bytes @ 0xC
  1986                           
  1987                           
  1988                           ; 1 bytes @ 0xC
  1989  007C                     	ds	1
  1990  007D                     cw_read@point_reg:	
  1991                           
  1992                           ; 1 bytes @ 0xD
  1993  007D                     	ds	1
  1994  007E                     ??_cw_bat_work:	
  1995  007E                     ??_update_vol:	
  1996                           ; 1 bytes @ 0xE
  1997                           
  1998                           
  1999                           	psect	cstackBANK0
  2000  0020                     __pcstackBANK0:	
  2001                           ; 1 bytes @ 0xE
  2002                           
  2003  0020                     ?___lldiv:	
  2004  0020                     wait_r_ack@ack:	
  2005                           ; 4 bytes @ 0x0
  2006                           
  2007  0020                     ___lldiv@divisor:	
  2008                           ; 2 bytes @ 0x0
  2009                           
  2010                           
  2011                           ; 4 bytes @ 0x0
  2012  0020                     	ds	2
  2013  0022                     wait_r_ack@i:	
  2014                           
  2015                           ; 2 bytes @ 0x2
  2016  0022                     	ds	2
  2017  0024                     ?_cw_read:	
  2018  0024                     ?_cw_write:	
  2019                           ; 2 bytes @ 0x4
  2020                           
  2021  0024                     ?_cw_read_word:	
  2022                           ; 2 bytes @ 0x4
  2023                           
  2024  0024                     cw_read@r_pdata:	
  2025                           ; 2 bytes @ 0x4
  2026                           
  2027  0024                     cw_read_word@r_pdata:	
  2028                           ; 1 bytes @ 0x4
  2029                           
  2030  0024                     cw_write@w_pdata:	
  2031                           ; 1 bytes @ 0x4
  2032                           
  2033  0024                     ___lldiv@dividend:	
  2034                           ; 1 bytes @ 0x4
  2035                           
  2036                           
  2037                           ; 4 bytes @ 0x4
  2038  0024                     	ds	1
  2039  0025                     cw_read_word@length:	
  2040                           
  2041                           ; 2 bytes @ 0x5
  2042  0025                     	ds	2
  2043  0027                     ??_cw_update_config_info:	
  2044  0027                     cw_read_word@point_reg:	
  2045                           ; 1 bytes @ 0x7
  2046                           
  2047                           
  2048                           ; 1 bytes @ 0x7
  2049  0027                     	ds	1
  2050  0028                     cw_update_config_info@reset_val:	
  2051  0028                     cw_read_word@count:	
  2052                           ; 1 bytes @ 0x8
  2053                           
  2054  0028                     ___lldiv@quotient:	
  2055                           ; 1 bytes @ 0x8
  2056                           
  2057                           
  2058                           ; 4 bytes @ 0x8
  2059  0028                     	ds	1
  2060  0029                     cw_update_config_info@ret:	
  2061                           
  2062                           ; 2 bytes @ 0x9
  2063  0029                     	ds	2
  2064  002B                     cw_update_config_info@i:	
  2065                           
  2066                           ; 1 bytes @ 0xB
  2067  002B                     	ds	1
  2068  002C                     cw_update_config_info@reg_val:	
  2069  002C                     ___lldiv@counter:	
  2070                           ; 1 bytes @ 0xC
  2071                           
  2072                           
  2073                           ; 1 bytes @ 0xC
  2074  002C                     	ds	1
  2075  002D                     ??_cw_init:	
  2076  002D                     ?_cw_get_vol:	
  2077                           ; 1 bytes @ 0xD
  2078                           
  2079                           
  2080                           ; 2 bytes @ 0xD
  2081  002D                     	ds	2
  2082  002F                     ??_cw_get_vol:	
  2083  002F                     cw_init@i:	
  2084                           ; 1 bytes @ 0xF
  2085                           
  2086                           
  2087                           ; 1 bytes @ 0xF
  2088  002F                     	ds	1
  2089  0030                     cw_init@ret:	
  2090                           
  2091                           ; 2 bytes @ 0x10
  2092  0030                     	ds	2
  2093  0032                     cw_init@reg_val:	
  2094                           
  2095                           ; 1 bytes @ 0x12
  2096  0032                     	ds	1
  2097  0033                     ??_cw_bat_init:	
  2098  0033                     ?_cw_por:	
  2099                           ; 1 bytes @ 0x13
  2100                           
  2101                           
  2102                           ; 2 bytes @ 0x13
  2103  0033                     	ds	1
  2104  0034                     cw_bat_init@loop:	
  2105  0034                     cw_get_vol@ret:	
  2106                           ; 1 bytes @ 0x14
  2107                           
  2108                           
  2109                           ; 2 bytes @ 0x14
  2110  0034                     	ds	1
  2111  0035                     ??_cw_por:	
  2112  0035                     cw_bat_init@ret:	
  2113                           ; 1 bytes @ 0x15
  2114                           
  2115                           
  2116                           ; 1 bytes @ 0x15
  2117  0035                     	ds	1
  2118  0036                     cw_get_vol@reg_val:	
  2119                           
  2120                           ; 2 bytes @ 0x16
  2121  0036                     	ds	1
  2122  0037                     cw_por@reset_val:	
  2123                           
  2124                           ; 1 bytes @ 0x17
  2125  0037                     	ds	1
  2126  0038                     cw_por@ret:	
  2127  0038                     cw_get_vol@ad_value_min:	
  2128                           ; 2 bytes @ 0x18
  2129                           
  2130                           
  2131                           ; 2 bytes @ 0x18
  2132  0038                     	ds	2
  2133  003A                     ?_cw_get_capacity:	
  2134  003A                     cw_get_vol@ad_value_max:	
  2135                           ; 2 bytes @ 0x1A
  2136                           
  2137                           
  2138                           ; 2 bytes @ 0x1A
  2139  003A                     	ds	2
  2140  003C                     ??_cw_get_capacity:	
  2141  003C                     cw_get_vol@ad_value:	
  2142                           ; 1 bytes @ 0x1C
  2143                           
  2144                           
  2145                           ; 4 bytes @ 0x1C
  2146  003C                     	ds	2
  2147  003E                     cw_get_capacity@cw_capacity:	
  2148                           
  2149                           ; 1 bytes @ 0x1E
  2150  003E                     	ds	1
  2151  003F                     cw_get_capacity@ret:	
  2152                           
  2153                           ; 2 bytes @ 0x1F
  2154  003F                     	ds	1
  2155  0040                     cw_get_vol@get_ad_times:	
  2156                           
  2157                           ; 1 bytes @ 0x20
  2158  0040                     	ds	1
  2159  0041                     cw_get_capacity@reg_val:	
  2160  0041                     cw_get_vol@ad_buff:	
  2161                           ; 1 bytes @ 0x21
  2162                           
  2163                           
  2164                           ; 2 bytes @ 0x21
  2165  0041                     	ds	1
  2166  0042                     ??_update_capacity:	
  2167                           
  2168                           ; 1 bytes @ 0x22
  2169  0042                     	ds	1
  2170  0043                     update_capacity@cw_capacity:	
  2171  0043                     update_vol@cw_voltage:	
  2172                           ; 2 bytes @ 0x23
  2173                           
  2174                           
  2175                           ; 2 bytes @ 0x23
  2176  0043                     	ds	2
  2177  0045                     ??_main:	
  2178                           
  2179                           ; 1 bytes @ 0x25
  2180  0045                     	ds	1
  2181  0046                     main@ret:	
  2182                           
  2183                           ; 1 bytes @ 0x26
  2184  0046                     	ds	1
  2185                           
  2186                           	psect	maintext
  2187  044D                     __pmaintext:	
  2188 ;;
  2189 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2190 ;;
  2191 ;; *************** function _main *****************
  2192 ;; Defined at:
  2193 ;;		line 53 in file "main.c"
  2194 ;; Parameters:    Size  Location     Type
  2195 ;;		None
  2196 ;; Auto vars:     Size  Location     Type
  2197 ;;  ret             1   38[BANK0 ] unsigned char 
  2198 ;;  send_char       1    0        unsigned char 
  2199 ;; Return value:  Size  Location     Type
  2200 ;;                  1    wreg      void 
  2201 ;; Registers used:
  2202 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2203 ;; Tracked objects:
  2204 ;;		On entry : B3F/0
  2205 ;;		On exit  : 0/0
  2206 ;;		Unchanged: 0/0
  2207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2208 ;;      Params:         0       0       0       0
  2209 ;;      Locals:         0       1       0       0
  2210 ;;      Temps:          0       1       0       0
  2211 ;;      Totals:         0       2       0       0
  2212 ;;Total ram usage:        2 bytes
  2213 ;; Hardware stack levels required when called:   10
  2214 ;; This function calls:
  2215 ;;		_CW_Delay10ms
  2216 ;;		_EUSART1_Write
  2217 ;;		_SYSTEM_Initialize
  2218 ;;		_cw_bat_init
  2219 ;;		_cw_bat_work
  2220 ;; This function is called by:
  2221 ;;		Startup code after reset
  2222 ;; This function uses a non-reentrant model
  2223 ;;
  2224                           
  2225                           
  2226                           ;psect for function _main
  2227  044D                     _main:	
  2228                           
  2229                           ;main.c: 56: unsigned char ret = 0;
  2230                           
  2231                           ;incstack = 0
  2232                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2233  044D  0140               	movlb	0	; select bank0
  2234  044E  01C6               	clrf	main@ret
  2235                           
  2236                           ;main.c: 57: uint8_t send_char;
  2237                           ;main.c: 58: SYSTEM_Initialize();
  2238  044F  2117               	fcall	_SYSTEM_Initialize
  2239                           
  2240                           ;main.c: 60: ret = cw_bat_init();
  2241  0450  21B0               	fcall	_cw_bat_init
  2242  0451  0140               	movlb	0	; select bank0
  2243  0452  00C5               	movwf	??_main
  2244  0453  0845               	movf	??_main,w
  2245  0454  00C6               	movwf	main@ret
  2246                           
  2247                           ;main.c: 61: do { LATCbits.LATC3 = 1; } while(0);
  2248  0455  159A               	bsf	26,3	;volatile
  2249  0456  2C64               	goto	l2393
  2250  0457                     l126:	
  2251                           ;main.c: 85: {
  2252                           ;main.c: 86: do { LATCbits.LATC2 = 0; } while(0);
  2253                           
  2254  0457  111A               	bcf	26,2	;volatile
  2255  0458  2C5A               	goto	L1
  2256  0459                     l136:	
  2257                           ;main.c: 92: {
  2258                           ;main.c: 93: do { LATCbits.LATC2 = 1; } while(0);
  2259                           
  2260                           ;main.c: 90: }
  2261                           
  2262                           ;main.c: 89: do { LATAbits.LATA4 = 0; } while(0);
  2263                           
  2264                           ;main.c: 88: do { LATAbits.LATA5 = 0; } while(0);
  2265                           
  2266                           ;main.c: 87: do { LATAbits.LATA2 = 0; } while(0);
  2267                           
  2268  0459  151A               	bsf	26,2	;volatile
  2269  045A                     L1:	
  2270                           
  2271                           ;main.c: 94: do { LATAbits.LATA2 = 0; } while(0);
  2272  045A  1118               	bcf	24,2	;volatile
  2273  045B  2C5E               	goto	L2
  2274  045C                     l146:	
  2275                           ;main.c: 99: {
  2276                           ;main.c: 100: do { LATCbits.LATC2 = 1; } while(0);
  2277                           
  2278                           ;main.c: 97: }
  2279                           
  2280                           ;main.c: 96: do { LATAbits.LATA4 = 0; } while(0);
  2281                           
  2282                           ;main.c: 95: do { LATAbits.LATA5 = 0; } while(0);
  2283                           
  2284  045C  151A               	bsf	26,2	;volatile
  2285                           
  2286                           ;main.c: 101: do { LATAbits.LATA2 = 1; } while(0);
  2287  045D  1518               	bsf	24,2	;volatile
  2288  045E                     L2:	
  2289                           
  2290                           ;main.c: 102: do { LATAbits.LATA5 = 0; } while(0);
  2291  045E  1298               	bcf	24,5	;volatile
  2292  045F  2C63               	goto	L3
  2293  0460                     l156:	
  2294                           ;main.c: 106: {
  2295                           ;main.c: 107: do { LATCbits.LATC2 = 1; } while(0);
  2296                           
  2297                           ;main.c: 104: }
  2298                           
  2299                           ;main.c: 103: do { LATAbits.LATA4 = 0; } while(0);
  2300                           
  2301  0460  151A               	bsf	26,2	;volatile
  2302                           
  2303                           ;main.c: 108: do { LATAbits.LATA2 = 1; } while(0);
  2304  0461  1518               	bsf	24,2	;volatile
  2305                           
  2306                           ;main.c: 109: do { LATAbits.LATA5 = 1; } while(0);
  2307  0462  1698               	bsf	24,5	;volatile
  2308  0463                     L3:	
  2309                           
  2310                           ;main.c: 110: do { LATAbits.LATA4 = 0; } while(0);
  2311  0463  1218               	bcf	24,4	;volatile
  2312  0464                     l2393:	
  2313                           ;main.c: 77: while (1)
  2314                           
  2315                           ;main.c: 111: }
  2316                           
  2317                           
  2318                           ;main.c: 78: {
  2319                           ;main.c: 80: CW_Delay10ms(100);
  2320  0464  3064               	movlw	100
  2321  0465  00F0               	movwf	CW_Delay10ms@c
  2322  0466  3000               	movlw	0
  2323  0467  00F1               	movwf	CW_Delay10ms@c+1
  2324  0468  222A               	fcall	_CW_Delay10ms
  2325                           
  2326                           ;main.c: 81: cw_bat_work();
  2327  0469  211B               	fcall	_cw_bat_work
  2328                           
  2329                           ;main.c: 82: EUSART1_Write(cw_bat.voltage);
  2330  046A  0140               	movlb	0	; select bank0
  2331  046B  084A               	movf	_cw_bat+3,w
  2332  046C  212B               	fcall	_EUSART1_Write
  2333                           
  2334                           ;main.c: 83: EUSART1_Write(cw_bat.capacity);
  2335  046D  0140               	movlb	0	; select bank0
  2336  046E  0848               	movf	_cw_bat+1,w
  2337  046F  212B               	fcall	_EUSART1_Write
  2338                           
  2339                           ;main.c: 84: if(cw_bat.capacity >= 80)
  2340  0470  3000               	movlw	0
  2341  0471  0140               	movlb	0	; select bank0
  2342  0472  0249               	subwf	_cw_bat+2,w
  2343  0473  3050               	movlw	80
  2344  0474  1903               	skipnz
  2345  0475  0248               	subwf	_cw_bat+1,w
  2346  0476  1803               	btfsc	3,0
  2347  0477  2C57               	goto	l126
  2348                           
  2349                           ;main.c: 91: else if(cw_bat.capacity >= 60)
  2350  0478  3000               	movlw	0
  2351  0479  0249               	subwf	_cw_bat+2,w
  2352  047A  303C               	movlw	60
  2353  047B  1903               	skipnz
  2354  047C  0248               	subwf	_cw_bat+1,w
  2355  047D  1803               	btfsc	3,0
  2356  047E  2C59               	goto	l136
  2357                           
  2358                           ;main.c: 98: else if(cw_bat.capacity >= 40)
  2359  047F  3000               	movlw	0
  2360  0480  0249               	subwf	_cw_bat+2,w
  2361  0481  3028               	movlw	40
  2362  0482  1903               	skipnz
  2363  0483  0248               	subwf	_cw_bat+1,w
  2364  0484  1803               	btfsc	3,0
  2365  0485  2C5C               	goto	l146
  2366                           
  2367                           ;main.c: 105: else if(cw_bat.capacity >= 20)
  2368  0486  3000               	movlw	0
  2369  0487  0249               	subwf	_cw_bat+2,w
  2370  0488  3014               	movlw	20
  2371  0489  1903               	skipnz
  2372  048A  0248               	subwf	_cw_bat+1,w
  2373  048B  1803               	btfsc	3,0
  2374  048C  2C60               	goto	l156
  2375                           
  2376                           ;main.c: 112: else
  2377                           ;main.c: 113: {
  2378                           ;main.c: 114: do { LATCbits.LATC2 = 1; } while(0);
  2379  048D  151A               	bsf	26,2	;volatile
  2380                           
  2381                           ;main.c: 115: do { LATAbits.LATA2 = 1; } while(0);
  2382  048E  1518               	bsf	24,2	;volatile
  2383                           
  2384                           ;main.c: 116: do { LATAbits.LATA5 = 1; } while(0);
  2385  048F  1698               	bsf	24,5	;volatile
  2386                           
  2387                           ;main.c: 117: do { LATAbits.LATA4 = 1; } while(0);
  2388  0490  1618               	bsf	24,4	;volatile
  2389  0491  2C64               	goto	l2393
  2390  0492                     __end_of_main:	
  2391                           
  2392                           	psect	text1
  2393  011B                     __ptext1:	
  2394 ;; *************** function _cw_bat_work *****************
  2395 ;; Defined at:
  2396 ;;		line 530 in file "CW201x.c"
  2397 ;; Parameters:    Size  Location     Type
  2398 ;;		None
  2399 ;; Auto vars:     Size  Location     Type
  2400 ;;		None
  2401 ;; Return value:  Size  Location     Type
  2402 ;;                  1    wreg      void 
  2403 ;; Registers used:
  2404 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2405 ;; Tracked objects:
  2406 ;;		On entry : 0/0
  2407 ;;		On exit  : 0/0
  2408 ;;		Unchanged: 0/0
  2409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2410 ;;      Params:         0       0       0       0
  2411 ;;      Locals:         0       0       0       0
  2412 ;;      Temps:          0       0       0       0
  2413 ;;      Totals:         0       0       0       0
  2414 ;;Total ram usage:        0 bytes
  2415 ;; Hardware stack levels used:    1
  2416 ;; Hardware stack levels required when called:    9
  2417 ;; This function calls:
  2418 ;;		_update_capacity
  2419 ;;		_update_usb_online
  2420 ;;		_update_vol
  2421 ;; This function is called by:
  2422 ;;		_main
  2423 ;; This function uses a non-reentrant model
  2424 ;;
  2425                           
  2426                           
  2427                           ;psect for function _cw_bat_work
  2428  011B                     _cw_bat_work:	
  2429                           
  2430                           ;CW201x.c: 532: update_usb_online();
  2431                           
  2432                           ;incstack = 0
  2433                           ; Regs used in _cw_bat_work: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2434  011B  2133               	fcall	_update_usb_online
  2435                           
  2436                           ;CW201x.c: 533: update_capacity();
  2437  011C  224B               	fcall	_update_capacity
  2438                           
  2439                           ;CW201x.c: 534: update_vol();
  2440  011D  2199               	fcall	_update_vol
  2441  011E  0008               	return
  2442  011F                     __end_of_cw_bat_work:	
  2443                           
  2444                           	psect	text2
  2445  0199                     __ptext2:	
  2446 ;; *************** function _update_vol *****************
  2447 ;; Defined at:
  2448 ;;		line 483 in file "CW201x.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;		None
  2451 ;; Auto vars:     Size  Location     Type
  2452 ;;  cw_voltage      2   35[BANK0 ] unsigned int 
  2453 ;; Return value:  Size  Location     Type
  2454 ;;                  1    wreg      void 
  2455 ;; Registers used:
  2456 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2457 ;; Tracked objects:
  2458 ;;		On entry : 0/0
  2459 ;;		On exit  : 0/0
  2460 ;;		Unchanged: 0/0
  2461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2462 ;;      Params:         0       0       0       0
  2463 ;;      Locals:         0       2       0       0
  2464 ;;      Temps:          0       0       0       0
  2465 ;;      Totals:         0       2       0       0
  2466 ;;Total ram usage:        2 bytes
  2467 ;; Hardware stack levels used:    1
  2468 ;; Hardware stack levels required when called:    5
  2469 ;; This function calls:
  2470 ;;		_cw_get_vol
  2471 ;; This function is called by:
  2472 ;;		_cw_bat_work
  2473 ;; This function uses a non-reentrant model
  2474 ;;
  2475                           
  2476                           
  2477                           ;psect for function _update_vol
  2478  0199                     _update_vol:	
  2479                           
  2480                           ;CW201x.c: 485: unsigned int cw_voltage;
  2481                           ;CW201x.c: 486: cw_voltage = cw_get_vol();
  2482                           
  2483                           ;incstack = 0
  2484                           ; Regs used in _update_vol: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2485  0199  264D               	fcall	_cw_get_vol
  2486  019A  0140               	movlb	0	; select bank0
  2487  019B  082E               	movf	?_cw_get_vol+1,w
  2488  019C  00C4               	movwf	update_vol@cw_voltage+1
  2489  019D  082D               	movf	?_cw_get_vol,w
  2490  019E  00C3               	movwf	update_vol@cw_voltage
  2491                           
  2492                           ;CW201x.c: 487: if(cw_voltage == 1){
  2493  019F  0343               	decf	update_vol@cw_voltage,w
  2494  01A0  0444               	iorwf	update_vol@cw_voltage+1,w
  2495  01A1  1903               	btfsc	3,2
  2496  01A2  0008               	return
  2497                           
  2498                           ;CW201x.c: 490: }else if(cw_bat.voltage != cw_voltage)
  2499  01A3  0844               	movf	update_vol@cw_voltage+1,w
  2500  01A4  064B               	xorwf	_cw_bat+4,w
  2501  01A5  1D03               	skipz
  2502  01A6  29A9               	goto	u2265
  2503  01A7  0843               	movf	update_vol@cw_voltage,w
  2504  01A8  064A               	xorwf	_cw_bat+3,w
  2505  01A9                     u2265:	
  2506  01A9  1903               	skipnz
  2507  01AA  0008               	return
  2508                           
  2509                           ;CW201x.c: 491: {
  2510                           ;CW201x.c: 492: cw_bat.voltage = cw_voltage;
  2511  01AB  0844               	movf	update_vol@cw_voltage+1,w
  2512  01AC  00CB               	movwf	_cw_bat+4
  2513  01AD  0843               	movf	update_vol@cw_voltage,w
  2514  01AE  00CA               	movwf	_cw_bat+3
  2515  01AF  0008               	return
  2516  01B0                     __end_of_update_vol:	
  2517                           
  2518                           	psect	text3
  2519  064D                     __ptext3:	
  2520 ;; *************** function _cw_get_vol *****************
  2521 ;; Defined at:
  2522 ;;		line 409 in file "CW201x.c"
  2523 ;; Parameters:    Size  Location     Type
  2524 ;;		None
  2525 ;; Auto vars:     Size  Location     Type
  2526 ;;  ad_value        4   28[BANK0 ] unsigned long 
  2527 ;;  ad_buff         2   33[BANK0 ] unsigned int 
  2528 ;;  reg_val         2   22[BANK0 ] unsigned char [2]
  2529 ;;  ad_value_max    2   26[BANK0 ] unsigned int 
  2530 ;;  ad_value_min    2   24[BANK0 ] unsigned int 
  2531 ;;  ret             2   20[BANK0 ] int 
  2532 ;;  get_ad_times    1   32[BANK0 ] unsigned char 
  2533 ;; Return value:  Size  Location     Type
  2534 ;;                  2   13[BANK0 ] unsigned int 
  2535 ;; Registers used:
  2536 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2537 ;; Tracked objects:
  2538 ;;		On entry : 0/0
  2539 ;;		On exit  : 0/0
  2540 ;;		Unchanged: 0/0
  2541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2542 ;;      Params:         0       2       0       0
  2543 ;;      Locals:         0      15       0       0
  2544 ;;      Temps:          0       5       0       0
  2545 ;;      Totals:         0      22       0       0
  2546 ;;Total ram usage:       22 bytes
  2547 ;; Hardware stack levels used:    1
  2548 ;; Hardware stack levels required when called:    4
  2549 ;; This function calls:
  2550 ;;		___lldiv
  2551 ;;		___lmul
  2552 ;;		_cw_read_word
  2553 ;; This function is called by:
  2554 ;;		_update_vol
  2555 ;; This function uses a non-reentrant model
  2556 ;;
  2557                           
  2558                           
  2559                           ;psect for function _cw_get_vol
  2560  064D                     _cw_get_vol:	
  2561                           
  2562                           ;CW201x.c: 411: int ret = 0;
  2563                           
  2564                           ;incstack = 0
  2565                           ; Regs used in _cw_get_vol: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2566  064D  0140               	movlb	0	; select bank0
  2567  064E  01B4               	clrf	cw_get_vol@ret
  2568  064F  01B5               	clrf	cw_get_vol@ret+1
  2569                           
  2570                           ;CW201x.c: 412: unsigned char get_ad_times = 0;
  2571  0650  01C0               	clrf	cw_get_vol@get_ad_times
  2572                           
  2573                           ;CW201x.c: 413: unsigned char reg_val[2] = {0 , 0};
  2574  0651  084E               	movf	cw_get_vol@F83+1,w
  2575  0652  00B7               	movwf	cw_get_vol@reg_val+1
  2576  0653  084D               	movf	cw_get_vol@F83,w
  2577  0654  00B6               	movwf	cw_get_vol@reg_val
  2578                           
  2579                           ;CW201x.c: 414: unsigned long ad_value = 0;
  2580  0655  3000               	movlw	0
  2581  0656  00BF               	movwf	cw_get_vol@ad_value+3
  2582  0657  3000               	movlw	0
  2583  0658  00BE               	movwf	cw_get_vol@ad_value+2
  2584  0659  3000               	movlw	0
  2585  065A  00BD               	movwf	cw_get_vol@ad_value+1
  2586  065B  3000               	movlw	0
  2587  065C  00BC               	movwf	cw_get_vol@ad_value
  2588                           
  2589                           ;CW201x.c: 415: unsigned int ad_buff = 0;
  2590  065D  01C1               	clrf	cw_get_vol@ad_buff
  2591  065E  01C2               	clrf	cw_get_vol@ad_buff+1
  2592                           
  2593                           ;CW201x.c: 416: unsigned int ad_value_min = 0;
  2594  065F  01B8               	clrf	cw_get_vol@ad_value_min
  2595  0660  01B9               	clrf	cw_get_vol@ad_value_min+1
  2596                           
  2597                           ;CW201x.c: 417: unsigned int ad_value_max = 0;
  2598  0661  01BA               	clrf	cw_get_vol@ad_value_max
  2599  0662  01BB               	clrf	cw_get_vol@ad_value_max+1
  2600                           
  2601                           ;CW201x.c: 419: for(get_ad_times = 0; get_ad_times < 3; get_ad_times++)
  2602  0663  01C0               	clrf	cw_get_vol@get_ad_times
  2603  0664  3003               	movlw	3
  2604  0665  0240               	subwf	cw_get_vol@get_ad_times,w
  2605  0666  1803               	btfsc	3,0
  2606  0667  2EC1               	goto	l2237
  2607  0668                     l2217:	
  2608                           
  2609                           ;CW201x.c: 420: {
  2610                           ;CW201x.c: 421: ret = cw_read_word(0x2, &reg_val[0],2);
  2611  0668  3036               	movlw	(low (cw_get_vol@reg_val| 0))& (0+255)
  2612  0669  00AF               	movwf	??_cw_get_vol
  2613  066A  082F               	movf	??_cw_get_vol,w
  2614  066B  00A4               	movwf	cw_read_word@r_pdata
  2615  066C  3002               	movlw	2
  2616  066D  00A5               	movwf	cw_read_word@length
  2617  066E  3000               	movlw	0
  2618  066F  00A6               	movwf	cw_read_word@length+1
  2619  0670  3002               	movlw	2
  2620  0671  252D               	fcall	_cw_read_word
  2621  0672  0140               	movlb	0	; select bank0
  2622  0673  0825               	movf	?_cw_read_word+1,w
  2623  0674  00B5               	movwf	cw_get_vol@ret+1
  2624  0675  0824               	movf	?_cw_read_word,w
  2625  0676  00B4               	movwf	cw_get_vol@ret
  2626                           
  2627                           ;CW201x.c: 422: if(ret)
  2628  0677  0834               	movf	cw_get_vol@ret,w
  2629  0678  0435               	iorwf	cw_get_vol@ret+1,w
  2630  0679  1903               	btfsc	3,2
  2631  067A  2E80               	goto	l2225
  2632                           
  2633                           ;CW201x.c: 423: {
  2634                           ;CW201x.c: 424: return 1;
  2635  067B  3001               	movlw	1
  2636  067C  00AD               	movwf	?_cw_get_vol
  2637  067D  3000               	movlw	0
  2638  067E  00AE               	movwf	?_cw_get_vol+1
  2639  067F  0008               	return
  2640  0680                     l2225:	
  2641                           
  2642                           ;CW201x.c: 425: }
  2643                           ;CW201x.c: 426: ad_buff = (reg_val[0] << 8) + reg_val[1];
  2644  0680  0837               	movf	cw_get_vol@reg_val+1,w
  2645  0681  00AF               	movwf	??_cw_get_vol
  2646  0682  01B0               	clrf	??_cw_get_vol+1
  2647  0683  0836               	movf	cw_get_vol@reg_val,w
  2648  0684  00B1               	movwf	??_cw_get_vol+2
  2649  0685  01B2               	clrf	??_cw_get_vol+3
  2650  0686  0831               	movf	??_cw_get_vol+2,w
  2651  0687  00B2               	movwf	??_cw_get_vol+3
  2652  0688  01B1               	clrf	??_cw_get_vol+2
  2653  0689  082F               	movf	??_cw_get_vol,w
  2654  068A  0731               	addwf	??_cw_get_vol+2,w
  2655  068B  00C1               	movwf	cw_get_vol@ad_buff
  2656  068C  0830               	movf	??_cw_get_vol+1,w
  2657  068D  3D32               	addwfc	??_cw_get_vol+3,w
  2658  068E  00C2               	movwf	cw_get_vol@ad_buff+1
  2659                           
  2660                           ;CW201x.c: 428: if(get_ad_times == 0)
  2661  068F  0840               	movf	cw_get_vol@get_ad_times,w
  2662  0690  1D03               	btfss	3,2
  2663  0691  2E9A               	goto	l277
  2664                           
  2665                           ;CW201x.c: 429: {
  2666                           ;CW201x.c: 430: ad_value_min = ad_buff;
  2667  0692  0842               	movf	cw_get_vol@ad_buff+1,w
  2668  0693  00B9               	movwf	cw_get_vol@ad_value_min+1
  2669  0694  0841               	movf	cw_get_vol@ad_buff,w
  2670  0695  00B8               	movwf	cw_get_vol@ad_value_min
  2671                           
  2672                           ;CW201x.c: 431: ad_value_max = ad_buff;
  2673  0696  0842               	movf	cw_get_vol@ad_buff+1,w
  2674  0697  00BB               	movwf	cw_get_vol@ad_value_max+1
  2675  0698  0841               	movf	cw_get_vol@ad_buff,w
  2676  0699  00BA               	movwf	cw_get_vol@ad_value_max
  2677  069A                     l277:	
  2678                           
  2679                           ;CW201x.c: 432: }
  2680                           ;CW201x.c: 433: if(ad_buff < ad_value_min)
  2681  069A  0839               	movf	cw_get_vol@ad_value_min+1,w
  2682  069B  0242               	subwf	cw_get_vol@ad_buff+1,w
  2683  069C  1D03               	skipz
  2684  069D  2EA0               	goto	u2065
  2685  069E  0838               	movf	cw_get_vol@ad_value_min,w
  2686  069F  0241               	subwf	cw_get_vol@ad_buff,w
  2687  06A0                     u2065:	
  2688  06A0  1803               	skipnc
  2689  06A1  2EA6               	goto	l278
  2690                           
  2691                           ;CW201x.c: 434: {
  2692                           ;CW201x.c: 435: ad_value_min = ad_buff;
  2693  06A2  0842               	movf	cw_get_vol@ad_buff+1,w
  2694  06A3  00B9               	movwf	cw_get_vol@ad_value_min+1
  2695  06A4  0841               	movf	cw_get_vol@ad_buff,w
  2696  06A5  00B8               	movwf	cw_get_vol@ad_value_min
  2697  06A6                     l278:	
  2698                           
  2699                           ;CW201x.c: 436: }
  2700                           ;CW201x.c: 437: if(ad_buff > ad_value_max)
  2701  06A6  0842               	movf	cw_get_vol@ad_buff+1,w
  2702  06A7  023B               	subwf	cw_get_vol@ad_value_max+1,w
  2703  06A8  1D03               	skipz
  2704  06A9  2EAC               	goto	u2075
  2705  06AA  0841               	movf	cw_get_vol@ad_buff,w
  2706  06AB  023A               	subwf	cw_get_vol@ad_value_max,w
  2707  06AC                     u2075:	
  2708  06AC  1803               	skipnc
  2709  06AD  2EB2               	goto	l279
  2710                           
  2711                           ;CW201x.c: 438: {
  2712                           ;CW201x.c: 439: ad_value_max = ad_buff;
  2713  06AE  0842               	movf	cw_get_vol@ad_buff+1,w
  2714  06AF  00BB               	movwf	cw_get_vol@ad_value_max+1
  2715  06B0  0841               	movf	cw_get_vol@ad_buff,w
  2716  06B1  00BA               	movwf	cw_get_vol@ad_value_max
  2717  06B2                     l279:	
  2718                           
  2719                           ;CW201x.c: 440: }
  2720                           ;CW201x.c: 441: ad_value += ad_buff;
  2721  06B2  0841               	movf	cw_get_vol@ad_buff,w
  2722  06B3  07BC               	addwf	cw_get_vol@ad_value,f
  2723  06B4  0842               	movf	cw_get_vol@ad_buff+1,w
  2724  06B5  3DBD               	addwfc	cw_get_vol@ad_value+1,f
  2725  06B6  3000               	movlw	0
  2726  06B7  3DBE               	addwfc	cw_get_vol@ad_value+2,f
  2727  06B8  3DBF               	addwfc	cw_get_vol@ad_value+3,f
  2728  06B9  3001               	movlw	1
  2729  06BA  00AF               	movwf	??_cw_get_vol
  2730  06BB  082F               	movf	??_cw_get_vol,w
  2731  06BC  07C0               	addwf	cw_get_vol@get_ad_times,f
  2732  06BD  3003               	movlw	3
  2733  06BE  0240               	subwf	cw_get_vol@get_ad_times,w
  2734  06BF  1C03               	skipc
  2735  06C0  2E68               	goto	l2217
  2736  06C1                     l2237:	
  2737                           
  2738                           ;CW201x.c: 442: }
  2739                           ;CW201x.c: 443: ad_value -= ad_value_min;
  2740  06C1  0838               	movf	cw_get_vol@ad_value_min,w
  2741  06C2  00AF               	movwf	??_cw_get_vol
  2742  06C3  0839               	movf	cw_get_vol@ad_value_min+1,w
  2743  06C4  00B0               	movwf	??_cw_get_vol+1
  2744  06C5  01B1               	clrf	??_cw_get_vol+2
  2745  06C6  01B2               	clrf	??_cw_get_vol+3
  2746  06C7  082F               	movf	??_cw_get_vol,w
  2747  06C8  02BC               	subwf	cw_get_vol@ad_value,f
  2748  06C9  0830               	movf	??_cw_get_vol+1,w
  2749  06CA  3BBD               	subwfb	cw_get_vol@ad_value+1,f
  2750  06CB  0831               	movf	??_cw_get_vol+2,w
  2751  06CC  3BBE               	subwfb	cw_get_vol@ad_value+2,f
  2752  06CD  0832               	movf	??_cw_get_vol+3,w
  2753  06CE  3BBF               	subwfb	cw_get_vol@ad_value+3,f
  2754                           
  2755                           ;CW201x.c: 444: ad_value -= ad_value_max;
  2756  06CF  083A               	movf	cw_get_vol@ad_value_max,w
  2757  06D0  00AF               	movwf	??_cw_get_vol
  2758  06D1  083B               	movf	cw_get_vol@ad_value_max+1,w
  2759  06D2  00B0               	movwf	??_cw_get_vol+1
  2760  06D3  01B1               	clrf	??_cw_get_vol+2
  2761  06D4  01B2               	clrf	??_cw_get_vol+3
  2762  06D5  082F               	movf	??_cw_get_vol,w
  2763  06D6  02BC               	subwf	cw_get_vol@ad_value,f
  2764  06D7  0830               	movf	??_cw_get_vol+1,w
  2765  06D8  3BBD               	subwfb	cw_get_vol@ad_value+1,f
  2766  06D9  0831               	movf	??_cw_get_vol+2,w
  2767  06DA  3BBE               	subwfb	cw_get_vol@ad_value+2,f
  2768  06DB  0832               	movf	??_cw_get_vol+3,w
  2769  06DC  3BBF               	subwfb	cw_get_vol@ad_value+3,f
  2770                           
  2771                           ;CW201x.c: 445: ad_value = ad_value * 305 / 100000;
  2772  06DD  3000               	movlw	0
  2773  06DE  00A3               	movwf	___lldiv@divisor+3
  2774  06DF  3001               	movlw	1
  2775  06E0  00A2               	movwf	___lldiv@divisor+2
  2776  06E1  3086               	movlw	134
  2777  06E2  00A1               	movwf	___lldiv@divisor+1
  2778  06E3  30A0               	movlw	160
  2779  06E4  00A0               	movwf	___lldiv@divisor
  2780  06E5  083F               	movf	cw_get_vol@ad_value+3,w
  2781  06E6  00F3               	movwf	___lmul@multiplier+3
  2782  06E7  083E               	movf	cw_get_vol@ad_value+2,w
  2783  06E8  00F2               	movwf	___lmul@multiplier+2
  2784  06E9  083D               	movf	cw_get_vol@ad_value+1,w
  2785  06EA  00F1               	movwf	___lmul@multiplier+1
  2786  06EB  083C               	movf	cw_get_vol@ad_value,w
  2787  06EC  00F0               	movwf	___lmul@multiplier
  2788  06ED  3000               	movlw	0
  2789  06EE  00F7               	movwf	___lmul@multiplicand+3
  2790  06EF  3000               	movlw	0
  2791  06F0  00F6               	movwf	___lmul@multiplicand+2
  2792  06F1  3001               	movlw	1
  2793  06F2  00F5               	movwf	___lmul@multiplicand+1
  2794  06F3  3031               	movlw	49
  2795  06F4  00F4               	movwf	___lmul@multiplicand
  2796  06F5  22BD               	fcall	___lmul
  2797  06F6  0873               	movf	?___lmul+3,w
  2798  06F7  0140               	movlb	0	; select bank0
  2799  06F8  00A7               	movwf	___lldiv@dividend+3
  2800  06F9  0872               	movf	?___lmul+2,w
  2801  06FA  00A6               	movwf	___lldiv@dividend+2
  2802  06FB  0871               	movf	?___lmul+1,w
  2803  06FC  00A5               	movwf	___lldiv@dividend+1
  2804  06FD  0870               	movf	?___lmul,w
  2805  06FE  00A4               	movwf	___lldiv@dividend
  2806  06FF  24DA               	fcall	___lldiv
  2807  0700  0140               	movlb	0	; select bank0
  2808  0701  0823               	movf	?___lldiv+3,w
  2809  0702  00BF               	movwf	cw_get_vol@ad_value+3
  2810  0703  0822               	movf	?___lldiv+2,w
  2811  0704  00BE               	movwf	cw_get_vol@ad_value+2
  2812  0705  0821               	movf	?___lldiv+1,w
  2813  0706  00BD               	movwf	cw_get_vol@ad_value+1
  2814  0707  0820               	movf	?___lldiv,w
  2815  0708  00BC               	movwf	cw_get_vol@ad_value
  2816                           
  2817                           ;CW201x.c: 446: return(ad_value);
  2818  0709  083D               	movf	cw_get_vol@ad_value+1,w
  2819  070A  00AE               	movwf	?_cw_get_vol+1
  2820  070B  083C               	movf	cw_get_vol@ad_value,w
  2821  070C  00AD               	movwf	?_cw_get_vol
  2822  070D  0008               	return
  2823  070E                     __end_of_cw_get_vol:	
  2824                           
  2825                           	psect	text4
  2826  052D                     __ptext4:	
  2827 ;; *************** function _cw_read_word *****************
  2828 ;; Defined at:
  2829 ;;		line 189 in file "iic.c"
  2830 ;; Parameters:    Size  Location     Type
  2831 ;;  point_reg       1    wreg     unsigned char 
  2832 ;;  r_pdata         1    4[BANK0 ] PTR unsigned char 
  2833 ;;		 -> cw_get_vol@reg_val(2), 
  2834 ;;  length          2    5[BANK0 ] unsigned int 
  2835 ;; Auto vars:     Size  Location     Type
  2836 ;;  point_reg       1    7[BANK0 ] unsigned char 
  2837 ;;  count           1    8[BANK0 ] unsigned char 
  2838 ;; Return value:  Size  Location     Type
  2839 ;;                  2    4[BANK0 ] int 
  2840 ;; Registers used:
  2841 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2842 ;; Tracked objects:
  2843 ;;		On entry : 0/0
  2844 ;;		On exit  : 0/0
  2845 ;;		Unchanged: 0/0
  2846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2847 ;;      Params:         0       3       0       0
  2848 ;;      Locals:         0       2       0       0
  2849 ;;      Temps:          2       0       0       0
  2850 ;;      Totals:         2       5       0       0
  2851 ;;Total ram usage:        7 bytes
  2852 ;; Hardware stack levels used:    1
  2853 ;; Hardware stack levels required when called:    3
  2854 ;; This function calls:
  2855 ;;		_read_byte
  2856 ;;		_s_ack
  2857 ;;		_sn_ack
  2858 ;;		_start
  2859 ;;		_stop
  2860 ;;		_wait_r_ack
  2861 ;;		_write_byte
  2862 ;; This function is called by:
  2863 ;;		_cw_get_vol
  2864 ;; This function uses a non-reentrant model
  2865 ;;
  2866                           
  2867                           
  2868                           ;psect for function _cw_read_word
  2869  052D                     _cw_read_word:	
  2870                           
  2871                           ;incstack = 0
  2872                           ; Regs used in _cw_read_word: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2873                           ;cw_read_word@point_reg stored from wreg
  2874  052D  0140               	movlb	0	; select bank0
  2875  052E  00A7               	movwf	cw_read_word@point_reg
  2876                           
  2877                           ;iic.c: 191: unsigned char count;
  2878                           ;iic.c: 193: start();
  2879  052F  2148               	fcall	_start
  2880                           
  2881                           ;iic.c: 194: write_byte(0xc4);
  2882  0530  30C4               	movlw	196
  2883  0531  21CB               	fcall	_write_byte
  2884                           
  2885                           ;iic.c: 195: if(wait_r_ack())
  2886  0532  22EC               	fcall	_wait_r_ack
  2887  0533  087A               	movf	?_wait_r_ack,w
  2888  0534  047B               	iorwf	?_wait_r_ack+1,w
  2889  0535  1903               	btfsc	3,2
  2890  0536  2D3D               	goto	l2099
  2891                           
  2892                           ;iic.c: 196: {
  2893                           ;iic.c: 197: return 1;
  2894  0537  3001               	movlw	1
  2895  0538  0140               	movlb	0	; select bank0
  2896  0539  00A4               	movwf	?_cw_read_word
  2897  053A  3000               	movlw	0
  2898  053B  00A5               	movwf	?_cw_read_word+1
  2899  053C  0008               	return
  2900  053D                     l2099:	
  2901                           
  2902                           ;iic.c: 198: }
  2903                           ;iic.c: 199: write_byte(point_reg);
  2904  053D  0140               	movlb	0	; select bank0
  2905  053E  0827               	movf	cw_read_word@point_reg,w
  2906  053F  21CB               	fcall	_write_byte
  2907                           
  2908                           ;iic.c: 200: if(wait_r_ack())
  2909  0540  22EC               	fcall	_wait_r_ack
  2910  0541  087A               	movf	?_wait_r_ack,w
  2911  0542  047B               	iorwf	?_wait_r_ack+1,w
  2912  0543  1903               	btfsc	3,2
  2913  0544  2D4B               	goto	l2105
  2914                           
  2915                           ;iic.c: 201: {
  2916                           ;iic.c: 202: return 1;
  2917  0545  3001               	movlw	1
  2918  0546  0140               	movlb	0	; select bank0
  2919  0547  00A4               	movwf	?_cw_read_word
  2920  0548  3000               	movlw	0
  2921  0549  00A5               	movwf	?_cw_read_word+1
  2922  054A  0008               	return
  2923  054B                     l2105:	
  2924                           
  2925                           ;iic.c: 203: }
  2926                           ;iic.c: 204: start();
  2927  054B  2148               	fcall	_start
  2928                           
  2929                           ;iic.c: 205: write_byte(0xc5);
  2930  054C  30C5               	movlw	197
  2931  054D  21CB               	fcall	_write_byte
  2932                           
  2933                           ;iic.c: 206: if(wait_r_ack())
  2934  054E  22EC               	fcall	_wait_r_ack
  2935  054F  087A               	movf	?_wait_r_ack,w
  2936  0550  047B               	iorwf	?_wait_r_ack+1,w
  2937  0551  1903               	btfsc	3,2
  2938  0552  2D59               	goto	l2111
  2939                           
  2940                           ;iic.c: 207: {
  2941                           ;iic.c: 208: return 1;
  2942  0553  3001               	movlw	1
  2943  0554  0140               	movlb	0	; select bank0
  2944  0555  00A4               	movwf	?_cw_read_word
  2945  0556  3000               	movlw	0
  2946  0557  00A5               	movwf	?_cw_read_word+1
  2947  0558  0008               	return
  2948  0559                     l2111:	
  2949                           
  2950                           ;iic.c: 209: }
  2951                           ;iic.c: 210: for(count = 0; count < length; count++ ){
  2952  0559  0140               	movlb	0	; select bank0
  2953  055A  01A8               	clrf	cw_read_word@count
  2954  055B                     l2123:	
  2955  055B  0828               	movf	cw_read_word@count,w
  2956  055C  00FC               	movwf	??_cw_read_word
  2957  055D  01FD               	clrf	??_cw_read_word+1
  2958  055E  0826               	movf	cw_read_word@length+1,w
  2959  055F  027D               	subwf	??_cw_read_word+1,w
  2960  0560  1D03               	skipz
  2961  0561  2D64               	goto	u1875
  2962  0562  0825               	movf	cw_read_word@length,w
  2963  0563  027C               	subwf	??_cw_read_word,w
  2964  0564                     u1875:	
  2965  0564  1803               	btfsc	3,0
  2966  0565  2D88               	goto	l2125
  2967                           
  2968                           ;iic.c: 211: *r_pdata = read_byte();
  2969  0566  226C               	fcall	_read_byte
  2970  0567  00FC               	movwf	??_cw_read_word
  2971  0568  0140               	movlb	0	; select bank0
  2972  0569  0824               	movf	cw_read_word@r_pdata,w
  2973  056A  0086               	movwf	6
  2974  056B  0187               	clrf	7
  2975  056C  087C               	movf	??_cw_read_word,w
  2976  056D  0081               	movwf	1
  2977                           
  2978                           ;iic.c: 212: if(count + 1 < length){
  2979  056E  0828               	movf	cw_read_word@count,w
  2980  056F  3E01               	addlw	1
  2981  0570  00FC               	movwf	??_cw_read_word
  2982  0571  3000               	movlw	0
  2983  0572  1803               	skipnc
  2984  0573  3001               	movlw	1
  2985  0574  00FD               	movwf	??_cw_read_word+1
  2986  0575  0826               	movf	cw_read_word@length+1,w
  2987  0576  027D               	subwf	??_cw_read_word+1,w
  2988  0577  1D03               	skipz
  2989  0578  2D7B               	goto	u1865
  2990  0579  0825               	movf	cw_read_word@length,w
  2991  057A  027C               	subwf	??_cw_read_word,w
  2992  057B                     u1865:	
  2993  057B  1803               	skipnc
  2994  057C  2D82               	goto	l2121
  2995                           
  2996                           ;iic.c: 213: r_pdata++;
  2997  057D  3001               	movlw	1
  2998  057E  00FC               	movwf	??_cw_read_word
  2999  057F  087C               	movf	??_cw_read_word,w
  3000  0580  07A4               	addwf	cw_read_word@r_pdata,f
  3001                           
  3002                           ;iic.c: 214: sn_ack();
  3003  0581  2177               	fcall	_sn_ack
  3004  0582                     l2121:	
  3005  0582  3001               	movlw	1
  3006  0583  00FC               	movwf	??_cw_read_word
  3007  0584  087C               	movf	??_cw_read_word,w
  3008  0585  0140               	movlb	0	; select bank0
  3009  0586  07A8               	addwf	cw_read_word@count,f
  3010  0587  2D5B               	goto	l2123
  3011  0588                     l2125:	
  3012                           
  3013                           ;iic.c: 215: }
  3014                           ;iic.c: 216: }
  3015                           ;iic.c: 217: s_ack();
  3016  0588  213D               	fcall	_s_ack
  3017                           
  3018                           ;iic.c: 218: stop();
  3019  0589  216B               	fcall	_stop
  3020                           
  3021                           ;iic.c: 219: return 0;
  3022  058A  0140               	movlb	0	; select bank0
  3023  058B  01A4               	clrf	?_cw_read_word
  3024  058C  01A5               	clrf	?_cw_read_word+1
  3025  058D  0008               	return
  3026  058E                     __end_of_cw_read_word:	
  3027                           
  3028                           	psect	text5
  3029  0177                     __ptext5:	
  3030 ;; *************** function _sn_ack *****************
  3031 ;; Defined at:
  3032 ;;		line 113 in file "iic.c"
  3033 ;; Parameters:    Size  Location     Type
  3034 ;;		None
  3035 ;; Auto vars:     Size  Location     Type
  3036 ;;		None
  3037 ;; Return value:  Size  Location     Type
  3038 ;;                  1    wreg      void 
  3039 ;; Registers used:
  3040 ;;		wreg, status,2, status,0, pclath, cstack
  3041 ;; Tracked objects:
  3042 ;;		On entry : 0/0
  3043 ;;		On exit  : 0/0
  3044 ;;		Unchanged: 0/0
  3045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3046 ;;      Params:         0       0       0       0
  3047 ;;      Locals:         0       0       0       0
  3048 ;;      Temps:          0       0       0       0
  3049 ;;      Totals:         0       0       0       0
  3050 ;;Total ram usage:        0 bytes
  3051 ;; Hardware stack levels used:    1
  3052 ;; Hardware stack levels required when called:    1
  3053 ;; This function calls:
  3054 ;;		_Delay10us
  3055 ;; This function is called by:
  3056 ;;		_cw_read_word
  3057 ;; This function uses a non-reentrant model
  3058 ;;
  3059                           
  3060                           
  3061                           ;psect for function _sn_ack
  3062  0177                     _sn_ack:	
  3063                           
  3064                           ;incstack = 0
  3065                           ; Regs used in _sn_ack: [wreg+status,2+status,0+pclath+cstack]
  3066                           ;iic.c: 115: do { TRISCbits.TRISC1 = 0; } while(0);
  3067  0177  0140               	movlb	0	; select bank0
  3068  0178  1094               	bcf	20,1	;volatile
  3069                           
  3070                           ;iic.c: 116: do { LATCbits.LATC1 = 0; } while(0);
  3071  0179  109A               	bcf	26,1	;volatile
  3072                           
  3073                           ;iic.c: 117: Delay10us();
  3074  017A  220A               	fcall	_Delay10us
  3075                           
  3076                           ;iic.c: 118: do { LATCbits.LATC0 = 1; } while(0);
  3077  017B  0140               	movlb	0	; select bank0
  3078  017C  141A               	bsf	26,0	;volatile
  3079                           
  3080                           ;iic.c: 119: Delay10us();
  3081  017D  220A               	fcall	_Delay10us
  3082                           
  3083                           ;iic.c: 120: do { LATCbits.LATC0 = 0; } while(0);
  3084  017E  0140               	movlb	0	; select bank0
  3085  017F  101A               	bcf	26,0	;volatile
  3086                           
  3087                           ;iic.c: 121: do { LATCbits.LATC1 = 1; } while(0);
  3088  0180  149A               	bsf	26,1	;volatile
  3089                           
  3090                           ;iic.c: 122: Delay10us();
  3091  0181  220A               	fcall	_Delay10us
  3092  0182  0008               	return
  3093  0183                     __end_of_sn_ack:	
  3094                           
  3095                           	psect	text6
  3096  02BD                     __ptext6:	
  3097 ;; *************** function ___lmul *****************
  3098 ;; Defined at:
  3099 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul32.c"
  3100 ;; Parameters:    Size  Location     Type
  3101 ;;  multiplier      4    0[COMMON] unsigned long 
  3102 ;;  multiplicand    4    4[COMMON] unsigned long 
  3103 ;; Auto vars:     Size  Location     Type
  3104 ;;  product         4    8[COMMON] unsigned long 
  3105 ;; Return value:  Size  Location     Type
  3106 ;;                  4    0[COMMON] unsigned long 
  3107 ;; Registers used:
  3108 ;;		wreg, status,2, status,0
  3109 ;; Tracked objects:
  3110 ;;		On entry : 0/0
  3111 ;;		On exit  : 0/0
  3112 ;;		Unchanged: 0/0
  3113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3114 ;;      Params:         8       0       0       0
  3115 ;;      Locals:         4       0       0       0
  3116 ;;      Temps:          0       0       0       0
  3117 ;;      Totals:        12       0       0       0
  3118 ;;Total ram usage:       12 bytes
  3119 ;; Hardware stack levels used:    1
  3120 ;; This function calls:
  3121 ;;		Nothing
  3122 ;; This function is called by:
  3123 ;;		_cw_get_vol
  3124 ;; This function uses a non-reentrant model
  3125 ;;
  3126                           
  3127                           
  3128                           ;psect for function ___lmul
  3129  02BD                     ___lmul:	
  3130                           
  3131                           ;incstack = 0
  3132                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3133  02BD  3000               	movlw	0
  3134  02BE  00FB               	movwf	___lmul@product+3
  3135  02BF  3000               	movlw	0
  3136  02C0  00FA               	movwf	___lmul@product+2
  3137  02C1  3000               	movlw	0
  3138  02C2  00F9               	movwf	___lmul@product+1
  3139  02C3  3000               	movlw	0
  3140  02C4  00F8               	movwf	___lmul@product
  3141  02C5                     l2133:	
  3142  02C5  1C70               	btfss	___lmul@multiplier,0
  3143  02C6  2ACF               	goto	l2137
  3144  02C7  0874               	movf	___lmul@multiplicand,w
  3145  02C8  07F8               	addwf	___lmul@product,f
  3146  02C9  0875               	movf	___lmul@multiplicand+1,w
  3147  02CA  3DF9               	addwfc	___lmul@product+1,f
  3148  02CB  0876               	movf	___lmul@multiplicand+2,w
  3149  02CC  3DFA               	addwfc	___lmul@product+2,f
  3150  02CD  0877               	movf	___lmul@multiplicand+3,w
  3151  02CE  3DFB               	addwfc	___lmul@product+3,f
  3152  02CF                     l2137:	
  3153  02CF  3001               	movlw	1
  3154  02D0                     u1895:	
  3155  02D0  35F4               	lslf	___lmul@multiplicand,f
  3156  02D1  0DF5               	rlf	___lmul@multiplicand+1,f
  3157  02D2  0DF6               	rlf	___lmul@multiplicand+2,f
  3158  02D3  0DF7               	rlf	___lmul@multiplicand+3,f
  3159  02D4  0B89               	decfsz	9,f
  3160  02D5  2AD0               	goto	u1895
  3161  02D6  3001               	movlw	1
  3162  02D7                     u1905:	
  3163  02D7  36F3               	lsrf	___lmul@multiplier+3,f
  3164  02D8  0CF2               	rrf	___lmul@multiplier+2,f
  3165  02D9  0CF1               	rrf	___lmul@multiplier+1,f
  3166  02DA  0CF0               	rrf	___lmul@multiplier,f
  3167  02DB  0B89               	decfsz	9,f
  3168  02DC  2AD7               	goto	u1905
  3169  02DD  0873               	movf	___lmul@multiplier+3,w
  3170  02DE  0472               	iorwf	___lmul@multiplier+2,w
  3171  02DF  0471               	iorwf	___lmul@multiplier+1,w
  3172  02E0  0470               	iorwf	___lmul@multiplier,w
  3173  02E1  1D03               	skipz
  3174  02E2  2AC5               	goto	l2133
  3175  02E3  087B               	movf	___lmul@product+3,w
  3176  02E4  00F3               	movwf	?___lmul+3
  3177  02E5  087A               	movf	___lmul@product+2,w
  3178  02E6  00F2               	movwf	?___lmul+2
  3179  02E7  0879               	movf	___lmul@product+1,w
  3180  02E8  00F1               	movwf	?___lmul+1
  3181  02E9  0878               	movf	___lmul@product,w
  3182  02EA  00F0               	movwf	?___lmul
  3183  02EB  0008               	return
  3184  02EC                     __end_of___lmul:	
  3185                           
  3186                           	psect	text7
  3187  04DA                     __ptext7:	
  3188 ;; *************** function ___lldiv *****************
  3189 ;; Defined at:
  3190 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
  3191 ;; Parameters:    Size  Location     Type
  3192 ;;  divisor         4    0[BANK0 ] unsigned long 
  3193 ;;  dividend        4    4[BANK0 ] unsigned long 
  3194 ;; Auto vars:     Size  Location     Type
  3195 ;;  quotient        4    8[BANK0 ] unsigned long 
  3196 ;;  counter         1   12[BANK0 ] unsigned char 
  3197 ;; Return value:  Size  Location     Type
  3198 ;;                  4    0[BANK0 ] unsigned long 
  3199 ;; Registers used:
  3200 ;;		wreg, status,2, status,0
  3201 ;; Tracked objects:
  3202 ;;		On entry : 0/0
  3203 ;;		On exit  : 0/0
  3204 ;;		Unchanged: 0/0
  3205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3206 ;;      Params:         0       8       0       0
  3207 ;;      Locals:         0       5       0       0
  3208 ;;      Temps:          1       0       0       0
  3209 ;;      Totals:         1      13       0       0
  3210 ;;Total ram usage:       14 bytes
  3211 ;; Hardware stack levels used:    1
  3212 ;; This function calls:
  3213 ;;		Nothing
  3214 ;; This function is called by:
  3215 ;;		_cw_get_vol
  3216 ;; This function uses a non-reentrant model
  3217 ;;
  3218                           
  3219                           
  3220                           ;psect for function ___lldiv
  3221  04DA                     ___lldiv:	
  3222                           
  3223                           ;incstack = 0
  3224                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3225  04DA  3000               	movlw	0
  3226  04DB  0140               	movlb	0	; select bank0
  3227  04DC  00AB               	movwf	___lldiv@quotient+3
  3228  04DD  3000               	movlw	0
  3229  04DE  00AA               	movwf	___lldiv@quotient+2
  3230  04DF  3000               	movlw	0
  3231  04E0  00A9               	movwf	___lldiv@quotient+1
  3232  04E1  3000               	movlw	0
  3233  04E2  00A8               	movwf	___lldiv@quotient
  3234  04E3  0823               	movf	___lldiv@divisor+3,w
  3235  04E4  0422               	iorwf	___lldiv@divisor+2,w
  3236  04E5  0421               	iorwf	___lldiv@divisor+1,w
  3237  04E6  0420               	iorwf	___lldiv@divisor,w
  3238  04E7  1903               	skipnz
  3239  04E8  2D24               	goto	l2165
  3240  04E9  01AC               	clrf	___lldiv@counter
  3241  04EA  0AAC               	incf	___lldiv@counter,f
  3242  04EB                     l2151:	
  3243  04EB  1BA3               	btfsc	___lldiv@divisor+3,7
  3244  04EC  2CF9               	goto	l2153
  3245  04ED  3001               	movlw	1
  3246  04EE                     u1935:	
  3247  04EE  35A0               	lslf	___lldiv@divisor,f
  3248  04EF  0DA1               	rlf	___lldiv@divisor+1,f
  3249  04F0  0DA2               	rlf	___lldiv@divisor+2,f
  3250  04F1  0DA3               	rlf	___lldiv@divisor+3,f
  3251  04F2  0B89               	decfsz	9,f
  3252  04F3  2CEE               	goto	u1935
  3253  04F4  3001               	movlw	1
  3254  04F5  00FC               	movwf	??___lldiv
  3255  04F6  087C               	movf	??___lldiv,w
  3256  04F7  07AC               	addwf	___lldiv@counter,f
  3257  04F8  2CEB               	goto	l2151
  3258  04F9                     l2153:	
  3259  04F9  3001               	movlw	1
  3260  04FA                     u1955:	
  3261  04FA  35A8               	lslf	___lldiv@quotient,f
  3262  04FB  0DA9               	rlf	___lldiv@quotient+1,f
  3263  04FC  0DAA               	rlf	___lldiv@quotient+2,f
  3264  04FD  0DAB               	rlf	___lldiv@quotient+3,f
  3265  04FE  0B89               	decfsz	9,f
  3266  04FF  2CFA               	goto	u1955
  3267  0500  0823               	movf	___lldiv@divisor+3,w
  3268  0501  0227               	subwf	___lldiv@dividend+3,w
  3269  0502  1D03               	skipz
  3270  0503  2D0E               	goto	u1965
  3271  0504  0822               	movf	___lldiv@divisor+2,w
  3272  0505  0226               	subwf	___lldiv@dividend+2,w
  3273  0506  1D03               	skipz
  3274  0507  2D0E               	goto	u1965
  3275  0508  0821               	movf	___lldiv@divisor+1,w
  3276  0509  0225               	subwf	___lldiv@dividend+1,w
  3277  050A  1D03               	skipz
  3278  050B  2D0E               	goto	u1965
  3279  050C  0820               	movf	___lldiv@divisor,w
  3280  050D  0224               	subwf	___lldiv@dividend,w
  3281  050E                     u1965:	
  3282  050E  1C03               	skipc
  3283  050F  2D19               	goto	l2161
  3284  0510  0820               	movf	___lldiv@divisor,w
  3285  0511  02A4               	subwf	___lldiv@dividend,f
  3286  0512  0821               	movf	___lldiv@divisor+1,w
  3287  0513  3BA5               	subwfb	___lldiv@dividend+1,f
  3288  0514  0822               	movf	___lldiv@divisor+2,w
  3289  0515  3BA6               	subwfb	___lldiv@dividend+2,f
  3290  0516  0823               	movf	___lldiv@divisor+3,w
  3291  0517  3BA7               	subwfb	___lldiv@dividend+3,f
  3292  0518  1428               	bsf	___lldiv@quotient,0
  3293  0519                     l2161:	
  3294  0519  3001               	movlw	1
  3295  051A                     u1975:	
  3296  051A  36A3               	lsrf	___lldiv@divisor+3,f
  3297  051B  0CA2               	rrf	___lldiv@divisor+2,f
  3298  051C  0CA1               	rrf	___lldiv@divisor+1,f
  3299  051D  0CA0               	rrf	___lldiv@divisor,f
  3300  051E  0B89               	decfsz	9,f
  3301  051F  2D1A               	goto	u1975
  3302  0520  3001               	movlw	1
  3303  0521  02AC               	subwf	___lldiv@counter,f
  3304  0522  1D03               	btfss	3,2
  3305  0523  2CF9               	goto	l2153
  3306  0524                     l2165:	
  3307  0524  082B               	movf	___lldiv@quotient+3,w
  3308  0525  00A3               	movwf	?___lldiv+3
  3309  0526  082A               	movf	___lldiv@quotient+2,w
  3310  0527  00A2               	movwf	?___lldiv+2
  3311  0528  0829               	movf	___lldiv@quotient+1,w
  3312  0529  00A1               	movwf	?___lldiv+1
  3313  052A  0828               	movf	___lldiv@quotient,w
  3314  052B  00A0               	movwf	?___lldiv
  3315  052C  0008               	return
  3316  052D                     __end_of___lldiv:	
  3317                           
  3318                           	psect	text8
  3319  0133                     __ptext8:	
  3320 ;; *************** function _update_usb_online *****************
  3321 ;; Defined at:
  3322 ;;		line 519 in file "CW201x.c"
  3323 ;; Parameters:    Size  Location     Type
  3324 ;;		None
  3325 ;; Auto vars:     Size  Location     Type
  3326 ;;		None
  3327 ;; Return value:  Size  Location     Type
  3328 ;;                  1    wreg      void 
  3329 ;; Registers used:
  3330 ;;		wreg, status,2, status,0
  3331 ;; Tracked objects:
  3332 ;;		On entry : 0/0
  3333 ;;		On exit  : 0/0
  3334 ;;		Unchanged: 0/0
  3335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3336 ;;      Params:         0       0       0       0
  3337 ;;      Locals:         0       0       0       0
  3338 ;;      Temps:          0       0       0       0
  3339 ;;      Totals:         0       0       0       0
  3340 ;;Total ram usage:        0 bytes
  3341 ;; Hardware stack levels used:    1
  3342 ;; This function calls:
  3343 ;;		Nothing
  3344 ;; This function is called by:
  3345 ;;		_cw_bat_work
  3346 ;; This function uses a non-reentrant model
  3347 ;;
  3348                           
  3349                           
  3350                           ;psect for function _update_usb_online
  3351  0133                     _update_usb_online:	
  3352                           
  3353                           ;CW201x.c: 521: if(CHARGE == 1)
  3354                           
  3355                           ;incstack = 0
  3356                           ; Regs used in _update_usb_online: [wreg+status,2+status,0]
  3357  0133  0140               	movlb	0	; select bank0
  3358  0134  0355               	decf	_CHARGE,w
  3359  0135  0456               	iorwf	_CHARGE+1,w
  3360  0136  1D03               	btfss	3,2
  3361  0137  293B               	goto	l2309
  3362                           
  3363                           ;CW201x.c: 522: {
  3364                           ;CW201x.c: 523: cw_bat.usb_online = 1;
  3365  0138  01C7               	clrf	_cw_bat
  3366  0139  0AC7               	incf	_cw_bat,f
  3367                           
  3368                           ;CW201x.c: 524: }else{
  3369  013A  0008               	return
  3370  013B                     l2309:	
  3371                           
  3372                           ;CW201x.c: 525: cw_bat.usb_online = 0;
  3373  013B  01C7               	clrf	_cw_bat
  3374  013C  0008               	return
  3375  013D                     __end_of_update_usb_online:	
  3376                           
  3377                           	psect	text9
  3378  024B                     __ptext9:	
  3379 ;; *************** function _update_capacity *****************
  3380 ;; Defined at:
  3381 ;;		line 472 in file "CW201x.c"
  3382 ;; Parameters:    Size  Location     Type
  3383 ;;		None
  3384 ;; Auto vars:     Size  Location     Type
  3385 ;;  cw_capacity     2   35[BANK0 ] int 
  3386 ;; Return value:  Size  Location     Type
  3387 ;;                  1    wreg      void 
  3388 ;; Registers used:
  3389 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3390 ;; Tracked objects:
  3391 ;;		On entry : 0/0
  3392 ;;		On exit  : 0/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3395 ;;      Params:         0       0       0       0
  3396 ;;      Locals:         0       2       0       0
  3397 ;;      Temps:          0       1       0       0
  3398 ;;      Totals:         0       3       0       0
  3399 ;;Total ram usage:        3 bytes
  3400 ;; Hardware stack levels used:    1
  3401 ;; Hardware stack levels required when called:    8
  3402 ;; This function calls:
  3403 ;;		_cw_get_capacity
  3404 ;; This function is called by:
  3405 ;;		_cw_bat_work
  3406 ;; This function uses a non-reentrant model
  3407 ;;
  3408                           
  3409                           
  3410                           ;psect for function _update_capacity
  3411  024B                     _update_capacity:	
  3412                           
  3413                           ;CW201x.c: 474: int cw_capacity;
  3414                           ;CW201x.c: 475: cw_capacity = cw_get_capacity();
  3415                           
  3416                           ;incstack = 0
  3417                           ; Regs used in _update_capacity: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3418  024B  2408               	fcall	_cw_get_capacity
  3419  024C  0140               	movlb	0	; select bank0
  3420  024D  083B               	movf	?_cw_get_capacity+1,w
  3421  024E  00C4               	movwf	update_capacity@cw_capacity+1
  3422  024F  083A               	movf	?_cw_get_capacity,w
  3423  0250  00C3               	movwf	update_capacity@cw_capacity
  3424                           
  3425                           ;CW201x.c: 476: if((cw_capacity >= 0) && (cw_capacity <= 100) && (cw_bat.capacity != cw_
      +                          capacity))
  3426  0251  1BC4               	btfsc	update_capacity@cw_capacity+1,7
  3427  0252  0008               	return
  3428  0253  0844               	movf	update_capacity@cw_capacity+1,w
  3429  0254  3A80               	xorlw	128
  3430  0255  00C2               	movwf	??_update_capacity
  3431  0256  3080               	movlw	128
  3432  0257  0242               	subwf	??_update_capacity,w
  3433  0258  1D03               	skipz
  3434  0259  2A5C               	goto	u2135
  3435  025A  3065               	movlw	101
  3436  025B  0243               	subwf	update_capacity@cw_capacity,w
  3437  025C                     u2135:	
  3438  025C  1803               	skipnc
  3439  025D  0008               	return
  3440  025E  0140               	movlb	0	; select bank0
  3441  025F  0844               	movf	update_capacity@cw_capacity+1,w
  3442  0260  0649               	xorwf	_cw_bat+2,w
  3443  0261  1D03               	skipz
  3444  0262  2A65               	goto	u2145
  3445  0263  0843               	movf	update_capacity@cw_capacity,w
  3446  0264  0648               	xorwf	_cw_bat+1,w
  3447  0265                     u2145:	
  3448  0265  1903               	skipnz
  3449  0266  0008               	return
  3450                           
  3451                           ;CW201x.c: 477: {
  3452                           ;CW201x.c: 478: cw_bat.capacity = cw_capacity;
  3453  0267  0844               	movf	update_capacity@cw_capacity+1,w
  3454  0268  00C9               	movwf	_cw_bat+2
  3455  0269  0843               	movf	update_capacity@cw_capacity,w
  3456  026A  00C8               	movwf	_cw_bat+1
  3457  026B  0008               	return
  3458  026C                     __end_of_update_capacity:	
  3459                           
  3460                           	psect	text10
  3461  0408                     __ptext10:	
  3462 ;; *************** function _cw_get_capacity *****************
  3463 ;; Defined at:
  3464 ;;		line 300 in file "CW201x.c"
  3465 ;; Parameters:    Size  Location     Type
  3466 ;;		None
  3467 ;; Auto vars:     Size  Location     Type
  3468 ;;  ret             2   31[BANK0 ] int 
  3469 ;;  reg_val         1   33[BANK0 ] unsigned char 
  3470 ;;  cw_capacity     1   30[BANK0 ] unsigned char 
  3471 ;;  allow_capaci    1    0        unsigned char 
  3472 ;; Return value:  Size  Location     Type
  3473 ;;                  2   26[BANK0 ] int 
  3474 ;; Registers used:
  3475 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3476 ;; Tracked objects:
  3477 ;;		On entry : 0/0
  3478 ;;		On exit  : 0/0
  3479 ;;		Unchanged: 0/0
  3480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3481 ;;      Params:         0       2       0       0
  3482 ;;      Locals:         0       4       0       0
  3483 ;;      Temps:          0       2       0       0
  3484 ;;      Totals:         0       8       0       0
  3485 ;;Total ram usage:        8 bytes
  3486 ;; Hardware stack levels used:    1
  3487 ;; Hardware stack levels required when called:    7
  3488 ;; This function calls:
  3489 ;;		_cw_por
  3490 ;;		_cw_read
  3491 ;; This function is called by:
  3492 ;;		_update_capacity
  3493 ;; This function uses a non-reentrant model
  3494 ;;
  3495                           
  3496                           
  3497                           ;psect for function _cw_get_capacity
  3498  0408                     _cw_get_capacity:	
  3499                           
  3500                           ;CW201x.c: 302: int ret = 0;
  3501                           
  3502                           ;incstack = 0
  3503                           ; Regs used in _cw_get_capacity: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3504  0408  0140               	movlb	0	; select bank0
  3505  0409  01BF               	clrf	cw_get_capacity@ret
  3506  040A  01C0               	clrf	cw_get_capacity@ret+1
  3507                           
  3508                           ;CW201x.c: 303: unsigned char allow_capacity;
  3509                           ;CW201x.c: 304: unsigned char reg_val;
  3510                           ;CW201x.c: 306: unsigned char cw_capacity;
  3511                           ;CW201x.c: 309: ret = cw_read(0x4, &reg_val);
  3512  040B  3041               	movlw	(low (cw_get_capacity@reg_val| 0))& (0+255)
  3513  040C  00BC               	movwf	??_cw_get_capacity
  3514  040D  083C               	movf	??_cw_get_capacity,w
  3515  040E  00A4               	movwf	cw_read@r_pdata
  3516  040F  3004               	movlw	4
  3517  0410  2350               	fcall	_cw_read
  3518  0411  0140               	movlb	0	; select bank0
  3519  0412  0825               	movf	?_cw_read+1,w
  3520  0413  00C0               	movwf	cw_get_capacity@ret+1
  3521  0414  0824               	movf	?_cw_read,w
  3522  0415  00BF               	movwf	cw_get_capacity@ret
  3523                           
  3524                           ;CW201x.c: 310: if(ret)
  3525  0416  083F               	movf	cw_get_capacity@ret,w
  3526  0417  0440               	iorwf	cw_get_capacity@ret+1,w
  3527  0418  1903               	btfsc	3,2
  3528  0419  2C1F               	goto	l2179
  3529                           
  3530                           ;CW201x.c: 311: {
  3531                           ;CW201x.c: 312: return -1;
  3532  041A  30FF               	movlw	255
  3533  041B  00BA               	movwf	?_cw_get_capacity
  3534  041C  30FF               	movlw	255
  3535  041D  00BB               	movwf	?_cw_get_capacity+1
  3536  041E  0008               	return
  3537  041F                     l2179:	
  3538                           
  3539                           ;CW201x.c: 313: }
  3540                           ;CW201x.c: 315: cw_capacity = reg_val;
  3541  041F  0841               	movf	cw_get_capacity@reg_val,w
  3542  0420  00BC               	movwf	??_cw_get_capacity
  3543  0421  083C               	movf	??_cw_get_capacity,w
  3544  0422  00BE               	movwf	cw_get_capacity@cw_capacity
  3545                           
  3546                           ;CW201x.c: 317: if ((cw_capacity < 0) || (cw_capacity > 100)) {
  3547  0423  3065               	movlw	101
  3548  0424  023E               	subwf	cw_get_capacity@cw_capacity,w
  3549  0425  1C03               	skipc
  3550  0426  2C44               	goto	l2201
  3551                           
  3552                           ;CW201x.c: 319: reset_loop++;
  3553  0427  3001               	movlw	1
  3554  0428  00BC               	movwf	??_cw_get_capacity
  3555  0429  083C               	movf	??_cw_get_capacity,w
  3556  042A  07D7               	addwf	_reset_loop,f
  3557                           
  3558                           ;CW201x.c: 320: if (reset_loop >5) {
  3559  042B  3006               	movlw	6
  3560  042C  0257               	subwf	_reset_loop,w
  3561  042D  1C03               	skipc
  3562  042E  2C3F               	goto	l2195
  3563                           
  3564                           ;CW201x.c: 321: ret = cw_por();
  3565  042F  2492               	fcall	_cw_por
  3566  0430  0140               	movlb	0	; select bank0
  3567  0431  0834               	movf	?_cw_por+1,w
  3568  0432  00C0               	movwf	cw_get_capacity@ret+1
  3569  0433  0833               	movf	?_cw_por,w
  3570  0434  00BF               	movwf	cw_get_capacity@ret
  3571                           
  3572                           ;CW201x.c: 322: if(ret)
  3573  0435  083F               	movf	cw_get_capacity@ret,w
  3574  0436  0440               	iorwf	cw_get_capacity@ret+1,w
  3575  0437  1903               	btfsc	3,2
  3576  0438  2C3E               	goto	l2193
  3577                           
  3578                           ;CW201x.c: 323: return -1;
  3579  0439  30FF               	movlw	255
  3580  043A  00BA               	movwf	?_cw_get_capacity
  3581  043B  30FF               	movlw	255
  3582  043C  00BB               	movwf	?_cw_get_capacity+1
  3583  043D  0008               	return
  3584  043E                     l2193:	
  3585                           
  3586                           ;CW201x.c: 324: reset_loop =0;
  3587  043E  01D7               	clrf	_reset_loop
  3588  043F                     l2195:	
  3589                           
  3590                           ;CW201x.c: 325: }
  3591                           ;CW201x.c: 326: return cw_bat.capacity;
  3592  043F  0849               	movf	_cw_bat+2,w
  3593  0440  00BB               	movwf	?_cw_get_capacity+1
  3594  0441  0848               	movf	_cw_bat+1,w
  3595  0442  00BA               	movwf	?_cw_get_capacity
  3596  0443  0008               	return
  3597  0444                     l2201:	
  3598                           ;CW201x.c: 327: }else {
  3599                           
  3600                           
  3601                           ;CW201x.c: 328: reset_loop =0;
  3602  0444  01D7               	clrf	_reset_loop
  3603                           
  3604                           ;CW201x.c: 329: }
  3605                           ;CW201x.c: 406: return(cw_capacity);
  3606  0445  083E               	movf	cw_get_capacity@cw_capacity,w
  3607  0446  00BC               	movwf	??_cw_get_capacity
  3608  0447  01BD               	clrf	??_cw_get_capacity+1
  3609  0448  083C               	movf	??_cw_get_capacity,w
  3610  0449  00BA               	movwf	?_cw_get_capacity
  3611  044A  083D               	movf	??_cw_get_capacity+1,w
  3612  044B  00BB               	movwf	?_cw_get_capacity+1
  3613  044C  0008               	return
  3614  044D                     __end_of_cw_get_capacity:	
  3615                           
  3616                           	psect	text11
  3617  0492                     __ptext11:	
  3618 ;; *************** function _cw_por *****************
  3619 ;; Defined at:
  3620 ;;		line 278 in file "CW201x.c"
  3621 ;; Parameters:    Size  Location     Type
  3622 ;;		None
  3623 ;; Auto vars:     Size  Location     Type
  3624 ;;  ret             2   24[BANK0 ] int 
  3625 ;;  reset_val       1   23[BANK0 ] unsigned char 
  3626 ;; Return value:  Size  Location     Type
  3627 ;;                  2   19[BANK0 ] int 
  3628 ;; Registers used:
  3629 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3630 ;; Tracked objects:
  3631 ;;		On entry : 0/0
  3632 ;;		On exit  : 0/0
  3633 ;;		Unchanged: 0/0
  3634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3635 ;;      Params:         0       2       0       0
  3636 ;;      Locals:         0       3       0       0
  3637 ;;      Temps:          0       2       0       0
  3638 ;;      Totals:         0       7       0       0
  3639 ;;Total ram usage:        7 bytes
  3640 ;; Hardware stack levels used:    1
  3641 ;; Hardware stack levels required when called:    6
  3642 ;; This function calls:
  3643 ;;		_CW_Delay100us
  3644 ;;		_cw_init
  3645 ;;		_cw_write
  3646 ;; This function is called by:
  3647 ;;		_cw_get_capacity
  3648 ;; This function uses a non-reentrant model
  3649 ;;
  3650                           
  3651                           
  3652                           ;psect for function _cw_por
  3653  0492                     _cw_por:	
  3654                           
  3655                           ;CW201x.c: 280: int ret = 0;
  3656                           
  3657                           ;incstack = 0
  3658                           ; Regs used in _cw_por: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3659  0492  0140               	movlb	0	; select bank0
  3660  0493  01B8               	clrf	cw_por@ret
  3661  0494  01B9               	clrf	cw_por@ret+1
  3662                           
  3663                           ;CW201x.c: 281: unsigned char reset_val = 0;
  3664  0495  01B7               	clrf	cw_por@reset_val
  3665                           
  3666                           ;CW201x.c: 282: reset_val = (0x3<<6);
  3667  0496  30C0               	movlw	192
  3668  0497  00B5               	movwf	??_cw_por
  3669  0498  0835               	movf	??_cw_por,w
  3670  0499  00B7               	movwf	cw_por@reset_val
  3671                           
  3672                           ;CW201x.c: 283: ret = cw_write(0xA, &reset_val);
  3673  049A  3037               	movlw	(low (cw_por@reset_val| 0))& (0+255)
  3674  049B  00B5               	movwf	??_cw_por
  3675  049C  0835               	movf	??_cw_por,w
  3676  049D  00A4               	movwf	cw_write@w_pdata
  3677  049E  300A               	movlw	10
  3678  049F  231E               	fcall	_cw_write
  3679  04A0  0140               	movlb	0	; select bank0
  3680  04A1  0825               	movf	?_cw_write+1,w
  3681  04A2  00B9               	movwf	cw_por@ret+1
  3682  04A3  0824               	movf	?_cw_write,w
  3683  04A4  00B8               	movwf	cw_por@ret
  3684                           
  3685                           ;CW201x.c: 284: if (ret)
  3686  04A5  0838               	movf	cw_por@ret,w
  3687  04A6  0439               	iorwf	cw_por@ret+1,w
  3688  04A7  1903               	btfsc	3,2
  3689  04A8  2CAE               	goto	l2067
  3690                           
  3691                           ;CW201x.c: 285: return -1;
  3692  04A9  30FF               	movlw	255
  3693  04AA  00B3               	movwf	?_cw_por
  3694  04AB  30FF               	movlw	255
  3695  04AC  00B4               	movwf	?_cw_por+1
  3696  04AD  0008               	return
  3697  04AE                     l2067:	
  3698                           
  3699                           ;CW201x.c: 286: CW_Delay100us();
  3700  04AE  21EA               	fcall	_CW_Delay100us
  3701                           
  3702                           ;CW201x.c: 288: reset_val = (0x0<<6);
  3703  04AF  0140               	movlb	0	; select bank0
  3704  04B0  01B7               	clrf	cw_por@reset_val
  3705                           
  3706                           ;CW201x.c: 289: ret = cw_write(0xA, &reset_val);
  3707  04B1  3037               	movlw	(low (cw_por@reset_val| 0))& (0+255)
  3708  04B2  00B5               	movwf	??_cw_por
  3709  04B3  0835               	movf	??_cw_por,w
  3710  04B4  00A4               	movwf	cw_write@w_pdata
  3711  04B5  300A               	movlw	10
  3712  04B6  231E               	fcall	_cw_write
  3713  04B7  0140               	movlb	0	; select bank0
  3714  04B8  0825               	movf	?_cw_write+1,w
  3715  04B9  00B9               	movwf	cw_por@ret+1
  3716  04BA  0824               	movf	?_cw_write,w
  3717  04BB  00B8               	movwf	cw_por@ret
  3718                           
  3719                           ;CW201x.c: 290: if (ret)
  3720  04BC  0838               	movf	cw_por@ret,w
  3721  04BD  0439               	iorwf	cw_por@ret+1,w
  3722  04BE  1903               	btfsc	3,2
  3723  04BF  2CC5               	goto	l2079
  3724                           
  3725                           ;CW201x.c: 291: return -1;
  3726  04C0  30FF               	movlw	255
  3727  04C1  00B3               	movwf	?_cw_por
  3728  04C2  30FF               	movlw	255
  3729  04C3  00B4               	movwf	?_cw_por+1
  3730  04C4  0008               	return
  3731  04C5                     l2079:	
  3732                           
  3733                           ;CW201x.c: 292: CW_Delay100us();
  3734  04C5  21EA               	fcall	_CW_Delay100us
  3735                           
  3736                           ;CW201x.c: 294: ret = cw_init();
  3737  04C6  270E               	fcall	_cw_init
  3738  04C7  0140               	movlb	0	; select bank0
  3739  04C8  00B5               	movwf	??_cw_por
  3740  04C9  01B6               	clrf	??_cw_por+1
  3741  04CA  0835               	movf	??_cw_por,w
  3742  04CB  00B8               	movwf	cw_por@ret
  3743  04CC  0836               	movf	??_cw_por+1,w
  3744  04CD  00B9               	movwf	cw_por@ret+1
  3745                           
  3746                           ;CW201x.c: 295: if (ret)
  3747  04CE  0838               	movf	cw_por@ret,w
  3748  04CF  0439               	iorwf	cw_por@ret+1,w
  3749  04D0  1903               	btfsc	3,2
  3750  04D1  2CD7               	goto	l2089
  3751                           
  3752                           ;CW201x.c: 296: return ret;
  3753  04D2  0839               	movf	cw_por@ret+1,w
  3754  04D3  00B4               	movwf	?_cw_por+1
  3755  04D4  0838               	movf	cw_por@ret,w
  3756  04D5  00B3               	movwf	?_cw_por
  3757  04D6  0008               	return
  3758  04D7                     l2089:	
  3759                           
  3760                           ;CW201x.c: 297: return 0;
  3761  04D7  01B3               	clrf	?_cw_por
  3762  04D8  01B4               	clrf	?_cw_por+1
  3763  04D9  0008               	return
  3764  04DA                     __end_of_cw_por:	
  3765                           
  3766                           	psect	text12
  3767  01B0                     __ptext12:	
  3768 ;; *************** function _cw_bat_init *****************
  3769 ;; Defined at:
  3770 ;;		line 552 in file "CW201x.c"
  3771 ;; Parameters:    Size  Location     Type
  3772 ;;		None
  3773 ;; Auto vars:     Size  Location     Type
  3774 ;;  ret             1   21[BANK0 ] unsigned char 
  3775 ;;  loop            1   20[BANK0 ] unsigned char 
  3776 ;; Return value:  Size  Location     Type
  3777 ;;                  1    wreg      unsigned char 
  3778 ;; Registers used:
  3779 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3780 ;; Tracked objects:
  3781 ;;		On entry : 0/0
  3782 ;;		On exit  : 0/0
  3783 ;;		Unchanged: 0/0
  3784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3785 ;;      Params:         0       0       0       0
  3786 ;;      Locals:         0       2       0       0
  3787 ;;      Temps:          0       1       0       0
  3788 ;;      Totals:         0       3       0       0
  3789 ;;Total ram usage:        3 bytes
  3790 ;; Hardware stack levels used:    1
  3791 ;; Hardware stack levels required when called:    6
  3792 ;; This function calls:
  3793 ;;		_cw_init
  3794 ;; This function is called by:
  3795 ;;		_main
  3796 ;; This function uses a non-reentrant model
  3797 ;;
  3798                           
  3799                           
  3800                           ;psect for function _cw_bat_init
  3801  01B0                     _cw_bat_init:	
  3802                           
  3803                           ;CW201x.c: 554: unsigned char ret;
  3804                           ;CW201x.c: 555: unsigned char loop = 0;
  3805                           
  3806                           ;incstack = 0
  3807                           ; Regs used in _cw_bat_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3808  01B0  0140               	movlb	0	; select bank0
  3809  01B1  01B4               	clrf	cw_bat_init@loop
  3810  01B2                     l2321:	
  3811                           ;CW201x.c: 559: while((loop++ < 200) && (ret != 0))
  3812                           
  3813                           ;CW201x.c: 558: ret = cw_init();
  3814                           
  3815                           
  3816                           ;CW201x.c: 560: {
  3817                           ;CW201x.c: 561: ret = cw_init();
  3818  01B2  270E               	fcall	_cw_init
  3819  01B3  0140               	movlb	0	; select bank0
  3820  01B4  00B3               	movwf	??_cw_bat_init
  3821  01B5  0833               	movf	??_cw_bat_init,w
  3822  01B6  00B5               	movwf	cw_bat_init@ret
  3823  01B7  0834               	movf	cw_bat_init@loop,w
  3824  01B8  0AB4               	incf	cw_bat_init@loop,f
  3825  01B9  00B3               	movwf	??_cw_bat_init
  3826  01BA  30C8               	movlw	200
  3827  01BB  0233               	subwf	??_cw_bat_init,w
  3828  01BC  1803               	skipnc
  3829  01BD  29C1               	goto	l2327
  3830  01BE  0835               	movf	cw_bat_init@ret,w
  3831  01BF  1D03               	btfss	3,2
  3832  01C0  29B2               	goto	l2321
  3833  01C1                     l2327:	
  3834                           
  3835                           ;CW201x.c: 562: }
  3836                           ;CW201x.c: 564: cw_bat.usb_online = 0;
  3837  01C1  01C7               	clrf	_cw_bat
  3838                           
  3839                           ;CW201x.c: 565: cw_bat.capacity = 2;
  3840  01C2  3002               	movlw	2
  3841  01C3  00C8               	movwf	_cw_bat+1
  3842  01C4  3000               	movlw	0
  3843  01C5  00C9               	movwf	_cw_bat+2
  3844                           
  3845                           ;CW201x.c: 566: cw_bat.voltage = 0;
  3846  01C6  01CA               	clrf	_cw_bat+3
  3847  01C7  01CB               	clrf	_cw_bat+4
  3848                           
  3849                           ;CW201x.c: 570: cw_bat.alt = 0;
  3850  01C8  01CC               	clrf	_cw_bat+5
  3851                           
  3852                           ;CW201x.c: 572: return ret;
  3853  01C9  0835               	movf	cw_bat_init@ret,w
  3854  01CA  0008               	return
  3855  01CB                     __end_of_cw_bat_init:	
  3856                           
  3857                           	psect	text13
  3858  070E                     __ptext13:	
  3859 ;; *************** function _cw_init *****************
  3860 ;; Defined at:
  3861 ;;		line 126 in file "CW201x.c"
  3862 ;; Parameters:    Size  Location     Type
  3863 ;;		None
  3864 ;; Auto vars:     Size  Location     Type
  3865 ;;  ret             2   16[BANK0 ] unsigned int 
  3866 ;;  reg_val         1   18[BANK0 ] unsigned char 
  3867 ;;  i               1   15[BANK0 ] unsigned char 
  3868 ;; Return value:  Size  Location     Type
  3869 ;;                  1    wreg      unsigned char 
  3870 ;; Registers used:
  3871 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3872 ;; Tracked objects:
  3873 ;;		On entry : 0/0
  3874 ;;		On exit  : 0/0
  3875 ;;		Unchanged: 0/0
  3876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3877 ;;      Params:         0       0       0       0
  3878 ;;      Locals:         0       4       0       0
  3879 ;;      Temps:          0       2       0       0
  3880 ;;      Totals:         0       6       0       0
  3881 ;;Total ram usage:        6 bytes
  3882 ;; Hardware stack levels used:    1
  3883 ;; Hardware stack levels required when called:    5
  3884 ;; This function calls:
  3885 ;;		_CW_Delay10ms
  3886 ;;		_cw_read
  3887 ;;		_cw_update_config_info
  3888 ;;		_cw_write
  3889 ;; This function is called by:
  3890 ;;		_cw_por
  3891 ;;		_cw_bat_init
  3892 ;; This function uses a non-reentrant model
  3893 ;;
  3894                           
  3895                           
  3896                           ;psect for function _cw_init
  3897  070E                     _cw_init:	
  3898                           
  3899                           ;CW201x.c: 128: unsigned ret;
  3900                           ;CW201x.c: 129: unsigned char i;
  3901                           ;CW201x.c: 130: unsigned char reg_val = (0x0<<6);
  3902                           
  3903                           ;incstack = 0
  3904                           ; Regs used in _cw_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3905  070E  0140               	movlb	0	; select bank0
  3906  070F  01B2               	clrf	cw_init@reg_val
  3907                           
  3908                           ;CW201x.c: 133: ret = cw_write(0xA, &reg_val);
  3909  0710  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  3910  0711  00AD               	movwf	??_cw_init
  3911  0712  082D               	movf	??_cw_init,w
  3912  0713  00A4               	movwf	cw_write@w_pdata
  3913  0714  300A               	movlw	10
  3914  0715  231E               	fcall	_cw_write
  3915  0716  0140               	movlb	0	; select bank0
  3916  0717  0825               	movf	?_cw_write+1,w
  3917  0718  00B1               	movwf	cw_init@ret+1
  3918  0719  0824               	movf	?_cw_write,w
  3919  071A  00B0               	movwf	cw_init@ret
  3920                           
  3921                           ;CW201x.c: 134: if(ret)
  3922  071B  0830               	movf	cw_init@ret,w
  3923  071C  0431               	iorwf	cw_init@ret+1,w
  3924  071D  1903               	btfsc	3,2
  3925  071E  2F21               	goto	l1939
  3926                           
  3927                           ;CW201x.c: 135: {
  3928                           ;CW201x.c: 136: return 1;
  3929  071F  3001               	movlw	1
  3930  0720  0008               	return
  3931  0721                     l1939:	
  3932                           
  3933                           ;CW201x.c: 137: }
  3934                           ;CW201x.c: 140: ret = cw_read(0x8, &reg_val);
  3935  0721  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  3936  0722  00AD               	movwf	??_cw_init
  3937  0723  082D               	movf	??_cw_init,w
  3938  0724  00A4               	movwf	cw_read@r_pdata
  3939  0725  3008               	movlw	8
  3940  0726  2350               	fcall	_cw_read
  3941  0727  0140               	movlb	0	; select bank0
  3942  0728  0825               	movf	?_cw_read+1,w
  3943  0729  00B1               	movwf	cw_init@ret+1
  3944  072A  0824               	movf	?_cw_read,w
  3945  072B  00B0               	movwf	cw_init@ret
  3946                           
  3947                           ;CW201x.c: 141: if(ret)
  3948  072C  0830               	movf	cw_init@ret,w
  3949  072D  0431               	iorwf	cw_init@ret+1,w
  3950  072E  1903               	btfsc	3,2
  3951  072F  2F32               	goto	l1947
  3952                           
  3953                           ;CW201x.c: 142: {
  3954                           ;CW201x.c: 143: return 1;
  3955  0730  3001               	movlw	1
  3956  0731  0008               	return
  3957  0732                     l1947:	
  3958                           
  3959                           ;CW201x.c: 144: }
  3960                           ;CW201x.c: 145: if((reg_val & 0xf8) != (0x0<<3))
  3961  0732  0832               	movf	cw_init@reg_val,w
  3962  0733  39F8               	andlw	248
  3963  0734  1903               	btfsc	3,2
  3964  0735  2F4B               	goto	l1959
  3965                           
  3966                           ;CW201x.c: 149: reg_val |= (0x0<<3);
  3967  0736  3007               	movlw	7
  3968  0737  00AD               	movwf	??_cw_init
  3969  0738  082D               	movf	??_cw_init,w
  3970  0739  05B2               	andwf	cw_init@reg_val,f
  3971                           
  3972                           ;CW201x.c: 150: ret = cw_write(0x8, &reg_val);
  3973  073A  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  3974  073B  00AD               	movwf	??_cw_init
  3975  073C  082D               	movf	??_cw_init,w
  3976  073D  00A4               	movwf	cw_write@w_pdata
  3977  073E  3008               	movlw	8
  3978  073F  231E               	fcall	_cw_write
  3979  0740  0140               	movlb	0	; select bank0
  3980  0741  0825               	movf	?_cw_write+1,w
  3981  0742  00B1               	movwf	cw_init@ret+1
  3982  0743  0824               	movf	?_cw_write,w
  3983  0744  00B0               	movwf	cw_init@ret
  3984                           
  3985                           ;CW201x.c: 151: if(ret)
  3986  0745  0830               	movf	cw_init@ret,w
  3987  0746  0431               	iorwf	cw_init@ret+1,w
  3988  0747  1903               	btfsc	3,2
  3989  0748  2F4B               	goto	l1959
  3990                           
  3991                           ;CW201x.c: 152: {
  3992                           ;CW201x.c: 153: return 1;
  3993  0749  3001               	movlw	1
  3994  074A  0008               	return
  3995  074B                     l1959:	
  3996                           
  3997                           ;CW201x.c: 154: }
  3998                           ;CW201x.c: 155: }
  3999                           ;CW201x.c: 158: ret = cw_read(0x8, &reg_val);
  4000  074B  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4001  074C  00AD               	movwf	??_cw_init
  4002  074D  082D               	movf	??_cw_init,w
  4003  074E  00A4               	movwf	cw_read@r_pdata
  4004  074F  3008               	movlw	8
  4005  0750  2350               	fcall	_cw_read
  4006  0751  0140               	movlb	0	; select bank0
  4007  0752  0825               	movf	?_cw_read+1,w
  4008  0753  00B1               	movwf	cw_init@ret+1
  4009  0754  0824               	movf	?_cw_read,w
  4010  0755  00B0               	movwf	cw_init@ret
  4011                           
  4012                           ;CW201x.c: 159: if(ret)
  4013  0756  0830               	movf	cw_init@ret,w
  4014  0757  0431               	iorwf	cw_init@ret+1,w
  4015  0758  1903               	btfsc	3,2
  4016  0759  2F5C               	goto	l239
  4017                           
  4018                           ;CW201x.c: 160: {
  4019                           ;CW201x.c: 161: return 1;
  4020  075A  3001               	movlw	1
  4021  075B  0008               	return
  4022  075C                     l239:	
  4023                           
  4024                           ;CW201x.c: 162: }
  4025                           ;CW201x.c: 163: if(!(reg_val & (0x1<<1)))
  4026  075C  18B2               	btfsc	cw_init@reg_val,1
  4027  075D  2F6C               	goto	l1975
  4028                           
  4029                           ;CW201x.c: 164: {
  4030                           ;CW201x.c: 166: ret = cw_update_config_info();
  4031  075E  258E               	fcall	_cw_update_config_info
  4032  075F  0140               	movlb	0	; select bank0
  4033  0760  00AD               	movwf	??_cw_init
  4034  0761  01AE               	clrf	??_cw_init+1
  4035  0762  082D               	movf	??_cw_init,w
  4036  0763  00B0               	movwf	cw_init@ret
  4037  0764  082E               	movf	??_cw_init+1,w
  4038  0765  00B1               	movwf	cw_init@ret+1
  4039                           
  4040                           ;CW201x.c: 167: if(ret)
  4041  0766  0830               	movf	cw_init@ret,w
  4042  0767  0431               	iorwf	cw_init@ret+1,w
  4043  0768  1903               	btfsc	3,2
  4044  0769  2FA5               	goto	l2007
  4045                           
  4046                           ;CW201x.c: 168: {
  4047                           ;CW201x.c: 169: return ret;
  4048  076A  0830               	movf	cw_init@ret,w
  4049  076B  0008               	return
  4050  076C                     l1975:	
  4051                           ;CW201x.c: 170: }
  4052                           ;CW201x.c: 171: }
  4053                           
  4054                           
  4055                           ;CW201x.c: 172: else
  4056                           ;CW201x.c: 173: {
  4057                           ;CW201x.c: 174: for(i = 0; i < 64; i++)
  4058  076C  01AF               	clrf	cw_init@i
  4059  076D  3040               	movlw	64
  4060  076E  022F               	subwf	cw_init@i,w
  4061  076F  1803               	btfsc	3,0
  4062  0770  2F93               	goto	l1997
  4063  0771                     l1981:	
  4064                           
  4065                           ;CW201x.c: 175: {
  4066                           ;CW201x.c: 176: ret = cw_read(0x10 +i, &reg_val);
  4067  0771  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4068  0772  00AD               	movwf	??_cw_init
  4069  0773  082D               	movf	??_cw_init,w
  4070  0774  00A4               	movwf	cw_read@r_pdata
  4071  0775  082F               	movf	cw_init@i,w
  4072  0776  3E10               	addlw	16
  4073  0777  2350               	fcall	_cw_read
  4074  0778  0140               	movlb	0	; select bank0
  4075  0779  0825               	movf	?_cw_read+1,w
  4076  077A  00B1               	movwf	cw_init@ret+1
  4077  077B  0824               	movf	?_cw_read,w
  4078  077C  00B0               	movwf	cw_init@ret
  4079                           
  4080                           ;CW201x.c: 177: if(ret)
  4081  077D  0830               	movf	cw_init@ret,w
  4082  077E  0431               	iorwf	cw_init@ret+1,w
  4083  077F  1903               	btfsc	3,2
  4084  0780  2F83               	goto	l1989
  4085                           
  4086                           ;CW201x.c: 178: {
  4087                           ;CW201x.c: 179: return 1;
  4088  0781  3001               	movlw	1
  4089  0782  0008               	return
  4090  0783                     l1989:	
  4091                           
  4092                           ;CW201x.c: 180: }
  4093                           ;CW201x.c: 181: if(cw_bat_config_info[i] != reg_val)
  4094  0783  082F               	movf	cw_init@i,w
  4095  0784  3EA0               	addlw	(low (CW201x@cw_bat_config_info| 0))& (0+255)
  4096  0785  0086               	movwf	6
  4097  0786  0187               	clrf	7
  4098  0787  0801               	movf	1,w
  4099  0788  0632               	xorwf	cw_init@reg_val,w
  4100  0789  1D03               	btfss	3,2
  4101  078A  2F93               	goto	l1997
  4102                           
  4103                           ;CW201x.c: 182: {
  4104                           ;CW201x.c: 183: break;
  4105  078B  3001               	movlw	1
  4106  078C  00AD               	movwf	??_cw_init
  4107  078D  082D               	movf	??_cw_init,w
  4108  078E  07AF               	addwf	cw_init@i,f
  4109  078F  3040               	movlw	64
  4110  0790  022F               	subwf	cw_init@i,w
  4111  0791  1C03               	skipc
  4112  0792  2F71               	goto	l1981
  4113  0793                     l1997:	
  4114                           
  4115                           ;CW201x.c: 184: }
  4116                           ;CW201x.c: 185: }
  4117                           ;CW201x.c: 186: if(i != 64)
  4118  0793  3040               	movlw	64
  4119  0794  062F               	xorwf	cw_init@i,w
  4120  0795  1903               	btfsc	3,2
  4121  0796  2FA5               	goto	l2007
  4122                           
  4123                           ;CW201x.c: 187: {
  4124                           ;CW201x.c: 189: ret = cw_update_config_info();
  4125  0797  258E               	fcall	_cw_update_config_info
  4126  0798  0140               	movlb	0	; select bank0
  4127  0799  00AD               	movwf	??_cw_init
  4128  079A  01AE               	clrf	??_cw_init+1
  4129  079B  082D               	movf	??_cw_init,w
  4130  079C  00B0               	movwf	cw_init@ret
  4131  079D  082E               	movf	??_cw_init+1,w
  4132  079E  00B1               	movwf	cw_init@ret+1
  4133                           
  4134                           ;CW201x.c: 190: if(ret)
  4135  079F  0830               	movf	cw_init@ret,w
  4136  07A0  0431               	iorwf	cw_init@ret+1,w
  4137  07A1  1903               	btfsc	3,2
  4138  07A2  2FA5               	goto	l2007
  4139                           
  4140                           ;CW201x.c: 191: {
  4141                           ;CW201x.c: 192: return ret;
  4142  07A3  0830               	movf	cw_init@ret,w
  4143  07A4  0008               	return
  4144  07A5                     l2007:	
  4145                           
  4146                           ;CW201x.c: 193: }
  4147                           ;CW201x.c: 194: }
  4148                           ;CW201x.c: 195: }
  4149                           ;CW201x.c: 197: for (i = 0; i < 30; i++) {
  4150  07A5  01AF               	clrf	cw_init@i
  4151  07A6  301E               	movlw	30
  4152  07A7  022F               	subwf	cw_init@i,w
  4153  07A8  1803               	btfsc	3,0
  4154  07A9  2FCD               	goto	l2033
  4155  07AA                     l2013:	
  4156                           
  4157                           ;CW201x.c: 198: CW_Delay10ms(10);
  4158  07AA  300A               	movlw	10
  4159  07AB  00F0               	movwf	CW_Delay10ms@c
  4160  07AC  3000               	movlw	0
  4161  07AD  00F1               	movwf	CW_Delay10ms@c+1
  4162  07AE  222A               	fcall	_CW_Delay10ms
  4163                           
  4164                           ;CW201x.c: 199: ret = cw_read(0x4, &reg_val);
  4165  07AF  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4166  07B0  0140               	movlb	0	; select bank0
  4167  07B1  00AD               	movwf	??_cw_init
  4168  07B2  082D               	movf	??_cw_init,w
  4169  07B3  00A4               	movwf	cw_read@r_pdata
  4170  07B4  3004               	movlw	4
  4171  07B5  2350               	fcall	_cw_read
  4172  07B6  0140               	movlb	0	; select bank0
  4173  07B7  0825               	movf	?_cw_read+1,w
  4174  07B8  00B1               	movwf	cw_init@ret+1
  4175  07B9  0824               	movf	?_cw_read,w
  4176  07BA  00B0               	movwf	cw_init@ret
  4177                           
  4178                           ;CW201x.c: 200: if (ret)
  4179  07BB  0830               	movf	cw_init@ret,w
  4180  07BC  0431               	iorwf	cw_init@ret+1,w
  4181  07BD  1903               	btfsc	3,2
  4182  07BE  2FC1               	goto	l2025
  4183                           
  4184                           ;CW201x.c: 201: return 1;
  4185  07BF  3001               	movlw	1
  4186  07C0  0008               	return
  4187  07C1                     l2025:	
  4188                           
  4189                           ;CW201x.c: 202: else if (reg_val <= 100)
  4190  07C1  3065               	movlw	101
  4191  07C2  0232               	subwf	cw_init@reg_val,w
  4192  07C3  1C03               	btfss	3,0
  4193  07C4  2FCD               	goto	l2033
  4194                           
  4195                           ;CW201x.c: 203: break;
  4196  07C5  3001               	movlw	1
  4197  07C6  00AD               	movwf	??_cw_init
  4198  07C7  082D               	movf	??_cw_init,w
  4199  07C8  07AF               	addwf	cw_init@i,f
  4200  07C9  301E               	movlw	30
  4201  07CA  022F               	subwf	cw_init@i,w
  4202  07CB  1C03               	skipc
  4203  07CC  2FAA               	goto	l2013
  4204  07CD                     l2033:	
  4205                           
  4206                           ;CW201x.c: 204: }
  4207                           ;CW201x.c: 206: if (i >=30){
  4208  07CD  301E               	movlw	30
  4209  07CE  022F               	subwf	cw_init@i,w
  4210  07CF  1C03               	skipc
  4211  07D0  2FE2               	goto	l2043
  4212                           
  4213                           ;CW201x.c: 207: reg_val = (0x3<<6);
  4214  07D1  30C0               	movlw	192
  4215  07D2  00AD               	movwf	??_cw_init
  4216  07D3  082D               	movf	??_cw_init,w
  4217  07D4  00B2               	movwf	cw_init@reg_val
  4218                           
  4219                           ;CW201x.c: 208: ret = cw_write(0xA, &reg_val);
  4220  07D5  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4221  07D6  00AD               	movwf	??_cw_init
  4222  07D7  082D               	movf	??_cw_init,w
  4223  07D8  00A4               	movwf	cw_write@w_pdata
  4224  07D9  300A               	movlw	10
  4225  07DA  231E               	fcall	_cw_write
  4226  07DB  0140               	movlb	0	; select bank0
  4227  07DC  0825               	movf	?_cw_write+1,w
  4228  07DD  00B1               	movwf	cw_init@ret+1
  4229  07DE  0824               	movf	?_cw_write,w
  4230  07DF  00B0               	movwf	cw_init@ret
  4231                           
  4232                           ;CW201x.c: 210: return 4;
  4233  07E0  3004               	movlw	4
  4234  07E1  0008               	return
  4235  07E2                     l2043:	
  4236                           
  4237                           ;CW201x.c: 211: }
  4238                           ;CW201x.c: 212: return 0;
  4239  07E2  3000               	movlw	0
  4240  07E3  0008               	return
  4241  07E4                     __end_of_cw_init:	
  4242                           
  4243                           	psect	text14
  4244  058E                     __ptext14:	
  4245 ;; *************** function _cw_update_config_info *****************
  4246 ;; Defined at:
  4247 ;;		line 53 in file "CW201x.c"
  4248 ;; Parameters:    Size  Location     Type
  4249 ;;		None
  4250 ;; Auto vars:     Size  Location     Type
  4251 ;;  ret             2    9[BANK0 ] int 
  4252 ;;  reg_val         1   12[BANK0 ] unsigned char 
  4253 ;;  i               1   11[BANK0 ] unsigned char 
  4254 ;;  reset_val       1    8[BANK0 ] unsigned char 
  4255 ;; Return value:  Size  Location     Type
  4256 ;;                  1    wreg      unsigned char 
  4257 ;; Registers used:
  4258 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4259 ;; Tracked objects:
  4260 ;;		On entry : 0/0
  4261 ;;		On exit  : 0/0
  4262 ;;		Unchanged: 0/0
  4263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4264 ;;      Params:         0       0       0       0
  4265 ;;      Locals:         0       5       0       0
  4266 ;;      Temps:          0       1       0       0
  4267 ;;      Totals:         0       6       0       0
  4268 ;;Total ram usage:        6 bytes
  4269 ;; Hardware stack levels used:    1
  4270 ;; Hardware stack levels required when called:    4
  4271 ;; This function calls:
  4272 ;;		_CW_Delay100us
  4273 ;;		_cw_read
  4274 ;;		_cw_write
  4275 ;; This function is called by:
  4276 ;;		_cw_init
  4277 ;; This function uses a non-reentrant model
  4278 ;;
  4279                           
  4280                           
  4281                           ;psect for function _cw_update_config_info
  4282  058E                     _cw_update_config_info:	
  4283                           
  4284                           ;CW201x.c: 55: int ret = 0;
  4285                           
  4286                           ;incstack = 0
  4287                           ; Regs used in _cw_update_config_info: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  4288  058E  0140               	movlb	0	; select bank0
  4289  058F  01A9               	clrf	cw_update_config_info@ret
  4290  0590  01AA               	clrf	cw_update_config_info@ret+1
  4291                           
  4292                           ;CW201x.c: 56: unsigned char i;
  4293                           ;CW201x.c: 57: unsigned char reset_val;
  4294                           ;CW201x.c: 58: unsigned char reg_val;
  4295                           ;CW201x.c: 60: ret = cw_read(0xA, &reg_val);
  4296  0591  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4297  0592  00A7               	movwf	??_cw_update_config_info
  4298  0593  0827               	movf	??_cw_update_config_info,w
  4299  0594  00A4               	movwf	cw_read@r_pdata
  4300  0595  300A               	movlw	10
  4301  0596  2350               	fcall	_cw_read
  4302  0597  0140               	movlb	0	; select bank0
  4303  0598  0825               	movf	?_cw_read+1,w
  4304  0599  00AA               	movwf	cw_update_config_info@ret+1
  4305  059A  0824               	movf	?_cw_read,w
  4306  059B  00A9               	movwf	cw_update_config_info@ret
  4307                           
  4308                           ;CW201x.c: 61: if(ret)
  4309  059C  0829               	movf	cw_update_config_info@ret,w
  4310  059D  042A               	iorwf	cw_update_config_info@ret+1,w
  4311  059E  1903               	btfsc	3,2
  4312  059F  2DA2               	goto	l1835
  4313                           
  4314                           ;CW201x.c: 62: {
  4315                           ;CW201x.c: 63: return 1;
  4316  05A0  3001               	movlw	1
  4317  05A1  0008               	return
  4318  05A2                     l1835:	
  4319                           
  4320                           ;CW201x.c: 64: }
  4321                           ;CW201x.c: 65: if((reg_val & (0x3<<6)) == (0x3<<6))
  4322  05A2  30C0               	movlw	192
  4323  05A3  052C               	andwf	cw_update_config_info@reg_val,w
  4324  05A4  00A7               	movwf	??_cw_update_config_info
  4325  05A5  30C0               	movlw	192
  4326  05A6  0627               	xorwf	??_cw_update_config_info,w
  4327  05A7  1D03               	btfss	3,2
  4328  05A8  2DAB               	goto	l1841
  4329                           
  4330                           ;CW201x.c: 66: {
  4331                           ;CW201x.c: 67: return 2;
  4332  05A9  3002               	movlw	2
  4333  05AA  0008               	return
  4334  05AB                     l1841:	
  4335                           
  4336                           ;CW201x.c: 68: }
  4337                           ;CW201x.c: 70: for(i = 0; i < 64; i++)
  4338  05AB  01AB               	clrf	cw_update_config_info@i
  4339  05AC  3040               	movlw	64
  4340  05AD  022B               	subwf	cw_update_config_info@i,w
  4341  05AE  1803               	btfsc	3,0
  4342  05AF  2DD2               	goto	l1861
  4343  05B0                     l1847:	
  4344                           
  4345                           ;CW201x.c: 71: {
  4346                           ;CW201x.c: 72: reg_val = cw_bat_config_info[i];
  4347  05B0  082B               	movf	cw_update_config_info@i,w
  4348  05B1  3EA0               	addlw	(low (CW201x@cw_bat_config_info| 0))& (0+255)
  4349  05B2  0086               	movwf	6
  4350  05B3  0187               	clrf	7
  4351  05B4  0801               	movf	1,w
  4352  05B5  00A7               	movwf	??_cw_update_config_info
  4353  05B6  0827               	movf	??_cw_update_config_info,w
  4354  05B7  00AC               	movwf	cw_update_config_info@reg_val
  4355                           
  4356                           ;CW201x.c: 73: ret = cw_write(0x10+i, &reg_val);
  4357  05B8  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4358  05B9  00A7               	movwf	??_cw_update_config_info
  4359  05BA  0827               	movf	??_cw_update_config_info,w
  4360  05BB  00A4               	movwf	cw_write@w_pdata
  4361  05BC  082B               	movf	cw_update_config_info@i,w
  4362  05BD  3E10               	addlw	16
  4363  05BE  231E               	fcall	_cw_write
  4364  05BF  0140               	movlb	0	; select bank0
  4365  05C0  0825               	movf	?_cw_write+1,w
  4366  05C1  00AA               	movwf	cw_update_config_info@ret+1
  4367  05C2  0824               	movf	?_cw_write,w
  4368  05C3  00A9               	movwf	cw_update_config_info@ret
  4369                           
  4370                           ;CW201x.c: 74: if(ret)
  4371  05C4  0829               	movf	cw_update_config_info@ret,w
  4372  05C5  042A               	iorwf	cw_update_config_info@ret+1,w
  4373  05C6  1903               	btfsc	3,2
  4374  05C7  2DCA               	goto	l1857
  4375                           
  4376                           ;CW201x.c: 75: {
  4377                           ;CW201x.c: 76: return 1;
  4378  05C8  3001               	movlw	1
  4379  05C9  0008               	return
  4380  05CA                     l1857:	
  4381  05CA  3001               	movlw	1
  4382  05CB  00A7               	movwf	??_cw_update_config_info
  4383  05CC  0827               	movf	??_cw_update_config_info,w
  4384  05CD  07AB               	addwf	cw_update_config_info@i,f
  4385  05CE  3040               	movlw	64
  4386  05CF  022B               	subwf	cw_update_config_info@i,w
  4387  05D0  1C03               	skipc
  4388  05D1  2DB0               	goto	l1847
  4389  05D2                     l1861:	
  4390                           
  4391                           ;CW201x.c: 77: }
  4392                           ;CW201x.c: 78: }
  4393                           ;CW201x.c: 81: for(i = 0; i < 64; i++)
  4394  05D2  01AB               	clrf	cw_update_config_info@i
  4395  05D3  3040               	movlw	64
  4396  05D4  022B               	subwf	cw_update_config_info@i,w
  4397  05D5  1803               	btfsc	3,0
  4398  05D6  2DFB               	goto	l1885
  4399  05D7                     l1867:	
  4400                           
  4401                           ;CW201x.c: 82: {
  4402                           ;CW201x.c: 83: ret = cw_read(0x10+i, &reg_val);
  4403  05D7  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4404  05D8  00A7               	movwf	??_cw_update_config_info
  4405  05D9  0827               	movf	??_cw_update_config_info,w
  4406  05DA  00A4               	movwf	cw_read@r_pdata
  4407  05DB  082B               	movf	cw_update_config_info@i,w
  4408  05DC  3E10               	addlw	16
  4409  05DD  2350               	fcall	_cw_read
  4410  05DE  0140               	movlb	0	; select bank0
  4411  05DF  0825               	movf	?_cw_read+1,w
  4412  05E0  00AA               	movwf	cw_update_config_info@ret+1
  4413  05E1  0824               	movf	?_cw_read,w
  4414  05E2  00A9               	movwf	cw_update_config_info@ret
  4415                           
  4416                           ;CW201x.c: 84: if(ret)
  4417  05E3  0829               	movf	cw_update_config_info@ret,w
  4418  05E4  042A               	iorwf	cw_update_config_info@ret+1,w
  4419  05E5  1903               	btfsc	3,2
  4420  05E6  2DE9               	goto	l1875
  4421                           
  4422                           ;CW201x.c: 85: {
  4423                           ;CW201x.c: 86: return 1;
  4424  05E7  3001               	movlw	1
  4425  05E8  0008               	return
  4426  05E9                     l1875:	
  4427                           
  4428                           ;CW201x.c: 87: }
  4429                           ;CW201x.c: 88: if(reg_val != cw_bat_config_info[i])
  4430  05E9  082B               	movf	cw_update_config_info@i,w
  4431  05EA  3EA0               	addlw	(low (CW201x@cw_bat_config_info| 0))& (0+255)
  4432  05EB  0086               	movwf	6
  4433  05EC  0187               	clrf	7
  4434  05ED  0801               	movf	1,w
  4435  05EE  062C               	xorwf	cw_update_config_info@reg_val,w
  4436  05EF  1903               	skipnz
  4437  05F0  2DF3               	goto	l1881
  4438                           
  4439                           ;CW201x.c: 89: {
  4440                           ;CW201x.c: 90: return 3;
  4441  05F1  3003               	movlw	3
  4442  05F2  0008               	return
  4443  05F3                     l1881:	
  4444  05F3  3001               	movlw	1
  4445  05F4  00A7               	movwf	??_cw_update_config_info
  4446  05F5  0827               	movf	??_cw_update_config_info,w
  4447  05F6  07AB               	addwf	cw_update_config_info@i,f
  4448  05F7  3040               	movlw	64
  4449  05F8  022B               	subwf	cw_update_config_info@i,w
  4450  05F9  1C03               	skipc
  4451  05FA  2DD7               	goto	l1867
  4452  05FB                     l1885:	
  4453                           
  4454                           ;CW201x.c: 91: }
  4455                           ;CW201x.c: 92: }
  4456                           ;CW201x.c: 94: ret = cw_read(0x8, &reg_val);
  4457  05FB  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4458  05FC  00A7               	movwf	??_cw_update_config_info
  4459  05FD  0827               	movf	??_cw_update_config_info,w
  4460  05FE  00A4               	movwf	cw_read@r_pdata
  4461  05FF  3008               	movlw	8
  4462  0600  2350               	fcall	_cw_read
  4463  0601  0140               	movlb	0	; select bank0
  4464  0602  0825               	movf	?_cw_read+1,w
  4465  0603  00AA               	movwf	cw_update_config_info@ret+1
  4466  0604  0824               	movf	?_cw_read,w
  4467  0605  00A9               	movwf	cw_update_config_info@ret
  4468                           
  4469                           ;CW201x.c: 95: if(ret)
  4470  0606  0829               	movf	cw_update_config_info@ret,w
  4471  0607  042A               	iorwf	cw_update_config_info@ret+1,w
  4472  0608  1903               	btfsc	3,2
  4473  0609  2E0C               	goto	l228
  4474                           
  4475                           ;CW201x.c: 96: {
  4476                           ;CW201x.c: 97: return 1;
  4477  060A  3001               	movlw	1
  4478  060B  0008               	return
  4479  060C                     l228:	
  4480                           
  4481                           ;CW201x.c: 98: }
  4482                           ;CW201x.c: 99: reg_val |= (0x1<<1);
  4483  060C  14AC               	bsf	cw_update_config_info@reg_val,1
  4484                           
  4485                           ;CW201x.c: 101: reg_val |= (0x0<<3);
  4486  060D  3007               	movlw	7
  4487  060E  00A7               	movwf	??_cw_update_config_info
  4488  060F  0827               	movf	??_cw_update_config_info,w
  4489  0610  05AC               	andwf	cw_update_config_info@reg_val,f
  4490                           
  4491                           ;CW201x.c: 102: ret = cw_write(0x8, &reg_val);
  4492  0611  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4493  0612  00A7               	movwf	??_cw_update_config_info
  4494  0613  0827               	movf	??_cw_update_config_info,w
  4495  0614  00A4               	movwf	cw_write@w_pdata
  4496  0615  3008               	movlw	8
  4497  0616  231E               	fcall	_cw_write
  4498  0617  0140               	movlb	0	; select bank0
  4499  0618  0825               	movf	?_cw_write+1,w
  4500  0619  00AA               	movwf	cw_update_config_info@ret+1
  4501  061A  0824               	movf	?_cw_write,w
  4502  061B  00A9               	movwf	cw_update_config_info@ret
  4503                           
  4504                           ;CW201x.c: 103: if(ret)
  4505  061C  0829               	movf	cw_update_config_info@ret,w
  4506  061D  042A               	iorwf	cw_update_config_info@ret+1,w
  4507  061E  1903               	btfsc	3,2
  4508  061F  2E22               	goto	l1903
  4509                           
  4510                           ;CW201x.c: 104: {
  4511                           ;CW201x.c: 105: return 1;
  4512  0620  3001               	movlw	1
  4513  0621  0008               	return
  4514  0622                     l1903:	
  4515                           
  4516                           ;CW201x.c: 106: }
  4517                           ;CW201x.c: 108: reset_val = (0x0<<6);
  4518  0622  01A8               	clrf	cw_update_config_info@reset_val
  4519                           
  4520                           ;CW201x.c: 109: reg_val = (0xf<<0);
  4521  0623  300F               	movlw	15
  4522  0624  00A7               	movwf	??_cw_update_config_info
  4523  0625  0827               	movf	??_cw_update_config_info,w
  4524  0626  00AC               	movwf	cw_update_config_info@reg_val
  4525                           
  4526                           ;CW201x.c: 110: ret = cw_write(0xA, &reg_val);
  4527  0627  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4528  0628  00A7               	movwf	??_cw_update_config_info
  4529  0629  0827               	movf	??_cw_update_config_info,w
  4530  062A  00A4               	movwf	cw_write@w_pdata
  4531  062B  300A               	movlw	10
  4532  062C  231E               	fcall	_cw_write
  4533  062D  0140               	movlb	0	; select bank0
  4534  062E  0825               	movf	?_cw_write+1,w
  4535  062F  00AA               	movwf	cw_update_config_info@ret+1
  4536  0630  0824               	movf	?_cw_write,w
  4537  0631  00A9               	movwf	cw_update_config_info@ret
  4538                           
  4539                           ;CW201x.c: 111: if(ret)
  4540  0632  0829               	movf	cw_update_config_info@ret,w
  4541  0633  042A               	iorwf	cw_update_config_info@ret+1,w
  4542  0634  1903               	btfsc	3,2
  4543  0635  2E38               	goto	l1915
  4544                           
  4545                           ;CW201x.c: 112: {
  4546                           ;CW201x.c: 113: return 1;
  4547  0636  3001               	movlw	1
  4548  0637  0008               	return
  4549  0638                     l1915:	
  4550                           
  4551                           ;CW201x.c: 114: }
  4552                           ;CW201x.c: 115: CW_Delay100us();
  4553  0638  21EA               	fcall	_CW_Delay100us
  4554                           
  4555                           ;CW201x.c: 116: ret = cw_write(0xA, &reset_val);
  4556  0639  3028               	movlw	(low (cw_update_config_info@reset_val| 0))& (0+255)
  4557  063A  0140               	movlb	0	; select bank0
  4558  063B  00A7               	movwf	??_cw_update_config_info
  4559  063C  0827               	movf	??_cw_update_config_info,w
  4560  063D  00A4               	movwf	cw_write@w_pdata
  4561  063E  300A               	movlw	10
  4562  063F  231E               	fcall	_cw_write
  4563  0640  0140               	movlb	0	; select bank0
  4564  0641  0825               	movf	?_cw_write+1,w
  4565  0642  00AA               	movwf	cw_update_config_info@ret+1
  4566  0643  0824               	movf	?_cw_write,w
  4567  0644  00A9               	movwf	cw_update_config_info@ret
  4568                           
  4569                           ;CW201x.c: 117: if(ret)
  4570  0645  0829               	movf	cw_update_config_info@ret,w
  4571  0646  042A               	iorwf	cw_update_config_info@ret+1,w
  4572  0647  1903               	btfsc	3,2
  4573  0648  2E4B               	goto	l1925
  4574                           
  4575                           ;CW201x.c: 118: {
  4576                           ;CW201x.c: 119: return 1;
  4577  0649  3001               	movlw	1
  4578  064A  0008               	return
  4579  064B                     l1925:	
  4580                           
  4581                           ;CW201x.c: 120: }
  4582                           ;CW201x.c: 121: return 0;
  4583  064B  3000               	movlw	0
  4584  064C  0008               	return
  4585  064D                     __end_of_cw_update_config_info:	
  4586                           
  4587                           	psect	text15
  4588  031E                     __ptext15:	
  4589 ;; *************** function _cw_write *****************
  4590 ;; Defined at:
  4591 ;;		line 222 in file "iic.c"
  4592 ;; Parameters:    Size  Location     Type
  4593 ;;  point_reg       1    wreg     unsigned char 
  4594 ;;  w_pdata         1    4[BANK0 ] PTR unsigned char 
  4595 ;;		 -> cw_por@reset_val(1), cw_init@reg_val(1), cw_update_config_info@reset_val(1), cw_update_config_info@reg_val(1), 
  4596 ;; Auto vars:     Size  Location     Type
  4597 ;;  point_reg       1   12[COMMON] unsigned char 
  4598 ;; Return value:  Size  Location     Type
  4599 ;;                  2    4[BANK0 ] int 
  4600 ;; Registers used:
  4601 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4602 ;; Tracked objects:
  4603 ;;		On entry : 0/0
  4604 ;;		On exit  : 0/0
  4605 ;;		Unchanged: 0/0
  4606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4607 ;;      Params:         0       3       0       0
  4608 ;;      Locals:         1       0       0       0
  4609 ;;      Temps:          0       0       0       0
  4610 ;;      Totals:         1       3       0       0
  4611 ;;Total ram usage:        4 bytes
  4612 ;; Hardware stack levels used:    1
  4613 ;; Hardware stack levels required when called:    3
  4614 ;; This function calls:
  4615 ;;		_start
  4616 ;;		_stop
  4617 ;;		_wait_r_ack
  4618 ;;		_write_byte
  4619 ;; This function is called by:
  4620 ;;		_cw_update_config_info
  4621 ;;		_cw_init
  4622 ;;		_cw_por
  4623 ;; This function uses a non-reentrant model
  4624 ;;
  4625                           
  4626                           
  4627                           ;psect for function _cw_write
  4628  031E                     _cw_write:	
  4629                           
  4630                           ;incstack = 0
  4631                           ; Regs used in _cw_write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4632                           ;cw_write@point_reg stored from wreg
  4633  031E  00FC               	movwf	cw_write@point_reg
  4634                           
  4635                           ;iic.c: 224: start();
  4636  031F  2148               	fcall	_start
  4637                           
  4638                           ;iic.c: 225: write_byte(0xc4);
  4639  0320  30C4               	movlw	196
  4640  0321  21CB               	fcall	_write_byte
  4641                           
  4642                           ;iic.c: 226: if(wait_r_ack())
  4643  0322  22EC               	fcall	_wait_r_ack
  4644  0323  087A               	movf	?_wait_r_ack,w
  4645  0324  047B               	iorwf	?_wait_r_ack+1,w
  4646  0325  1903               	btfsc	3,2
  4647  0326  2B2D               	goto	l1781
  4648                           
  4649                           ;iic.c: 227: {
  4650                           ;iic.c: 228: return 1;
  4651  0327  3001               	movlw	1
  4652  0328  0140               	movlb	0	; select bank0
  4653  0329  00A4               	movwf	?_cw_write
  4654  032A  3000               	movlw	0
  4655  032B  00A5               	movwf	?_cw_write+1
  4656  032C  0008               	return
  4657  032D                     l1781:	
  4658                           
  4659                           ;iic.c: 229: }
  4660                           ;iic.c: 230: write_byte(point_reg);
  4661  032D  087C               	movf	cw_write@point_reg,w
  4662  032E  21CB               	fcall	_write_byte
  4663                           
  4664                           ;iic.c: 231: if(wait_r_ack())
  4665  032F  22EC               	fcall	_wait_r_ack
  4666  0330  087A               	movf	?_wait_r_ack,w
  4667  0331  047B               	iorwf	?_wait_r_ack+1,w
  4668  0332  1903               	btfsc	3,2
  4669  0333  2B3A               	goto	l1787
  4670                           
  4671                           ;iic.c: 232: {
  4672                           ;iic.c: 233: return 1;
  4673  0334  3001               	movlw	1
  4674  0335  0140               	movlb	0	; select bank0
  4675  0336  00A4               	movwf	?_cw_write
  4676  0337  3000               	movlw	0
  4677  0338  00A5               	movwf	?_cw_write+1
  4678  0339  0008               	return
  4679  033A                     l1787:	
  4680                           
  4681                           ;iic.c: 234: }
  4682                           ;iic.c: 235: write_byte(*w_pdata);
  4683  033A  0140               	movlb	0	; select bank0
  4684  033B  0824               	movf	cw_write@w_pdata,w
  4685  033C  0086               	movwf	6
  4686  033D  0187               	clrf	7
  4687  033E  0801               	movf	1,w
  4688  033F  21CB               	fcall	_write_byte
  4689                           
  4690                           ;iic.c: 236: if(wait_r_ack())
  4691  0340  22EC               	fcall	_wait_r_ack
  4692  0341  087A               	movf	?_wait_r_ack,w
  4693  0342  047B               	iorwf	?_wait_r_ack+1,w
  4694  0343  1903               	btfsc	3,2
  4695  0344  2B4B               	goto	l1795
  4696                           
  4697                           ;iic.c: 237: {
  4698                           ;iic.c: 238: return 1;
  4699  0345  3001               	movlw	1
  4700  0346  0140               	movlb	0	; select bank0
  4701  0347  00A4               	movwf	?_cw_write
  4702  0348  3000               	movlw	0
  4703  0349  00A5               	movwf	?_cw_write+1
  4704  034A  0008               	return
  4705  034B                     l1795:	
  4706                           
  4707                           ;iic.c: 239: }
  4708                           ;iic.c: 240: stop();
  4709  034B  216B               	fcall	_stop
  4710                           
  4711                           ;iic.c: 241: return 0;
  4712  034C  0140               	movlb	0	; select bank0
  4713  034D  01A4               	clrf	?_cw_write
  4714  034E  01A5               	clrf	?_cw_write+1
  4715  034F  0008               	return
  4716  0350                     __end_of_cw_write:	
  4717                           
  4718                           	psect	text16
  4719  0350                     __ptext16:	
  4720 ;; *************** function _cw_read *****************
  4721 ;; Defined at:
  4722 ;;		line 164 in file "iic.c"
  4723 ;; Parameters:    Size  Location     Type
  4724 ;;  point_reg       1    wreg     unsigned char 
  4725 ;;  r_pdata         1    4[BANK0 ] PTR unsigned char 
  4726 ;;		 -> cw_get_capacity@reg_val(1), cw_init@reg_val(1), cw_update_config_info@reg_val(1), 
  4727 ;; Auto vars:     Size  Location     Type
  4728 ;;  point_reg       1   13[COMMON] unsigned char 
  4729 ;; Return value:  Size  Location     Type
  4730 ;;                  2    4[BANK0 ] int 
  4731 ;; Registers used:
  4732 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4733 ;; Tracked objects:
  4734 ;;		On entry : 0/0
  4735 ;;		On exit  : 0/0
  4736 ;;		Unchanged: 0/0
  4737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4738 ;;      Params:         0       2       0       0
  4739 ;;      Locals:         1       0       0       0
  4740 ;;      Temps:          1       0       0       0
  4741 ;;      Totals:         2       2       0       0
  4742 ;;Total ram usage:        4 bytes
  4743 ;; Hardware stack levels used:    1
  4744 ;; Hardware stack levels required when called:    3
  4745 ;; This function calls:
  4746 ;;		_read_byte
  4747 ;;		_s_ack
  4748 ;;		_start
  4749 ;;		_stop
  4750 ;;		_wait_r_ack
  4751 ;;		_write_byte
  4752 ;; This function is called by:
  4753 ;;		_cw_update_config_info
  4754 ;;		_cw_init
  4755 ;;		_cw_get_capacity
  4756 ;; This function uses a non-reentrant model
  4757 ;;
  4758                           
  4759                           
  4760                           ;psect for function _cw_read
  4761  0350                     _cw_read:	
  4762                           
  4763                           ;incstack = 0
  4764                           ; Regs used in _cw_read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4765                           ;cw_read@point_reg stored from wreg
  4766  0350  00FD               	movwf	cw_read@point_reg
  4767                           
  4768                           ;iic.c: 166: start();
  4769  0351  2148               	fcall	_start
  4770                           
  4771                           ;iic.c: 167: write_byte(0xc4);
  4772  0352  30C4               	movlw	196
  4773  0353  21CB               	fcall	_write_byte
  4774                           
  4775                           ;iic.c: 168: if(wait_r_ack())
  4776  0354  22EC               	fcall	_wait_r_ack
  4777  0355  087A               	movf	?_wait_r_ack,w
  4778  0356  047B               	iorwf	?_wait_r_ack+1,w
  4779  0357  1903               	btfsc	3,2
  4780  0358  2B5F               	goto	l1753
  4781                           
  4782                           ;iic.c: 169: {
  4783                           ;iic.c: 170: return 1;
  4784  0359  3001               	movlw	1
  4785  035A  0140               	movlb	0	; select bank0
  4786  035B  00A4               	movwf	?_cw_read
  4787  035C  3000               	movlw	0
  4788  035D  00A5               	movwf	?_cw_read+1
  4789  035E  0008               	return
  4790  035F                     l1753:	
  4791                           
  4792                           ;iic.c: 171: }
  4793                           ;iic.c: 172: write_byte(point_reg);
  4794  035F  087D               	movf	cw_read@point_reg,w
  4795  0360  21CB               	fcall	_write_byte
  4796                           
  4797                           ;iic.c: 173: if(wait_r_ack())
  4798  0361  22EC               	fcall	_wait_r_ack
  4799  0362  087A               	movf	?_wait_r_ack,w
  4800  0363  047B               	iorwf	?_wait_r_ack+1,w
  4801  0364  1903               	btfsc	3,2
  4802  0365  2B6C               	goto	l1759
  4803                           
  4804                           ;iic.c: 174: {
  4805                           ;iic.c: 175: return 1;
  4806  0366  3001               	movlw	1
  4807  0367  0140               	movlb	0	; select bank0
  4808  0368  00A4               	movwf	?_cw_read
  4809  0369  3000               	movlw	0
  4810  036A  00A5               	movwf	?_cw_read+1
  4811  036B  0008               	return
  4812  036C                     l1759:	
  4813                           
  4814                           ;iic.c: 176: }
  4815                           ;iic.c: 177: start();
  4816  036C  2148               	fcall	_start
  4817                           
  4818                           ;iic.c: 178: write_byte(0xc5);
  4819  036D  30C5               	movlw	197
  4820  036E  21CB               	fcall	_write_byte
  4821                           
  4822                           ;iic.c: 179: if(wait_r_ack())
  4823  036F  22EC               	fcall	_wait_r_ack
  4824  0370  087A               	movf	?_wait_r_ack,w
  4825  0371  047B               	iorwf	?_wait_r_ack+1,w
  4826  0372  1903               	btfsc	3,2
  4827  0373  2B7A               	goto	l1765
  4828                           
  4829                           ;iic.c: 180: {
  4830                           ;iic.c: 181: return 1;
  4831  0374  3001               	movlw	1
  4832  0375  0140               	movlb	0	; select bank0
  4833  0376  00A4               	movwf	?_cw_read
  4834  0377  3000               	movlw	0
  4835  0378  00A5               	movwf	?_cw_read+1
  4836  0379  0008               	return
  4837  037A                     l1765:	
  4838                           
  4839                           ;iic.c: 182: }
  4840                           ;iic.c: 183: *r_pdata = read_byte();
  4841  037A  226C               	fcall	_read_byte
  4842  037B  00FC               	movwf	??_cw_read
  4843  037C  0140               	movlb	0	; select bank0
  4844  037D  0824               	movf	cw_read@r_pdata,w
  4845  037E  0086               	movwf	6
  4846  037F  0187               	clrf	7
  4847  0380  087C               	movf	??_cw_read,w
  4848  0381  0081               	movwf	1
  4849                           
  4850                           ;iic.c: 184: s_ack();
  4851  0382  213D               	fcall	_s_ack
  4852                           
  4853                           ;iic.c: 185: stop();
  4854  0383  216B               	fcall	_stop
  4855                           
  4856                           ;iic.c: 186: return 0;
  4857  0384  0140               	movlb	0	; select bank0
  4858  0385  01A4               	clrf	?_cw_read
  4859  0386  01A5               	clrf	?_cw_read+1
  4860  0387  0008               	return
  4861  0388                     __end_of_cw_read:	
  4862                           
  4863                           	psect	text17
  4864  01CB                     __ptext17:	
  4865 ;; *************** function _write_byte *****************
  4866 ;; Defined at:
  4867 ;;		line 126 in file "iic.c"
  4868 ;; Parameters:    Size  Location     Type
  4869 ;;  w_data          1    wreg     unsigned char 
  4870 ;; Auto vars:     Size  Location     Type
  4871 ;;  w_data          1    5[COMMON] unsigned char 
  4872 ;;  i               1    6[COMMON] unsigned char 
  4873 ;; Return value:  Size  Location     Type
  4874 ;;                  1    wreg      void 
  4875 ;; Registers used:
  4876 ;;		wreg, status,2, status,0, pclath, cstack
  4877 ;; Tracked objects:
  4878 ;;		On entry : 0/0
  4879 ;;		On exit  : 0/0
  4880 ;;		Unchanged: 0/0
  4881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4882 ;;      Params:         0       0       0       0
  4883 ;;      Locals:         2       0       0       0
  4884 ;;      Temps:          1       0       0       0
  4885 ;;      Totals:         3       0       0       0
  4886 ;;Total ram usage:        3 bytes
  4887 ;; Hardware stack levels used:    1
  4888 ;; Hardware stack levels required when called:    1
  4889 ;; This function calls:
  4890 ;;		_Delay10us
  4891 ;; This function is called by:
  4892 ;;		_cw_read
  4893 ;;		_cw_read_word
  4894 ;;		_cw_write
  4895 ;; This function uses a non-reentrant model
  4896 ;;
  4897                           
  4898                           
  4899                           ;psect for function _write_byte
  4900  01CB                     _write_byte:	
  4901                           
  4902                           ;incstack = 0
  4903                           ; Regs used in _write_byte: [wreg+status,2+status,0+pclath+cstack]
  4904                           ;write_byte@w_data stored from wreg
  4905  01CB  00F5               	movwf	write_byte@w_data
  4906                           
  4907                           ;iic.c: 128: unsigned char i;
  4908                           ;iic.c: 129: do { TRISCbits.TRISC1 = 0; } while(0);
  4909  01CC  0140               	movlb	0	; select bank0
  4910  01CD  1094               	bcf	20,1	;volatile
  4911                           
  4912                           ;iic.c: 130: for(i = 0; i < 8; i++)
  4913  01CE  01F6               	clrf	write_byte@i
  4914  01CF                     L5:	
  4915  01CF  3008               	movlw	8
  4916  01D0  0276               	subwf	write_byte@i,w
  4917  01D1  1803               	btfsc	3,0
  4918  01D2  0008               	return
  4919                           
  4920                           ;iic.c: 131: {
  4921                           ;iic.c: 132: LATCbits.LATC1 = (w_data & 0x80)?1:0;
  4922  01D3  1FF5               	btfss	write_byte@w_data,7
  4923  01D4  29D8               	goto	u1250
  4924  01D5  0140               	movlb	0	; select bank0
  4925  01D6  149A               	bsf	26,1	;volatile
  4926  01D7  29DA               	goto	l1683
  4927  01D8                     u1250:	
  4928  01D8  0140               	movlb	0	; select bank0
  4929  01D9  109A               	bcf	26,1	;volatile
  4930  01DA                     l1683:	
  4931                           
  4932                           ;iic.c: 133: Delay10us();
  4933  01DA  220A               	fcall	_Delay10us
  4934                           
  4935                           ;iic.c: 134: do { LATCbits.LATC0 = 1; } while(0);
  4936  01DB  0140               	movlb	0	; select bank0
  4937  01DC  141A               	bsf	26,0	;volatile
  4938                           
  4939                           ;iic.c: 135: Delay10us();
  4940  01DD  220A               	fcall	_Delay10us
  4941                           
  4942                           ;iic.c: 136: do { LATCbits.LATC0 = 0; } while(0);
  4943  01DE  0140               	movlb	0	; select bank0
  4944  01DF  101A               	bcf	26,0	;volatile
  4945                           
  4946                           ;iic.c: 137: Delay10us();
  4947  01E0  220A               	fcall	_Delay10us
  4948                           
  4949                           ;iic.c: 138: w_data = w_data << 1;
  4950  01E1  3575               	lslf	write_byte@w_data,w
  4951  01E2  00F4               	movwf	??_write_byte
  4952  01E3  0874               	movf	??_write_byte,w
  4953  01E4  00F5               	movwf	write_byte@w_data
  4954  01E5  3001               	movlw	1
  4955  01E6  00F4               	movwf	??_write_byte
  4956  01E7  0874               	movf	??_write_byte,w
  4957  01E8  07F6               	addwf	write_byte@i,f
  4958  01E9  29CF               	goto	L5
  4959  01EA                     __end_of_write_byte:	
  4960                           
  4961                           	psect	text18
  4962  02EC                     __ptext18:	
  4963 ;; *************** function _wait_r_ack *****************
  4964 ;; Defined at:
  4965 ;;		line 80 in file "iic.c"
  4966 ;; Parameters:    Size  Location     Type
  4967 ;;		None
  4968 ;; Auto vars:     Size  Location     Type
  4969 ;;  i               2    2[BANK0 ] unsigned int 
  4970 ;;  ack             2    0[BANK0 ] int 
  4971 ;; Return value:  Size  Location     Type
  4972 ;;                  2   10[COMMON] int 
  4973 ;; Registers used:
  4974 ;;		wreg, status,2, status,0, pclath, cstack
  4975 ;; Tracked objects:
  4976 ;;		On entry : 0/0
  4977 ;;		On exit  : 0/0
  4978 ;;		Unchanged: 0/0
  4979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4980 ;;      Params:         2       0       0       0
  4981 ;;      Locals:         0       4       0       0
  4982 ;;      Temps:          0       0       0       0
  4983 ;;      Totals:         2       4       0       0
  4984 ;;Total ram usage:        6 bytes
  4985 ;; Hardware stack levels used:    1
  4986 ;; Hardware stack levels required when called:    2
  4987 ;; This function calls:
  4988 ;;		_r_ack
  4989 ;;		_stop
  4990 ;; This function is called by:
  4991 ;;		_cw_read
  4992 ;;		_cw_read_word
  4993 ;;		_cw_write
  4994 ;; This function uses a non-reentrant model
  4995 ;;
  4996                           
  4997                           
  4998                           ;psect for function _wait_r_ack
  4999  02EC                     _wait_r_ack:	
  5000                           
  5001                           ;iic.c: 82: int ack;
  5002                           ;iic.c: 83: unsigned int i;
  5003                           ;iic.c: 84: ack = 1;
  5004                           
  5005                           ;incstack = 0
  5006                           ; Regs used in _wait_r_ack: [wreg+status,2+status,0+pclath+cstack]
  5007  02EC  3001               	movlw	1
  5008  02ED  0140               	movlb	0	; select bank0
  5009  02EE  00A0               	movwf	wait_r_ack@ack
  5010  02EF  3000               	movlw	0
  5011  02F0  00A1               	movwf	wait_r_ack@ack+1
  5012                           
  5013                           ;iic.c: 85: for(i = 0; i < 100; i++)
  5014  02F1  01A2               	clrf	wait_r_ack@i
  5015  02F2  01A3               	clrf	wait_r_ack@i+1
  5016  02F3  3000               	movlw	0
  5017  02F4  0223               	subwf	wait_r_ack@i+1,w
  5018  02F5  3064               	movlw	100
  5019  02F6  1903               	skipnz
  5020  02F7  0222               	subwf	wait_r_ack@i,w
  5021  02F8  1803               	btfsc	3,0
  5022  02F9  2B1B               	goto	l1667
  5023  02FA                     l1651:	
  5024                           
  5025                           ;iic.c: 86: {
  5026                           ;iic.c: 87: ack = r_ack();
  5027  02FA  2183               	fcall	_r_ack
  5028  02FB  0875               	movf	?_r_ack+1,w
  5029  02FC  0140               	movlb	0	; select bank0
  5030  02FD  00A1               	movwf	wait_r_ack@ack+1
  5031  02FE  0874               	movf	?_r_ack,w
  5032  02FF  00A0               	movwf	wait_r_ack@ack
  5033                           
  5034                           ;iic.c: 88: if(!ack)
  5035  0300  0820               	movf	wait_r_ack@ack,w
  5036  0301  0421               	iorwf	wait_r_ack@ack+1,w
  5037  0302  1903               	btfsc	3,2
  5038  0303  2B1B               	goto	l1667
  5039                           
  5040                           ;iic.c: 91: }
  5041                           ;iic.c: 92: if(i == 99)
  5042                           
  5043                           ;iic.c: 89: {
  5044                           ;iic.c: 90: break;
  5045  0304  3063               	movlw	99
  5046  0305  0622               	xorwf	wait_r_ack@i,w
  5047  0306  0423               	iorwf	wait_r_ack@i+1,w
  5048  0307  1D03               	btfss	3,2
  5049  0308  2B0F               	goto	l1665
  5050                           
  5051                           ;iic.c: 93: {
  5052                           ;iic.c: 94: stop();
  5053  0309  216B               	fcall	_stop
  5054                           
  5055                           ;iic.c: 95: return 1;
  5056  030A  3001               	movlw	1
  5057  030B  00FA               	movwf	?_wait_r_ack
  5058  030C  3000               	movlw	0
  5059  030D  00FB               	movwf	?_wait_r_ack+1
  5060  030E  0008               	return
  5061  030F                     l1665:	
  5062  030F  3001               	movlw	1
  5063  0310  0140               	movlb	0	; select bank0
  5064  0311  07A2               	addwf	wait_r_ack@i,f
  5065  0312  3000               	movlw	0
  5066  0313  3DA3               	addwfc	wait_r_ack@i+1,f
  5067  0314  3000               	movlw	0
  5068  0315  0223               	subwf	wait_r_ack@i+1,w
  5069  0316  3064               	movlw	100
  5070  0317  1903               	skipnz
  5071  0318  0222               	subwf	wait_r_ack@i,w
  5072  0319  1C03               	skipc
  5073  031A  2AFA               	goto	l1651
  5074  031B                     l1667:	
  5075                           
  5076                           ;iic.c: 96: }
  5077                           ;iic.c: 97: }
  5078                           ;iic.c: 98: return 0;
  5079  031B  01FA               	clrf	?_wait_r_ack
  5080  031C  01FB               	clrf	?_wait_r_ack+1
  5081  031D  0008               	return
  5082  031E                     __end_of_wait_r_ack:	
  5083                           
  5084                           	psect	text19
  5085  016B                     __ptext19:	
  5086 ;; *************** function _stop *****************
  5087 ;; Defined at:
  5088 ;;		line 54 in file "iic.c"
  5089 ;; Parameters:    Size  Location     Type
  5090 ;;		None
  5091 ;; Auto vars:     Size  Location     Type
  5092 ;;		None
  5093 ;; Return value:  Size  Location     Type
  5094 ;;                  1    wreg      void 
  5095 ;; Registers used:
  5096 ;;		wreg, status,2, status,0, pclath, cstack
  5097 ;; Tracked objects:
  5098 ;;		On entry : 0/0
  5099 ;;		On exit  : 0/0
  5100 ;;		Unchanged: 0/0
  5101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5102 ;;      Params:         0       0       0       0
  5103 ;;      Locals:         0       0       0       0
  5104 ;;      Temps:          0       0       0       0
  5105 ;;      Totals:         0       0       0       0
  5106 ;;Total ram usage:        0 bytes
  5107 ;; Hardware stack levels used:    1
  5108 ;; Hardware stack levels required when called:    1
  5109 ;; This function calls:
  5110 ;;		_Delay10us
  5111 ;; This function is called by:
  5112 ;;		_wait_r_ack
  5113 ;;		_cw_read
  5114 ;;		_cw_read_word
  5115 ;;		_cw_write
  5116 ;; This function uses a non-reentrant model
  5117 ;;
  5118                           
  5119                           
  5120                           ;psect for function _stop
  5121  016B                     _stop:	
  5122                           
  5123                           ;incstack = 0
  5124                           ; Regs used in _stop: [wreg+status,2+status,0+pclath+cstack]
  5125                           ;iic.c: 56: do { TRISCbits.TRISC1 = 0; } while(0);
  5126  016B  0140               	movlb	0	; select bank0
  5127  016C  1094               	bcf	20,1	;volatile
  5128                           
  5129                           ;iic.c: 57: do { LATCbits.LATC1 = 0; } while(0);
  5130  016D  109A               	bcf	26,1	;volatile
  5131                           
  5132                           ;iic.c: 58: Delay10us();
  5133  016E  220A               	fcall	_Delay10us
  5134                           
  5135                           ;iic.c: 59: do { LATCbits.LATC0 = 1; } while(0);
  5136  016F  0140               	movlb	0	; select bank0
  5137  0170  141A               	bsf	26,0	;volatile
  5138                           
  5139                           ;iic.c: 60: Delay10us();
  5140  0171  220A               	fcall	_Delay10us
  5141                           
  5142                           ;iic.c: 61: do { LATCbits.LATC1 = 1; } while(0);
  5143  0172  0140               	movlb	0	; select bank0
  5144  0173  149A               	bsf	26,1	;volatile
  5145                           
  5146                           ;iic.c: 62: Delay10us();
  5147  0174  220A               	fcall	_Delay10us
  5148                           
  5149                           ;iic.c: 64: Delay10us();
  5150  0175  220A               	fcall	_Delay10us
  5151  0176  0008               	return
  5152  0177                     __end_of_stop:	
  5153                           
  5154                           	psect	text20
  5155  0183                     __ptext20:	
  5156 ;; *************** function _r_ack *****************
  5157 ;; Defined at:
  5158 ;;		line 67 in file "iic.c"
  5159 ;; Parameters:    Size  Location     Type
  5160 ;;		None
  5161 ;; Auto vars:     Size  Location     Type
  5162 ;;  ack             2    8[COMMON] int 
  5163 ;; Return value:  Size  Location     Type
  5164 ;;                  2    4[COMMON] int 
  5165 ;; Registers used:
  5166 ;;		wreg, status,2, status,0, pclath, cstack
  5167 ;; Tracked objects:
  5168 ;;		On entry : 0/0
  5169 ;;		On exit  : 0/0
  5170 ;;		Unchanged: 0/0
  5171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5172 ;;      Params:         2       0       0       0
  5173 ;;      Locals:         2       0       0       0
  5174 ;;      Temps:          2       0       0       0
  5175 ;;      Totals:         6       0       0       0
  5176 ;;Total ram usage:        6 bytes
  5177 ;; Hardware stack levels used:    1
  5178 ;; Hardware stack levels required when called:    1
  5179 ;; This function calls:
  5180 ;;		_Delay10us
  5181 ;; This function is called by:
  5182 ;;		_wait_r_ack
  5183 ;; This function uses a non-reentrant model
  5184 ;;
  5185                           
  5186                           
  5187                           ;psect for function _r_ack
  5188  0183                     _r_ack:	
  5189                           
  5190                           ;incstack = 0
  5191                           ; Regs used in _r_ack: [wreg+status,2+status,0+pclath+cstack]
  5192                           ;iic.c: 69: int ack;
  5193                           ;iic.c: 70: do { TRISCbits.TRISC1 = 1; } while(0);
  5194  0183  0140               	movlb	0	; select bank0
  5195  0184  1494               	bsf	20,1	;volatile
  5196                           
  5197                           ;iic.c: 71: do { LATCbits.LATC0 = 1; } while(0);
  5198  0185  141A               	bsf	26,0	;volatile
  5199                           
  5200                           ;iic.c: 72: Delay10us();
  5201  0186  220A               	fcall	_Delay10us
  5202                           
  5203                           ;iic.c: 73: ack = PORTCbits.RC1;
  5204  0187  0140               	movlb	0	; select bank0
  5205  0188  0C0E               	rrf	14,w	;volatile
  5206  0189  3901               	andlw	1
  5207  018A  00F6               	movwf	??_r_ack
  5208  018B  01F7               	clrf	??_r_ack+1
  5209  018C  0876               	movf	??_r_ack,w
  5210  018D  00F8               	movwf	r_ack@ack
  5211  018E  0877               	movf	??_r_ack+1,w
  5212  018F  00F9               	movwf	r_ack@ack+1
  5213                           
  5214                           ;iic.c: 74: Delay10us();
  5215  0190  220A               	fcall	_Delay10us
  5216                           
  5217                           ;iic.c: 75: do { LATCbits.LATC0 = 0; } while(0);
  5218  0191  0140               	movlb	0	; select bank0
  5219  0192  101A               	bcf	26,0	;volatile
  5220                           
  5221                           ;iic.c: 76: Delay10us();
  5222  0193  220A               	fcall	_Delay10us
  5223                           
  5224                           ;iic.c: 77: return ack;
  5225  0194  0879               	movf	r_ack@ack+1,w
  5226  0195  00F5               	movwf	?_r_ack+1
  5227  0196  0878               	movf	r_ack@ack,w
  5228  0197  00F4               	movwf	?_r_ack
  5229  0198  0008               	return
  5230  0199                     __end_of_r_ack:	
  5231                           
  5232                           	psect	text21
  5233  0148                     __ptext21:	
  5234 ;; *************** function _start *****************
  5235 ;; Defined at:
  5236 ;;		line 43 in file "iic.c"
  5237 ;; Parameters:    Size  Location     Type
  5238 ;;		None
  5239 ;; Auto vars:     Size  Location     Type
  5240 ;;		None
  5241 ;; Return value:  Size  Location     Type
  5242 ;;                  1    wreg      void 
  5243 ;; Registers used:
  5244 ;;		wreg, status,2, status,0, pclath, cstack
  5245 ;; Tracked objects:
  5246 ;;		On entry : 0/0
  5247 ;;		On exit  : 0/0
  5248 ;;		Unchanged: 0/0
  5249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5250 ;;      Params:         0       0       0       0
  5251 ;;      Locals:         0       0       0       0
  5252 ;;      Temps:          0       0       0       0
  5253 ;;      Totals:         0       0       0       0
  5254 ;;Total ram usage:        0 bytes
  5255 ;; Hardware stack levels used:    1
  5256 ;; Hardware stack levels required when called:    1
  5257 ;; This function calls:
  5258 ;;		_Delay10us
  5259 ;; This function is called by:
  5260 ;;		_cw_read
  5261 ;;		_cw_read_word
  5262 ;;		_cw_write
  5263 ;; This function uses a non-reentrant model
  5264 ;;
  5265                           
  5266                           
  5267                           ;psect for function _start
  5268  0148                     _start:	
  5269                           
  5270                           ;incstack = 0
  5271                           ; Regs used in _start: [wreg+status,2+status,0+pclath+cstack]
  5272                           ;iic.c: 45: do { TRISCbits.TRISC1 = 0; } while(0);
  5273  0148  0140               	movlb	0	; select bank0
  5274  0149  1094               	bcf	20,1	;volatile
  5275                           
  5276                           ;iic.c: 46: do { LATCbits.LATC1 = 1; } while(0);
  5277  014A  149A               	bsf	26,1	;volatile
  5278                           
  5279                           ;iic.c: 47: do { LATCbits.LATC0 = 1; } while(0);
  5280  014B  141A               	bsf	26,0	;volatile
  5281                           
  5282                           ;iic.c: 48: Delay10us();
  5283  014C  220A               	fcall	_Delay10us
  5284                           
  5285                           ;iic.c: 49: do { LATCbits.LATC1 = 0; } while(0);
  5286  014D  0140               	movlb	0	; select bank0
  5287  014E  109A               	bcf	26,1	;volatile
  5288                           
  5289                           ;iic.c: 50: Delay10us();
  5290  014F  220A               	fcall	_Delay10us
  5291                           
  5292                           ;iic.c: 51: do { LATCbits.LATC0 = 0; } while(0);
  5293  0150  0140               	movlb	0	; select bank0
  5294  0151  101A               	bcf	26,0	;volatile
  5295  0152  0008               	return
  5296  0153                     __end_of_start:	
  5297                           
  5298                           	psect	text22
  5299  013D                     __ptext22:	
  5300 ;; *************** function _s_ack *****************
  5301 ;; Defined at:
  5302 ;;		line 101 in file "iic.c"
  5303 ;; Parameters:    Size  Location     Type
  5304 ;;		None
  5305 ;; Auto vars:     Size  Location     Type
  5306 ;;		None
  5307 ;; Return value:  Size  Location     Type
  5308 ;;                  1    wreg      void 
  5309 ;; Registers used:
  5310 ;;		wreg, status,2, status,0, pclath, cstack
  5311 ;; Tracked objects:
  5312 ;;		On entry : 0/0
  5313 ;;		On exit  : 0/0
  5314 ;;		Unchanged: 0/0
  5315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5316 ;;      Params:         0       0       0       0
  5317 ;;      Locals:         0       0       0       0
  5318 ;;      Temps:          0       0       0       0
  5319 ;;      Totals:         0       0       0       0
  5320 ;;Total ram usage:        0 bytes
  5321 ;; Hardware stack levels used:    1
  5322 ;; Hardware stack levels required when called:    1
  5323 ;; This function calls:
  5324 ;;		_Delay10us
  5325 ;; This function is called by:
  5326 ;;		_cw_read
  5327 ;;		_cw_read_word
  5328 ;; This function uses a non-reentrant model
  5329 ;;
  5330                           
  5331                           
  5332                           ;psect for function _s_ack
  5333  013D                     _s_ack:	
  5334                           
  5335                           ;incstack = 0
  5336                           ; Regs used in _s_ack: [wreg+status,2+status,0+pclath+cstack]
  5337                           ;iic.c: 103: do { TRISCbits.TRISC1 = 0; } while(0);
  5338  013D  0140               	movlb	0	; select bank0
  5339  013E  1094               	bcf	20,1	;volatile
  5340                           
  5341                           ;iic.c: 104: do { LATCbits.LATC1 = 1; } while(0);
  5342  013F  149A               	bsf	26,1	;volatile
  5343                           
  5344                           ;iic.c: 105: Delay10us();
  5345  0140  220A               	fcall	_Delay10us
  5346                           
  5347                           ;iic.c: 106: do { LATCbits.LATC0 = 1; } while(0);
  5348  0141  0140               	movlb	0	; select bank0
  5349  0142  141A               	bsf	26,0	;volatile
  5350                           
  5351                           ;iic.c: 107: Delay10us();
  5352  0143  220A               	fcall	_Delay10us
  5353                           
  5354                           ;iic.c: 108: do { LATCbits.LATC0 = 0; } while(0);
  5355  0144  0140               	movlb	0	; select bank0
  5356  0145  101A               	bcf	26,0	;volatile
  5357                           
  5358                           ;iic.c: 109: Delay10us();
  5359  0146  220A               	fcall	_Delay10us
  5360  0147  0008               	return
  5361  0148                     __end_of_s_ack:	
  5362                           
  5363                           	psect	text23
  5364  026C                     __ptext23:	
  5365 ;; *************** function _read_byte *****************
  5366 ;; Defined at:
  5367 ;;		line 142 in file "iic.c"
  5368 ;; Parameters:    Size  Location     Type
  5369 ;;		None
  5370 ;; Auto vars:     Size  Location     Type
  5371 ;;  r_data          1    6[COMMON] unsigned char 
  5372 ;;  i               1    5[COMMON] unsigned char 
  5373 ;; Return value:  Size  Location     Type
  5374 ;;                  1    wreg      unsigned char 
  5375 ;; Registers used:
  5376 ;;		wreg, status,2, status,0, pclath, cstack
  5377 ;; Tracked objects:
  5378 ;;		On entry : 0/0
  5379 ;;		On exit  : 0/0
  5380 ;;		Unchanged: 0/0
  5381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5382 ;;      Params:         0       0       0       0
  5383 ;;      Locals:         2       0       0       0
  5384 ;;      Temps:          1       0       0       0
  5385 ;;      Totals:         3       0       0       0
  5386 ;;Total ram usage:        3 bytes
  5387 ;; Hardware stack levels used:    1
  5388 ;; Hardware stack levels required when called:    1
  5389 ;; This function calls:
  5390 ;;		_Delay10us
  5391 ;; This function is called by:
  5392 ;;		_cw_read
  5393 ;;		_cw_read_word
  5394 ;; This function uses a non-reentrant model
  5395 ;;
  5396                           
  5397                           
  5398                           ;psect for function _read_byte
  5399  026C                     _read_byte:	
  5400                           
  5401                           ;incstack = 0
  5402                           ; Regs used in _read_byte: [wreg+status,2+status,0+pclath+cstack]
  5403                           ;iic.c: 144: unsigned char i;
  5404                           ;iic.c: 145: unsigned char r_data;
  5405                           ;iic.c: 146: do { TRISCbits.TRISC1 = 1; } while(0);
  5406  026C  0140               	movlb	0	; select bank0
  5407  026D  1494               	bsf	20,1	;volatile
  5408                           
  5409                           ;iic.c: 147: for(i = 0; i < 8; i++)
  5410  026E  01F5               	clrf	read_byte@i
  5411  026F  3008               	movlw	8
  5412  0270  0275               	subwf	read_byte@i,w
  5413  0271  1803               	btfsc	3,0
  5414  0272  2A8D               	goto	l1719
  5415  0273                     l402:	
  5416                           ;iic.c: 148: {
  5417                           ;iic.c: 149: do { LATCbits.LATC0 = 1; } while(0);
  5418                           
  5419  0273  0140               	movlb	0	; select bank0
  5420  0274  141A               	bsf	26,0	;volatile
  5421                           
  5422                           ;iic.c: 150: Delay10us();
  5423  0275  220A               	fcall	_Delay10us
  5424                           
  5425                           ;iic.c: 151: r_data = r_data << 1;
  5426  0276  3576               	lslf	read_byte@r_data,w
  5427  0277  00F4               	movwf	??_read_byte
  5428  0278  0874               	movf	??_read_byte,w
  5429  0279  00F6               	movwf	read_byte@r_data
  5430                           
  5431                           ;iic.c: 152: Delay10us();
  5432  027A  220A               	fcall	_Delay10us
  5433                           
  5434                           ;iic.c: 153: if(PORTCbits.RC1)
  5435  027B  0140               	movlb	0	; select bank0
  5436  027C  1C8E               	btfss	14,1	;volatile
  5437  027D  2A83               	goto	l1711
  5438                           
  5439                           ;iic.c: 154: {
  5440                           ;iic.c: 155: r_data = r_data | 0x1;
  5441  027E  0876               	movf	read_byte@r_data,w
  5442  027F  3801               	iorlw	1
  5443  0280  00F4               	movwf	??_read_byte
  5444  0281  0874               	movf	??_read_byte,w
  5445  0282  00F6               	movwf	read_byte@r_data
  5446  0283                     l1711:	
  5447                           ;iic.c: 156: }
  5448                           ;iic.c: 157: do { LATCbits.LATC0 = 0; } while(0);
  5449                           
  5450  0283  101A               	bcf	26,0	;volatile
  5451                           
  5452                           ;iic.c: 158: Delay10us();
  5453  0284  220A               	fcall	_Delay10us
  5454  0285  3001               	movlw	1
  5455  0286  00F4               	movwf	??_read_byte
  5456  0287  0874               	movf	??_read_byte,w
  5457  0288  07F5               	addwf	read_byte@i,f
  5458  0289  3008               	movlw	8
  5459  028A  0275               	subwf	read_byte@i,w
  5460  028B  1C03               	skipc
  5461  028C  2A73               	goto	l402
  5462  028D                     l1719:	
  5463                           
  5464                           ;iic.c: 159: }
  5465                           ;iic.c: 160: return r_data;
  5466  028D  0876               	movf	read_byte@r_data,w
  5467  028E  0008               	return
  5468  028F                     __end_of_read_byte:	
  5469                           
  5470                           	psect	text24
  5471  020A                     __ptext24:	
  5472 ;; *************** function _Delay10us *****************
  5473 ;; Defined at:
  5474 ;;		line 22 in file "iic.c"
  5475 ;; Parameters:    Size  Location     Type
  5476 ;;		None
  5477 ;; Auto vars:     Size  Location     Type
  5478 ;;  i               1    3[COMMON] unsigned char 
  5479 ;;  b               1    2[COMMON] unsigned char 
  5480 ;;  a               1    1[COMMON] unsigned char 
  5481 ;; Return value:  Size  Location     Type
  5482 ;;                  1    wreg      void 
  5483 ;; Registers used:
  5484 ;;		wreg, status,2, status,0
  5485 ;; Tracked objects:
  5486 ;;		On entry : 0/0
  5487 ;;		On exit  : 0/0
  5488 ;;		Unchanged: 0/0
  5489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5490 ;;      Params:         0       0       0       0
  5491 ;;      Locals:         3       0       0       0
  5492 ;;      Temps:          1       0       0       0
  5493 ;;      Totals:         4       0       0       0
  5494 ;;Total ram usage:        4 bytes
  5495 ;; Hardware stack levels used:    1
  5496 ;; This function calls:
  5497 ;;		Nothing
  5498 ;; This function is called by:
  5499 ;;		_start
  5500 ;;		_stop
  5501 ;;		_r_ack
  5502 ;;		_s_ack
  5503 ;;		_sn_ack
  5504 ;;		_write_byte
  5505 ;;		_read_byte
  5506 ;; This function uses a non-reentrant model
  5507 ;;
  5508                           
  5509                           
  5510                           ;psect for function _Delay10us
  5511  020A                     _Delay10us:	
  5512                           
  5513                           ;iic.c: 24: unsigned char a, b;
  5514                           ;iic.c: 25: unsigned char i;
  5515                           ;iic.c: 26: for(i = 0; i < 2; i++)
  5516                           
  5517                           ;incstack = 0
  5518                           ; Regs used in _Delay10us: [wreg+status,2+status,0]
  5519  020A  01F3               	clrf	Delay10us@i
  5520  020B                     L6:	
  5521  020B  3002               	movlw	2
  5522  020C  0273               	subwf	Delay10us@i,w
  5523  020D  1803               	btfsc	3,0
  5524  020E  0008               	return
  5525                           
  5526                           ;iic.c: 27: {
  5527                           ;iic.c: 28: for(b = 1;b > 0;b --)
  5528  020F  01F2               	clrf	Delay10us@b
  5529  0210  0AF2               	incf	Delay10us@b,f
  5530  0211  0872               	movf	Delay10us@b,w
  5531  0212  1903               	btfsc	3,2
  5532  0213  2A25               	goto	l1613
  5533  0214                     l1603:	
  5534                           
  5535                           ;iic.c: 29: {
  5536                           ;iic.c: 30: for(a = 7;a > 0;a --) ;
  5537  0214  3007               	movlw	7
  5538  0215  00F0               	movwf	??_Delay10us
  5539  0216  0870               	movf	??_Delay10us,w
  5540  0217  00F1               	movwf	Delay10us@a
  5541  0218  0871               	movf	Delay10us@a,w
  5542  0219  1903               	btfsc	3,2
  5543  021A  2A20               	goto	l1611
  5544  021B                     l1609:	
  5545  021B  3001               	movlw	1
  5546  021C  02F1               	subwf	Delay10us@a,f
  5547  021D  0871               	movf	Delay10us@a,w
  5548  021E  1D03               	btfss	3,2
  5549  021F  2A1B               	goto	l1609
  5550  0220                     l1611:	
  5551  0220  3001               	movlw	1
  5552  0221  02F2               	subwf	Delay10us@b,f
  5553  0222  0872               	movf	Delay10us@b,w
  5554  0223  1D03               	btfss	3,2
  5555  0224  2A14               	goto	l1603
  5556  0225                     l1613:	
  5557  0225  3001               	movlw	1
  5558  0226  00F0               	movwf	??_Delay10us
  5559  0227  0870               	movf	??_Delay10us,w
  5560  0228  07F3               	addwf	Delay10us@i,f
  5561  0229  2A0B               	goto	L6
  5562  022A                     __end_of_Delay10us:	
  5563                           
  5564                           	psect	text25
  5565  01EA                     __ptext25:	
  5566 ;; *************** function _CW_Delay100us *****************
  5567 ;; Defined at:
  5568 ;;		line 38 in file "CW201x.c"
  5569 ;; Parameters:    Size  Location     Type
  5570 ;;		None
  5571 ;; Auto vars:     Size  Location     Type
  5572 ;;  i               1    3[COMMON] unsigned char 
  5573 ;;  b               1    2[COMMON] unsigned char 
  5574 ;;  a               1    1[COMMON] unsigned char 
  5575 ;; Return value:  Size  Location     Type
  5576 ;;                  1    wreg      void 
  5577 ;; Registers used:
  5578 ;;		wreg, status,2, status,0
  5579 ;; Tracked objects:
  5580 ;;		On entry : 0/0
  5581 ;;		On exit  : 0/0
  5582 ;;		Unchanged: 0/0
  5583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5584 ;;      Params:         0       0       0       0
  5585 ;;      Locals:         3       0       0       0
  5586 ;;      Temps:          1       0       0       0
  5587 ;;      Totals:         4       0       0       0
  5588 ;;Total ram usage:        4 bytes
  5589 ;; Hardware stack levels used:    1
  5590 ;; This function calls:
  5591 ;;		Nothing
  5592 ;; This function is called by:
  5593 ;;		_cw_update_config_info
  5594 ;;		_cw_por
  5595 ;; This function uses a non-reentrant model
  5596 ;;
  5597                           
  5598                           
  5599                           ;psect for function _CW_Delay100us
  5600  01EA                     _CW_Delay100us:	
  5601                           
  5602                           ;CW201x.c: 40: unsigned char a, b;
  5603                           ;CW201x.c: 41: unsigned char i;
  5604                           ;CW201x.c: 42: for(i = 0; i < 10; i++)
  5605                           
  5606                           ;incstack = 0
  5607                           ; Regs used in _CW_Delay100us: [wreg+status,2+status,0]
  5608  01EA  01F3               	clrf	CW_Delay100us@i
  5609  01EB                     L7:	
  5610  01EB  300A               	movlw	10
  5611  01EC  0273               	subwf	CW_Delay100us@i,w
  5612  01ED  1803               	btfsc	3,0
  5613  01EE  0008               	return
  5614                           
  5615                           ;CW201x.c: 43: {
  5616                           ;CW201x.c: 44: for(b = 1;b > 0;b --)
  5617  01EF  01F2               	clrf	CW_Delay100us@b
  5618  01F0  0AF2               	incf	CW_Delay100us@b,f
  5619  01F1  0872               	movf	CW_Delay100us@b,w
  5620  01F2  1903               	btfsc	3,2
  5621  01F3  2A05               	goto	l1743
  5622  01F4                     l1733:	
  5623                           
  5624                           ;CW201x.c: 45: {
  5625                           ;CW201x.c: 46: for(a = 7;a > 0;a --);
  5626  01F4  3007               	movlw	7
  5627  01F5  00F0               	movwf	??_CW_Delay100us
  5628  01F6  0870               	movf	??_CW_Delay100us,w
  5629  01F7  00F1               	movwf	CW_Delay100us@a
  5630  01F8  0871               	movf	CW_Delay100us@a,w
  5631  01F9  1903               	btfsc	3,2
  5632  01FA  2A00               	goto	l1741
  5633  01FB                     l1739:	
  5634  01FB  3001               	movlw	1
  5635  01FC  02F1               	subwf	CW_Delay100us@a,f
  5636  01FD  0871               	movf	CW_Delay100us@a,w
  5637  01FE  1D03               	btfss	3,2
  5638  01FF  29FB               	goto	l1739
  5639  0200                     l1741:	
  5640  0200  3001               	movlw	1
  5641  0201  02F2               	subwf	CW_Delay100us@b,f
  5642  0202  0872               	movf	CW_Delay100us@b,w
  5643  0203  1D03               	btfss	3,2
  5644  0204  29F4               	goto	l1733
  5645  0205                     l1743:	
  5646  0205  3001               	movlw	1
  5647  0206  00F0               	movwf	??_CW_Delay100us
  5648  0207  0870               	movf	??_CW_Delay100us,w
  5649  0208  07F3               	addwf	CW_Delay100us@i,f
  5650  0209  29EB               	goto	L7
  5651  020A                     __end_of_CW_Delay100us:	
  5652                           
  5653                           	psect	text26
  5654  022A                     __ptext26:	
  5655 ;; *************** function _CW_Delay10ms *****************
  5656 ;; Defined at:
  5657 ;;		line 26 in file "CW201x.c"
  5658 ;; Parameters:    Size  Location     Type
  5659 ;;  c               2    0[COMMON] unsigned int 
  5660 ;; Auto vars:     Size  Location     Type
  5661 ;;  b               1    4[COMMON] unsigned char 
  5662 ;;  a               1    3[COMMON] unsigned char 
  5663 ;;  d               1    0        unsigned char 
  5664 ;; Return value:  Size  Location     Type
  5665 ;;                  1    wreg      void 
  5666 ;; Registers used:
  5667 ;;		wreg, status,2, status,0
  5668 ;; Tracked objects:
  5669 ;;		On entry : 0/0
  5670 ;;		On exit  : 0/0
  5671 ;;		Unchanged: 0/0
  5672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5673 ;;      Params:         2       0       0       0
  5674 ;;      Locals:         2       0       0       0
  5675 ;;      Temps:          1       0       0       0
  5676 ;;      Totals:         5       0       0       0
  5677 ;;Total ram usage:        5 bytes
  5678 ;; Hardware stack levels used:    1
  5679 ;; This function calls:
  5680 ;;		Nothing
  5681 ;; This function is called by:
  5682 ;;		_main
  5683 ;;		_cw_init
  5684 ;; This function uses a non-reentrant model
  5685 ;;
  5686                           
  5687                           
  5688                           ;psect for function _CW_Delay10ms
  5689  022A                     _CW_Delay10ms:	
  5690                           
  5691                           ;CW201x.c: 28: unsigned char a, b, d;
  5692                           ;CW201x.c: 29: for (;c>0;c--)
  5693                           
  5694                           ;incstack = 0
  5695                           ; Regs used in _CW_Delay10ms: [wreg+status,2+status,0]
  5696  022A  0870               	movf	CW_Delay10ms@c,w
  5697  022B  0471               	iorwf	CW_Delay10ms@c+1,w
  5698  022C  1903               	btfsc	3,2
  5699  022D  0008               	return
  5700                           
  5701                           ;CW201x.c: 30: {
  5702                           ;CW201x.c: 31: for(b=95;b>0;b--)
  5703  022E  305F               	movlw	95
  5704  022F  00F2               	movwf	??_CW_Delay10ms
  5705  0230  0872               	movf	??_CW_Delay10ms,w
  5706  0231  00F4               	movwf	CW_Delay10ms@b
  5707  0232  0874               	movf	CW_Delay10ms@b,w
  5708  0233  1903               	btfsc	3,2
  5709  0234  2A46               	goto	l1821
  5710  0235                     l1811:	
  5711                           
  5712                           ;CW201x.c: 32: {
  5713                           ;CW201x.c: 33: for(a=209;a>0;a--) ;
  5714  0235  30D1               	movlw	209
  5715  0236  00F2               	movwf	??_CW_Delay10ms
  5716  0237  0872               	movf	??_CW_Delay10ms,w
  5717  0238  00F3               	movwf	CW_Delay10ms@a
  5718  0239  0873               	movf	CW_Delay10ms@a,w
  5719  023A  1903               	btfsc	3,2
  5720  023B  2A41               	goto	l1819
  5721  023C                     l1817:	
  5722  023C  3001               	movlw	1
  5723  023D  02F3               	subwf	CW_Delay10ms@a,f
  5724  023E  0873               	movf	CW_Delay10ms@a,w
  5725  023F  1D03               	btfss	3,2
  5726  0240  2A3C               	goto	l1817
  5727  0241                     l1819:	
  5728  0241  3001               	movlw	1
  5729  0242  02F4               	subwf	CW_Delay10ms@b,f
  5730  0243  0874               	movf	CW_Delay10ms@b,w
  5731  0244  1D03               	btfss	3,2
  5732  0245  2A35               	goto	l1811
  5733  0246                     l1821:	
  5734  0246  3001               	movlw	1
  5735  0247  02F0               	subwf	CW_Delay10ms@c,f
  5736  0248  3000               	movlw	0
  5737  0249  3BF1               	subwfb	CW_Delay10ms@c+1,f
  5738  024A  2A2A               	goto	_CW_Delay10ms
  5739  024B                     __end_of_CW_Delay10ms:	
  5740                           
  5741                           	psect	text27
  5742  0117                     __ptext27:	
  5743 ;; *************** function _SYSTEM_Initialize *****************
  5744 ;; Defined at:
  5745 ;;		line 86 in file "mcc_generated_files/mcc.c"
  5746 ;; Parameters:    Size  Location     Type
  5747 ;;		None
  5748 ;; Auto vars:     Size  Location     Type
  5749 ;;		None
  5750 ;; Return value:  Size  Location     Type
  5751 ;;                  1    wreg      void 
  5752 ;; Registers used:
  5753 ;;		wreg, status,2, status,0, pclath, cstack
  5754 ;; Tracked objects:
  5755 ;;		On entry : 0/0
  5756 ;;		On exit  : 0/0
  5757 ;;		Unchanged: 0/0
  5758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5759 ;;      Params:         0       0       0       0
  5760 ;;      Locals:         0       0       0       0
  5761 ;;      Temps:          0       0       0       0
  5762 ;;      Totals:         0       0       0       0
  5763 ;;Total ram usage:        0 bytes
  5764 ;; Hardware stack levels used:    1
  5765 ;; Hardware stack levels required when called:    1
  5766 ;; This function calls:
  5767 ;;		_EUSART1_Initialize
  5768 ;;		_OSCILLATOR_Initialize
  5769 ;;		_PIN_MANAGER_Initialize
  5770 ;; This function is called by:
  5771 ;;		_main
  5772 ;; This function uses a non-reentrant model
  5773 ;;
  5774                           
  5775                           
  5776                           ;psect for function _SYSTEM_Initialize
  5777  0117                     _SYSTEM_Initialize:	
  5778                           
  5779                           ;mcc.c: 89: PIN_MANAGER_Initialize();
  5780                           
  5781                           ;incstack = 0
  5782                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5783  0117  228F               	fcall	_PIN_MANAGER_Initialize
  5784                           
  5785                           ;mcc.c: 90: OSCILLATOR_Initialize();
  5786  0118  215F               	fcall	_OSCILLATOR_Initialize
  5787                           
  5788                           ;mcc.c: 91: EUSART1_Initialize();
  5789  0119  2153               	fcall	_EUSART1_Initialize
  5790  011A  0008               	return
  5791  011B                     __end_of_SYSTEM_Initialize:	
  5792                           
  5793                           	psect	text28
  5794  028F                     __ptext28:	
  5795 ;; *************** function _PIN_MANAGER_Initialize *****************
  5796 ;; Defined at:
  5797 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  5798 ;; Parameters:    Size  Location     Type
  5799 ;;		None
  5800 ;; Auto vars:     Size  Location     Type
  5801 ;;  state           1    0[COMMON] unsigned char 
  5802 ;; Return value:  Size  Location     Type
  5803 ;;                  1    wreg      void 
  5804 ;; Registers used:
  5805 ;;		wreg, status,2, status,0
  5806 ;; Tracked objects:
  5807 ;;		On entry : 0/0
  5808 ;;		On exit  : 0/0
  5809 ;;		Unchanged: 0/0
  5810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5811 ;;      Params:         0       0       0       0
  5812 ;;      Locals:         1       0       0       0
  5813 ;;      Temps:          0       0       0       0
  5814 ;;      Totals:         1       0       0       0
  5815 ;;Total ram usage:        1 bytes
  5816 ;; Hardware stack levels used:    1
  5817 ;; This function calls:
  5818 ;;		Nothing
  5819 ;; This function is called by:
  5820 ;;		_SYSTEM_Initialize
  5821 ;; This function uses a non-reentrant model
  5822 ;;
  5823                           
  5824                           
  5825                           ;psect for function _PIN_MANAGER_Initialize
  5826  028F                     _PIN_MANAGER_Initialize:	
  5827                           
  5828                           ;pin_manager.c: 56: LATA = 0x00;
  5829                           
  5830                           ;incstack = 0
  5831                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  5832  028F  0140               	movlb	0	; select bank0
  5833  0290  0198               	clrf	24	;volatile
  5834                           
  5835                           ;pin_manager.c: 57: LATC = 0x00;
  5836  0291  019A               	clrf	26	;volatile
  5837                           
  5838                           ;pin_manager.c: 62: TRISA = 0x03;
  5839  0292  3003               	movlw	3
  5840  0293  0092               	movwf	18	;volatile
  5841                           
  5842                           ;pin_manager.c: 63: TRISC = 0x22;
  5843  0294  3022               	movlw	34
  5844  0295  0094               	movwf	20	;volatile
  5845                           
  5846                           ;pin_manager.c: 68: ANSELC = 0x1D;
  5847  0296  301D               	movlw	29
  5848  0297  017E               	movlb	62	; select bank62
  5849  0298  00CE               	movwf	78	;volatile
  5850                           
  5851                           ;pin_manager.c: 69: ANSELA = 0x37;
  5852  0299  3037               	movlw	55
  5853  029A  00B8               	movwf	56	;volatile
  5854                           
  5855                           ;pin_manager.c: 74: WPUA = 0x00;
  5856  029B  01B9               	clrf	57	;volatile
  5857                           
  5858                           ;pin_manager.c: 75: WPUC = 0x00;
  5859  029C  01CF               	clrf	79	;volatile
  5860                           
  5861                           ;pin_manager.c: 80: ODCONA = 0x00;
  5862  029D  01BA               	clrf	58	;volatile
  5863                           
  5864                           ;pin_manager.c: 81: ODCONC = 0x00;
  5865  029E  01D0               	clrf	80	;volatile
  5866                           
  5867                           ;pin_manager.c: 88: bool state = GIE;
  5868  029F  3000               	movlw	0
  5869  02A0  1B8B               	btfsc	11,7	;volatile
  5870  02A1  3001               	movlw	1
  5871  02A2  00F0               	movwf	PIN_MANAGER_Initialize@state
  5872                           
  5873                           ;pin_manager.c: 89: GIE = 0;
  5874  02A3  138B               	bcf	11,7	;volatile
  5875                           
  5876                           ;pin_manager.c: 90: PPSLOCK = 0x55;
  5877  02A4  3055               	movlw	85
  5878  02A5  017D               	movlb	61	; select bank61
  5879  02A6  008F               	movwf	15	;volatile
  5880                           
  5881                           ;pin_manager.c: 91: PPSLOCK = 0xAA;
  5882  02A7  30AA               	movlw	170
  5883  02A8  008F               	movwf	15	;volatile
  5884                           
  5885                           ;pin_manager.c: 92: PPSLOCKbits.PPSLOCKED = 0x00;
  5886  02A9  100F               	bcf	15,0	;volatile
  5887                           
  5888                           ;pin_manager.c: 94: RX1DTPPSbits.RX1DTPPS = 0x15;
  5889  02AA  084B               	movf	75,w	;volatile
  5890  02AB  39C0               	andlw	-64
  5891  02AC  3815               	iorlw	21
  5892  02AD  00CB               	movwf	75	;volatile
  5893                           
  5894                           ;pin_manager.c: 95: RC4PPS = 0x0F;
  5895  02AE  300F               	movlw	15
  5896  02AF  017E               	movlb	62	; select bank62
  5897  02B0  00A4               	movwf	36	;volatile
  5898                           
  5899                           ;pin_manager.c: 97: PPSLOCK = 0x55;
  5900  02B1  3055               	movlw	85
  5901  02B2  017D               	movlb	61	; select bank61
  5902  02B3  008F               	movwf	15	;volatile
  5903                           
  5904                           ;pin_manager.c: 98: PPSLOCK = 0xAA;
  5905  02B4  30AA               	movlw	170
  5906  02B5  008F               	movwf	15	;volatile
  5907                           
  5908                           ;pin_manager.c: 99: PPSLOCKbits.PPSLOCKED = 0x01;
  5909  02B6  140F               	bsf	15,0	;volatile
  5910                           
  5911                           ;pin_manager.c: 101: GIE = state;
  5912  02B7  1C70               	btfss	PIN_MANAGER_Initialize@state,0
  5913  02B8  2ABB               	goto	u2090
  5914  02B9  178B               	bsf	11,7	;volatile
  5915  02BA  0008               	return
  5916  02BB                     u2090:	
  5917  02BB  138B               	bcf	11,7	;volatile
  5918  02BC  0008               	return
  5919  02BD                     __end_of_PIN_MANAGER_Initialize:	
  5920                           
  5921                           	psect	text29
  5922  015F                     __ptext29:	
  5923 ;; *************** function _OSCILLATOR_Initialize *****************
  5924 ;; Defined at:
  5925 ;;		line 94 in file "mcc_generated_files/mcc.c"
  5926 ;; Parameters:    Size  Location     Type
  5927 ;;		None
  5928 ;; Auto vars:     Size  Location     Type
  5929 ;;		None
  5930 ;; Return value:  Size  Location     Type
  5931 ;;                  1    wreg      void 
  5932 ;; Registers used:
  5933 ;;		wreg, status,2
  5934 ;; Tracked objects:
  5935 ;;		On entry : 0/0
  5936 ;;		On exit  : 0/0
  5937 ;;		Unchanged: 0/0
  5938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5939 ;;      Params:         0       0       0       0
  5940 ;;      Locals:         0       0       0       0
  5941 ;;      Temps:          0       0       0       0
  5942 ;;      Totals:         0       0       0       0
  5943 ;;Total ram usage:        0 bytes
  5944 ;; Hardware stack levels used:    1
  5945 ;; This function calls:
  5946 ;;		Nothing
  5947 ;; This function is called by:
  5948 ;;		_SYSTEM_Initialize
  5949 ;; This function uses a non-reentrant model
  5950 ;;
  5951                           
  5952                           
  5953                           ;psect for function _OSCILLATOR_Initialize
  5954  015F                     _OSCILLATOR_Initialize:	
  5955                           
  5956                           ;mcc.c: 97: OSCCON1 = 0x10;
  5957                           
  5958                           ;incstack = 0
  5959                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5960  015F  3010               	movlw	16
  5961  0160  0151               	movlb	17	; select bank17
  5962  0161  008D               	movwf	13	;volatile
  5963                           
  5964                           ;mcc.c: 99: OSCCON3 = 0x00;
  5965  0162  018F               	clrf	15	;volatile
  5966                           
  5967                           ;mcc.c: 101: OSCEN = 0x00;
  5968  0163  0191               	clrf	17	;volatile
  5969                           
  5970                           ;mcc.c: 103: OSCFRQ = 0x05;
  5971  0164  3005               	movlw	5
  5972  0165  0093               	movwf	19	;volatile
  5973                           
  5974                           ;mcc.c: 105: OSCSTAT = 0x00;
  5975  0166  0190               	clrf	16	;volatile
  5976                           
  5977                           ;mcc.c: 107: OSCTUNE = 0x00;
  5978  0167  0192               	clrf	18	;volatile
  5979  0168                     l60:	
  5980                           ;mcc.c: 110: {
  5981                           
  5982                           ;mcc.c: 109: while(PLLR == 0)
  5983                           
  5984  0168  1810               	btfsc	16,0	;volatile
  5985  0169  0008               	return
  5986  016A  2968               	goto	l60
  5987  016B                     __end_of_OSCILLATOR_Initialize:	
  5988                           
  5989                           	psect	text30
  5990  0153                     __ptext30:	
  5991 ;; *************** function _EUSART1_Initialize *****************
  5992 ;; Defined at:
  5993 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  5994 ;; Parameters:    Size  Location     Type
  5995 ;;		None
  5996 ;; Auto vars:     Size  Location     Type
  5997 ;;		None
  5998 ;; Return value:  Size  Location     Type
  5999 ;;                  1    wreg      void 
  6000 ;; Registers used:
  6001 ;;		wreg
  6002 ;; Tracked objects:
  6003 ;;		On entry : 0/0
  6004 ;;		On exit  : 0/0
  6005 ;;		Unchanged: 0/0
  6006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6007 ;;      Params:         0       0       0       0
  6008 ;;      Locals:         0       0       0       0
  6009 ;;      Temps:          0       0       0       0
  6010 ;;      Totals:         0       0       0       0
  6011 ;;Total ram usage:        0 bytes
  6012 ;; Hardware stack levels used:    1
  6013 ;; This function calls:
  6014 ;;		Nothing
  6015 ;; This function is called by:
  6016 ;;		_SYSTEM_Initialize
  6017 ;; This function uses a non-reentrant model
  6018 ;;
  6019                           
  6020                           
  6021                           ;psect for function _EUSART1_Initialize
  6022  0153                     _EUSART1_Initialize:	
  6023                           
  6024                           ;eusart1.c: 60: BAUD1CON = 0x08;
  6025                           
  6026                           ;incstack = 0
  6027                           ; Regs used in _EUSART1_Initialize: [wreg]
  6028  0153  3008               	movlw	8
  6029  0154  0142               	movlb	2	; select bank2
  6030  0155  009F               	movwf	31	;volatile
  6031                           
  6032                           ;eusart1.c: 63: RC1STA = 0x90;
  6033  0156  3090               	movlw	144
  6034  0157  009D               	movwf	29	;volatile
  6035                           
  6036                           ;eusart1.c: 66: TX1STA = 0x24;
  6037  0158  3024               	movlw	36
  6038  0159  009E               	movwf	30	;volatile
  6039                           
  6040                           ;eusart1.c: 69: SP1BRGL = 0x40;
  6041  015A  3040               	movlw	64
  6042  015B  009B               	movwf	27	;volatile
  6043                           
  6044                           ;eusart1.c: 72: SP1BRGH = 0x03;
  6045  015C  3003               	movlw	3
  6046  015D  009C               	movwf	28	;volatile
  6047  015E  0008               	return
  6048  015F                     __end_of_EUSART1_Initialize:	
  6049                           
  6050                           	psect	text31
  6051  012B                     __ptext31:	
  6052 ;; *************** function _EUSART1_Write *****************
  6053 ;; Defined at:
  6054 ;;		line 96 in file "mcc_generated_files/eusart1.c"
  6055 ;; Parameters:    Size  Location     Type
  6056 ;;  txData          1    wreg     unsigned char 
  6057 ;; Auto vars:     Size  Location     Type
  6058 ;;  txData          1    0[COMMON] unsigned char 
  6059 ;; Return value:  Size  Location     Type
  6060 ;;                  1    wreg      void 
  6061 ;; Registers used:
  6062 ;;		wreg
  6063 ;; Tracked objects:
  6064 ;;		On entry : 0/0
  6065 ;;		On exit  : 0/0
  6066 ;;		Unchanged: 0/0
  6067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6068 ;;      Params:         0       0       0       0
  6069 ;;      Locals:         1       0       0       0
  6070 ;;      Temps:          0       0       0       0
  6071 ;;      Totals:         1       0       0       0
  6072 ;;Total ram usage:        1 bytes
  6073 ;; Hardware stack levels used:    1
  6074 ;; This function calls:
  6075 ;;		Nothing
  6076 ;; This function is called by:
  6077 ;;		_main
  6078 ;; This function uses a non-reentrant model
  6079 ;;
  6080                           
  6081                           
  6082                           ;psect for function _EUSART1_Write
  6083  012B                     _EUSART1_Write:	
  6084                           
  6085                           ;incstack = 0
  6086                           ; Regs used in _EUSART1_Write: [wreg]
  6087                           ;EUSART1_Write@txData stored from wreg
  6088  012B  00F0               	movwf	EUSART1_Write@txData
  6089  012C                     l31:	
  6090                           ;eusart1.c: 99: {
  6091                           
  6092                           ;eusart1.c: 98: while(0 == PIR3bits.TX1IF)
  6093                           
  6094  012C  014E               	movlb	14	; select bank14
  6095  012D  1E0F               	btfss	15,4	;volatile
  6096  012E  292C               	goto	l31
  6097                           
  6098                           ;eusart1.c: 100: }
  6099                           ;eusart1.c: 102: TX1REG = txData;
  6100  012F  0870               	movf	EUSART1_Write@txData,w
  6101  0130  0142               	movlb	2	; select bank2
  6102  0131  009A               	movwf	26	;volatile
  6103  0132  0008               	return
  6104  0133                     __end_of_EUSART1_Write:	
  6105  007E                     btemp	set	126	;btemp
  6106  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        128
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     39      57
    BANK1            80      0      64
    BANK2            80      0      64

Pointer List with Targets:

    cw_write@w_pdata	PTR unsigned char  size(1) Largest target is 1
		 -> cw_por@reset_val(BANK0[1]), cw_init@reg_val(BANK0[1]), cw_update_config_info@reset_val(BANK0[1]), cw_update_config_info@reg_val(BANK0[1]), 

    cw_read_word@r_pdata	PTR unsigned char  size(1) Largest target is 2
		 -> cw_get_vol@reg_val(BANK0[2]), 

    cw_read@r_pdata	PTR unsigned char  size(1) Largest target is 1
		 -> cw_get_capacity@reg_val(BANK0[1]), cw_init@reg_val(BANK0[1]), cw_update_config_info@reg_val(BANK0[1]), 


Critical Paths under _main in COMMON

    _cw_get_vol->_cw_read_word
    _cw_read_word->_wait_r_ack
    _sn_ack->_Delay10us
    ___lldiv->___lmul
    _cw_get_capacity->_cw_read
    _cw_init->_cw_read
    _cw_update_config_info->_cw_read
    _cw_write->_wait_r_ack
    _cw_read->_wait_r_ack
    _write_byte->_Delay10us
    _wait_r_ack->_r_ack
    _stop->_Delay10us
    _r_ack->_Delay10us
    _start->_Delay10us
    _s_ack->_Delay10us
    _read_byte->_Delay10us
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize

Critical Paths under _main in BANK0

    _cw_bat_work->_update_capacity
    _cw_bat_work->_update_vol
    _update_vol->_cw_get_vol
    _cw_get_vol->___lldiv
    _cw_read_word->_wait_r_ack
    _update_capacity->_cw_get_capacity
    _cw_get_capacity->_cw_por
    _cw_por->_cw_init
    _cw_bat_init->_cw_init
    _cw_init->_cw_update_config_info
    _cw_update_config_info->_cw_write
    _cw_write->_wait_r_ack
    _cw_read->_wait_r_ack

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   23653
                                             37 BANK0      2     2      0
                       _CW_Delay10ms
                      _EUSART1_Write
                  _SYSTEM_Initialize
                        _cw_bat_init
                        _cw_bat_work
 ---------------------------------------------------------------------------------
 (1) _cw_bat_work                                          0     0      0   14943
                    _update_capacity
                  _update_usb_online
                         _update_vol
 ---------------------------------------------------------------------------------
 (2) _update_vol                                           2     2      0    2755
                                             35 BANK0      2     2      0
                         _cw_get_vol
 ---------------------------------------------------------------------------------
 (3) _cw_get_vol                                          22    20      2    2659
                                             13 BANK0     22    20      2
                            ___lldiv
                             ___lmul
                       _cw_read_word
 ---------------------------------------------------------------------------------
 (4) _cw_read_word                                         7     4      3    1687
                                             12 COMMON     2     2      0
                                              4 BANK0      5     2      3
                          _read_byte
                              _s_ack
                             _sn_ack
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (5) _sn_ack                                               0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     220
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     290
                                             12 COMMON     1     1      0
                                              0 BANK0     13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _update_usb_online                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _update_capacity                                      3     3      0   12188
                                             34 BANK0      3     3      0
                    _cw_get_capacity
 ---------------------------------------------------------------------------------
 (3) _cw_get_capacity                                      9     7      2   12099
                                             26 BANK0      8     6      2
                             _cw_por
                            _cw_read
 ---------------------------------------------------------------------------------
 (4) _cw_por                                               7     5      2   10119
                                             19 BANK0      7     5      2
                      _CW_Delay100us
                            _cw_init
                           _cw_write
 ---------------------------------------------------------------------------------
 (1) _cw_bat_init                                          3     3      0    8394
                                             19 BANK0      3     3      0
                            _cw_init
 ---------------------------------------------------------------------------------
 (5) _cw_init                                              6     6      0    8325
                                             13 BANK0      6     6      0
                       _CW_Delay10ms
                            _cw_read
              _cw_update_config_info
                           _cw_write
 ---------------------------------------------------------------------------------
 (6) _cw_update_config_info                                6     6      0    4045
                                              7 BANK0      6     6      0
                      _CW_Delay100us
                            _cw_read
                           _cw_write
 ---------------------------------------------------------------------------------
 (5) _cw_write                                             4     1      3    1516
                                             12 COMMON     1     1      0
                                              4 BANK0      3     0      3
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (4) _cw_read                                              4     2      2    1842
                                             12 COMMON     2     2      0
                                              4 BANK0      2     0      2
                          _read_byte
                              _s_ack
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (5) _write_byte                                           3     3      0     229
                                              4 COMMON     3     3      0
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _wait_r_ack                                           6     4      2     391
                                             10 COMMON     2     0      2
                                              0 BANK0      4     4      0
                              _r_ack
                               _stop
 ---------------------------------------------------------------------------------
 (6) _stop                                                 0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (6) _r_ack                                                6     4      2     161
                                              4 COMMON     6     4      2
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _start                                                0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _s_ack                                                0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _read_byte                                            3     3      0     252
                                              4 COMMON     3     3      0
                          _Delay10us
 ---------------------------------------------------------------------------------
 (6) _Delay10us                                            4     4      0     138
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (7) _CW_Delay100us                                        4     4      0     138
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (6) _CW_Delay10ms                                         6     4      2     265
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      23
                 _EUSART1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Write                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CW_Delay10ms
   _EUSART1_Write
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _cw_bat_init
     _cw_init
       _CW_Delay10ms
       _cw_read
         _read_byte
           _Delay10us
         _s_ack
           _Delay10us
         _start
           _Delay10us
         _stop
           _Delay10us
         _wait_r_ack
           _r_ack
             _Delay10us
           _stop
             _Delay10us
         _write_byte
           _Delay10us
       _cw_update_config_info
         _CW_Delay100us
         _cw_read
           _read_byte
             _Delay10us
           _s_ack
             _Delay10us
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us
         _cw_write
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us
       _cw_write
         _start
           _Delay10us
         _stop
           _Delay10us
         _wait_r_ack
           _r_ack
             _Delay10us
           _stop
             _Delay10us
         _write_byte
           _Delay10us
   _cw_bat_work
     _update_capacity
       _cw_get_capacity
         _cw_por
           _CW_Delay100us
           _cw_init
             _CW_Delay10ms
             _cw_read
               _read_byte
                 _Delay10us
               _s_ack
                 _Delay10us
               _start
                 _Delay10us
               _stop
                 _Delay10us
               _wait_r_ack
                 _r_ack
                   _Delay10us
                 _stop
                   _Delay10us
               _write_byte
                 _Delay10us
             _cw_update_config_info
               _CW_Delay100us
               _cw_read
                 _read_byte
                   _Delay10us
                 _s_ack
                   _Delay10us
                 _start
                   _Delay10us
                 _stop
                   _Delay10us
                 _wait_r_ack
                   _r_ack
                     _Delay10us
                   _stop
                     _Delay10us
                 _write_byte
                   _Delay10us
               _cw_write
                 _start
                   _Delay10us
                 _stop
                   _Delay10us
                 _wait_r_ack
                   _r_ack
                     _Delay10us
                   _stop
                     _Delay10us
                 _write_byte
                   _Delay10us
             _cw_write
               _start
                 _Delay10us
               _stop
                 _Delay10us
               _wait_r_ack
                 _r_ack
                   _Delay10us
                 _stop
                   _Delay10us
               _write_byte
                 _Delay10us
           _cw_write
             _start
               _Delay10us
             _stop
               _Delay10us
             _wait_r_ack
               _r_ack
                 _Delay10us
               _stop
                 _Delay10us
             _write_byte
               _Delay10us
         _cw_read
           _read_byte
             _Delay10us
           _s_ack
             _Delay10us
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us
     _update_usb_online
     _update_vol
       _cw_get_vol
         ___lldiv
           ___lmul (ARG)
         ___lmul
         _cw_read_word
           _read_byte
             _Delay10us
           _s_ack
             _Delay10us
           _sn_ack
             _Delay10us
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     27      39       5       71.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      40       7       80.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      40       9       80.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
ABS                  0      0      C7      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      C7      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Mon Aug 28 22:01:26 2017

                    __CFG_CP$OFF 0000                               l31 012C                               l60 0168  
                _update_capacity 024B                      __CFG_LVP$ON 0000                              l126 0457  
                            l136 0459                              l402 0273                              l146 045C  
                            l228 060C                              l156 0460                              l239 075C  
                            l277 069A                              l278 06A6                              l279 06B2  
                            _GIE 005F                     __CFG_BORV$LO 0000                              wreg 0009  
                  __CFG_BBEN$OFF 0000                     __CFG_ZCD$OFF 0000                    ?_cw_read_word 0024  
                  CW_Delay10ms@a 0073                             l2013 07AA                    CW_Delay10ms@b 0074  
                  CW_Delay10ms@c 0070                             l2007 07A5                             l2111 0559  
                           l2025 07C1                             l2033 07CD                             l2201 0444  
                           l2121 0582                             l2105 054B                             l2043 07E2  
                           l2123 055B                             l2133 02C5                             l2125 0588  
                           l2151 04EB                             l2321 01B2                             l2161 0519  
                           l2153 04F9                             l2137 02CF                             l2225 0680  
                           l2217 0668                             l1611 0220                             l1603 0214  
                           l2067 04AE                             l1613 0225                             l2309 013B  
                           l2165 0524                             l2237 06C1                             l1711 0283  
                           l2327 01C1                             l2079 04C5                             l1609 021B  
                           l2089 04D7                             l2193 043E                             l1811 0235  
                           l1651 02FA                             l2195 043F                             l2179 041F  
                           l2099 053D                             l1821 0246                             l1741 0200  
                           l1733 01F4                             l1743 0205                             l1719 028D  
                           l1903 0622                             l1817 023C                             l1665 030F  
                           l1753 035F                             l1841 05AB                             l2393 0464  
                           l1819 0241                             l1739 01FB                             l1667 031B  
                           l1683 01DA                             l1915 0638                             l1835 05A2  
                           l1765 037A                             l1781 032D                             l1925 064B  
                           l1861 05D2                             l1759 036C                             l1847 05B0  
                           l1881 05F3                             l1857 05CA                             l1795 034B  
                           l1787 033A                             l1875 05E9                             l1867 05D7  
                           l1947 0732                             l1939 0721                             l1885 05FB  
                           l1981 0771                             l1975 076C                             l1959 074B  
                           l1989 0783                             l1997 0793                             u1250 01D8  
                           _LATA 0018                             u2135 025C                             _LATC 001A  
                           u2145 0265                             u2065 06A0                             u2090 02BB  
                           u2075 06AC                             u2265 01A9                             u1905 02D7  
                           u1935 04EE                             u1865 057B                             u1955 04FA  
                           u1875 0564                             u1965 050E                             u1975 051A  
                           u1895 02D0                             _PLLR 4480                             _WPUA 1F39  
                           _WPUC 1F4F                    _EUSART1_Write 012B                    __CFG_FCMEN$ON 0000  
                           _main 044D                             fsr0h 0005                             fsr1h 0007  
                           indf0 0000                             fsr0l 0004                             indf1 0001  
                           fsr1l 0006                             btemp 007E                             _stop 016B  
                  __CFG_BOREN$ON 0000                             start 0001                    __CFG_CSWEN$ON 0000  
                 CW_Delay100us@a 0071                   CW_Delay100us@b 0072                   CW_Delay100us@i 0073  
               ?_cw_get_capacity 003A       update_capacity@cw_capacity 0043   __size_of_OSCILLATOR_Initialize 000C  
  __end_of_OSCILLATOR_Initialize 016B            _cw_update_config_info 058E                            ?_main 0070  
                  __CFG_WDTE$OFF 0000                  __end_of___lldiv 052D                            ?_stop 0070  
                          _OSCEN 0891                            _TRISA 0012                            _TRISC 0014  
            ___lmul@multiplicand 0074                    __CFG_WRTB$OFF 0000                    __CFG_WRTC$OFF 0000  
                __end_of_cw_init 07E4                  __end_of_cw_read 0388                   ??_cw_read_word 007C  
                          _r_ack 0183                            _s_ack 013D                            _start 0148  
                 ?_EUSART1_Write 0070                            status 0003                            wtemp0 007E  
                 __CFG_MCLRE$OFF 0000          __end_of_update_capacity 026C                  __initialization 07E4  
     __end_of_EUSART1_Initialize 015F                     __end_of_main 0492               __size_of_Delay10us 0020  
                   __end_of_stop 0177                   __CFG_SAFEN$OFF 0000                   cw_bat_init@ret 0035  
                         ??_main 0045                           ??_stop 0074                           ?_r_ack 0074  
                         ?_s_ack 0070                 cw_read@point_reg 007D                           _CHARGE 0055  
                         _ANSELA 1F38                           _ANSELC 1F4E                           ?_start 0070  
                         _RC1REG 0119                           _RC1STA 011D                           _RC4PPS 1F24  
                         _ODCONA 1F3A                           _ODCONC 1F50                   __CFG_WDTCCS$SC 0000  
                         _OSCFRQ 0893                           _TX1REG 011A                           _TX1STA 011E  
                cw_write@w_pdata 0024                   __CFG_PWRTE$OFF 0000                    cw_get_vol@F83 004D  
           __size_of_cw_bat_init 001B             __size_of_cw_bat_work 0004                           ___lmul 02BD  
                  cw_get_vol@ret 0034                   __CFG_STVREN$ON 0000                        ??___lldiv 007C  
               __end_of_cw_write 0350                           _cw_bat 0047                           _cw_por 0492  
         ?_cw_update_config_info 0070                           _sn_ack 0177                        ??_cw_init 002D  
                      ??_cw_read 007C                    ?_CW_Delay10ms 0070                  ??_EUSART1_Write 0070  
              __end_of_Delay10us 022A                _SYSTEM_Initialize 0117          __end_of__initialization 07FE  
             ?_SYSTEM_Initialize 0070             _no_charger_full_jump 0053                _update_usb_online 0133  
               ?_update_capacity 0070                cw_get_vol@ad_buff 0041                   __pcstackCOMMON 0070  
                   __pidataBANK1 03C8                     __pidataBANK2 0388               ?_update_usb_online 0070  
            ??_SYSTEM_Initialize 0071             __end_of_cw_read_word 058E                    __end_of_r_ack 0199  
                  __end_of_s_ack 0148                    __end_of_start 0153           __size_of_CW_Delay100us 0020  
                 ??_CW_Delay10ms 0072              ??_update_usb_online 0070                cw_get_vol@reg_val 0036  
                cw_bat_init@loop 0034                          ??_r_ack 0076                          ??_s_ack 0074  
      __end_of_SYSTEM_Initialize 011B                          ??_start 0074                       __pbssBANK0 0047  
      __end_of_update_usb_online 013D               __size_of_read_byte 0023                       __pmaintext 044D  
                        ?___lmul 0070                  __CFG_PPS1WAY$ON 0000                          ?_cw_por 0033  
                 ___lmul@product 0078                          ?_sn_ack 0070                          _SP1BRGH 011C  
                        _SP1BRGL 011B                          _OSCCON1 088D                          _OSCCON3 088F  
                        _OSCSTAT 0890                          _OSCTUNE 0892                          _PPSLOCK 1E8F  
                     _cw_get_vol 064D                        ?_cw_write 0024                    _CW_Delay100us 01EA  
           update_vol@cw_voltage 0043                  __size_of___lmul 002F                          ___lldiv 04DA  
                __size_of_cw_por 0048                  __size_of_sn_ack 000C                          __ptext1 011B  
                        __ptext2 0199                          __ptext3 064D                          __ptext4 052D  
                        __ptext5 0177                          __ptext6 02BD                          __ptext7 04DA  
                        __ptext8 0133                          __ptext9 024B                          _cw_init 070E  
                        _cw_read 0350                  __CFG_WRTAPP$OFF 0000            _OSCILLATOR_Initialize 015F  
              __end_of_read_byte 028F               _EUSART1_Initialize 0153         __size_of_cw_get_capacity 0045  
       ??_PIN_MANAGER_Initialize 0070                  __CFG_WRTSAF$OFF 0000       __size_of_SYSTEM_Initialize 0004  
                        clrloop0 0120                          main@ret 0046             end_of_initialization 07FE  
               write_byte@w_data 0075                   ?_CW_Delay100us 0070              ?_EUSART1_Initialize 0070  
                     ??_cw_write 007C                          init_ram 0125                          initloop 0126  
     __size_of_update_usb_online 000A             __end_of_CW_Delay10ms 024B            __size_of_cw_read_word 0061  
                ___lldiv@divisor 0020                  cw_por@reset_val 0037                  ___lldiv@counter 002C  
                     _reset_loop 0057     cw_update_config_info@reg_val 002C          ??_cw_update_config_info 0027  
                    wait_r_ack@i 0022                       _wait_r_ack 02EC             ??_EUSART1_Initialize 0070  
          __CFG_WDTCPS$WDTCPS_31 0000                        _PORTCbits 000E         cw_update_config_info@ret 0029  
                      _TRISCbits 0014                       _update_vol 0199                      ?_cw_get_vol 002D  
            EUSART1_Write@txData 0070                 __CFG_FEXTOSC$OFF 0000                     _cw_read_word 052D  
                      _Delay10us 020A                   cw_init@reg_val 0032                    ??_cw_bat_init 0033  
                  ??_cw_bat_work 007E                       cw_init@ret 0030                   cw_read@r_pdata 0024  
             cw_get_vol@ad_value 003C                   __end_of___lmul 02EC                       _write_byte 01CB  
                 __end_of_cw_por 04DA           ?_OSCILLATOR_Initialize 0070                   __end_of_sn_ack 0183  
            start_initialization 07E4  __size_of_PIN_MANAGER_Initialize 002E                  ??_CW_Delay100us 0070  
          __end_of_EUSART1_Write 0133       cw_get_capacity@cw_capacity 003E                ??_cw_get_capacity 003C  
                     ?_Delay10us 0070                 __CFG_LPBOREN$OFF 0000                         ??___lmul 0078  
            __end_of_cw_bat_init 01CB              __size_of_cw_get_vol 00C1                      ?_wait_r_ack 007A  
            __end_of_cw_bat_work 011F                      __pdataBANK1 00A0                      __pdataBANK2 0120  
                       ??_cw_por 0035                         ??_sn_ack 0074                       read_byte@i 0075  
       __size_of_update_capacity 0021           cw_update_config_info@i 002B           cw_get_capacity@reg_val 0041  
                      ___latbits 0000                    __pcstackBANK0 0020                      ?_update_vol 0070  
          __size_of_CW_Delay10ms 0021        _allow_charger_always_zero 004F                __size_of_cw_write 0032  
         cw_get_vol@ad_value_max 003A           cw_get_vol@ad_value_min 0038              cw_read_word@r_pdata 0024  
         _PIN_MANAGER_Initialize 028F                         ?___lldiv 0020                      ?_write_byte 0070  
          cw_read_word@point_reg 0027                         ?_cw_init 0070                         ?_cw_read 0024  
                       _BAUD1CON 011F                     _CW_Delay10ms 022A             __CFG_RSTOSC$HFINTPLL 0000  
                 __size_of_r_ack 0016                   __size_of_s_ack 000B                        _read_byte 026C  
                 __size_of_start 000B              __size_of_wait_r_ack 0032                      ??_Delay10us 0070  
                       _LATAbits 0018                         _LATCbits 001A                        clear_ram0 011F  
                    _cw_bat_init 01B0                      _cw_bat_work 011B                         _PIR3bits 070F  
              __CFG_BBSIZE$BB512 0000              __size_of_update_vol 0017   __size_of_cw_update_config_info 00BF  
  __end_of_cw_update_config_info 064D                     _RX1DTPPSbits 1ECB                      write_byte@i 0076  
                   ??_cw_get_vol 002F                ??_update_capacity 0042                        cw_por@ret 0038  
              ___lmul@multiplier 0070                       ?_read_byte 0070                cw_write@point_reg 007C  
            __size_of_write_byte 001F                  read_byte@r_data 0076          ??_OSCILLATOR_Initialize 0070  
             __end_of_cw_get_vol 070E                 __size_of___lldiv 0053      __size_of_EUSART1_Initialize 000C  
                _cw_get_capacity 0408                 __size_of_cw_init 00D6                 __size_of_cw_read 0038  
             _cw_bat_config_info 0120               cw_read_word@length 0025                         __ptext10 0408  
                       __ptext11 0492                         __ptext20 0183                         __ptext12 01B0  
                       __ptext21 0148                         __ptext13 070E                         __ptext30 0153  
                       __ptext22 013D                         __ptext14 058E                         __ptext31 012B  
                       __ptext23 026C                         __ptext15 031E                         __ptext24 020A  
                       __ptext16 0350                         __ptext25 01EA                         __ptext17 01CB  
                       __ptext26 022A                         __ptext18 02EC                         __ptext27 0117  
                       __ptext19 016B                         __ptext28 028F                         __ptext29 015F  
                       _cw_write 031E            _allow_no_charger_full 0051               cw_get_capacity@ret 003F  
                  __size_of_main 0045                    __size_of_stop 000C             __CFG_WDTCWS$WDTCWS_7 0000  
                     Delay10us@a 0071                       Delay10us@b 0072                       Delay10us@i 0073  
                     _RC1STAbits 011D                     ??_wait_r_ack 007C                         cw_init@i 002F  
 cw_update_config_info@reset_val 0028      PIN_MANAGER_Initialize@state 0070                         r_ack@ack 0078  
                  wait_r_ack@ack 0020                     ??_update_vol 007E                      ??_read_byte 0074  
          __end_of_CW_Delay100us 020A                cw_read_word@count 0028               __end_of_wait_r_ack 031E  
               ___lldiv@dividend 0024          ?_PIN_MANAGER_Initialize 0070                __CFG_CLKOUTEN$OFF 0000  
                    _PPSLOCKbits 1E8F         CW201x@cw_bat_config_info 00A0                    _if_quickstart 0058  
        __end_of_cw_get_capacity 044D               __end_of_update_vol 01B0           cw_get_vol@get_ad_times 0040  
                   ??_write_byte 0074           __size_of_EUSART1_Write 0008                 ___lldiv@quotient 0028  
 __end_of_PIN_MANAGER_Initialize 02BD               __end_of_write_byte 01EA                     ?_cw_bat_init 0070  
                   ?_cw_bat_work 0070  
