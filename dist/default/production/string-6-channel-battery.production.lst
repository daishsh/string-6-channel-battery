

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Mon Aug 28 19:07:23 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F15323
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	dabs	1,0x7E,2
    47  0000                     
    48                           ; Version 1.43
    49                           ; Generated 25/07/2017 GMT
    50                           ; 
    51                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC16F15323 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     	;# 
    83  0001                     	;# 
    84  0002                     	;# 
    85  0003                     	;# 
    86  0004                     	;# 
    87  0005                     	;# 
    88  0006                     	;# 
    89  0007                     	;# 
    90  0008                     	;# 
    91  0009                     	;# 
    92  000A                     	;# 
    93  000B                     	;# 
    94  000C                     	;# 
    95  000E                     	;# 
    96  0012                     	;# 
    97  0014                     	;# 
    98  0018                     	;# 
    99  001A                     	;# 
   100  009B                     	;# 
   101  009B                     	;# 
   102  009C                     	;# 
   103  009D                     	;# 
   104  009E                     	;# 
   105  009F                     	;# 
   106  0119                     	;# 
   107  0119                     	;# 
   108  0119                     	;# 
   109  011A                     	;# 
   110  011A                     	;# 
   111  011A                     	;# 
   112  011B                     	;# 
   113  011B                     	;# 
   114  011B                     	;# 
   115  011B                     	;# 
   116  011B                     	;# 
   117  011C                     	;# 
   118  011C                     	;# 
   119  011C                     	;# 
   120  011D                     	;# 
   121  011D                     	;# 
   122  011D                     	;# 
   123  011E                     	;# 
   124  011E                     	;# 
   125  011E                     	;# 
   126  011F                     	;# 
   127  011F                     	;# 
   128  011F                     	;# 
   129  011F                     	;# 
   130  011F                     	;# 
   131  018C                     	;# 
   132  018D                     	;# 
   133  018E                     	;# 
   134  018F                     	;# 
   135  0190                     	;# 
   136  0191                     	;# 
   137  0192                     	;# 
   138  020C                     	;# 
   139  020C                     	;# 
   140  020D                     	;# 
   141  020E                     	;# 
   142  020F                     	;# 
   143  020F                     	;# 
   144  0210                     	;# 
   145  0210                     	;# 
   146  0211                     	;# 
   147  0211                     	;# 
   148  028C                     	;# 
   149  028C                     	;# 
   150  028D                     	;# 
   151  028D                     	;# 
   152  028E                     	;# 
   153  028F                     	;# 
   154  0290                     	;# 
   155  0291                     	;# 
   156  030C                     	;# 
   157  030C                     	;# 
   158  030D                     	;# 
   159  030E                     	;# 
   160  030F                     	;# 
   161  0310                     	;# 
   162  0310                     	;# 
   163  0311                     	;# 
   164  0312                     	;# 
   165  0313                     	;# 
   166  0314                     	;# 
   167  0315                     	;# 
   168  0316                     	;# 
   169  0318                     	;# 
   170  0319                     	;# 
   171  031A                     	;# 
   172  031C                     	;# 
   173  031D                     	;# 
   174  031E                     	;# 
   175  038C                     	;# 
   176  038D                     	;# 
   177  038E                     	;# 
   178  058C                     	;# 
   179  058C                     	;# 
   180  058D                     	;# 
   181  058E                     	;# 
   182  058F                     	;# 
   183  058F                     	;# 
   184  0590                     	;# 
   185  0591                     	;# 
   186  0592                     	;# 
   187  0593                     	;# 
   188  059C                     	;# 
   189  059C                     	;# 
   190  059D                     	;# 
   191  059D                     	;# 
   192  059E                     	;# 
   193  059F                     	;# 
   194  060C                     	;# 
   195  060D                     	;# 
   196  060E                     	;# 
   197  060F                     	;# 
   198  0610                     	;# 
   199  0611                     	;# 
   200  0612                     	;# 
   201  0613                     	;# 
   202  0614                     	;# 
   203  070C                     	;# 
   204  070D                     	;# 
   205  070E                     	;# 
   206  070F                     	;# 
   207  0710                     	;# 
   208  0711                     	;# 
   209  0712                     	;# 
   210  0713                     	;# 
   211  0716                     	;# 
   212  0717                     	;# 
   213  0718                     	;# 
   214  0719                     	;# 
   215  071A                     	;# 
   216  071B                     	;# 
   217  071C                     	;# 
   218  071D                     	;# 
   219  0796                     	;# 
   220  0797                     	;# 
   221  0798                     	;# 
   222  0799                     	;# 
   223  079A                     	;# 
   224  079B                     	;# 
   225  080C                     	;# 
   226  080D                     	;# 
   227  080E                     	;# 
   228  080F                     	;# 
   229  0810                     	;# 
   230  0811                     	;# 
   231  0812                     	;# 
   232  0813                     	;# 
   233  0814                     	;# 
   234  081A                     	;# 
   235  081A                     	;# 
   236  081B                     	;# 
   237  081C                     	;# 
   238  081C                     	;# 
   239  081D                     	;# 
   240  081E                     	;# 
   241  081F                     	;# 
   242  088C                     	;# 
   243  088D                     	;# 
   244  088E                     	;# 
   245  088F                     	;# 
   246  0890                     	;# 
   247  0891                     	;# 
   248  0892                     	;# 
   249  0893                     	;# 
   250  0895                     	;# 
   251  0896                     	;# 
   252  090C                     	;# 
   253  090E                     	;# 
   254  090F                     	;# 
   255  091F                     	;# 
   256  098F                     	;# 
   257  098F                     	;# 
   258  0990                     	;# 
   259  0991                     	;# 
   260  0992                     	;# 
   261  0993                     	;# 
   262  0994                     	;# 
   263  0995                     	;# 
   264  0996                     	;# 
   265  0997                     	;# 
   266  1E0F                     	;# 
   267  1E10                     	;# 
   268  1E11                     	;# 
   269  1E12                     	;# 
   270  1E13                     	;# 
   271  1E14                     	;# 
   272  1E15                     	;# 
   273  1E16                     	;# 
   274  1E17                     	;# 
   275  1E18                     	;# 
   276  1E19                     	;# 
   277  1E1A                     	;# 
   278  1E1B                     	;# 
   279  1E1C                     	;# 
   280  1E1D                     	;# 
   281  1E1E                     	;# 
   282  1E1F                     	;# 
   283  1E20                     	;# 
   284  1E21                     	;# 
   285  1E22                     	;# 
   286  1E23                     	;# 
   287  1E24                     	;# 
   288  1E25                     	;# 
   289  1E26                     	;# 
   290  1E27                     	;# 
   291  1E28                     	;# 
   292  1E29                     	;# 
   293  1E2A                     	;# 
   294  1E2B                     	;# 
   295  1E2C                     	;# 
   296  1E2D                     	;# 
   297  1E2E                     	;# 
   298  1E2F                     	;# 
   299  1E30                     	;# 
   300  1E31                     	;# 
   301  1E32                     	;# 
   302  1E33                     	;# 
   303  1E34                     	;# 
   304  1E35                     	;# 
   305  1E36                     	;# 
   306  1E37                     	;# 
   307  1E8F                     	;# 
   308  1E90                     	;# 
   309  1E91                     	;# 
   310  1E92                     	;# 
   311  1E93                     	;# 
   312  1E9C                     	;# 
   313  1EA1                     	;# 
   314  1EA2                     	;# 
   315  1EB1                     	;# 
   316  1EBB                     	;# 
   317  1EBC                     	;# 
   318  1EBD                     	;# 
   319  1EBE                     	;# 
   320  1EC3                     	;# 
   321  1EC5                     	;# 
   322  1EC6                     	;# 
   323  1EC7                     	;# 
   324  1ECB                     	;# 
   325  1ECC                     	;# 
   326  1F10                     	;# 
   327  1F11                     	;# 
   328  1F12                     	;# 
   329  1F13                     	;# 
   330  1F14                     	;# 
   331  1F15                     	;# 
   332  1F20                     	;# 
   333  1F21                     	;# 
   334  1F22                     	;# 
   335  1F23                     	;# 
   336  1F24                     	;# 
   337  1F25                     	;# 
   338  1F38                     	;# 
   339  1F39                     	;# 
   340  1F3A                     	;# 
   341  1F3B                     	;# 
   342  1F3C                     	;# 
   343  1F3D                     	;# 
   344  1F3E                     	;# 
   345  1F3F                     	;# 
   346  1F4E                     	;# 
   347  1F4F                     	;# 
   348  1F50                     	;# 
   349  1F51                     	;# 
   350  1F52                     	;# 
   351  1F53                     	;# 
   352  1F54                     	;# 
   353  1F55                     	;# 
   354  1FE4                     	;# 
   355  1FE5                     	;# 
   356  1FE6                     	;# 
   357  1FE7                     	;# 
   358  1FE8                     	;# 
   359  1FE8                     	;# 
   360  1FE9                     	;# 
   361  1FEA                     	;# 
   362  1FEA                     	;# 
   363  1FEB                     	;# 
   364  1FED                     	;# 
   365  1FEE                     	;# 
   366  1FEF                     	;# 
   367  0000                     	;# 
   368  0001                     	;# 
   369  0002                     	;# 
   370  0003                     	;# 
   371  0004                     	;# 
   372  0005                     	;# 
   373  0006                     	;# 
   374  0007                     	;# 
   375  0008                     	;# 
   376  0009                     	;# 
   377  000A                     	;# 
   378  000B                     	;# 
   379  000C                     	;# 
   380  000E                     	;# 
   381  0012                     	;# 
   382  0014                     	;# 
   383  0018                     	;# 
   384  001A                     	;# 
   385  009B                     	;# 
   386  009B                     	;# 
   387  009C                     	;# 
   388  009D                     	;# 
   389  009E                     	;# 
   390  009F                     	;# 
   391  0119                     	;# 
   392  0119                     	;# 
   393  0119                     	;# 
   394  011A                     	;# 
   395  011A                     	;# 
   396  011A                     	;# 
   397  011B                     	;# 
   398  011B                     	;# 
   399  011B                     	;# 
   400  011B                     	;# 
   401  011B                     	;# 
   402  011C                     	;# 
   403  011C                     	;# 
   404  011C                     	;# 
   405  011D                     	;# 
   406  011D                     	;# 
   407  011D                     	;# 
   408  011E                     	;# 
   409  011E                     	;# 
   410  011E                     	;# 
   411  011F                     	;# 
   412  011F                     	;# 
   413  011F                     	;# 
   414  011F                     	;# 
   415  011F                     	;# 
   416  018C                     	;# 
   417  018D                     	;# 
   418  018E                     	;# 
   419  018F                     	;# 
   420  0190                     	;# 
   421  0191                     	;# 
   422  0192                     	;# 
   423  020C                     	;# 
   424  020C                     	;# 
   425  020D                     	;# 
   426  020E                     	;# 
   427  020F                     	;# 
   428  020F                     	;# 
   429  0210                     	;# 
   430  0210                     	;# 
   431  0211                     	;# 
   432  0211                     	;# 
   433  028C                     	;# 
   434  028C                     	;# 
   435  028D                     	;# 
   436  028D                     	;# 
   437  028E                     	;# 
   438  028F                     	;# 
   439  0290                     	;# 
   440  0291                     	;# 
   441  030C                     	;# 
   442  030C                     	;# 
   443  030D                     	;# 
   444  030E                     	;# 
   445  030F                     	;# 
   446  0310                     	;# 
   447  0310                     	;# 
   448  0311                     	;# 
   449  0312                     	;# 
   450  0313                     	;# 
   451  0314                     	;# 
   452  0315                     	;# 
   453  0316                     	;# 
   454  0318                     	;# 
   455  0319                     	;# 
   456  031A                     	;# 
   457  031C                     	;# 
   458  031D                     	;# 
   459  031E                     	;# 
   460  038C                     	;# 
   461  038D                     	;# 
   462  038E                     	;# 
   463  058C                     	;# 
   464  058C                     	;# 
   465  058D                     	;# 
   466  058E                     	;# 
   467  058F                     	;# 
   468  058F                     	;# 
   469  0590                     	;# 
   470  0591                     	;# 
   471  0592                     	;# 
   472  0593                     	;# 
   473  059C                     	;# 
   474  059C                     	;# 
   475  059D                     	;# 
   476  059D                     	;# 
   477  059E                     	;# 
   478  059F                     	;# 
   479  060C                     	;# 
   480  060D                     	;# 
   481  060E                     	;# 
   482  060F                     	;# 
   483  0610                     	;# 
   484  0611                     	;# 
   485  0612                     	;# 
   486  0613                     	;# 
   487  0614                     	;# 
   488  070C                     	;# 
   489  070D                     	;# 
   490  070E                     	;# 
   491  070F                     	;# 
   492  0710                     	;# 
   493  0711                     	;# 
   494  0712                     	;# 
   495  0713                     	;# 
   496  0716                     	;# 
   497  0717                     	;# 
   498  0718                     	;# 
   499  0719                     	;# 
   500  071A                     	;# 
   501  071B                     	;# 
   502  071C                     	;# 
   503  071D                     	;# 
   504  0796                     	;# 
   505  0797                     	;# 
   506  0798                     	;# 
   507  0799                     	;# 
   508  079A                     	;# 
   509  079B                     	;# 
   510  080C                     	;# 
   511  080D                     	;# 
   512  080E                     	;# 
   513  080F                     	;# 
   514  0810                     	;# 
   515  0811                     	;# 
   516  0812                     	;# 
   517  0813                     	;# 
   518  0814                     	;# 
   519  081A                     	;# 
   520  081A                     	;# 
   521  081B                     	;# 
   522  081C                     	;# 
   523  081C                     	;# 
   524  081D                     	;# 
   525  081E                     	;# 
   526  081F                     	;# 
   527  088C                     	;# 
   528  088D                     	;# 
   529  088E                     	;# 
   530  088F                     	;# 
   531  0890                     	;# 
   532  0891                     	;# 
   533  0892                     	;# 
   534  0893                     	;# 
   535  0895                     	;# 
   536  0896                     	;# 
   537  090C                     	;# 
   538  090E                     	;# 
   539  090F                     	;# 
   540  091F                     	;# 
   541  098F                     	;# 
   542  098F                     	;# 
   543  0990                     	;# 
   544  0991                     	;# 
   545  0992                     	;# 
   546  0993                     	;# 
   547  0994                     	;# 
   548  0995                     	;# 
   549  0996                     	;# 
   550  0997                     	;# 
   551  1E0F                     	;# 
   552  1E10                     	;# 
   553  1E11                     	;# 
   554  1E12                     	;# 
   555  1E13                     	;# 
   556  1E14                     	;# 
   557  1E15                     	;# 
   558  1E16                     	;# 
   559  1E17                     	;# 
   560  1E18                     	;# 
   561  1E19                     	;# 
   562  1E1A                     	;# 
   563  1E1B                     	;# 
   564  1E1C                     	;# 
   565  1E1D                     	;# 
   566  1E1E                     	;# 
   567  1E1F                     	;# 
   568  1E20                     	;# 
   569  1E21                     	;# 
   570  1E22                     	;# 
   571  1E23                     	;# 
   572  1E24                     	;# 
   573  1E25                     	;# 
   574  1E26                     	;# 
   575  1E27                     	;# 
   576  1E28                     	;# 
   577  1E29                     	;# 
   578  1E2A                     	;# 
   579  1E2B                     	;# 
   580  1E2C                     	;# 
   581  1E2D                     	;# 
   582  1E2E                     	;# 
   583  1E2F                     	;# 
   584  1E30                     	;# 
   585  1E31                     	;# 
   586  1E32                     	;# 
   587  1E33                     	;# 
   588  1E34                     	;# 
   589  1E35                     	;# 
   590  1E36                     	;# 
   591  1E37                     	;# 
   592  1E8F                     	;# 
   593  1E90                     	;# 
   594  1E91                     	;# 
   595  1E92                     	;# 
   596  1E93                     	;# 
   597  1E9C                     	;# 
   598  1EA1                     	;# 
   599  1EA2                     	;# 
   600  1EB1                     	;# 
   601  1EBB                     	;# 
   602  1EBC                     	;# 
   603  1EBD                     	;# 
   604  1EBE                     	;# 
   605  1EC3                     	;# 
   606  1EC5                     	;# 
   607  1EC6                     	;# 
   608  1EC7                     	;# 
   609  1ECB                     	;# 
   610  1ECC                     	;# 
   611  1F10                     	;# 
   612  1F11                     	;# 
   613  1F12                     	;# 
   614  1F13                     	;# 
   615  1F14                     	;# 
   616  1F15                     	;# 
   617  1F20                     	;# 
   618  1F21                     	;# 
   619  1F22                     	;# 
   620  1F23                     	;# 
   621  1F24                     	;# 
   622  1F25                     	;# 
   623  1F38                     	;# 
   624  1F39                     	;# 
   625  1F3A                     	;# 
   626  1F3B                     	;# 
   627  1F3C                     	;# 
   628  1F3D                     	;# 
   629  1F3E                     	;# 
   630  1F3F                     	;# 
   631  1F4E                     	;# 
   632  1F4F                     	;# 
   633  1F50                     	;# 
   634  1F51                     	;# 
   635  1F52                     	;# 
   636  1F53                     	;# 
   637  1F54                     	;# 
   638  1F55                     	;# 
   639  1FE4                     	;# 
   640  1FE5                     	;# 
   641  1FE6                     	;# 
   642  1FE7                     	;# 
   643  1FE8                     	;# 
   644  1FE8                     	;# 
   645  1FE9                     	;# 
   646  1FEA                     	;# 
   647  1FEA                     	;# 
   648  1FEB                     	;# 
   649  1FED                     	;# 
   650  1FEE                     	;# 
   651  1FEF                     	;# 
   652  0000                     	;# 
   653  0001                     	;# 
   654  0002                     	;# 
   655  0003                     	;# 
   656  0004                     	;# 
   657  0005                     	;# 
   658  0006                     	;# 
   659  0007                     	;# 
   660  0008                     	;# 
   661  0009                     	;# 
   662  000A                     	;# 
   663  000B                     	;# 
   664  000C                     	;# 
   665  000E                     	;# 
   666  0012                     	;# 
   667  0014                     	;# 
   668  0018                     	;# 
   669  001A                     	;# 
   670  009B                     	;# 
   671  009B                     	;# 
   672  009C                     	;# 
   673  009D                     	;# 
   674  009E                     	;# 
   675  009F                     	;# 
   676  0119                     	;# 
   677  0119                     	;# 
   678  0119                     	;# 
   679  011A                     	;# 
   680  011A                     	;# 
   681  011A                     	;# 
   682  011B                     	;# 
   683  011B                     	;# 
   684  011B                     	;# 
   685  011B                     	;# 
   686  011B                     	;# 
   687  011C                     	;# 
   688  011C                     	;# 
   689  011C                     	;# 
   690  011D                     	;# 
   691  011D                     	;# 
   692  011D                     	;# 
   693  011E                     	;# 
   694  011E                     	;# 
   695  011E                     	;# 
   696  011F                     	;# 
   697  011F                     	;# 
   698  011F                     	;# 
   699  011F                     	;# 
   700  011F                     	;# 
   701  018C                     	;# 
   702  018D                     	;# 
   703  018E                     	;# 
   704  018F                     	;# 
   705  0190                     	;# 
   706  0191                     	;# 
   707  0192                     	;# 
   708  020C                     	;# 
   709  020C                     	;# 
   710  020D                     	;# 
   711  020E                     	;# 
   712  020F                     	;# 
   713  020F                     	;# 
   714  0210                     	;# 
   715  0210                     	;# 
   716  0211                     	;# 
   717  0211                     	;# 
   718  028C                     	;# 
   719  028C                     	;# 
   720  028D                     	;# 
   721  028D                     	;# 
   722  028E                     	;# 
   723  028F                     	;# 
   724  0290                     	;# 
   725  0291                     	;# 
   726  030C                     	;# 
   727  030C                     	;# 
   728  030D                     	;# 
   729  030E                     	;# 
   730  030F                     	;# 
   731  0310                     	;# 
   732  0310                     	;# 
   733  0311                     	;# 
   734  0312                     	;# 
   735  0313                     	;# 
   736  0314                     	;# 
   737  0315                     	;# 
   738  0316                     	;# 
   739  0318                     	;# 
   740  0319                     	;# 
   741  031A                     	;# 
   742  031C                     	;# 
   743  031D                     	;# 
   744  031E                     	;# 
   745  038C                     	;# 
   746  038D                     	;# 
   747  038E                     	;# 
   748  058C                     	;# 
   749  058C                     	;# 
   750  058D                     	;# 
   751  058E                     	;# 
   752  058F                     	;# 
   753  058F                     	;# 
   754  0590                     	;# 
   755  0591                     	;# 
   756  0592                     	;# 
   757  0593                     	;# 
   758  059C                     	;# 
   759  059C                     	;# 
   760  059D                     	;# 
   761  059D                     	;# 
   762  059E                     	;# 
   763  059F                     	;# 
   764  060C                     	;# 
   765  060D                     	;# 
   766  060E                     	;# 
   767  060F                     	;# 
   768  0610                     	;# 
   769  0611                     	;# 
   770  0612                     	;# 
   771  0613                     	;# 
   772  0614                     	;# 
   773  070C                     	;# 
   774  070D                     	;# 
   775  070E                     	;# 
   776  070F                     	;# 
   777  0710                     	;# 
   778  0711                     	;# 
   779  0712                     	;# 
   780  0713                     	;# 
   781  0716                     	;# 
   782  0717                     	;# 
   783  0718                     	;# 
   784  0719                     	;# 
   785  071A                     	;# 
   786  071B                     	;# 
   787  071C                     	;# 
   788  071D                     	;# 
   789  0796                     	;# 
   790  0797                     	;# 
   791  0798                     	;# 
   792  0799                     	;# 
   793  079A                     	;# 
   794  079B                     	;# 
   795  080C                     	;# 
   796  080D                     	;# 
   797  080E                     	;# 
   798  080F                     	;# 
   799  0810                     	;# 
   800  0811                     	;# 
   801  0812                     	;# 
   802  0813                     	;# 
   803  0814                     	;# 
   804  081A                     	;# 
   805  081A                     	;# 
   806  081B                     	;# 
   807  081C                     	;# 
   808  081C                     	;# 
   809  081D                     	;# 
   810  081E                     	;# 
   811  081F                     	;# 
   812  088C                     	;# 
   813  088D                     	;# 
   814  088E                     	;# 
   815  088F                     	;# 
   816  0890                     	;# 
   817  0891                     	;# 
   818  0892                     	;# 
   819  0893                     	;# 
   820  0895                     	;# 
   821  0896                     	;# 
   822  090C                     	;# 
   823  090E                     	;# 
   824  090F                     	;# 
   825  091F                     	;# 
   826  098F                     	;# 
   827  098F                     	;# 
   828  0990                     	;# 
   829  0991                     	;# 
   830  0992                     	;# 
   831  0993                     	;# 
   832  0994                     	;# 
   833  0995                     	;# 
   834  0996                     	;# 
   835  0997                     	;# 
   836  1E0F                     	;# 
   837  1E10                     	;# 
   838  1E11                     	;# 
   839  1E12                     	;# 
   840  1E13                     	;# 
   841  1E14                     	;# 
   842  1E15                     	;# 
   843  1E16                     	;# 
   844  1E17                     	;# 
   845  1E18                     	;# 
   846  1E19                     	;# 
   847  1E1A                     	;# 
   848  1E1B                     	;# 
   849  1E1C                     	;# 
   850  1E1D                     	;# 
   851  1E1E                     	;# 
   852  1E1F                     	;# 
   853  1E20                     	;# 
   854  1E21                     	;# 
   855  1E22                     	;# 
   856  1E23                     	;# 
   857  1E24                     	;# 
   858  1E25                     	;# 
   859  1E26                     	;# 
   860  1E27                     	;# 
   861  1E28                     	;# 
   862  1E29                     	;# 
   863  1E2A                     	;# 
   864  1E2B                     	;# 
   865  1E2C                     	;# 
   866  1E2D                     	;# 
   867  1E2E                     	;# 
   868  1E2F                     	;# 
   869  1E30                     	;# 
   870  1E31                     	;# 
   871  1E32                     	;# 
   872  1E33                     	;# 
   873  1E34                     	;# 
   874  1E35                     	;# 
   875  1E36                     	;# 
   876  1E37                     	;# 
   877  1E8F                     	;# 
   878  1E90                     	;# 
   879  1E91                     	;# 
   880  1E92                     	;# 
   881  1E93                     	;# 
   882  1E9C                     	;# 
   883  1EA1                     	;# 
   884  1EA2                     	;# 
   885  1EB1                     	;# 
   886  1EBB                     	;# 
   887  1EBC                     	;# 
   888  1EBD                     	;# 
   889  1EBE                     	;# 
   890  1EC3                     	;# 
   891  1EC5                     	;# 
   892  1EC6                     	;# 
   893  1EC7                     	;# 
   894  1ECB                     	;# 
   895  1ECC                     	;# 
   896  1F10                     	;# 
   897  1F11                     	;# 
   898  1F12                     	;# 
   899  1F13                     	;# 
   900  1F14                     	;# 
   901  1F15                     	;# 
   902  1F20                     	;# 
   903  1F21                     	;# 
   904  1F22                     	;# 
   905  1F23                     	;# 
   906  1F24                     	;# 
   907  1F25                     	;# 
   908  1F38                     	;# 
   909  1F39                     	;# 
   910  1F3A                     	;# 
   911  1F3B                     	;# 
   912  1F3C                     	;# 
   913  1F3D                     	;# 
   914  1F3E                     	;# 
   915  1F3F                     	;# 
   916  1F4E                     	;# 
   917  1F4F                     	;# 
   918  1F50                     	;# 
   919  1F51                     	;# 
   920  1F52                     	;# 
   921  1F53                     	;# 
   922  1F54                     	;# 
   923  1F55                     	;# 
   924  1FE4                     	;# 
   925  1FE5                     	;# 
   926  1FE6                     	;# 
   927  1FE7                     	;# 
   928  1FE8                     	;# 
   929  1FE8                     	;# 
   930  1FE9                     	;# 
   931  1FEA                     	;# 
   932  1FEA                     	;# 
   933  1FEB                     	;# 
   934  1FED                     	;# 
   935  1FEE                     	;# 
   936  1FEF                     	;# 
   937  0000                     	;# 
   938  0001                     	;# 
   939  0002                     	;# 
   940  0003                     	;# 
   941  0004                     	;# 
   942  0005                     	;# 
   943  0006                     	;# 
   944  0007                     	;# 
   945  0008                     	;# 
   946  0009                     	;# 
   947  000A                     	;# 
   948  000B                     	;# 
   949  000C                     	;# 
   950  000E                     	;# 
   951  0012                     	;# 
   952  0014                     	;# 
   953  0018                     	;# 
   954  001A                     	;# 
   955  009B                     	;# 
   956  009B                     	;# 
   957  009C                     	;# 
   958  009D                     	;# 
   959  009E                     	;# 
   960  009F                     	;# 
   961  0119                     	;# 
   962  0119                     	;# 
   963  0119                     	;# 
   964  011A                     	;# 
   965  011A                     	;# 
   966  011A                     	;# 
   967  011B                     	;# 
   968  011B                     	;# 
   969  011B                     	;# 
   970  011B                     	;# 
   971  011B                     	;# 
   972  011C                     	;# 
   973  011C                     	;# 
   974  011C                     	;# 
   975  011D                     	;# 
   976  011D                     	;# 
   977  011D                     	;# 
   978  011E                     	;# 
   979  011E                     	;# 
   980  011E                     	;# 
   981  011F                     	;# 
   982  011F                     	;# 
   983  011F                     	;# 
   984  011F                     	;# 
   985  011F                     	;# 
   986  018C                     	;# 
   987  018D                     	;# 
   988  018E                     	;# 
   989  018F                     	;# 
   990  0190                     	;# 
   991  0191                     	;# 
   992  0192                     	;# 
   993  020C                     	;# 
   994  020C                     	;# 
   995  020D                     	;# 
   996  020E                     	;# 
   997  020F                     	;# 
   998  020F                     	;# 
   999  0210                     	;# 
  1000  0210                     	;# 
  1001  0211                     	;# 
  1002  0211                     	;# 
  1003  028C                     	;# 
  1004  028C                     	;# 
  1005  028D                     	;# 
  1006  028D                     	;# 
  1007  028E                     	;# 
  1008  028F                     	;# 
  1009  0290                     	;# 
  1010  0291                     	;# 
  1011  030C                     	;# 
  1012  030C                     	;# 
  1013  030D                     	;# 
  1014  030E                     	;# 
  1015  030F                     	;# 
  1016  0310                     	;# 
  1017  0310                     	;# 
  1018  0311                     	;# 
  1019  0312                     	;# 
  1020  0313                     	;# 
  1021  0314                     	;# 
  1022  0315                     	;# 
  1023  0316                     	;# 
  1024  0318                     	;# 
  1025  0319                     	;# 
  1026  031A                     	;# 
  1027  031C                     	;# 
  1028  031D                     	;# 
  1029  031E                     	;# 
  1030  038C                     	;# 
  1031  038D                     	;# 
  1032  038E                     	;# 
  1033  058C                     	;# 
  1034  058C                     	;# 
  1035  058D                     	;# 
  1036  058E                     	;# 
  1037  058F                     	;# 
  1038  058F                     	;# 
  1039  0590                     	;# 
  1040  0591                     	;# 
  1041  0592                     	;# 
  1042  0593                     	;# 
  1043  059C                     	;# 
  1044  059C                     	;# 
  1045  059D                     	;# 
  1046  059D                     	;# 
  1047  059E                     	;# 
  1048  059F                     	;# 
  1049  060C                     	;# 
  1050  060D                     	;# 
  1051  060E                     	;# 
  1052  060F                     	;# 
  1053  0610                     	;# 
  1054  0611                     	;# 
  1055  0612                     	;# 
  1056  0613                     	;# 
  1057  0614                     	;# 
  1058  070C                     	;# 
  1059  070D                     	;# 
  1060  070E                     	;# 
  1061  070F                     	;# 
  1062  0710                     	;# 
  1063  0711                     	;# 
  1064  0712                     	;# 
  1065  0713                     	;# 
  1066  0716                     	;# 
  1067  0717                     	;# 
  1068  0718                     	;# 
  1069  0719                     	;# 
  1070  071A                     	;# 
  1071  071B                     	;# 
  1072  071C                     	;# 
  1073  071D                     	;# 
  1074  0796                     	;# 
  1075  0797                     	;# 
  1076  0798                     	;# 
  1077  0799                     	;# 
  1078  079A                     	;# 
  1079  079B                     	;# 
  1080  080C                     	;# 
  1081  080D                     	;# 
  1082  080E                     	;# 
  1083  080F                     	;# 
  1084  0810                     	;# 
  1085  0811                     	;# 
  1086  0812                     	;# 
  1087  0813                     	;# 
  1088  0814                     	;# 
  1089  081A                     	;# 
  1090  081A                     	;# 
  1091  081B                     	;# 
  1092  081C                     	;# 
  1093  081C                     	;# 
  1094  081D                     	;# 
  1095  081E                     	;# 
  1096  081F                     	;# 
  1097  088C                     	;# 
  1098  088D                     	;# 
  1099  088E                     	;# 
  1100  088F                     	;# 
  1101  0890                     	;# 
  1102  0891                     	;# 
  1103  0892                     	;# 
  1104  0893                     	;# 
  1105  0895                     	;# 
  1106  0896                     	;# 
  1107  090C                     	;# 
  1108  090E                     	;# 
  1109  090F                     	;# 
  1110  091F                     	;# 
  1111  098F                     	;# 
  1112  098F                     	;# 
  1113  0990                     	;# 
  1114  0991                     	;# 
  1115  0992                     	;# 
  1116  0993                     	;# 
  1117  0994                     	;# 
  1118  0995                     	;# 
  1119  0996                     	;# 
  1120  0997                     	;# 
  1121  1E0F                     	;# 
  1122  1E10                     	;# 
  1123  1E11                     	;# 
  1124  1E12                     	;# 
  1125  1E13                     	;# 
  1126  1E14                     	;# 
  1127  1E15                     	;# 
  1128  1E16                     	;# 
  1129  1E17                     	;# 
  1130  1E18                     	;# 
  1131  1E19                     	;# 
  1132  1E1A                     	;# 
  1133  1E1B                     	;# 
  1134  1E1C                     	;# 
  1135  1E1D                     	;# 
  1136  1E1E                     	;# 
  1137  1E1F                     	;# 
  1138  1E20                     	;# 
  1139  1E21                     	;# 
  1140  1E22                     	;# 
  1141  1E23                     	;# 
  1142  1E24                     	;# 
  1143  1E25                     	;# 
  1144  1E26                     	;# 
  1145  1E27                     	;# 
  1146  1E28                     	;# 
  1147  1E29                     	;# 
  1148  1E2A                     	;# 
  1149  1E2B                     	;# 
  1150  1E2C                     	;# 
  1151  1E2D                     	;# 
  1152  1E2E                     	;# 
  1153  1E2F                     	;# 
  1154  1E30                     	;# 
  1155  1E31                     	;# 
  1156  1E32                     	;# 
  1157  1E33                     	;# 
  1158  1E34                     	;# 
  1159  1E35                     	;# 
  1160  1E36                     	;# 
  1161  1E37                     	;# 
  1162  1E8F                     	;# 
  1163  1E90                     	;# 
  1164  1E91                     	;# 
  1165  1E92                     	;# 
  1166  1E93                     	;# 
  1167  1E9C                     	;# 
  1168  1EA1                     	;# 
  1169  1EA2                     	;# 
  1170  1EB1                     	;# 
  1171  1EBB                     	;# 
  1172  1EBC                     	;# 
  1173  1EBD                     	;# 
  1174  1EBE                     	;# 
  1175  1EC3                     	;# 
  1176  1EC5                     	;# 
  1177  1EC6                     	;# 
  1178  1EC7                     	;# 
  1179  1ECB                     	;# 
  1180  1ECC                     	;# 
  1181  1F10                     	;# 
  1182  1F11                     	;# 
  1183  1F12                     	;# 
  1184  1F13                     	;# 
  1185  1F14                     	;# 
  1186  1F15                     	;# 
  1187  1F20                     	;# 
  1188  1F21                     	;# 
  1189  1F22                     	;# 
  1190  1F23                     	;# 
  1191  1F24                     	;# 
  1192  1F25                     	;# 
  1193  1F38                     	;# 
  1194  1F39                     	;# 
  1195  1F3A                     	;# 
  1196  1F3B                     	;# 
  1197  1F3C                     	;# 
  1198  1F3D                     	;# 
  1199  1F3E                     	;# 
  1200  1F3F                     	;# 
  1201  1F4E                     	;# 
  1202  1F4F                     	;# 
  1203  1F50                     	;# 
  1204  1F51                     	;# 
  1205  1F52                     	;# 
  1206  1F53                     	;# 
  1207  1F54                     	;# 
  1208  1F55                     	;# 
  1209  1FE4                     	;# 
  1210  1FE5                     	;# 
  1211  1FE6                     	;# 
  1212  1FE7                     	;# 
  1213  1FE8                     	;# 
  1214  1FE8                     	;# 
  1215  1FE9                     	;# 
  1216  1FEA                     	;# 
  1217  1FEA                     	;# 
  1218  1FEB                     	;# 
  1219  1FED                     	;# 
  1220  1FEE                     	;# 
  1221  1FEF                     	;# 
  1222  0000                     	;# 
  1223  0001                     	;# 
  1224  0002                     	;# 
  1225  0003                     	;# 
  1226  0004                     	;# 
  1227  0005                     	;# 
  1228  0006                     	;# 
  1229  0007                     	;# 
  1230  0008                     	;# 
  1231  0009                     	;# 
  1232  000A                     	;# 
  1233  000B                     	;# 
  1234  000C                     	;# 
  1235  000E                     	;# 
  1236  0012                     	;# 
  1237  0014                     	;# 
  1238  0018                     	;# 
  1239  001A                     	;# 
  1240  009B                     	;# 
  1241  009B                     	;# 
  1242  009C                     	;# 
  1243  009D                     	;# 
  1244  009E                     	;# 
  1245  009F                     	;# 
  1246  0119                     	;# 
  1247  0119                     	;# 
  1248  0119                     	;# 
  1249  011A                     	;# 
  1250  011A                     	;# 
  1251  011A                     	;# 
  1252  011B                     	;# 
  1253  011B                     	;# 
  1254  011B                     	;# 
  1255  011B                     	;# 
  1256  011B                     	;# 
  1257  011C                     	;# 
  1258  011C                     	;# 
  1259  011C                     	;# 
  1260  011D                     	;# 
  1261  011D                     	;# 
  1262  011D                     	;# 
  1263  011E                     	;# 
  1264  011E                     	;# 
  1265  011E                     	;# 
  1266  011F                     	;# 
  1267  011F                     	;# 
  1268  011F                     	;# 
  1269  011F                     	;# 
  1270  011F                     	;# 
  1271  018C                     	;# 
  1272  018D                     	;# 
  1273  018E                     	;# 
  1274  018F                     	;# 
  1275  0190                     	;# 
  1276  0191                     	;# 
  1277  0192                     	;# 
  1278  020C                     	;# 
  1279  020C                     	;# 
  1280  020D                     	;# 
  1281  020E                     	;# 
  1282  020F                     	;# 
  1283  020F                     	;# 
  1284  0210                     	;# 
  1285  0210                     	;# 
  1286  0211                     	;# 
  1287  0211                     	;# 
  1288  028C                     	;# 
  1289  028C                     	;# 
  1290  028D                     	;# 
  1291  028D                     	;# 
  1292  028E                     	;# 
  1293  028F                     	;# 
  1294  0290                     	;# 
  1295  0291                     	;# 
  1296  030C                     	;# 
  1297  030C                     	;# 
  1298  030D                     	;# 
  1299  030E                     	;# 
  1300  030F                     	;# 
  1301  0310                     	;# 
  1302  0310                     	;# 
  1303  0311                     	;# 
  1304  0312                     	;# 
  1305  0313                     	;# 
  1306  0314                     	;# 
  1307  0315                     	;# 
  1308  0316                     	;# 
  1309  0318                     	;# 
  1310  0319                     	;# 
  1311  031A                     	;# 
  1312  031C                     	;# 
  1313  031D                     	;# 
  1314  031E                     	;# 
  1315  038C                     	;# 
  1316  038D                     	;# 
  1317  038E                     	;# 
  1318  058C                     	;# 
  1319  058C                     	;# 
  1320  058D                     	;# 
  1321  058E                     	;# 
  1322  058F                     	;# 
  1323  058F                     	;# 
  1324  0590                     	;# 
  1325  0591                     	;# 
  1326  0592                     	;# 
  1327  0593                     	;# 
  1328  059C                     	;# 
  1329  059C                     	;# 
  1330  059D                     	;# 
  1331  059D                     	;# 
  1332  059E                     	;# 
  1333  059F                     	;# 
  1334  060C                     	;# 
  1335  060D                     	;# 
  1336  060E                     	;# 
  1337  060F                     	;# 
  1338  0610                     	;# 
  1339  0611                     	;# 
  1340  0612                     	;# 
  1341  0613                     	;# 
  1342  0614                     	;# 
  1343  070C                     	;# 
  1344  070D                     	;# 
  1345  070E                     	;# 
  1346  070F                     	;# 
  1347  0710                     	;# 
  1348  0711                     	;# 
  1349  0712                     	;# 
  1350  0713                     	;# 
  1351  0716                     	;# 
  1352  0717                     	;# 
  1353  0718                     	;# 
  1354  0719                     	;# 
  1355  071A                     	;# 
  1356  071B                     	;# 
  1357  071C                     	;# 
  1358  071D                     	;# 
  1359  0796                     	;# 
  1360  0797                     	;# 
  1361  0798                     	;# 
  1362  0799                     	;# 
  1363  079A                     	;# 
  1364  079B                     	;# 
  1365  080C                     	;# 
  1366  080D                     	;# 
  1367  080E                     	;# 
  1368  080F                     	;# 
  1369  0810                     	;# 
  1370  0811                     	;# 
  1371  0812                     	;# 
  1372  0813                     	;# 
  1373  0814                     	;# 
  1374  081A                     	;# 
  1375  081A                     	;# 
  1376  081B                     	;# 
  1377  081C                     	;# 
  1378  081C                     	;# 
  1379  081D                     	;# 
  1380  081E                     	;# 
  1381  081F                     	;# 
  1382  088C                     	;# 
  1383  088D                     	;# 
  1384  088E                     	;# 
  1385  088F                     	;# 
  1386  0890                     	;# 
  1387  0891                     	;# 
  1388  0892                     	;# 
  1389  0893                     	;# 
  1390  0895                     	;# 
  1391  0896                     	;# 
  1392  090C                     	;# 
  1393  090E                     	;# 
  1394  090F                     	;# 
  1395  091F                     	;# 
  1396  098F                     	;# 
  1397  098F                     	;# 
  1398  0990                     	;# 
  1399  0991                     	;# 
  1400  0992                     	;# 
  1401  0993                     	;# 
  1402  0994                     	;# 
  1403  0995                     	;# 
  1404  0996                     	;# 
  1405  0997                     	;# 
  1406  1E0F                     	;# 
  1407  1E10                     	;# 
  1408  1E11                     	;# 
  1409  1E12                     	;# 
  1410  1E13                     	;# 
  1411  1E14                     	;# 
  1412  1E15                     	;# 
  1413  1E16                     	;# 
  1414  1E17                     	;# 
  1415  1E18                     	;# 
  1416  1E19                     	;# 
  1417  1E1A                     	;# 
  1418  1E1B                     	;# 
  1419  1E1C                     	;# 
  1420  1E1D                     	;# 
  1421  1E1E                     	;# 
  1422  1E1F                     	;# 
  1423  1E20                     	;# 
  1424  1E21                     	;# 
  1425  1E22                     	;# 
  1426  1E23                     	;# 
  1427  1E24                     	;# 
  1428  1E25                     	;# 
  1429  1E26                     	;# 
  1430  1E27                     	;# 
  1431  1E28                     	;# 
  1432  1E29                     	;# 
  1433  1E2A                     	;# 
  1434  1E2B                     	;# 
  1435  1E2C                     	;# 
  1436  1E2D                     	;# 
  1437  1E2E                     	;# 
  1438  1E2F                     	;# 
  1439  1E30                     	;# 
  1440  1E31                     	;# 
  1441  1E32                     	;# 
  1442  1E33                     	;# 
  1443  1E34                     	;# 
  1444  1E35                     	;# 
  1445  1E36                     	;# 
  1446  1E37                     	;# 
  1447  1E8F                     	;# 
  1448  1E90                     	;# 
  1449  1E91                     	;# 
  1450  1E92                     	;# 
  1451  1E93                     	;# 
  1452  1E9C                     	;# 
  1453  1EA1                     	;# 
  1454  1EA2                     	;# 
  1455  1EB1                     	;# 
  1456  1EBB                     	;# 
  1457  1EBC                     	;# 
  1458  1EBD                     	;# 
  1459  1EBE                     	;# 
  1460  1EC3                     	;# 
  1461  1EC5                     	;# 
  1462  1EC6                     	;# 
  1463  1EC7                     	;# 
  1464  1ECB                     	;# 
  1465  1ECC                     	;# 
  1466  1F10                     	;# 
  1467  1F11                     	;# 
  1468  1F12                     	;# 
  1469  1F13                     	;# 
  1470  1F14                     	;# 
  1471  1F15                     	;# 
  1472  1F20                     	;# 
  1473  1F21                     	;# 
  1474  1F22                     	;# 
  1475  1F23                     	;# 
  1476  1F24                     	;# 
  1477  1F25                     	;# 
  1478  1F38                     	;# 
  1479  1F39                     	;# 
  1480  1F3A                     	;# 
  1481  1F3B                     	;# 
  1482  1F3C                     	;# 
  1483  1F3D                     	;# 
  1484  1F3E                     	;# 
  1485  1F3F                     	;# 
  1486  1F4E                     	;# 
  1487  1F4F                     	;# 
  1488  1F50                     	;# 
  1489  1F51                     	;# 
  1490  1F52                     	;# 
  1491  1F53                     	;# 
  1492  1F54                     	;# 
  1493  1F55                     	;# 
  1494  1FE4                     	;# 
  1495  1FE5                     	;# 
  1496  1FE6                     	;# 
  1497  1FE7                     	;# 
  1498  1FE8                     	;# 
  1499  1FE8                     	;# 
  1500  1FE9                     	;# 
  1501  1FEA                     	;# 
  1502  1FEA                     	;# 
  1503  1FEB                     	;# 
  1504  1FED                     	;# 
  1505  1FEE                     	;# 
  1506  1FEF                     	;# 
  1507                           
  1508                           	psect	idataBANK1
  1509  02D8                     __pidataBANK1:	
  1510                           
  1511                           ;initializer for CW201x@cw_bat_config_info
  1512  02D8  3414               	retlw	20
  1513  02D9  34A6               	retlw	166
  1514  02DA  3470               	retlw	112
  1515  02DB  346C               	retlw	108
  1516  02DC  346C               	retlw	108
  1517  02DD  3467               	retlw	103
  1518  02DE  3464               	retlw	100
  1519  02DF  3462               	retlw	98
  1520  02E0  3460               	retlw	96
  1521  02E1  345C               	retlw	92
  1522  02E2  3459               	retlw	89
  1523  02E3  344E               	retlw	78
  1524  02E4  3450               	retlw	80
  1525  02E5  3442               	retlw	66
  1526  02E6  342E               	retlw	46
  1527  02E7  3426               	retlw	38
  1528  02E8  3425               	retlw	37
  1529  02E9  3424               	retlw	36
  1530  02EA  3427               	retlw	39
  1531  02EB  342E               	retlw	46
  1532  02EC  3441               	retlw	65
  1533  02ED  345A               	retlw	90
  1534  02EE  346D               	retlw	109
  1535  02EF  344C               	retlw	76
  1536  02F0  3439               	retlw	57
  1537  02F1  34D7               	retlw	215
  1538  02F2  3406               	retlw	6
  1539  02F3  3466               	retlw	102
  1540  02F4  3400               	retlw	0
  1541  02F5  3401               	retlw	1
  1542  02F6  3405               	retlw	5
  1543  02F7  3434               	retlw	52
  1544  02F8  3461               	retlw	97
  1545  02F9  3476               	retlw	118
  1546  02FA  3479               	retlw	121
  1547  02FB  347D               	retlw	125
  1548  02FC  3442               	retlw	66
  1549  02FD  341E               	retlw	30
  1550  02FE  34A4               	retlw	164
  1551  02FF  3400               	retlw	0
  1552  0300  3427               	retlw	39
  1553  0301  345A               	retlw	90
  1554  0302  3452               	retlw	82
  1555  0303  3487               	retlw	135
  1556  0304  348F               	retlw	143
  1557  0305  3491               	retlw	145
  1558  0306  3494               	retlw	148
  1559  0307  3452               	retlw	82
  1560  0308  3482               	retlw	130
  1561  0309  348C               	retlw	140
  1562  030A  3492               	retlw	146
  1563  030B  3496               	retlw	150
  1564  030C  342B               	retlw	43
  1565  030D  3459               	retlw	89
  1566  030E  346E               	retlw	110
  1567  030F  34CB               	retlw	203
  1568  0310  342F               	retlw	47
  1569  0311  347D               	retlw	125
  1570  0312  3472               	retlw	114
  1571  0313  34A5               	retlw	165
  1572  0314  34B5               	retlw	181
  1573  0315  34C1               	retlw	193
  1574  0316  3494               	retlw	148
  1575  0317  3499               	retlw	153
  1576                           
  1577                           	psect	idataBANK2
  1578  0298                     __pidataBANK2:	
  1579                           ;initializer for _cw_bat_config_info
  1580                           
  1581  0298  3414               	retlw	20
  1582  0299  34A6               	retlw	166
  1583  029A  3470               	retlw	112
  1584  029B  346C               	retlw	108
  1585  029C  346C               	retlw	108
  1586  029D  3467               	retlw	103
  1587  029E  3464               	retlw	100
  1588  029F  3462               	retlw	98
  1589  02A0  3460               	retlw	96
  1590  02A1  345C               	retlw	92
  1591  02A2  3459               	retlw	89
  1592  02A3  344E               	retlw	78
  1593  02A4  3450               	retlw	80
  1594  02A5  3442               	retlw	66
  1595  02A6  342E               	retlw	46
  1596  02A7  3426               	retlw	38
  1597  02A8  3425               	retlw	37
  1598  02A9  3424               	retlw	36
  1599  02AA  3427               	retlw	39
  1600  02AB  342E               	retlw	46
  1601  02AC  3441               	retlw	65
  1602  02AD  345A               	retlw	90
  1603  02AE  346D               	retlw	109
  1604  02AF  344C               	retlw	76
  1605  02B0  3439               	retlw	57
  1606  02B1  34D7               	retlw	215
  1607  02B2  3406               	retlw	6
  1608  02B3  3466               	retlw	102
  1609  02B4  3400               	retlw	0
  1610  02B5  3401               	retlw	1
  1611  02B6  3405               	retlw	5
  1612  02B7  3434               	retlw	52
  1613  02B8  3461               	retlw	97
  1614  02B9  3476               	retlw	118
  1615  02BA  3479               	retlw	121
  1616  02BB  347D               	retlw	125
  1617  02BC  3442               	retlw	66
  1618  02BD  341E               	retlw	30
  1619  02BE  34A4               	retlw	164
  1620  02BF  3400               	retlw	0
  1621  02C0  3427               	retlw	39
  1622  02C1  345A               	retlw	90
  1623  02C2  3452               	retlw	82
  1624  02C3  3487               	retlw	135
  1625  02C4  348F               	retlw	143
  1626  02C5  3491               	retlw	145
  1627  02C6  3494               	retlw	148
  1628  02C7  3452               	retlw	82
  1629  02C8  3482               	retlw	130
  1630  02C9  348C               	retlw	140
  1631  02CA  3492               	retlw	146
  1632  02CB  3496               	retlw	150
  1633  02CC  342B               	retlw	43
  1634  02CD  3459               	retlw	89
  1635  02CE  346E               	retlw	110
  1636  02CF  34CB               	retlw	203
  1637  02D0  342F               	retlw	47
  1638  02D1  347D               	retlw	125
  1639  02D2  3472               	retlw	114
  1640  02D3  34A5               	retlw	165
  1641  02D4  34B5               	retlw	181
  1642  02D5  34C1               	retlw	193
  1643  02D6  3494               	retlw	148
  1644  02D7  3499               	retlw	153
  1645  000E                     _PORTCbits	set	14
  1646  0014                     _TRISCbits	set	20
  1647  0018                     _LATAbits	set	24
  1648  001A                     _LATCbits	set	26
  1649  0014                     _TRISC	set	20
  1650  0012                     _TRISA	set	18
  1651  001A                     _LATC	set	26
  1652  0018                     _LATA	set	24
  1653  005F                     _GIE	set	95
  1654  011A                     _TX1REG	set	282
  1655  0119                     _RC1REG	set	281
  1656  011D                     _RC1STAbits	set	285
  1657  011C                     _SP1BRGH	set	284
  1658  011B                     _SP1BRGL	set	283
  1659  011E                     _TX1STA	set	286
  1660  011D                     _RC1STA	set	285
  1661  011F                     _BAUD1CON	set	287
  1662  070F                     _PIR3bits	set	1807
  1663  0892                     _OSCTUNE	set	2194
  1664  0890                     _OSCSTAT	set	2192
  1665  0893                     _OSCFRQ	set	2195
  1666  0891                     _OSCEN	set	2193
  1667  088F                     _OSCCON3	set	2191
  1668  088D                     _OSCCON1	set	2189
  1669  4480                     _PLLR	set	17536
  1670  1ECB                     _RX1DTPPSbits	set	7883
  1671  1E8F                     _PPSLOCKbits	set	7823
  1672  1E8F                     _PPSLOCK	set	7823
  1673  1F24                     _RC4PPS	set	7972
  1674  1F50                     _ODCONC	set	8016
  1675  1F3A                     _ODCONA	set	7994
  1676  1F4F                     _WPUC	set	8015
  1677  1F39                     _WPUA	set	7993
  1678  1F38                     _ANSELA	set	7992
  1679  1F4E                     _ANSELC	set	8014
  1680                           
  1681                           ; #config settings
  1682  0000                     
  1683                           	psect	cinit
  1684  07E4                     start_initialization:	
  1685  07E4                     __initialization:	
  1686                           
  1687                           ; Initialize objects allocated to BANK1
  1688  07E4  30D8               	movlw	low __pidataBANK1
  1689  07E5  0084               	movwf	4
  1690  07E6  3082               	movlw	(high __pidataBANK1)| (0+128)
  1691  07E7  0085               	movwf	5
  1692  07E8  30A0               	movlw	low __pdataBANK1
  1693  07E9  0086               	movwf	6
  1694  07EA  3000               	movlw	high __pdataBANK1
  1695  07EB  0087               	movwf	7
  1696  07EC  3040               	movlw	64
  1697  07ED  2035               	fcall	init_ram
  1698                           
  1699                           ; Initialize objects allocated to BANK2
  1700  07EE  3098               	movlw	low __pidataBANK2
  1701  07EF  0084               	movwf	4
  1702  07F0  3082               	movlw	(high __pidataBANK2)| (0+128)
  1703  07F1  0085               	movwf	5
  1704  07F2  3020               	movlw	low __pdataBANK2
  1705  07F3  0086               	movwf	6
  1706  07F4  3001               	movlw	high __pdataBANK2
  1707  07F5  0087               	movwf	7
  1708  07F6  3040               	movlw	64
  1709  07F7  2035               	fcall	init_ram
  1710                           
  1711                           ; Clear objects allocated to BANK0
  1712  07F8  304C               	movlw	low __pbssBANK0
  1713  07F9  0084               	movwf	4
  1714  07FA  3000               	movlw	high __pbssBANK0
  1715  07FB  0085               	movwf	5
  1716  07FC  3012               	movlw	18
  1717  07FD  202F               	fcall	clear_ram0
  1718  07FE                     end_of_initialization:	
  1719                           ;End of C runtime variable initialization code
  1720                           
  1721  07FE                     __end_of__initialization:	
  1722  07FE  0140               	movlb	0
  1723  07FF  2B18               	ljmp	_main	;jump to C main() function
  1724                           
  1725                           	psect	bssBANK0
  1726  004C                     __pbssBANK0:	
  1727  004C                     _cw_bat:	
  1728  004C                     	ds	6
  1729  0052                     cw_get_vol@F83:	
  1730  0052                     	ds	2
  1731  0054                     _allow_charger_always_zero:	
  1732  0054                     	ds	2
  1733  0056                     _allow_no_charger_full:	
  1734  0056                     	ds	2
  1735  0058                     _no_charger_full_jump:	
  1736  0058                     	ds	2
  1737  005A                     _CHARGE:	
  1738  005A                     	ds	2
  1739  005C                     _reset_loop:	
  1740  005C                     	ds	1
  1741  005D                     _if_quickstart:	
  1742  005D                     	ds	1
  1743                           
  1744                           	psect	dataBANK1
  1745  00A0                     __pdataBANK1:	
  1746  00A0                     CW201x@cw_bat_config_info:	
  1747  00A0                     	ds	64
  1748                           
  1749                           	psect	dataBANK2
  1750  0120                     __pdataBANK2:	
  1751  0120                     _cw_bat_config_info:	
  1752  0120                     	ds	64
  1753                           
  1754                           	psect	inittext
  1755  0035                     init_ram:	
  1756  0035  00FE               	movwf	126
  1757  0036                     initloop:	
  1758  0036  0012               	moviw fsr0++
  1759  0037  001E               	movwi fsr1++
  1760  0038  0BFE               	decfsz	126,f
  1761  0039  2836               	goto	initloop
  1762  003A  3400               	retlw	0
  1763                           
  1764                           	psect	clrtext
  1765  002F                     clear_ram0:	
  1766                           ;	Called with FSR0 containing the base address, and
  1767                           ;	WREG with the size to clear
  1768                           
  1769  002F  0064               	clrwdt	;clear the watchdog before getting into this loop
  1770  0030                     clrloop0:	
  1771  0030  0180               	clrf	0	;clear RAM location pointed to by FSR
  1772  0031  3101               	addfsr 0,1
  1773  0032  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1774  0033  2830               	goto	clrloop0	;have we reached the end yet?
  1775  0034  3400               	retlw	0	;all done for this memory range, return
  1776                           
  1777                           	psect	cstackCOMMON
  1778  0070                     __pcstackCOMMON:	
  1779  0070                     ?_PIN_MANAGER_Initialize:	
  1780  0070                     ??_PIN_MANAGER_Initialize:	
  1781                           ; 1 bytes @ 0x0
  1782                           
  1783  0070                     ?_OSCILLATOR_Initialize:	
  1784                           ; 1 bytes @ 0x0
  1785                           
  1786  0070                     ??_OSCILLATOR_Initialize:	
  1787                           ; 1 bytes @ 0x0
  1788                           
  1789  0070                     ?_cw_bat_init:	
  1790                           ; 1 bytes @ 0x0
  1791                           
  1792  0070                     ?_CW_Delay10ms:	
  1793                           ; 1 bytes @ 0x0
  1794                           
  1795  0070                     ?_cw_bat_work:	
  1796                           ; 1 bytes @ 0x0
  1797                           
  1798  0070                     ?_EUSART1_Initialize:	
  1799                           ; 1 bytes @ 0x0
  1800                           
  1801  0070                     ??_EUSART1_Initialize:	
  1802                           ; 1 bytes @ 0x0
  1803                           
  1804  0070                     ?_EUSART1_Write:	
  1805                           ; 1 bytes @ 0x0
  1806                           
  1807  0070                     ??_EUSART1_Write:	
  1808                           ; 1 bytes @ 0x0
  1809                           
  1810  0070                     ?_SYSTEM_Initialize:	
  1811                           ; 1 bytes @ 0x0
  1812                           
  1813  0070                     ?_main:	
  1814                           ; 1 bytes @ 0x0
  1815                           
  1816  0070                     ?_CW_Delay100us:	
  1817                           ; 1 bytes @ 0x0
  1818                           
  1819  0070                     ??_CW_Delay100us:	
  1820                           ; 1 bytes @ 0x0
  1821                           
  1822  0070                     ?_cw_update_config_info:	
  1823                           ; 1 bytes @ 0x0
  1824                           
  1825  0070                     ?_cw_init:	
  1826                           ; 1 bytes @ 0x0
  1827                           
  1828  0070                     ?_update_capacity:	
  1829                           ; 1 bytes @ 0x0
  1830                           
  1831  0070                     ?_update_vol:	
  1832                           ; 1 bytes @ 0x0
  1833                           
  1834  0070                     ?_update_usb_online:	
  1835                           ; 1 bytes @ 0x0
  1836                           
  1837  0070                     ??_update_usb_online:	
  1838                           ; 1 bytes @ 0x0
  1839                           
  1840  0070                     ?_Delay10us:	
  1841                           ; 1 bytes @ 0x0
  1842                           
  1843  0070                     ??_Delay10us:	
  1844                           ; 1 bytes @ 0x0
  1845                           
  1846  0070                     ?_start:	
  1847                           ; 1 bytes @ 0x0
  1848                           
  1849  0070                     ?_stop:	
  1850                           ; 1 bytes @ 0x0
  1851                           
  1852  0070                     ?_s_ack:	
  1853                           ; 1 bytes @ 0x0
  1854                           
  1855  0070                     ?_sn_ack:	
  1856                           ; 1 bytes @ 0x0
  1857                           
  1858  0070                     ?_write_byte:	
  1859                           ; 1 bytes @ 0x0
  1860                           
  1861  0070                     ?_read_byte:	
  1862                           ; 1 bytes @ 0x0
  1863                           
  1864  0070                     ?___lmul:	
  1865                           ; 1 bytes @ 0x0
  1866                           
  1867  0070                     EUSART1_Write@txData:	
  1868                           ; 4 bytes @ 0x0
  1869                           
  1870  0070                     PIN_MANAGER_Initialize@state:	
  1871                           ; 1 bytes @ 0x0
  1872                           
  1873  0070                     CW_Delay10ms@c:	
  1874                           ; 1 bytes @ 0x0
  1875                           
  1876  0070                     ___lmul@multiplier:	
  1877                           ; 2 bytes @ 0x0
  1878                           
  1879                           
  1880                           ; 4 bytes @ 0x0
  1881  0070                     	ds	1
  1882  0071                     ??_SYSTEM_Initialize:	
  1883  0071                     CW_Delay100us@a:	
  1884                           ; 1 bytes @ 0x1
  1885                           
  1886  0071                     Delay10us@a:	
  1887                           ; 1 bytes @ 0x1
  1888                           
  1889                           
  1890                           ; 1 bytes @ 0x1
  1891  0071                     	ds	1
  1892  0072                     ??_CW_Delay10ms:	
  1893  0072                     CW_Delay100us@b:	
  1894                           ; 1 bytes @ 0x2
  1895                           
  1896  0072                     Delay10us@b:	
  1897                           ; 1 bytes @ 0x2
  1898                           
  1899                           
  1900                           ; 1 bytes @ 0x2
  1901  0072                     	ds	1
  1902  0073                     CW_Delay10ms@a:	
  1903  0073                     CW_Delay100us@i:	
  1904                           ; 1 bytes @ 0x3
  1905                           
  1906  0073                     Delay10us@i:	
  1907                           ; 1 bytes @ 0x3
  1908                           
  1909                           
  1910                           ; 1 bytes @ 0x3
  1911  0073                     	ds	1
  1912  0074                     ??_start:	
  1913  0074                     ??_stop:	
  1914                           ; 1 bytes @ 0x4
  1915                           
  1916  0074                     ??_s_ack:	
  1917                           ; 1 bytes @ 0x4
  1918                           
  1919  0074                     ??_sn_ack:	
  1920                           ; 1 bytes @ 0x4
  1921                           
  1922  0074                     ??_write_byte:	
  1923                           ; 1 bytes @ 0x4
  1924                           
  1925  0074                     ??_read_byte:	
  1926                           ; 1 bytes @ 0x4
  1927                           
  1928  0074                     ?_r_ack:	
  1929                           ; 1 bytes @ 0x4
  1930                           
  1931  0074                     CW_Delay10ms@b:	
  1932                           ; 2 bytes @ 0x4
  1933                           
  1934  0074                     ___lmul@multiplicand:	
  1935                           ; 1 bytes @ 0x4
  1936                           
  1937                           
  1938                           ; 4 bytes @ 0x4
  1939  0074                     	ds	1
  1940  0075                     write_byte@w_data:	
  1941  0075                     read_byte@i:	
  1942                           ; 1 bytes @ 0x5
  1943                           
  1944                           
  1945                           ; 1 bytes @ 0x5
  1946  0075                     	ds	1
  1947  0076                     ??_r_ack:	
  1948  0076                     write_byte@i:	
  1949                           ; 1 bytes @ 0x6
  1950                           
  1951  0076                     read_byte@r_data:	
  1952                           ; 1 bytes @ 0x6
  1953                           
  1954                           
  1955                           ; 1 bytes @ 0x6
  1956  0076                     	ds	2
  1957  0078                     ??___lmul:	
  1958  0078                     r_ack@ack:	
  1959                           ; 1 bytes @ 0x8
  1960                           
  1961  0078                     ___lmul@product:	
  1962                           ; 2 bytes @ 0x8
  1963                           
  1964                           
  1965                           ; 4 bytes @ 0x8
  1966  0078                     	ds	2
  1967  007A                     ?_wait_r_ack:	
  1968                           
  1969                           ; 2 bytes @ 0xA
  1970  007A                     	ds	2
  1971  007C                     ??_cw_read:	
  1972  007C                     ??_cw_write:	
  1973                           ; 1 bytes @ 0xC
  1974                           
  1975  007C                     ??_cw_read_word:	
  1976                           ; 1 bytes @ 0xC
  1977                           
  1978  007C                     ??_wait_r_ack:	
  1979                           ; 1 bytes @ 0xC
  1980                           
  1981  007C                     ??___lldiv:	
  1982                           ; 1 bytes @ 0xC
  1983                           
  1984  007C                     cw_write@point_reg:	
  1985                           ; 1 bytes @ 0xC
  1986                           
  1987                           
  1988                           ; 1 bytes @ 0xC
  1989  007C                     	ds	1
  1990  007D                     cw_read@point_reg:	
  1991                           
  1992                           ; 1 bytes @ 0xD
  1993  007D                     	ds	1
  1994  007E                     ??_cw_bat_work:	
  1995  007E                     ??_update_vol:	
  1996                           ; 1 bytes @ 0xE
  1997                           
  1998                           
  1999                           	psect	cstackBANK0
  2000  0020                     __pcstackBANK0:	
  2001                           ; 1 bytes @ 0xE
  2002                           
  2003  0020                     ?___lldiv:	
  2004  0020                     wait_r_ack@ack:	
  2005                           ; 4 bytes @ 0x0
  2006                           
  2007  0020                     ___lldiv@divisor:	
  2008                           ; 2 bytes @ 0x0
  2009                           
  2010                           
  2011                           ; 4 bytes @ 0x0
  2012  0020                     	ds	2
  2013  0022                     wait_r_ack@i:	
  2014                           
  2015                           ; 2 bytes @ 0x2
  2016  0022                     	ds	2
  2017  0024                     ?_cw_read:	
  2018  0024                     ?_cw_write:	
  2019                           ; 2 bytes @ 0x4
  2020                           
  2021  0024                     ?_cw_read_word:	
  2022                           ; 2 bytes @ 0x4
  2023                           
  2024  0024                     cw_read@r_pdata:	
  2025                           ; 2 bytes @ 0x4
  2026                           
  2027  0024                     cw_read_word@r_pdata:	
  2028                           ; 1 bytes @ 0x4
  2029                           
  2030  0024                     cw_write@w_pdata:	
  2031                           ; 1 bytes @ 0x4
  2032                           
  2033  0024                     ___lldiv@dividend:	
  2034                           ; 1 bytes @ 0x4
  2035                           
  2036                           
  2037                           ; 4 bytes @ 0x4
  2038  0024                     	ds	1
  2039  0025                     cw_read_word@length:	
  2040                           
  2041                           ; 2 bytes @ 0x5
  2042  0025                     	ds	2
  2043  0027                     ??_cw_update_config_info:	
  2044  0027                     cw_read_word@point_reg:	
  2045                           ; 1 bytes @ 0x7
  2046                           
  2047                           
  2048                           ; 1 bytes @ 0x7
  2049  0027                     	ds	1
  2050  0028                     cw_update_config_info@reset_val:	
  2051  0028                     cw_read_word@count:	
  2052                           ; 1 bytes @ 0x8
  2053                           
  2054  0028                     ___lldiv@quotient:	
  2055                           ; 1 bytes @ 0x8
  2056                           
  2057                           
  2058                           ; 4 bytes @ 0x8
  2059  0028                     	ds	1
  2060  0029                     cw_update_config_info@ret:	
  2061                           
  2062                           ; 2 bytes @ 0x9
  2063  0029                     	ds	2
  2064  002B                     cw_update_config_info@i:	
  2065                           
  2066                           ; 1 bytes @ 0xB
  2067  002B                     	ds	1
  2068  002C                     cw_update_config_info@reg_val:	
  2069  002C                     ___lldiv@counter:	
  2070                           ; 1 bytes @ 0xC
  2071                           
  2072                           
  2073                           ; 1 bytes @ 0xC
  2074  002C                     	ds	1
  2075  002D                     ??_cw_init:	
  2076  002D                     ?_cw_get_vol:	
  2077                           ; 1 bytes @ 0xD
  2078                           
  2079                           
  2080                           ; 2 bytes @ 0xD
  2081  002D                     	ds	2
  2082  002F                     ??_cw_get_vol:	
  2083  002F                     cw_init@i:	
  2084                           ; 1 bytes @ 0xF
  2085                           
  2086                           
  2087                           ; 1 bytes @ 0xF
  2088  002F                     	ds	1
  2089  0030                     cw_init@ret:	
  2090                           
  2091                           ; 2 bytes @ 0x10
  2092  0030                     	ds	2
  2093  0032                     cw_init@reg_val:	
  2094                           
  2095                           ; 1 bytes @ 0x12
  2096  0032                     	ds	1
  2097  0033                     ??_cw_bat_init:	
  2098  0033                     ?_cw_por:	
  2099                           ; 1 bytes @ 0x13
  2100                           
  2101                           
  2102                           ; 2 bytes @ 0x13
  2103  0033                     	ds	1
  2104  0034                     cw_bat_init@loop:	
  2105  0034                     cw_get_vol@ret:	
  2106                           ; 1 bytes @ 0x14
  2107                           
  2108                           
  2109                           ; 2 bytes @ 0x14
  2110  0034                     	ds	1
  2111  0035                     ??_cw_por:	
  2112  0035                     cw_bat_init@ret:	
  2113                           ; 1 bytes @ 0x15
  2114                           
  2115                           
  2116                           ; 1 bytes @ 0x15
  2117  0035                     	ds	1
  2118  0036                     cw_get_vol@reg_val:	
  2119                           
  2120                           ; 2 bytes @ 0x16
  2121  0036                     	ds	1
  2122  0037                     cw_por@reset_val:	
  2123                           
  2124                           ; 1 bytes @ 0x17
  2125  0037                     	ds	1
  2126  0038                     cw_por@ret:	
  2127  0038                     cw_get_vol@ad_value_min:	
  2128                           ; 2 bytes @ 0x18
  2129                           
  2130                           
  2131                           ; 2 bytes @ 0x18
  2132  0038                     	ds	2
  2133  003A                     ?_cw_get_capacity:	
  2134  003A                     cw_get_vol@ad_value_max:	
  2135                           ; 2 bytes @ 0x1A
  2136                           
  2137                           
  2138                           ; 2 bytes @ 0x1A
  2139  003A                     	ds	2
  2140  003C                     ??_cw_get_capacity:	
  2141  003C                     cw_get_vol@ad_value:	
  2142                           ; 1 bytes @ 0x1C
  2143                           
  2144                           
  2145                           ; 4 bytes @ 0x1C
  2146  003C                     	ds	2
  2147  003E                     _cw_get_capacity$288:	
  2148                           
  2149                           ; 2 bytes @ 0x1E
  2150  003E                     	ds	2
  2151  0040                     cw_get_vol@get_ad_times:	
  2152  0040                     _cw_get_capacity$289:	
  2153                           ; 1 bytes @ 0x20
  2154                           
  2155                           
  2156                           ; 2 bytes @ 0x20
  2157  0040                     	ds	1
  2158  0041                     cw_get_vol@ad_buff:	
  2159                           
  2160                           ; 2 bytes @ 0x21
  2161  0041                     	ds	1
  2162  0042                     cw_get_capacity@reg_val:	
  2163                           
  2164                           ; 1 bytes @ 0x22
  2165  0042                     	ds	1
  2166  0043                     cw_get_capacity@ret:	
  2167  0043                     update_vol@cw_voltage:	
  2168                           ; 2 bytes @ 0x23
  2169                           
  2170                           
  2171                           ; 2 bytes @ 0x23
  2172  0043                     	ds	2
  2173  0045                     cw_get_capacity@allow_capacity:	
  2174                           
  2175                           ; 1 bytes @ 0x25
  2176  0045                     	ds	1
  2177  0046                     cw_get_capacity@cw_capacity:	
  2178                           
  2179                           ; 1 bytes @ 0x26
  2180  0046                     	ds	1
  2181  0047                     ??_update_capacity:	
  2182                           
  2183                           ; 1 bytes @ 0x27
  2184  0047                     	ds	1
  2185  0048                     update_capacity@cw_capacity:	
  2186                           
  2187                           ; 2 bytes @ 0x28
  2188  0048                     	ds	2
  2189  004A                     ??_main:	
  2190                           
  2191                           ; 1 bytes @ 0x2A
  2192  004A                     	ds	1
  2193  004B                     main@ret:	
  2194                           
  2195                           ; 1 bytes @ 0x2B
  2196  004B                     	ds	1
  2197                           
  2198                           	psect	maintext
  2199  0318                     __pmaintext:	
  2200 ;;
  2201 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2202 ;;
  2203 ;; *************** function _main *****************
  2204 ;; Defined at:
  2205 ;;		line 53 in file "main.c"
  2206 ;; Parameters:    Size  Location     Type
  2207 ;;		None
  2208 ;; Auto vars:     Size  Location     Type
  2209 ;;  ret             1   43[BANK0 ] unsigned char 
  2210 ;;  send_char       1    0        unsigned char 
  2211 ;; Return value:  Size  Location     Type
  2212 ;;                  1    wreg      void 
  2213 ;; Registers used:
  2214 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2215 ;; Tracked objects:
  2216 ;;		On entry : B3F/0
  2217 ;;		On exit  : 0/0
  2218 ;;		Unchanged: 0/0
  2219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2220 ;;      Params:         0       0       0       0
  2221 ;;      Locals:         0       1       0       0
  2222 ;;      Temps:          0       1       0       0
  2223 ;;      Totals:         0       2       0       0
  2224 ;;Total ram usage:        2 bytes
  2225 ;; Hardware stack levels required when called:   10
  2226 ;; This function calls:
  2227 ;;		_CW_Delay10ms
  2228 ;;		_EUSART1_Write
  2229 ;;		_SYSTEM_Initialize
  2230 ;;		_cw_bat_init
  2231 ;;		_cw_bat_work
  2232 ;; This function is called by:
  2233 ;;		Startup code after reset
  2234 ;; This function uses a non-reentrant model
  2235 ;;
  2236                           
  2237                           
  2238                           ;psect for function _main
  2239  0318                     _main:	
  2240                           
  2241                           ;main.c: 56: unsigned char ret = 0;
  2242                           
  2243                           ;incstack = 0
  2244                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2245  0318  0140               	movlb	0	; select bank0
  2246  0319  01CB               	clrf	main@ret
  2247                           
  2248                           ;main.c: 57: uint8_t send_char;
  2249                           ;main.c: 58: SYSTEM_Initialize();
  2250  031A  2027               	fcall	_SYSTEM_Initialize
  2251                           
  2252                           ;main.c: 60: ret = cw_bat_init();
  2253  031B  20C0               	fcall	_cw_bat_init
  2254  031C  0140               	movlb	0	; select bank0
  2255  031D  00CA               	movwf	??_main
  2256  031E  084A               	movf	??_main,w
  2257  031F  00CB               	movwf	main@ret
  2258  0320  2B2E               	goto	l2615
  2259  0321                     l126:	
  2260                           ;main.c: 86: {
  2261                           ;main.c: 87: do { LATCbits.LATC2 = 0; } while(0);
  2262                           
  2263  0321  111A               	bcf	26,2	;volatile
  2264  0322  2B24               	goto	L1
  2265  0323                     l136:	
  2266                           ;main.c: 93: {
  2267                           ;main.c: 94: do { LATCbits.LATC2 = 1; } while(0);
  2268                           
  2269                           ;main.c: 91: }
  2270                           
  2271                           ;main.c: 90: do { LATAbits.LATA4 = 0; } while(0);
  2272                           
  2273                           ;main.c: 89: do { LATAbits.LATA5 = 0; } while(0);
  2274                           
  2275                           ;main.c: 88: do { LATAbits.LATA2 = 0; } while(0);
  2276                           
  2277  0323  151A               	bsf	26,2	;volatile
  2278  0324                     L1:	
  2279                           
  2280                           ;main.c: 95: do { LATAbits.LATA2 = 0; } while(0);
  2281  0324  1118               	bcf	24,2	;volatile
  2282  0325  2B28               	goto	L2
  2283  0326                     l146:	
  2284                           ;main.c: 100: {
  2285                           ;main.c: 101: do { LATCbits.LATC2 = 1; } while(0);
  2286                           
  2287                           ;main.c: 98: }
  2288                           
  2289                           ;main.c: 97: do { LATAbits.LATA4 = 0; } while(0);
  2290                           
  2291                           ;main.c: 96: do { LATAbits.LATA5 = 0; } while(0);
  2292                           
  2293  0326  151A               	bsf	26,2	;volatile
  2294                           
  2295                           ;main.c: 102: do { LATAbits.LATA2 = 1; } while(0);
  2296  0327  1518               	bsf	24,2	;volatile
  2297  0328                     L2:	
  2298                           
  2299                           ;main.c: 103: do { LATAbits.LATA5 = 0; } while(0);
  2300  0328  1298               	bcf	24,5	;volatile
  2301  0329  2B2D               	goto	L3
  2302  032A                     l156:	
  2303                           ;main.c: 107: {
  2304                           ;main.c: 108: do { LATCbits.LATC2 = 1; } while(0);
  2305                           
  2306                           ;main.c: 105: }
  2307                           
  2308                           ;main.c: 104: do { LATAbits.LATA4 = 0; } while(0);
  2309                           
  2310  032A  151A               	bsf	26,2	;volatile
  2311                           
  2312                           ;main.c: 109: do { LATAbits.LATA2 = 1; } while(0);
  2313  032B  1518               	bsf	24,2	;volatile
  2314                           
  2315                           ;main.c: 110: do { LATAbits.LATA5 = 1; } while(0);
  2316  032C  1698               	bsf	24,5	;volatile
  2317  032D                     L3:	
  2318                           
  2319                           ;main.c: 111: do { LATAbits.LATA4 = 0; } while(0);
  2320  032D  1218               	bcf	24,4	;volatile
  2321  032E                     l2615:	
  2322                           ;main.c: 76: while (1)
  2323                           
  2324                           ;main.c: 112: }
  2325                           
  2326                           
  2327                           ;main.c: 77: {
  2328                           ;main.c: 79: CW_Delay10ms(100);
  2329  032E  3064               	movlw	100
  2330  032F  00F0               	movwf	CW_Delay10ms@c
  2331  0330  3000               	movlw	0
  2332  0331  00F1               	movwf	CW_Delay10ms@c+1
  2333  0332  213A               	fcall	_CW_Delay10ms
  2334                           
  2335                           ;main.c: 81: do { LATCbits.LATC3 = 1; } while(0);
  2336  0333  0140               	movlb	0	; select bank0
  2337  0334  159A               	bsf	26,3	;volatile
  2338                           
  2339                           ;main.c: 82: cw_bat_work();
  2340  0335  202B               	fcall	_cw_bat_work
  2341                           
  2342                           ;main.c: 83: EUSART1_Write(cw_bat.voltage);
  2343  0336  0140               	movlb	0	; select bank0
  2344  0337  084F               	movf	_cw_bat+3,w
  2345  0338  203B               	fcall	_EUSART1_Write
  2346                           
  2347                           ;main.c: 84: EUSART1_Write(cw_bat.capacity);
  2348  0339  0140               	movlb	0	; select bank0
  2349  033A  084D               	movf	_cw_bat+1,w
  2350  033B  203B               	fcall	_EUSART1_Write
  2351                           
  2352                           ;main.c: 85: if(cw_bat.capacity >= 80)
  2353  033C  3000               	movlw	0
  2354  033D  0140               	movlb	0	; select bank0
  2355  033E  024E               	subwf	_cw_bat+2,w
  2356  033F  3050               	movlw	80
  2357  0340  1903               	skipnz
  2358  0341  024D               	subwf	_cw_bat+1,w
  2359  0342  1803               	btfsc	3,0
  2360  0343  2B21               	goto	l126
  2361                           
  2362                           ;main.c: 92: else if(cw_bat.capacity >= 60)
  2363  0344  3000               	movlw	0
  2364  0345  024E               	subwf	_cw_bat+2,w
  2365  0346  303C               	movlw	60
  2366  0347  1903               	skipnz
  2367  0348  024D               	subwf	_cw_bat+1,w
  2368  0349  1803               	btfsc	3,0
  2369  034A  2B23               	goto	l136
  2370                           
  2371                           ;main.c: 99: else if(cw_bat.capacity >= 40)
  2372  034B  3000               	movlw	0
  2373  034C  024E               	subwf	_cw_bat+2,w
  2374  034D  3028               	movlw	40
  2375  034E  1903               	skipnz
  2376  034F  024D               	subwf	_cw_bat+1,w
  2377  0350  1803               	btfsc	3,0
  2378  0351  2B26               	goto	l146
  2379                           
  2380                           ;main.c: 106: else if(cw_bat.capacity >= 20)
  2381  0352  3000               	movlw	0
  2382  0353  024E               	subwf	_cw_bat+2,w
  2383  0354  3014               	movlw	20
  2384  0355  1903               	skipnz
  2385  0356  024D               	subwf	_cw_bat+1,w
  2386  0357  1803               	btfsc	3,0
  2387  0358  2B2A               	goto	l156
  2388                           
  2389                           ;main.c: 113: else
  2390                           ;main.c: 114: {
  2391                           ;main.c: 115: do { LATCbits.LATC2 = 1; } while(0);
  2392  0359  151A               	bsf	26,2	;volatile
  2393                           
  2394                           ;main.c: 116: do { LATAbits.LATA2 = 1; } while(0);
  2395  035A  1518               	bsf	24,2	;volatile
  2396                           
  2397                           ;main.c: 117: do { LATAbits.LATA5 = 1; } while(0);
  2398  035B  1698               	bsf	24,5	;volatile
  2399                           
  2400                           ;main.c: 118: do { LATAbits.LATA4 = 1; } while(0);
  2401  035C  1618               	bsf	24,4	;volatile
  2402  035D  2B2E               	goto	l2615
  2403  035E                     __end_of_main:	
  2404                           
  2405                           	psect	text1
  2406  002B                     __ptext1:	
  2407 ;; *************** function _cw_bat_work *****************
  2408 ;; Defined at:
  2409 ;;		line 538 in file "CW201x.c"
  2410 ;; Parameters:    Size  Location     Type
  2411 ;;		None
  2412 ;; Auto vars:     Size  Location     Type
  2413 ;;		None
  2414 ;; Return value:  Size  Location     Type
  2415 ;;                  1    wreg      void 
  2416 ;; Registers used:
  2417 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2418 ;; Tracked objects:
  2419 ;;		On entry : 0/0
  2420 ;;		On exit  : 0/0
  2421 ;;		Unchanged: 0/0
  2422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2423 ;;      Params:         0       0       0       0
  2424 ;;      Locals:         0       0       0       0
  2425 ;;      Temps:          0       0       0       0
  2426 ;;      Totals:         0       0       0       0
  2427 ;;Total ram usage:        0 bytes
  2428 ;; Hardware stack levels used:    1
  2429 ;; Hardware stack levels required when called:    9
  2430 ;; This function calls:
  2431 ;;		_update_capacity
  2432 ;;		_update_usb_online
  2433 ;;		_update_vol
  2434 ;; This function is called by:
  2435 ;;		_main
  2436 ;; This function uses a non-reentrant model
  2437 ;;
  2438                           
  2439                           
  2440                           ;psect for function _cw_bat_work
  2441  002B                     _cw_bat_work:	
  2442                           
  2443                           ;CW201x.c: 540: update_usb_online();
  2444                           
  2445                           ;incstack = 0
  2446                           ; Regs used in _cw_bat_work: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2447  002B  2043               	fcall	_update_usb_online
  2448                           
  2449                           ;CW201x.c: 541: update_capacity();
  2450  002C  215B               	fcall	_update_capacity
  2451                           
  2452                           ;CW201x.c: 542: update_vol();
  2453  002D  20A9               	fcall	_update_vol
  2454  002E  0008               	return
  2455  002F                     __end_of_cw_bat_work:	
  2456                           
  2457                           	psect	text2
  2458  00A9                     __ptext2:	
  2459 ;; *************** function _update_vol *****************
  2460 ;; Defined at:
  2461 ;;		line 491 in file "CW201x.c"
  2462 ;; Parameters:    Size  Location     Type
  2463 ;;		None
  2464 ;; Auto vars:     Size  Location     Type
  2465 ;;  cw_voltage      2   35[BANK0 ] unsigned int 
  2466 ;; Return value:  Size  Location     Type
  2467 ;;                  1    wreg      void 
  2468 ;; Registers used:
  2469 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2470 ;; Tracked objects:
  2471 ;;		On entry : 0/0
  2472 ;;		On exit  : 0/0
  2473 ;;		Unchanged: 0/0
  2474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2475 ;;      Params:         0       0       0       0
  2476 ;;      Locals:         0       2       0       0
  2477 ;;      Temps:          0       0       0       0
  2478 ;;      Totals:         0       2       0       0
  2479 ;;Total ram usage:        2 bytes
  2480 ;; Hardware stack levels used:    1
  2481 ;; Hardware stack levels required when called:    5
  2482 ;; This function calls:
  2483 ;;		_cw_get_vol
  2484 ;; This function is called by:
  2485 ;;		_cw_bat_work
  2486 ;; This function uses a non-reentrant model
  2487 ;;
  2488                           
  2489                           
  2490                           ;psect for function _update_vol
  2491  00A9                     _update_vol:	
  2492                           
  2493                           ;CW201x.c: 493: unsigned int cw_voltage;
  2494                           ;CW201x.c: 494: cw_voltage = cw_get_vol();
  2495                           
  2496                           ;incstack = 0
  2497                           ; Regs used in _update_vol: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2498  00A9  2519               	fcall	_cw_get_vol
  2499  00AA  0140               	movlb	0	; select bank0
  2500  00AB  082E               	movf	?_cw_get_vol+1,w
  2501  00AC  00C4               	movwf	update_vol@cw_voltage+1
  2502  00AD  082D               	movf	?_cw_get_vol,w
  2503  00AE  00C3               	movwf	update_vol@cw_voltage
  2504                           
  2505                           ;CW201x.c: 495: if(cw_voltage == 1){
  2506  00AF  0343               	decf	update_vol@cw_voltage,w
  2507  00B0  0444               	iorwf	update_vol@cw_voltage+1,w
  2508  00B1  1903               	btfsc	3,2
  2509  00B2  0008               	return
  2510                           
  2511                           ;CW201x.c: 498: }else if(cw_bat.voltage != cw_voltage)
  2512  00B3  0844               	movf	update_vol@cw_voltage+1,w
  2513  00B4  0650               	xorwf	_cw_bat+4,w
  2514  00B5  1D03               	skipz
  2515  00B6  28B9               	goto	u2795
  2516  00B7  0843               	movf	update_vol@cw_voltage,w
  2517  00B8  064F               	xorwf	_cw_bat+3,w
  2518  00B9                     u2795:	
  2519  00B9  1903               	skipnz
  2520  00BA  0008               	return
  2521                           
  2522                           ;CW201x.c: 499: {
  2523                           ;CW201x.c: 500: cw_bat.voltage = cw_voltage;
  2524  00BB  0844               	movf	update_vol@cw_voltage+1,w
  2525  00BC  00D0               	movwf	_cw_bat+4
  2526  00BD  0843               	movf	update_vol@cw_voltage,w
  2527  00BE  00CF               	movwf	_cw_bat+3
  2528  00BF  0008               	return
  2529  00C0                     __end_of_update_vol:	
  2530                           
  2531                           	psect	text3
  2532  0519                     __ptext3:	
  2533 ;; *************** function _cw_get_vol *****************
  2534 ;; Defined at:
  2535 ;;		line 417 in file "CW201x.c"
  2536 ;; Parameters:    Size  Location     Type
  2537 ;;		None
  2538 ;; Auto vars:     Size  Location     Type
  2539 ;;  ad_value        4   28[BANK0 ] unsigned long 
  2540 ;;  ad_buff         2   33[BANK0 ] unsigned int 
  2541 ;;  reg_val         2   22[BANK0 ] unsigned char [2]
  2542 ;;  ad_value_max    2   26[BANK0 ] unsigned int 
  2543 ;;  ad_value_min    2   24[BANK0 ] unsigned int 
  2544 ;;  ret             2   20[BANK0 ] int 
  2545 ;;  get_ad_times    1   32[BANK0 ] unsigned char 
  2546 ;; Return value:  Size  Location     Type
  2547 ;;                  2   13[BANK0 ] unsigned int 
  2548 ;; Registers used:
  2549 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2550 ;; Tracked objects:
  2551 ;;		On entry : 0/0
  2552 ;;		On exit  : 0/0
  2553 ;;		Unchanged: 0/0
  2554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2555 ;;      Params:         0       2       0       0
  2556 ;;      Locals:         0      15       0       0
  2557 ;;      Temps:          0       5       0       0
  2558 ;;      Totals:         0      22       0       0
  2559 ;;Total ram usage:       22 bytes
  2560 ;; Hardware stack levels used:    1
  2561 ;; Hardware stack levels required when called:    4
  2562 ;; This function calls:
  2563 ;;		___lldiv
  2564 ;;		___lmul
  2565 ;;		_cw_read_word
  2566 ;; This function is called by:
  2567 ;;		_update_vol
  2568 ;; This function uses a non-reentrant model
  2569 ;;
  2570                           
  2571                           
  2572                           ;psect for function _cw_get_vol
  2573  0519                     _cw_get_vol:	
  2574                           
  2575                           ;CW201x.c: 419: int ret = 0;
  2576                           
  2577                           ;incstack = 0
  2578                           ; Regs used in _cw_get_vol: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2579  0519  0140               	movlb	0	; select bank0
  2580  051A  01B4               	clrf	cw_get_vol@ret
  2581  051B  01B5               	clrf	cw_get_vol@ret+1
  2582                           
  2583                           ;CW201x.c: 420: unsigned char get_ad_times = 0;
  2584  051C  01C0               	clrf	cw_get_vol@get_ad_times
  2585                           
  2586                           ;CW201x.c: 421: unsigned char reg_val[2] = {0 , 0};
  2587  051D  0853               	movf	cw_get_vol@F83+1,w
  2588  051E  00B7               	movwf	cw_get_vol@reg_val+1
  2589  051F  0852               	movf	cw_get_vol@F83,w
  2590  0520  00B6               	movwf	cw_get_vol@reg_val
  2591                           
  2592                           ;CW201x.c: 422: unsigned long ad_value = 0;
  2593  0521  3000               	movlw	0
  2594  0522  00BF               	movwf	cw_get_vol@ad_value+3
  2595  0523  3000               	movlw	0
  2596  0524  00BE               	movwf	cw_get_vol@ad_value+2
  2597  0525  3000               	movlw	0
  2598  0526  00BD               	movwf	cw_get_vol@ad_value+1
  2599  0527  3000               	movlw	0
  2600  0528  00BC               	movwf	cw_get_vol@ad_value
  2601                           
  2602                           ;CW201x.c: 423: unsigned int ad_buff = 0;
  2603  0529  01C1               	clrf	cw_get_vol@ad_buff
  2604  052A  01C2               	clrf	cw_get_vol@ad_buff+1
  2605                           
  2606                           ;CW201x.c: 424: unsigned int ad_value_min = 0;
  2607  052B  01B8               	clrf	cw_get_vol@ad_value_min
  2608  052C  01B9               	clrf	cw_get_vol@ad_value_min+1
  2609                           
  2610                           ;CW201x.c: 425: unsigned int ad_value_max = 0;
  2611  052D  01BA               	clrf	cw_get_vol@ad_value_max
  2612  052E  01BB               	clrf	cw_get_vol@ad_value_max+1
  2613                           
  2614                           ;CW201x.c: 427: for(get_ad_times = 0; get_ad_times < 3; get_ad_times++)
  2615  052F  01C0               	clrf	cw_get_vol@get_ad_times
  2616  0530  3003               	movlw	3
  2617  0531  0240               	subwf	cw_get_vol@get_ad_times,w
  2618  0532  1803               	btfsc	3,0
  2619  0533  2D8D               	goto	l2461
  2620  0534                     l2441:	
  2621                           
  2622                           ;CW201x.c: 428: {
  2623                           ;CW201x.c: 429: ret = cw_read_word(0x2, &reg_val[0],2);
  2624  0534  3036               	movlw	(low (cw_get_vol@reg_val| 0))& (0+255)
  2625  0535  00AF               	movwf	??_cw_get_vol
  2626  0536  082F               	movf	??_cw_get_vol,w
  2627  0537  00A4               	movwf	cw_read_word@r_pdata
  2628  0538  3002               	movlw	2
  2629  0539  00A5               	movwf	cw_read_word@length
  2630  053A  3000               	movlw	0
  2631  053B  00A6               	movwf	cw_read_word@length+1
  2632  053C  3002               	movlw	2
  2633  053D  23F9               	fcall	_cw_read_word
  2634  053E  0140               	movlb	0	; select bank0
  2635  053F  0825               	movf	?_cw_read_word+1,w
  2636  0540  00B5               	movwf	cw_get_vol@ret+1
  2637  0541  0824               	movf	?_cw_read_word,w
  2638  0542  00B4               	movwf	cw_get_vol@ret
  2639                           
  2640                           ;CW201x.c: 430: if(ret)
  2641  0543  0834               	movf	cw_get_vol@ret,w
  2642  0544  0435               	iorwf	cw_get_vol@ret+1,w
  2643  0545  1903               	btfsc	3,2
  2644  0546  2D4C               	goto	l2449
  2645                           
  2646                           ;CW201x.c: 431: {
  2647                           ;CW201x.c: 432: return 1;
  2648  0547  3001               	movlw	1
  2649  0548  00AD               	movwf	?_cw_get_vol
  2650  0549  3000               	movlw	0
  2651  054A  00AE               	movwf	?_cw_get_vol+1
  2652  054B  0008               	return
  2653  054C                     l2449:	
  2654                           
  2655                           ;CW201x.c: 433: }
  2656                           ;CW201x.c: 434: ad_buff = (reg_val[0] << 8) + reg_val[1];
  2657  054C  0837               	movf	cw_get_vol@reg_val+1,w
  2658  054D  00AF               	movwf	??_cw_get_vol
  2659  054E  01B0               	clrf	??_cw_get_vol+1
  2660  054F  0836               	movf	cw_get_vol@reg_val,w
  2661  0550  00B1               	movwf	??_cw_get_vol+2
  2662  0551  01B2               	clrf	??_cw_get_vol+3
  2663  0552  0831               	movf	??_cw_get_vol+2,w
  2664  0553  00B2               	movwf	??_cw_get_vol+3
  2665  0554  01B1               	clrf	??_cw_get_vol+2
  2666  0555  082F               	movf	??_cw_get_vol,w
  2667  0556  0731               	addwf	??_cw_get_vol+2,w
  2668  0557  00C1               	movwf	cw_get_vol@ad_buff
  2669  0558  0830               	movf	??_cw_get_vol+1,w
  2670  0559  3D32               	addwfc	??_cw_get_vol+3,w
  2671  055A  00C2               	movwf	cw_get_vol@ad_buff+1
  2672                           
  2673                           ;CW201x.c: 436: if(get_ad_times == 0)
  2674  055B  0840               	movf	cw_get_vol@get_ad_times,w
  2675  055C  1D03               	btfss	3,2
  2676  055D  2D66               	goto	l313
  2677                           
  2678                           ;CW201x.c: 437: {
  2679                           ;CW201x.c: 438: ad_value_min = ad_buff;
  2680  055E  0842               	movf	cw_get_vol@ad_buff+1,w
  2681  055F  00B9               	movwf	cw_get_vol@ad_value_min+1
  2682  0560  0841               	movf	cw_get_vol@ad_buff,w
  2683  0561  00B8               	movwf	cw_get_vol@ad_value_min
  2684                           
  2685                           ;CW201x.c: 439: ad_value_max = ad_buff;
  2686  0562  0842               	movf	cw_get_vol@ad_buff+1,w
  2687  0563  00BB               	movwf	cw_get_vol@ad_value_max+1
  2688  0564  0841               	movf	cw_get_vol@ad_buff,w
  2689  0565  00BA               	movwf	cw_get_vol@ad_value_max
  2690  0566                     l313:	
  2691                           
  2692                           ;CW201x.c: 440: }
  2693                           ;CW201x.c: 441: if(ad_buff < ad_value_min)
  2694  0566  0839               	movf	cw_get_vol@ad_value_min+1,w
  2695  0567  0242               	subwf	cw_get_vol@ad_buff+1,w
  2696  0568  1D03               	skipz
  2697  0569  2D6C               	goto	u2595
  2698  056A  0838               	movf	cw_get_vol@ad_value_min,w
  2699  056B  0241               	subwf	cw_get_vol@ad_buff,w
  2700  056C                     u2595:	
  2701  056C  1803               	skipnc
  2702  056D  2D72               	goto	l314
  2703                           
  2704                           ;CW201x.c: 442: {
  2705                           ;CW201x.c: 443: ad_value_min = ad_buff;
  2706  056E  0842               	movf	cw_get_vol@ad_buff+1,w
  2707  056F  00B9               	movwf	cw_get_vol@ad_value_min+1
  2708  0570  0841               	movf	cw_get_vol@ad_buff,w
  2709  0571  00B8               	movwf	cw_get_vol@ad_value_min
  2710  0572                     l314:	
  2711                           
  2712                           ;CW201x.c: 444: }
  2713                           ;CW201x.c: 445: if(ad_buff > ad_value_max)
  2714  0572  0842               	movf	cw_get_vol@ad_buff+1,w
  2715  0573  023B               	subwf	cw_get_vol@ad_value_max+1,w
  2716  0574  1D03               	skipz
  2717  0575  2D78               	goto	u2605
  2718  0576  0841               	movf	cw_get_vol@ad_buff,w
  2719  0577  023A               	subwf	cw_get_vol@ad_value_max,w
  2720  0578                     u2605:	
  2721  0578  1803               	skipnc
  2722  0579  2D7E               	goto	l315
  2723                           
  2724                           ;CW201x.c: 446: {
  2725                           ;CW201x.c: 447: ad_value_max = ad_buff;
  2726  057A  0842               	movf	cw_get_vol@ad_buff+1,w
  2727  057B  00BB               	movwf	cw_get_vol@ad_value_max+1
  2728  057C  0841               	movf	cw_get_vol@ad_buff,w
  2729  057D  00BA               	movwf	cw_get_vol@ad_value_max
  2730  057E                     l315:	
  2731                           
  2732                           ;CW201x.c: 448: }
  2733                           ;CW201x.c: 449: ad_value += ad_buff;
  2734  057E  0841               	movf	cw_get_vol@ad_buff,w
  2735  057F  07BC               	addwf	cw_get_vol@ad_value,f
  2736  0580  0842               	movf	cw_get_vol@ad_buff+1,w
  2737  0581  3DBD               	addwfc	cw_get_vol@ad_value+1,f
  2738  0582  3000               	movlw	0
  2739  0583  3DBE               	addwfc	cw_get_vol@ad_value+2,f
  2740  0584  3DBF               	addwfc	cw_get_vol@ad_value+3,f
  2741  0585  3001               	movlw	1
  2742  0586  00AF               	movwf	??_cw_get_vol
  2743  0587  082F               	movf	??_cw_get_vol,w
  2744  0588  07C0               	addwf	cw_get_vol@get_ad_times,f
  2745  0589  3003               	movlw	3
  2746  058A  0240               	subwf	cw_get_vol@get_ad_times,w
  2747  058B  1C03               	skipc
  2748  058C  2D34               	goto	l2441
  2749  058D                     l2461:	
  2750                           
  2751                           ;CW201x.c: 450: }
  2752                           ;CW201x.c: 451: ad_value -= ad_value_min;
  2753  058D  0838               	movf	cw_get_vol@ad_value_min,w
  2754  058E  00AF               	movwf	??_cw_get_vol
  2755  058F  0839               	movf	cw_get_vol@ad_value_min+1,w
  2756  0590  00B0               	movwf	??_cw_get_vol+1
  2757  0591  01B1               	clrf	??_cw_get_vol+2
  2758  0592  01B2               	clrf	??_cw_get_vol+3
  2759  0593  082F               	movf	??_cw_get_vol,w
  2760  0594  02BC               	subwf	cw_get_vol@ad_value,f
  2761  0595  0830               	movf	??_cw_get_vol+1,w
  2762  0596  3BBD               	subwfb	cw_get_vol@ad_value+1,f
  2763  0597  0831               	movf	??_cw_get_vol+2,w
  2764  0598  3BBE               	subwfb	cw_get_vol@ad_value+2,f
  2765  0599  0832               	movf	??_cw_get_vol+3,w
  2766  059A  3BBF               	subwfb	cw_get_vol@ad_value+3,f
  2767                           
  2768                           ;CW201x.c: 452: ad_value -= ad_value_max;
  2769  059B  083A               	movf	cw_get_vol@ad_value_max,w
  2770  059C  00AF               	movwf	??_cw_get_vol
  2771  059D  083B               	movf	cw_get_vol@ad_value_max+1,w
  2772  059E  00B0               	movwf	??_cw_get_vol+1
  2773  059F  01B1               	clrf	??_cw_get_vol+2
  2774  05A0  01B2               	clrf	??_cw_get_vol+3
  2775  05A1  082F               	movf	??_cw_get_vol,w
  2776  05A2  02BC               	subwf	cw_get_vol@ad_value,f
  2777  05A3  0830               	movf	??_cw_get_vol+1,w
  2778  05A4  3BBD               	subwfb	cw_get_vol@ad_value+1,f
  2779  05A5  0831               	movf	??_cw_get_vol+2,w
  2780  05A6  3BBE               	subwfb	cw_get_vol@ad_value+2,f
  2781  05A7  0832               	movf	??_cw_get_vol+3,w
  2782  05A8  3BBF               	subwfb	cw_get_vol@ad_value+3,f
  2783                           
  2784                           ;CW201x.c: 453: ad_value = ad_value * 305 / 100000;
  2785  05A9  3000               	movlw	0
  2786  05AA  00A3               	movwf	___lldiv@divisor+3
  2787  05AB  3001               	movlw	1
  2788  05AC  00A2               	movwf	___lldiv@divisor+2
  2789  05AD  3086               	movlw	134
  2790  05AE  00A1               	movwf	___lldiv@divisor+1
  2791  05AF  30A0               	movlw	160
  2792  05B0  00A0               	movwf	___lldiv@divisor
  2793  05B1  083F               	movf	cw_get_vol@ad_value+3,w
  2794  05B2  00F3               	movwf	___lmul@multiplier+3
  2795  05B3  083E               	movf	cw_get_vol@ad_value+2,w
  2796  05B4  00F2               	movwf	___lmul@multiplier+2
  2797  05B5  083D               	movf	cw_get_vol@ad_value+1,w
  2798  05B6  00F1               	movwf	___lmul@multiplier+1
  2799  05B7  083C               	movf	cw_get_vol@ad_value,w
  2800  05B8  00F0               	movwf	___lmul@multiplier
  2801  05B9  3000               	movlw	0
  2802  05BA  00F7               	movwf	___lmul@multiplicand+3
  2803  05BB  3000               	movlw	0
  2804  05BC  00F6               	movwf	___lmul@multiplicand+2
  2805  05BD  3001               	movlw	1
  2806  05BE  00F5               	movwf	___lmul@multiplicand+1
  2807  05BF  3031               	movlw	49
  2808  05C0  00F4               	movwf	___lmul@multiplicand
  2809  05C1  21CD               	fcall	___lmul
  2810  05C2  0873               	movf	?___lmul+3,w
  2811  05C3  0140               	movlb	0	; select bank0
  2812  05C4  00A7               	movwf	___lldiv@dividend+3
  2813  05C5  0872               	movf	?___lmul+2,w
  2814  05C6  00A6               	movwf	___lldiv@dividend+2
  2815  05C7  0871               	movf	?___lmul+1,w
  2816  05C8  00A5               	movwf	___lldiv@dividend+1
  2817  05C9  0870               	movf	?___lmul,w
  2818  05CA  00A4               	movwf	___lldiv@dividend
  2819  05CB  23A6               	fcall	___lldiv
  2820  05CC  0140               	movlb	0	; select bank0
  2821  05CD  0823               	movf	?___lldiv+3,w
  2822  05CE  00BF               	movwf	cw_get_vol@ad_value+3
  2823  05CF  0822               	movf	?___lldiv+2,w
  2824  05D0  00BE               	movwf	cw_get_vol@ad_value+2
  2825  05D1  0821               	movf	?___lldiv+1,w
  2826  05D2  00BD               	movwf	cw_get_vol@ad_value+1
  2827  05D3  0820               	movf	?___lldiv,w
  2828  05D4  00BC               	movwf	cw_get_vol@ad_value
  2829                           
  2830                           ;CW201x.c: 454: return(ad_value);
  2831  05D5  083D               	movf	cw_get_vol@ad_value+1,w
  2832  05D6  00AE               	movwf	?_cw_get_vol+1
  2833  05D7  083C               	movf	cw_get_vol@ad_value,w
  2834  05D8  00AD               	movwf	?_cw_get_vol
  2835  05D9  0008               	return
  2836  05DA                     __end_of_cw_get_vol:	
  2837                           
  2838                           	psect	text4
  2839  03F9                     __ptext4:	
  2840 ;; *************** function _cw_read_word *****************
  2841 ;; Defined at:
  2842 ;;		line 189 in file "iic.c"
  2843 ;; Parameters:    Size  Location     Type
  2844 ;;  point_reg       1    wreg     unsigned char 
  2845 ;;  r_pdata         1    4[BANK0 ] PTR unsigned char 
  2846 ;;		 -> cw_get_vol@reg_val(2), 
  2847 ;;  length          2    5[BANK0 ] unsigned int 
  2848 ;; Auto vars:     Size  Location     Type
  2849 ;;  point_reg       1    7[BANK0 ] unsigned char 
  2850 ;;  count           1    8[BANK0 ] unsigned char 
  2851 ;; Return value:  Size  Location     Type
  2852 ;;                  2    4[BANK0 ] int 
  2853 ;; Registers used:
  2854 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2855 ;; Tracked objects:
  2856 ;;		On entry : 0/0
  2857 ;;		On exit  : 0/0
  2858 ;;		Unchanged: 0/0
  2859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2860 ;;      Params:         0       3       0       0
  2861 ;;      Locals:         0       2       0       0
  2862 ;;      Temps:          2       0       0       0
  2863 ;;      Totals:         2       5       0       0
  2864 ;;Total ram usage:        7 bytes
  2865 ;; Hardware stack levels used:    1
  2866 ;; Hardware stack levels required when called:    3
  2867 ;; This function calls:
  2868 ;;		_read_byte
  2869 ;;		_s_ack
  2870 ;;		_sn_ack
  2871 ;;		_start
  2872 ;;		_stop
  2873 ;;		_wait_r_ack
  2874 ;;		_write_byte
  2875 ;; This function is called by:
  2876 ;;		_cw_get_vol
  2877 ;; This function uses a non-reentrant model
  2878 ;;
  2879                           
  2880                           
  2881                           ;psect for function _cw_read_word
  2882  03F9                     _cw_read_word:	
  2883                           
  2884                           ;incstack = 0
  2885                           ; Regs used in _cw_read_word: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2886                           ;cw_read_word@point_reg stored from wreg
  2887  03F9  0140               	movlb	0	; select bank0
  2888  03FA  00A7               	movwf	cw_read_word@point_reg
  2889                           
  2890                           ;iic.c: 191: unsigned char count;
  2891                           ;iic.c: 193: start();
  2892  03FB  2058               	fcall	_start
  2893                           
  2894                           ;iic.c: 194: write_byte(0xc4);
  2895  03FC  30C4               	movlw	196
  2896  03FD  20DB               	fcall	_write_byte
  2897                           
  2898                           ;iic.c: 195: if(wait_r_ack())
  2899  03FE  21FC               	fcall	_wait_r_ack
  2900  03FF  087A               	movf	?_wait_r_ack,w
  2901  0400  047B               	iorwf	?_wait_r_ack+1,w
  2902  0401  1903               	btfsc	3,2
  2903  0402  2C09               	goto	l2227
  2904                           
  2905                           ;iic.c: 196: {
  2906                           ;iic.c: 197: return 1;
  2907  0403  3001               	movlw	1
  2908  0404  0140               	movlb	0	; select bank0
  2909  0405  00A4               	movwf	?_cw_read_word
  2910  0406  3000               	movlw	0
  2911  0407  00A5               	movwf	?_cw_read_word+1
  2912  0408  0008               	return
  2913  0409                     l2227:	
  2914                           
  2915                           ;iic.c: 198: }
  2916                           ;iic.c: 199: write_byte(point_reg);
  2917  0409  0140               	movlb	0	; select bank0
  2918  040A  0827               	movf	cw_read_word@point_reg,w
  2919  040B  20DB               	fcall	_write_byte
  2920                           
  2921                           ;iic.c: 200: if(wait_r_ack())
  2922  040C  21FC               	fcall	_wait_r_ack
  2923  040D  087A               	movf	?_wait_r_ack,w
  2924  040E  047B               	iorwf	?_wait_r_ack+1,w
  2925  040F  1903               	btfsc	3,2
  2926  0410  2C17               	goto	l2233
  2927                           
  2928                           ;iic.c: 201: {
  2929                           ;iic.c: 202: return 1;
  2930  0411  3001               	movlw	1
  2931  0412  0140               	movlb	0	; select bank0
  2932  0413  00A4               	movwf	?_cw_read_word
  2933  0414  3000               	movlw	0
  2934  0415  00A5               	movwf	?_cw_read_word+1
  2935  0416  0008               	return
  2936  0417                     l2233:	
  2937                           
  2938                           ;iic.c: 203: }
  2939                           ;iic.c: 204: start();
  2940  0417  2058               	fcall	_start
  2941                           
  2942                           ;iic.c: 205: write_byte(0xc5);
  2943  0418  30C5               	movlw	197
  2944  0419  20DB               	fcall	_write_byte
  2945                           
  2946                           ;iic.c: 206: if(wait_r_ack())
  2947  041A  21FC               	fcall	_wait_r_ack
  2948  041B  087A               	movf	?_wait_r_ack,w
  2949  041C  047B               	iorwf	?_wait_r_ack+1,w
  2950  041D  1903               	btfsc	3,2
  2951  041E  2C25               	goto	l2239
  2952                           
  2953                           ;iic.c: 207: {
  2954                           ;iic.c: 208: return 1;
  2955  041F  3001               	movlw	1
  2956  0420  0140               	movlb	0	; select bank0
  2957  0421  00A4               	movwf	?_cw_read_word
  2958  0422  3000               	movlw	0
  2959  0423  00A5               	movwf	?_cw_read_word+1
  2960  0424  0008               	return
  2961  0425                     l2239:	
  2962                           
  2963                           ;iic.c: 209: }
  2964                           ;iic.c: 210: for(count = 0; count < length; count++ ){
  2965  0425  0140               	movlb	0	; select bank0
  2966  0426  01A8               	clrf	cw_read_word@count
  2967  0427                     l2251:	
  2968  0427  0828               	movf	cw_read_word@count,w
  2969  0428  00FC               	movwf	??_cw_read_word
  2970  0429  01FD               	clrf	??_cw_read_word+1
  2971  042A  0826               	movf	cw_read_word@length+1,w
  2972  042B  027D               	subwf	??_cw_read_word+1,w
  2973  042C  1D03               	skipz
  2974  042D  2C30               	goto	u2105
  2975  042E  0825               	movf	cw_read_word@length,w
  2976  042F  027C               	subwf	??_cw_read_word,w
  2977  0430                     u2105:	
  2978  0430  1803               	btfsc	3,0
  2979  0431  2C54               	goto	l2253
  2980                           
  2981                           ;iic.c: 211: *r_pdata = read_byte();
  2982  0432  217C               	fcall	_read_byte
  2983  0433  00FC               	movwf	??_cw_read_word
  2984  0434  0140               	movlb	0	; select bank0
  2985  0435  0824               	movf	cw_read_word@r_pdata,w
  2986  0436  0086               	movwf	6
  2987  0437  0187               	clrf	7
  2988  0438  087C               	movf	??_cw_read_word,w
  2989  0439  0081               	movwf	1
  2990                           
  2991                           ;iic.c: 212: if(count + 1 < length){
  2992  043A  0828               	movf	cw_read_word@count,w
  2993  043B  3E01               	addlw	1
  2994  043C  00FC               	movwf	??_cw_read_word
  2995  043D  3000               	movlw	0
  2996  043E  1803               	skipnc
  2997  043F  3001               	movlw	1
  2998  0440  00FD               	movwf	??_cw_read_word+1
  2999  0441  0826               	movf	cw_read_word@length+1,w
  3000  0442  027D               	subwf	??_cw_read_word+1,w
  3001  0443  1D03               	skipz
  3002  0444  2C47               	goto	u2095
  3003  0445  0825               	movf	cw_read_word@length,w
  3004  0446  027C               	subwf	??_cw_read_word,w
  3005  0447                     u2095:	
  3006  0447  1803               	skipnc
  3007  0448  2C4E               	goto	l2249
  3008                           
  3009                           ;iic.c: 213: r_pdata++;
  3010  0449  3001               	movlw	1
  3011  044A  00FC               	movwf	??_cw_read_word
  3012  044B  087C               	movf	??_cw_read_word,w
  3013  044C  07A4               	addwf	cw_read_word@r_pdata,f
  3014                           
  3015                           ;iic.c: 214: sn_ack();
  3016  044D  2087               	fcall	_sn_ack
  3017  044E                     l2249:	
  3018  044E  3001               	movlw	1
  3019  044F  00FC               	movwf	??_cw_read_word
  3020  0450  087C               	movf	??_cw_read_word,w
  3021  0451  0140               	movlb	0	; select bank0
  3022  0452  07A8               	addwf	cw_read_word@count,f
  3023  0453  2C27               	goto	l2251
  3024  0454                     l2253:	
  3025                           
  3026                           ;iic.c: 215: }
  3027                           ;iic.c: 216: }
  3028                           ;iic.c: 217: s_ack();
  3029  0454  204D               	fcall	_s_ack
  3030                           
  3031                           ;iic.c: 218: stop();
  3032  0455  207B               	fcall	_stop
  3033                           
  3034                           ;iic.c: 219: return 0;
  3035  0456  0140               	movlb	0	; select bank0
  3036  0457  01A4               	clrf	?_cw_read_word
  3037  0458  01A5               	clrf	?_cw_read_word+1
  3038  0459  0008               	return
  3039  045A                     __end_of_cw_read_word:	
  3040                           
  3041                           	psect	text5
  3042  0087                     __ptext5:	
  3043 ;; *************** function _sn_ack *****************
  3044 ;; Defined at:
  3045 ;;		line 113 in file "iic.c"
  3046 ;; Parameters:    Size  Location     Type
  3047 ;;		None
  3048 ;; Auto vars:     Size  Location     Type
  3049 ;;		None
  3050 ;; Return value:  Size  Location     Type
  3051 ;;                  1    wreg      void 
  3052 ;; Registers used:
  3053 ;;		wreg, status,2, status,0, pclath, cstack
  3054 ;; Tracked objects:
  3055 ;;		On entry : 0/0
  3056 ;;		On exit  : 0/0
  3057 ;;		Unchanged: 0/0
  3058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3059 ;;      Params:         0       0       0       0
  3060 ;;      Locals:         0       0       0       0
  3061 ;;      Temps:          0       0       0       0
  3062 ;;      Totals:         0       0       0       0
  3063 ;;Total ram usage:        0 bytes
  3064 ;; Hardware stack levels used:    1
  3065 ;; Hardware stack levels required when called:    1
  3066 ;; This function calls:
  3067 ;;		_Delay10us
  3068 ;; This function is called by:
  3069 ;;		_cw_read_word
  3070 ;; This function uses a non-reentrant model
  3071 ;;
  3072                           
  3073                           
  3074                           ;psect for function _sn_ack
  3075  0087                     _sn_ack:	
  3076                           
  3077                           ;incstack = 0
  3078                           ; Regs used in _sn_ack: [wreg+status,2+status,0+pclath+cstack]
  3079                           ;iic.c: 115: do { TRISCbits.TRISC1 = 0; } while(0);
  3080  0087  0140               	movlb	0	; select bank0
  3081  0088  1094               	bcf	20,1	;volatile
  3082                           
  3083                           ;iic.c: 116: do { LATCbits.LATC1 = 0; } while(0);
  3084  0089  109A               	bcf	26,1	;volatile
  3085                           
  3086                           ;iic.c: 117: Delay10us();
  3087  008A  211A               	fcall	_Delay10us
  3088                           
  3089                           ;iic.c: 118: do { LATCbits.LATC0 = 1; } while(0);
  3090  008B  0140               	movlb	0	; select bank0
  3091  008C  141A               	bsf	26,0	;volatile
  3092                           
  3093                           ;iic.c: 119: Delay10us();
  3094  008D  211A               	fcall	_Delay10us
  3095                           
  3096                           ;iic.c: 120: do { LATCbits.LATC0 = 0; } while(0);
  3097  008E  0140               	movlb	0	; select bank0
  3098  008F  101A               	bcf	26,0	;volatile
  3099                           
  3100                           ;iic.c: 121: do { LATCbits.LATC1 = 1; } while(0);
  3101  0090  149A               	bsf	26,1	;volatile
  3102                           
  3103                           ;iic.c: 122: Delay10us();
  3104  0091  211A               	fcall	_Delay10us
  3105  0092  0008               	return
  3106  0093                     __end_of_sn_ack:	
  3107                           
  3108                           	psect	text6
  3109  01CD                     __ptext6:	
  3110 ;; *************** function ___lmul *****************
  3111 ;; Defined at:
  3112 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul32.c"
  3113 ;; Parameters:    Size  Location     Type
  3114 ;;  multiplier      4    0[COMMON] unsigned long 
  3115 ;;  multiplicand    4    4[COMMON] unsigned long 
  3116 ;; Auto vars:     Size  Location     Type
  3117 ;;  product         4    8[COMMON] unsigned long 
  3118 ;; Return value:  Size  Location     Type
  3119 ;;                  4    0[COMMON] unsigned long 
  3120 ;; Registers used:
  3121 ;;		wreg, status,2, status,0
  3122 ;; Tracked objects:
  3123 ;;		On entry : 0/0
  3124 ;;		On exit  : 0/0
  3125 ;;		Unchanged: 0/0
  3126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3127 ;;      Params:         8       0       0       0
  3128 ;;      Locals:         4       0       0       0
  3129 ;;      Temps:          0       0       0       0
  3130 ;;      Totals:        12       0       0       0
  3131 ;;Total ram usage:       12 bytes
  3132 ;; Hardware stack levels used:    1
  3133 ;; This function calls:
  3134 ;;		Nothing
  3135 ;; This function is called by:
  3136 ;;		_cw_get_vol
  3137 ;; This function uses a non-reentrant model
  3138 ;;
  3139                           
  3140                           
  3141                           ;psect for function ___lmul
  3142  01CD                     ___lmul:	
  3143                           
  3144                           ;incstack = 0
  3145                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3146  01CD  3000               	movlw	0
  3147  01CE  00FB               	movwf	___lmul@product+3
  3148  01CF  3000               	movlw	0
  3149  01D0  00FA               	movwf	___lmul@product+2
  3150  01D1  3000               	movlw	0
  3151  01D2  00F9               	movwf	___lmul@product+1
  3152  01D3  3000               	movlw	0
  3153  01D4  00F8               	movwf	___lmul@product
  3154  01D5                     l2261:	
  3155  01D5  1C70               	btfss	___lmul@multiplier,0
  3156  01D6  29DF               	goto	l2265
  3157  01D7  0874               	movf	___lmul@multiplicand,w
  3158  01D8  07F8               	addwf	___lmul@product,f
  3159  01D9  0875               	movf	___lmul@multiplicand+1,w
  3160  01DA  3DF9               	addwfc	___lmul@product+1,f
  3161  01DB  0876               	movf	___lmul@multiplicand+2,w
  3162  01DC  3DFA               	addwfc	___lmul@product+2,f
  3163  01DD  0877               	movf	___lmul@multiplicand+3,w
  3164  01DE  3DFB               	addwfc	___lmul@product+3,f
  3165  01DF                     l2265:	
  3166  01DF  3001               	movlw	1
  3167  01E0                     u2125:	
  3168  01E0  35F4               	lslf	___lmul@multiplicand,f
  3169  01E1  0DF5               	rlf	___lmul@multiplicand+1,f
  3170  01E2  0DF6               	rlf	___lmul@multiplicand+2,f
  3171  01E3  0DF7               	rlf	___lmul@multiplicand+3,f
  3172  01E4  0B89               	decfsz	9,f
  3173  01E5  29E0               	goto	u2125
  3174  01E6  3001               	movlw	1
  3175  01E7                     u2135:	
  3176  01E7  36F3               	lsrf	___lmul@multiplier+3,f
  3177  01E8  0CF2               	rrf	___lmul@multiplier+2,f
  3178  01E9  0CF1               	rrf	___lmul@multiplier+1,f
  3179  01EA  0CF0               	rrf	___lmul@multiplier,f
  3180  01EB  0B89               	decfsz	9,f
  3181  01EC  29E7               	goto	u2135
  3182  01ED  0873               	movf	___lmul@multiplier+3,w
  3183  01EE  0472               	iorwf	___lmul@multiplier+2,w
  3184  01EF  0471               	iorwf	___lmul@multiplier+1,w
  3185  01F0  0470               	iorwf	___lmul@multiplier,w
  3186  01F1  1D03               	skipz
  3187  01F2  29D5               	goto	l2261
  3188  01F3  087B               	movf	___lmul@product+3,w
  3189  01F4  00F3               	movwf	?___lmul+3
  3190  01F5  087A               	movf	___lmul@product+2,w
  3191  01F6  00F2               	movwf	?___lmul+2
  3192  01F7  0879               	movf	___lmul@product+1,w
  3193  01F8  00F1               	movwf	?___lmul+1
  3194  01F9  0878               	movf	___lmul@product,w
  3195  01FA  00F0               	movwf	?___lmul
  3196  01FB  0008               	return
  3197  01FC                     __end_of___lmul:	
  3198                           
  3199                           	psect	text7
  3200  03A6                     __ptext7:	
  3201 ;; *************** function ___lldiv *****************
  3202 ;; Defined at:
  3203 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
  3204 ;; Parameters:    Size  Location     Type
  3205 ;;  divisor         4    0[BANK0 ] unsigned long 
  3206 ;;  dividend        4    4[BANK0 ] unsigned long 
  3207 ;; Auto vars:     Size  Location     Type
  3208 ;;  quotient        4    8[BANK0 ] unsigned long 
  3209 ;;  counter         1   12[BANK0 ] unsigned char 
  3210 ;; Return value:  Size  Location     Type
  3211 ;;                  4    0[BANK0 ] unsigned long 
  3212 ;; Registers used:
  3213 ;;		wreg, status,2, status,0
  3214 ;; Tracked objects:
  3215 ;;		On entry : 0/0
  3216 ;;		On exit  : 0/0
  3217 ;;		Unchanged: 0/0
  3218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3219 ;;      Params:         0       8       0       0
  3220 ;;      Locals:         0       5       0       0
  3221 ;;      Temps:          1       0       0       0
  3222 ;;      Totals:         1      13       0       0
  3223 ;;Total ram usage:       14 bytes
  3224 ;; Hardware stack levels used:    1
  3225 ;; This function calls:
  3226 ;;		Nothing
  3227 ;; This function is called by:
  3228 ;;		_cw_get_vol
  3229 ;; This function uses a non-reentrant model
  3230 ;;
  3231                           
  3232                           
  3233                           ;psect for function ___lldiv
  3234  03A6                     ___lldiv:	
  3235                           
  3236                           ;incstack = 0
  3237                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3238  03A6  3000               	movlw	0
  3239  03A7  0140               	movlb	0	; select bank0
  3240  03A8  00AB               	movwf	___lldiv@quotient+3
  3241  03A9  3000               	movlw	0
  3242  03AA  00AA               	movwf	___lldiv@quotient+2
  3243  03AB  3000               	movlw	0
  3244  03AC  00A9               	movwf	___lldiv@quotient+1
  3245  03AD  3000               	movlw	0
  3246  03AE  00A8               	movwf	___lldiv@quotient
  3247  03AF  0823               	movf	___lldiv@divisor+3,w
  3248  03B0  0422               	iorwf	___lldiv@divisor+2,w
  3249  03B1  0421               	iorwf	___lldiv@divisor+1,w
  3250  03B2  0420               	iorwf	___lldiv@divisor,w
  3251  03B3  1903               	skipnz
  3252  03B4  2BF0               	goto	l2293
  3253  03B5  01AC               	clrf	___lldiv@counter
  3254  03B6  0AAC               	incf	___lldiv@counter,f
  3255  03B7                     l2279:	
  3256  03B7  1BA3               	btfsc	___lldiv@divisor+3,7
  3257  03B8  2BC5               	goto	l2281
  3258  03B9  3001               	movlw	1
  3259  03BA                     u2165:	
  3260  03BA  35A0               	lslf	___lldiv@divisor,f
  3261  03BB  0DA1               	rlf	___lldiv@divisor+1,f
  3262  03BC  0DA2               	rlf	___lldiv@divisor+2,f
  3263  03BD  0DA3               	rlf	___lldiv@divisor+3,f
  3264  03BE  0B89               	decfsz	9,f
  3265  03BF  2BBA               	goto	u2165
  3266  03C0  3001               	movlw	1
  3267  03C1  00FC               	movwf	??___lldiv
  3268  03C2  087C               	movf	??___lldiv,w
  3269  03C3  07AC               	addwf	___lldiv@counter,f
  3270  03C4  2BB7               	goto	l2279
  3271  03C5                     l2281:	
  3272  03C5  3001               	movlw	1
  3273  03C6                     u2185:	
  3274  03C6  35A8               	lslf	___lldiv@quotient,f
  3275  03C7  0DA9               	rlf	___lldiv@quotient+1,f
  3276  03C8  0DAA               	rlf	___lldiv@quotient+2,f
  3277  03C9  0DAB               	rlf	___lldiv@quotient+3,f
  3278  03CA  0B89               	decfsz	9,f
  3279  03CB  2BC6               	goto	u2185
  3280  03CC  0823               	movf	___lldiv@divisor+3,w
  3281  03CD  0227               	subwf	___lldiv@dividend+3,w
  3282  03CE  1D03               	skipz
  3283  03CF  2BDA               	goto	u2195
  3284  03D0  0822               	movf	___lldiv@divisor+2,w
  3285  03D1  0226               	subwf	___lldiv@dividend+2,w
  3286  03D2  1D03               	skipz
  3287  03D3  2BDA               	goto	u2195
  3288  03D4  0821               	movf	___lldiv@divisor+1,w
  3289  03D5  0225               	subwf	___lldiv@dividend+1,w
  3290  03D6  1D03               	skipz
  3291  03D7  2BDA               	goto	u2195
  3292  03D8  0820               	movf	___lldiv@divisor,w
  3293  03D9  0224               	subwf	___lldiv@dividend,w
  3294  03DA                     u2195:	
  3295  03DA  1C03               	skipc
  3296  03DB  2BE5               	goto	l2289
  3297  03DC  0820               	movf	___lldiv@divisor,w
  3298  03DD  02A4               	subwf	___lldiv@dividend,f
  3299  03DE  0821               	movf	___lldiv@divisor+1,w
  3300  03DF  3BA5               	subwfb	___lldiv@dividend+1,f
  3301  03E0  0822               	movf	___lldiv@divisor+2,w
  3302  03E1  3BA6               	subwfb	___lldiv@dividend+2,f
  3303  03E2  0823               	movf	___lldiv@divisor+3,w
  3304  03E3  3BA7               	subwfb	___lldiv@dividend+3,f
  3305  03E4  1428               	bsf	___lldiv@quotient,0
  3306  03E5                     l2289:	
  3307  03E5  3001               	movlw	1
  3308  03E6                     u2205:	
  3309  03E6  36A3               	lsrf	___lldiv@divisor+3,f
  3310  03E7  0CA2               	rrf	___lldiv@divisor+2,f
  3311  03E8  0CA1               	rrf	___lldiv@divisor+1,f
  3312  03E9  0CA0               	rrf	___lldiv@divisor,f
  3313  03EA  0B89               	decfsz	9,f
  3314  03EB  2BE6               	goto	u2205
  3315  03EC  3001               	movlw	1
  3316  03ED  02AC               	subwf	___lldiv@counter,f
  3317  03EE  1D03               	btfss	3,2
  3318  03EF  2BC5               	goto	l2281
  3319  03F0                     l2293:	
  3320  03F0  082B               	movf	___lldiv@quotient+3,w
  3321  03F1  00A3               	movwf	?___lldiv+3
  3322  03F2  082A               	movf	___lldiv@quotient+2,w
  3323  03F3  00A2               	movwf	?___lldiv+2
  3324  03F4  0829               	movf	___lldiv@quotient+1,w
  3325  03F5  00A1               	movwf	?___lldiv+1
  3326  03F6  0828               	movf	___lldiv@quotient,w
  3327  03F7  00A0               	movwf	?___lldiv
  3328  03F8  0008               	return
  3329  03F9                     __end_of___lldiv:	
  3330                           
  3331                           	psect	text8
  3332  0043                     __ptext8:	
  3333 ;; *************** function _update_usb_online *****************
  3334 ;; Defined at:
  3335 ;;		line 527 in file "CW201x.c"
  3336 ;; Parameters:    Size  Location     Type
  3337 ;;		None
  3338 ;; Auto vars:     Size  Location     Type
  3339 ;;		None
  3340 ;; Return value:  Size  Location     Type
  3341 ;;                  1    wreg      void 
  3342 ;; Registers used:
  3343 ;;		wreg, status,2, status,0
  3344 ;; Tracked objects:
  3345 ;;		On entry : 0/0
  3346 ;;		On exit  : 0/0
  3347 ;;		Unchanged: 0/0
  3348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3349 ;;      Params:         0       0       0       0
  3350 ;;      Locals:         0       0       0       0
  3351 ;;      Temps:          0       0       0       0
  3352 ;;      Totals:         0       0       0       0
  3353 ;;Total ram usage:        0 bytes
  3354 ;; Hardware stack levels used:    1
  3355 ;; This function calls:
  3356 ;;		Nothing
  3357 ;; This function is called by:
  3358 ;;		_cw_bat_work
  3359 ;; This function uses a non-reentrant model
  3360 ;;
  3361                           
  3362                           
  3363                           ;psect for function _update_usb_online
  3364  0043                     _update_usb_online:	
  3365                           
  3366                           ;CW201x.c: 529: if(CHARGE == 1)
  3367                           
  3368                           ;incstack = 0
  3369                           ; Regs used in _update_usb_online: [wreg+status,2+status,0]
  3370  0043  0140               	movlb	0	; select bank0
  3371  0044  035A               	decf	_CHARGE,w
  3372  0045  045B               	iorwf	_CHARGE+1,w
  3373  0046  1D03               	btfss	3,2
  3374  0047  284B               	goto	l2533
  3375                           
  3376                           ;CW201x.c: 530: {
  3377                           ;CW201x.c: 531: cw_bat.usb_online = 1;
  3378  0048  01CC               	clrf	_cw_bat
  3379  0049  0ACC               	incf	_cw_bat,f
  3380                           
  3381                           ;CW201x.c: 532: }else{
  3382  004A  0008               	return
  3383  004B                     l2533:	
  3384                           
  3385                           ;CW201x.c: 533: cw_bat.usb_online = 0;
  3386  004B  01CC               	clrf	_cw_bat
  3387  004C  0008               	return
  3388  004D                     __end_of_update_usb_online:	
  3389                           
  3390                           	psect	text9
  3391  015B                     __ptext9:	
  3392 ;; *************** function _update_capacity *****************
  3393 ;; Defined at:
  3394 ;;		line 480 in file "CW201x.c"
  3395 ;; Parameters:    Size  Location     Type
  3396 ;;		None
  3397 ;; Auto vars:     Size  Location     Type
  3398 ;;  cw_capacity     2   40[BANK0 ] int 
  3399 ;; Return value:  Size  Location     Type
  3400 ;;                  1    wreg      void 
  3401 ;; Registers used:
  3402 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3403 ;; Tracked objects:
  3404 ;;		On entry : 0/0
  3405 ;;		On exit  : 0/0
  3406 ;;		Unchanged: 0/0
  3407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3408 ;;      Params:         0       0       0       0
  3409 ;;      Locals:         0       2       0       0
  3410 ;;      Temps:          0       1       0       0
  3411 ;;      Totals:         0       3       0       0
  3412 ;;Total ram usage:        3 bytes
  3413 ;; Hardware stack levels used:    1
  3414 ;; Hardware stack levels required when called:    8
  3415 ;; This function calls:
  3416 ;;		_cw_get_capacity
  3417 ;; This function is called by:
  3418 ;;		_cw_bat_work
  3419 ;; This function uses a non-reentrant model
  3420 ;;
  3421                           
  3422                           
  3423                           ;psect for function _update_capacity
  3424  015B                     _update_capacity:	
  3425                           
  3426                           ;CW201x.c: 482: int cw_capacity;
  3427                           ;CW201x.c: 483: cw_capacity = cw_get_capacity();
  3428                           
  3429                           ;incstack = 0
  3430                           ; Regs used in _update_capacity: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3431  015B  26B0               	fcall	_cw_get_capacity
  3432  015C  0140               	movlb	0	; select bank0
  3433  015D  083B               	movf	?_cw_get_capacity+1,w
  3434  015E  00C9               	movwf	update_capacity@cw_capacity+1
  3435  015F  083A               	movf	?_cw_get_capacity,w
  3436  0160  00C8               	movwf	update_capacity@cw_capacity
  3437                           
  3438                           ;CW201x.c: 484: if((cw_capacity >= 0) && (cw_capacity <= 100) && (cw_bat.capacity != cw_
      +                          capacity))
  3439  0161  1BC9               	btfsc	update_capacity@cw_capacity+1,7
  3440  0162  0008               	return
  3441  0163  0849               	movf	update_capacity@cw_capacity+1,w
  3442  0164  3A80               	xorlw	128
  3443  0165  00C7               	movwf	??_update_capacity
  3444  0166  3080               	movlw	128
  3445  0167  0247               	subwf	??_update_capacity,w
  3446  0168  1D03               	skipz
  3447  0169  296C               	goto	u2665
  3448  016A  3065               	movlw	101
  3449  016B  0248               	subwf	update_capacity@cw_capacity,w
  3450  016C                     u2665:	
  3451  016C  1803               	skipnc
  3452  016D  0008               	return
  3453  016E  0140               	movlb	0	; select bank0
  3454  016F  0849               	movf	update_capacity@cw_capacity+1,w
  3455  0170  064E               	xorwf	_cw_bat+2,w
  3456  0171  1D03               	skipz
  3457  0172  2975               	goto	u2675
  3458  0173  0848               	movf	update_capacity@cw_capacity,w
  3459  0174  064D               	xorwf	_cw_bat+1,w
  3460  0175                     u2675:	
  3461  0175  1903               	skipnz
  3462  0176  0008               	return
  3463                           
  3464                           ;CW201x.c: 485: {
  3465                           ;CW201x.c: 486: cw_bat.capacity = cw_capacity;
  3466  0177  0849               	movf	update_capacity@cw_capacity+1,w
  3467  0178  00CE               	movwf	_cw_bat+2
  3468  0179  0848               	movf	update_capacity@cw_capacity,w
  3469  017A  00CD               	movwf	_cw_bat+1
  3470  017B  0008               	return
  3471  017C                     __end_of_update_capacity:	
  3472                           
  3473                           	psect	text10
  3474  06B0                     __ptext10:	
  3475 ;; *************** function _cw_get_capacity *****************
  3476 ;; Defined at:
  3477 ;;		line 300 in file "CW201x.c"
  3478 ;; Parameters:    Size  Location     Type
  3479 ;;		None
  3480 ;; Auto vars:     Size  Location     Type
  3481 ;;  ret             2   35[BANK0 ] int 
  3482 ;;  cw_capacity     1   38[BANK0 ] unsigned char 
  3483 ;;  allow_capaci    1   37[BANK0 ] unsigned char 
  3484 ;;  reg_val         1   34[BANK0 ] unsigned char 
  3485 ;; Return value:  Size  Location     Type
  3486 ;;                  2   26[BANK0 ] int 
  3487 ;; Registers used:
  3488 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3489 ;; Tracked objects:
  3490 ;;		On entry : 0/0
  3491 ;;		On exit  : 0/0
  3492 ;;		Unchanged: 0/0
  3493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3494 ;;      Params:         0       2       0       0
  3495 ;;      Locals:         0       9       0       0
  3496 ;;      Temps:          0       2       0       0
  3497 ;;      Totals:         0      13       0       0
  3498 ;;Total ram usage:       13 bytes
  3499 ;; Hardware stack levels used:    1
  3500 ;; Hardware stack levels required when called:    7
  3501 ;; This function calls:
  3502 ;;		_cw_por
  3503 ;;		_cw_read
  3504 ;; This function is called by:
  3505 ;;		_update_capacity
  3506 ;; This function uses a non-reentrant model
  3507 ;;
  3508                           
  3509                           
  3510                           ;psect for function _cw_get_capacity
  3511  06B0                     _cw_get_capacity:	
  3512                           
  3513                           ;CW201x.c: 302: int ret = 0;
  3514                           
  3515                           ;incstack = 0
  3516                           ; Regs used in _cw_get_capacity: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3517  06B0  0140               	movlb	0	; select bank0
  3518  06B1  01C3               	clrf	cw_get_capacity@ret
  3519  06B2  01C4               	clrf	cw_get_capacity@ret+1
  3520                           
  3521                           ;CW201x.c: 303: unsigned char allow_capacity;
  3522                           ;CW201x.c: 304: unsigned char reg_val;
  3523                           ;CW201x.c: 306: unsigned char cw_capacity;
  3524                           ;CW201x.c: 309: ret = cw_read(0x4, &reg_val);
  3525  06B3  3042               	movlw	(low (cw_get_capacity@reg_val| 0))& (0+255)
  3526  06B4  00BC               	movwf	??_cw_get_capacity
  3527  06B5  083C               	movf	??_cw_get_capacity,w
  3528  06B6  00A4               	movwf	cw_read@r_pdata
  3529  06B7  3004               	movlw	4
  3530  06B8  2260               	fcall	_cw_read
  3531  06B9  0140               	movlb	0	; select bank0
  3532  06BA  0825               	movf	?_cw_read+1,w
  3533  06BB  00C4               	movwf	cw_get_capacity@ret+1
  3534  06BC  0824               	movf	?_cw_read,w
  3535  06BD  00C3               	movwf	cw_get_capacity@ret
  3536                           
  3537                           ;CW201x.c: 310: if(ret)
  3538  06BE  0843               	movf	cw_get_capacity@ret,w
  3539  06BF  0444               	iorwf	cw_get_capacity@ret+1,w
  3540  06C0  1903               	btfsc	3,2
  3541  06C1  2EC7               	goto	l2307
  3542                           
  3543                           ;CW201x.c: 311: {
  3544                           ;CW201x.c: 312: return -1;
  3545  06C2  30FF               	movlw	255
  3546  06C3  00BA               	movwf	?_cw_get_capacity
  3547  06C4  30FF               	movlw	255
  3548  06C5  00BB               	movwf	?_cw_get_capacity+1
  3549  06C6  0008               	return
  3550  06C7                     l2307:	
  3551                           
  3552                           ;CW201x.c: 313: }
  3553                           ;CW201x.c: 315: cw_capacity = reg_val;
  3554  06C7  0842               	movf	cw_get_capacity@reg_val,w
  3555  06C8  00BC               	movwf	??_cw_get_capacity
  3556  06C9  083C               	movf	??_cw_get_capacity,w
  3557  06CA  00C6               	movwf	cw_get_capacity@cw_capacity
  3558                           
  3559                           ;CW201x.c: 317: if ((cw_capacity < 0) || (cw_capacity > 100)) {
  3560  06CB  3065               	movlw	101
  3561  06CC  0246               	subwf	cw_get_capacity@cw_capacity,w
  3562  06CD  1C03               	skipc
  3563  06CE  2EEC               	goto	l2329
  3564                           
  3565                           ;CW201x.c: 319: reset_loop++;
  3566  06CF  3001               	movlw	1
  3567  06D0  00BC               	movwf	??_cw_get_capacity
  3568  06D1  083C               	movf	??_cw_get_capacity,w
  3569  06D2  07DC               	addwf	_reset_loop,f
  3570                           
  3571                           ;CW201x.c: 320: if (reset_loop >5) {
  3572  06D3  3006               	movlw	6
  3573  06D4  025C               	subwf	_reset_loop,w
  3574  06D5  1C03               	skipc
  3575  06D6  2EE7               	goto	l2323
  3576                           
  3577                           ;CW201x.c: 321: ret = cw_por();
  3578  06D7  235E               	fcall	_cw_por
  3579  06D8  0140               	movlb	0	; select bank0
  3580  06D9  0834               	movf	?_cw_por+1,w
  3581  06DA  00C4               	movwf	cw_get_capacity@ret+1
  3582  06DB  0833               	movf	?_cw_por,w
  3583  06DC  00C3               	movwf	cw_get_capacity@ret
  3584                           
  3585                           ;CW201x.c: 322: if(ret)
  3586  06DD  0843               	movf	cw_get_capacity@ret,w
  3587  06DE  0444               	iorwf	cw_get_capacity@ret+1,w
  3588  06DF  1903               	btfsc	3,2
  3589  06E0  2EE6               	goto	l2321
  3590                           
  3591                           ;CW201x.c: 323: return -1;
  3592  06E1  30FF               	movlw	255
  3593  06E2  00BA               	movwf	?_cw_get_capacity
  3594  06E3  30FF               	movlw	255
  3595  06E4  00BB               	movwf	?_cw_get_capacity+1
  3596  06E5  0008               	return
  3597  06E6                     l2321:	
  3598                           
  3599                           ;CW201x.c: 324: reset_loop =0;
  3600  06E6  01DC               	clrf	_reset_loop
  3601  06E7                     l2323:	
  3602                           
  3603                           ;CW201x.c: 325: }
  3604                           ;CW201x.c: 326: return cw_bat.capacity;
  3605  06E7  084E               	movf	_cw_bat+2,w
  3606  06E8  00BB               	movwf	?_cw_get_capacity+1
  3607  06E9  084D               	movf	_cw_bat+1,w
  3608  06EA  00BA               	movwf	?_cw_get_capacity
  3609  06EB  0008               	return
  3610  06EC                     l2329:	
  3611                           ;CW201x.c: 327: }else {
  3612                           
  3613                           
  3614                           ;CW201x.c: 328: reset_loop =0;
  3615  06EC  01DC               	clrf	_reset_loop
  3616                           
  3617                           ;CW201x.c: 329: }
  3618                           ;CW201x.c: 335: if(((cw_bat.usb_online == 1) && (cw_capacity == (cw_bat.capacity - 1)))
  3619                           ;CW201x.c: 336: || ((cw_bat.usb_online == 0) && (cw_capacity == (cw_bat.capacity + 1))))
  3620  06ED  034C               	decf	_cw_bat,w
  3621  06EE  1D03               	btfss	3,2
  3622  06EF  2EFB               	goto	l2335
  3623  06F0  084D               	movf	_cw_bat+1,w
  3624  06F1  3EFF               	addlw	255
  3625  06F2  00BC               	movwf	??_cw_get_capacity
  3626  06F3  30FF               	movlw	255
  3627  06F4  3D4E               	addwfc	_cw_bat+2,w
  3628  06F5  00BD               	movwf	??_cw_get_capacity+1
  3629  06F6  0846               	movf	cw_get_capacity@cw_capacity,w
  3630  06F7  063C               	xorwf	??_cw_get_capacity,w
  3631  06F8  043D               	iorwf	??_cw_get_capacity+1,w
  3632  06F9  1903               	skipnz
  3633  06FA  2F09               	goto	l2339
  3634  06FB                     l2335:	
  3635  06FB  084C               	movf	_cw_bat,w
  3636  06FC  1D03               	btfss	3,2
  3637  06FD  2F20               	goto	l2349
  3638  06FE  084D               	movf	_cw_bat+1,w
  3639  06FF  3E01               	addlw	1
  3640  0700  00BC               	movwf	??_cw_get_capacity
  3641  0701  3000               	movlw	0
  3642  0702  3D4E               	addwfc	_cw_bat+2,w
  3643  0703  00BD               	movwf	??_cw_get_capacity+1
  3644  0704  0846               	movf	cw_get_capacity@cw_capacity,w
  3645  0705  063C               	xorwf	??_cw_get_capacity,w
  3646  0706  043D               	iorwf	??_cw_get_capacity+1,w
  3647  0707  1D03               	skipz
  3648  0708  2F20               	goto	l2349
  3649  0709                     l2339:	
  3650                           
  3651                           ;CW201x.c: 337: {
  3652                           ;CW201x.c: 339: if(!((cw_capacity == 0 && cw_bat.capacity <= 2)||(cw_capacity == 100 && 
      +                          cw_bat.capacity == 99)))
  3653  0709  0846               	movf	cw_get_capacity@cw_capacity,w
  3654  070A  1D03               	btfss	3,2
  3655  070B  2F13               	goto	l2343
  3656  070C  3000               	movlw	0
  3657  070D  024E               	subwf	_cw_bat+2,w
  3658  070E  3003               	movlw	3
  3659  070F  1903               	skipnz
  3660  0710  024D               	subwf	_cw_bat+1,w
  3661  0711  1C03               	skipc
  3662  0712  2F20               	goto	l2349
  3663  0713                     l2343:	
  3664  0713  3064               	movlw	100
  3665  0714  0646               	xorwf	cw_get_capacity@cw_capacity,w
  3666  0715  1D03               	btfss	3,2
  3667  0716  2F1C               	goto	l2347
  3668  0717  3063               	movlw	99
  3669  0718  064D               	xorwf	_cw_bat+1,w
  3670  0719  044E               	iorwf	_cw_bat+2,w
  3671  071A  1903               	btfsc	3,2
  3672  071B  2F20               	goto	l2349
  3673  071C                     l2347:	
  3674                           
  3675                           ;CW201x.c: 340: {
  3676                           ;CW201x.c: 341: cw_capacity = cw_bat.capacity;
  3677  071C  084D               	movf	_cw_bat+1,w
  3678  071D  00BC               	movwf	??_cw_get_capacity
  3679  071E  083C               	movf	??_cw_get_capacity,w
  3680  071F  00C6               	movwf	cw_get_capacity@cw_capacity
  3681  0720                     l2349:	
  3682                           
  3683                           ;CW201x.c: 342: }
  3684                           ;CW201x.c: 343: }
  3685                           ;CW201x.c: 350: if((cw_bat.usb_online == 1) && (cw_capacity >= 95) && (cw_capacity <= cw
      +                          _bat.capacity) )
  3686  0720  034C               	decf	_cw_bat,w
  3687  0721  1D03               	btfss	3,2
  3688  0722  2F5A               	goto	l2371
  3689  0723  305F               	movlw	95
  3690  0724  0246               	subwf	cw_get_capacity@cw_capacity,w
  3691  0725  1C03               	skipc
  3692  0726  2F5A               	goto	l2371
  3693  0727  0846               	movf	cw_get_capacity@cw_capacity,w
  3694  0728  00BC               	movwf	??_cw_get_capacity
  3695  0729  01BD               	clrf	??_cw_get_capacity+1
  3696  072A  083D               	movf	??_cw_get_capacity+1,w
  3697  072B  024E               	subwf	_cw_bat+2,w
  3698  072C  1D03               	skipz
  3699  072D  2F30               	goto	u2365
  3700  072E  083C               	movf	??_cw_get_capacity,w
  3701  072F  024D               	subwf	_cw_bat+1,w
  3702  0730                     u2365:	
  3703  0730  1C03               	skipc
  3704  0731  2F5A               	goto	l2371
  3705                           
  3706                           ;CW201x.c: 351: {
  3707                           ;CW201x.c: 353: allow_no_charger_full++;
  3708  0732  3001               	movlw	1
  3709  0733  07D6               	addwf	_allow_no_charger_full,f
  3710  0734  3000               	movlw	0
  3711  0735  3DD7               	addwfc	_allow_no_charger_full+1,f
  3712                           
  3713                           ;CW201x.c: 354: if(allow_no_charger_full >= 720)
  3714  0736  3002               	movlw	2
  3715  0737  0257               	subwf	_allow_no_charger_full+1,w
  3716  0738  30D0               	movlw	208
  3717  0739  1903               	skipnz
  3718  073A  0256               	subwf	_allow_no_charger_full,w
  3719  073B  1C03               	skipc
  3720  073C  2F9B               	goto	l2397
  3721                           
  3722                           ;CW201x.c: 355: {
  3723                           ;CW201x.c: 356: allow_capacity = cw_bat.capacity + 1;
  3724  073D  084D               	movf	_cw_bat+1,w
  3725  073E  3E01               	addlw	1
  3726  073F  00BC               	movwf	??_cw_get_capacity
  3727  0740  083C               	movf	??_cw_get_capacity,w
  3728  0741  00C5               	movwf	cw_get_capacity@allow_capacity
  3729                           
  3730                           ;CW201x.c: 357: cw_capacity = (allow_capacity <= 100) ? allow_capacity : 100;
  3731  0742  3065               	movlw	101
  3732  0743  0245               	subwf	cw_get_capacity@allow_capacity,w
  3733  0744  1C03               	skipc
  3734  0745  2F4A               	goto	l2363
  3735  0746  3064               	movlw	100
  3736  0747  00BE               	movwf	_cw_get_capacity$288
  3737  0748  3000               	movlw	0
  3738  0749  2F50               	goto	L4
  3739  074A                     l2363:	
  3740  074A  0845               	movf	cw_get_capacity@allow_capacity,w
  3741  074B  00BC               	movwf	??_cw_get_capacity
  3742  074C  01BD               	clrf	??_cw_get_capacity+1
  3743  074D  083C               	movf	??_cw_get_capacity,w
  3744  074E  00BE               	movwf	_cw_get_capacity$288
  3745  074F  083D               	movf	??_cw_get_capacity+1,w
  3746  0750                     L4:	
  3747  0750  00BF               	movwf	_cw_get_capacity$288+1
  3748  0751  083E               	movf	_cw_get_capacity$288,w
  3749  0752  00BC               	movwf	??_cw_get_capacity
  3750  0753  083C               	movf	??_cw_get_capacity,w
  3751  0754  00C6               	movwf	cw_get_capacity@cw_capacity
  3752                           
  3753                           ;CW201x.c: 358: no_charger_full_jump =1;
  3754  0755  3001               	movlw	1
  3755  0756  00D8               	movwf	_no_charger_full_jump
  3756  0757  3000               	movlw	0
  3757  0758  00D9               	movwf	_no_charger_full_jump+1
  3758  0759  2FAB               	goto	l2401
  3759  075A                     l2371:	
  3760                           ;CW201x.c: 364: }
  3761                           ;CW201x.c: 365: }
  3762                           
  3763                           ;CW201x.c: 362: {
  3764                           ;CW201x.c: 363: cw_capacity = cw_bat.capacity;
  3765                           
  3766                           ;CW201x.c: 361: else if(cw_capacity <= cw_bat.capacity)
  3767                           
  3768                           ;CW201x.c: 360: }
  3769                           
  3770                           ;CW201x.c: 359: allow_no_charger_full =0;
  3771                           
  3772                           
  3773                           ;CW201x.c: 367: else if((cw_bat.usb_online == 0) && (cw_capacity <= cw_bat.capacity ) &&
      +                           (cw_capacity >= 90) && (no_charger_full_jump == 1))
  3774  075A  084C               	movf	_cw_bat,w
  3775  075B  1D03               	btfss	3,2
  3776  075C  2FAB               	goto	l2401
  3777  075D  0846               	movf	cw_get_capacity@cw_capacity,w
  3778  075E  00BC               	movwf	??_cw_get_capacity
  3779  075F  01BD               	clrf	??_cw_get_capacity+1
  3780  0760  083D               	movf	??_cw_get_capacity+1,w
  3781  0761  024E               	subwf	_cw_bat+2,w
  3782  0762  1D03               	skipz
  3783  0763  2F66               	goto	u2415
  3784  0764  083C               	movf	??_cw_get_capacity,w
  3785  0765  024D               	subwf	_cw_bat+1,w
  3786  0766                     u2415:	
  3787  0766  1C03               	skipc
  3788  0767  2FAB               	goto	l2401
  3789  0768  305A               	movlw	90
  3790  0769  0246               	subwf	cw_get_capacity@cw_capacity,w
  3791  076A  1C03               	skipc
  3792  076B  2FAB               	goto	l2401
  3793  076C  0358               	decf	_no_charger_full_jump,w
  3794  076D  0459               	iorwf	_no_charger_full_jump+1,w
  3795  076E  1D03               	btfss	3,2
  3796  076F  2FAB               	goto	l2401
  3797                           
  3798                           ;CW201x.c: 368: {
  3799                           ;CW201x.c: 370: if(cw_bat.usb_online == 0)
  3800  0770  084C               	movf	_cw_bat,w
  3801  0771  1D03               	btfss	3,2
  3802  0772  2F77               	goto	l289
  3803                           
  3804                           ;CW201x.c: 371: allow_no_charger_full++;
  3805  0773  3001               	movlw	1
  3806  0774  07D6               	addwf	_allow_no_charger_full,f
  3807  0775  3000               	movlw	0
  3808  0776  3DD7               	addwfc	_allow_no_charger_full+1,f
  3809  0777                     l289:	
  3810                           
  3811                           ;CW201x.c: 372: if(allow_no_charger_full >= 60)
  3812  0777  3000               	movlw	0
  3813  0778  0257               	subwf	_allow_no_charger_full+1,w
  3814  0779  303C               	movlw	60
  3815  077A  1903               	skipnz
  3816  077B  0256               	subwf	_allow_no_charger_full,w
  3817  077C  1C03               	skipc
  3818  077D  2F9B               	goto	l2397
  3819                           
  3820                           ;CW201x.c: 373: {
  3821                           ;CW201x.c: 374: allow_capacity = cw_bat.capacity - 1;
  3822  077E  084D               	movf	_cw_bat+1,w
  3823  077F  3EFF               	addlw	255
  3824  0780  00BC               	movwf	??_cw_get_capacity
  3825  0781  083C               	movf	??_cw_get_capacity,w
  3826  0782  00C5               	movwf	cw_get_capacity@allow_capacity
  3827                           
  3828                           ;CW201x.c: 375: allow_no_charger_full =0;
  3829  0783  01D6               	clrf	_allow_no_charger_full
  3830  0784  01D7               	clrf	_allow_no_charger_full+1
  3831                           
  3832                           ;CW201x.c: 376: if (cw_capacity >= allow_capacity)
  3833  0785  0845               	movf	cw_get_capacity@allow_capacity,w
  3834  0786  0246               	subwf	cw_get_capacity@cw_capacity,w
  3835  0787  1C03               	skipc
  3836  0788  2F8C               	goto	l2391
  3837                           
  3838                           ;CW201x.c: 377: {
  3839                           ;CW201x.c: 378: no_charger_full_jump =0;
  3840  0789  01D8               	clrf	_no_charger_full_jump
  3841  078A  01D9               	clrf	_no_charger_full_jump+1
  3842                           
  3843                           ;CW201x.c: 379: }
  3844  078B  2FAD               	goto	l2403
  3845  078C                     l2391:	
  3846                           
  3847                           ;CW201x.c: 380: else
  3848                           ;CW201x.c: 381: {
  3849                           ;CW201x.c: 382: cw_capacity = (allow_capacity > 0) ? allow_capacity : 0;
  3850  078C  0845               	movf	cw_get_capacity@allow_capacity,w
  3851  078D  1D03               	btfss	3,2
  3852  078E  2F92               	goto	l2395
  3853  078F  01C0               	clrf	_cw_get_capacity$289
  3854  0790  01C1               	clrf	_cw_get_capacity$289+1
  3855  0791  2F99               	goto	l296
  3856  0792                     l2395:	
  3857  0792  0845               	movf	cw_get_capacity@allow_capacity,w
  3858  0793  00BC               	movwf	??_cw_get_capacity
  3859  0794  01BD               	clrf	??_cw_get_capacity+1
  3860  0795  083C               	movf	??_cw_get_capacity,w
  3861  0796  00C0               	movwf	_cw_get_capacity$289
  3862  0797  083D               	movf	??_cw_get_capacity+1,w
  3863  0798  00C1               	movwf	_cw_get_capacity$289+1
  3864  0799                     l296:	
  3865  0799  0840               	movf	_cw_get_capacity$289,w
  3866  079A  2FA7               	goto	L6
  3867  079B                     l2397:	
  3868                           ;CW201x.c: 383: }
  3869                           ;CW201x.c: 384: }
  3870                           
  3871                           
  3872                           ;CW201x.c: 385: else if(cw_capacity <= cw_bat.capacity)
  3873  079B  0846               	movf	cw_get_capacity@cw_capacity,w
  3874  079C  00BC               	movwf	??_cw_get_capacity
  3875  079D  01BD               	clrf	??_cw_get_capacity+1
  3876  079E  083D               	movf	??_cw_get_capacity+1,w
  3877  079F  024E               	subwf	_cw_bat+2,w
  3878  07A0  1D03               	skipz
  3879  07A1  2FA4               	goto	u2485
  3880  07A2  083C               	movf	??_cw_get_capacity,w
  3881  07A3  024D               	subwf	_cw_bat+1,w
  3882  07A4                     u2485:	
  3883  07A4  1C03               	skipc
  3884  07A5  2FAD               	goto	l2403
  3885                           
  3886                           ;CW201x.c: 386: {
  3887                           ;CW201x.c: 387: cw_capacity = cw_bat.capacity;
  3888  07A6  084D               	movf	_cw_bat+1,w
  3889  07A7                     L6:	
  3890  07A7  00BC               	movwf	??_cw_get_capacity
  3891  07A8  083C               	movf	??_cw_get_capacity,w
  3892  07A9  00C6               	movwf	cw_get_capacity@cw_capacity
  3893                           
  3894                           ;CW201x.c: 388: }
  3895                           ;CW201x.c: 389: }
  3896  07AA  2FAD               	goto	l2403
  3897  07AB                     l2401:	
  3898                           
  3899                           ;CW201x.c: 390: else
  3900                           ;CW201x.c: 391: {
  3901                           ;CW201x.c: 392: allow_no_charger_full =0;
  3902  07AB  01D6               	clrf	_allow_no_charger_full
  3903  07AC  01D7               	clrf	_allow_no_charger_full+1
  3904  07AD                     l2403:	
  3905                           
  3906                           ;CW201x.c: 393: }
  3907                           ;CW201x.c: 396: if((cw_bat.usb_online > 0) && (cw_capacity == 0))
  3908  07AD  084C               	movf	_cw_bat,w
  3909  07AE  1903               	btfsc	3,2
  3910  07AF  2FD5               	goto	l2421
  3911  07B0  0846               	movf	cw_get_capacity@cw_capacity,w
  3912  07B1  1D03               	btfss	3,2
  3913  07B2  2FD5               	goto	l2421
  3914                           
  3915                           ;CW201x.c: 397: {
  3916                           ;CW201x.c: 398: allow_charger_always_zero++;
  3917  07B3  3001               	movlw	1
  3918  07B4  07D4               	addwf	_allow_charger_always_zero,f
  3919  07B5  3000               	movlw	0
  3920  07B6  3DD5               	addwfc	_allow_charger_always_zero+1,f
  3921                           
  3922                           ;CW201x.c: 399: if((allow_charger_always_zero >= 1800) && (if_quickstart == 0))
  3923  07B7  3007               	movlw	7
  3924  07B8  0255               	subwf	_allow_charger_always_zero+1,w
  3925  07B9  3008               	movlw	8
  3926  07BA  1903               	skipnz
  3927  07BB  0254               	subwf	_allow_charger_always_zero,w
  3928  07BC  1C03               	skipc
  3929  07BD  2FDC               	goto	l2427
  3930  07BE  085D               	movf	_if_quickstart,w
  3931  07BF  1D03               	btfss	3,2
  3932  07C0  2FDC               	goto	l2427
  3933                           
  3934                           ;CW201x.c: 400: {
  3935                           ;CW201x.c: 401: ret = cw_por();
  3936  07C1  235E               	fcall	_cw_por
  3937  07C2  0140               	movlb	0	; select bank0
  3938  07C3  0834               	movf	?_cw_por+1,w
  3939  07C4  00C4               	movwf	cw_get_capacity@ret+1
  3940  07C5  0833               	movf	?_cw_por,w
  3941  07C6  00C3               	movwf	cw_get_capacity@ret
  3942                           
  3943                           ;CW201x.c: 402: if(ret){
  3944  07C7  0843               	movf	cw_get_capacity@ret,w
  3945  07C8  0444               	iorwf	cw_get_capacity@ret+1,w
  3946  07C9  1903               	btfsc	3,2
  3947  07CA  2FD0               	goto	l302
  3948                           
  3949                           ;CW201x.c: 403: return -1;
  3950  07CB  30FF               	movlw	255
  3951  07CC  00BA               	movwf	?_cw_get_capacity
  3952  07CD  30FF               	movlw	255
  3953  07CE  00BB               	movwf	?_cw_get_capacity+1
  3954  07CF  0008               	return
  3955  07D0                     l302:	
  3956                           
  3957                           ;CW201x.c: 404: }
  3958                           ;CW201x.c: 405: if_quickstart = 1;
  3959  07D0  01DD               	clrf	_if_quickstart
  3960  07D1  0ADD               	incf	_if_quickstart,f
  3961                           
  3962                           ;CW201x.c: 406: allow_charger_always_zero =0;
  3963  07D2  01D4               	clrf	_allow_charger_always_zero
  3964  07D3  01D5               	clrf	_allow_charger_always_zero+1
  3965                           
  3966                           ;CW201x.c: 407: }
  3967                           ;CW201x.c: 408: }
  3968  07D4  2FDC               	goto	l2427
  3969  07D5                     l2421:	
  3970                           
  3971                           ;CW201x.c: 409: else if((if_quickstart == 1)&&(cw_bat.usb_online == 0))
  3972  07D5  035D               	decf	_if_quickstart,w
  3973  07D6  1D03               	btfss	3,2
  3974  07D7  2FDC               	goto	l2427
  3975  07D8  084C               	movf	_cw_bat,w
  3976  07D9  1D03               	btfss	3,2
  3977  07DA  2FDC               	goto	l2427
  3978                           
  3979                           ;CW201x.c: 410: {
  3980                           ;CW201x.c: 411: if_quickstart = 0;
  3981  07DB  01DD               	clrf	_if_quickstart
  3982  07DC                     l2427:	
  3983                           
  3984                           ;CW201x.c: 412: }
  3985                           ;CW201x.c: 414: return(cw_capacity);
  3986  07DC  0846               	movf	cw_get_capacity@cw_capacity,w
  3987  07DD  00BC               	movwf	??_cw_get_capacity
  3988  07DE  01BD               	clrf	??_cw_get_capacity+1
  3989  07DF  083C               	movf	??_cw_get_capacity,w
  3990  07E0  00BA               	movwf	?_cw_get_capacity
  3991  07E1  083D               	movf	??_cw_get_capacity+1,w
  3992  07E2  00BB               	movwf	?_cw_get_capacity+1
  3993  07E3  0008               	return
  3994  07E4                     __end_of_cw_get_capacity:	
  3995                           
  3996                           	psect	text11
  3997  035E                     __ptext11:	
  3998 ;; *************** function _cw_por *****************
  3999 ;; Defined at:
  4000 ;;		line 278 in file "CW201x.c"
  4001 ;; Parameters:    Size  Location     Type
  4002 ;;		None
  4003 ;; Auto vars:     Size  Location     Type
  4004 ;;  ret             2   24[BANK0 ] int 
  4005 ;;  reset_val       1   23[BANK0 ] unsigned char 
  4006 ;; Return value:  Size  Location     Type
  4007 ;;                  2   19[BANK0 ] int 
  4008 ;; Registers used:
  4009 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4010 ;; Tracked objects:
  4011 ;;		On entry : 0/0
  4012 ;;		On exit  : 0/0
  4013 ;;		Unchanged: 0/0
  4014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4015 ;;      Params:         0       2       0       0
  4016 ;;      Locals:         0       3       0       0
  4017 ;;      Temps:          0       2       0       0
  4018 ;;      Totals:         0       7       0       0
  4019 ;;Total ram usage:        7 bytes
  4020 ;; Hardware stack levels used:    1
  4021 ;; Hardware stack levels required when called:    6
  4022 ;; This function calls:
  4023 ;;		_CW_Delay100us
  4024 ;;		_cw_init
  4025 ;;		_cw_write
  4026 ;; This function is called by:
  4027 ;;		_cw_get_capacity
  4028 ;; This function uses a non-reentrant model
  4029 ;;
  4030                           
  4031                           
  4032                           ;psect for function _cw_por
  4033  035E                     _cw_por:	
  4034                           
  4035                           ;CW201x.c: 280: int ret = 0;
  4036                           
  4037                           ;incstack = 0
  4038                           ; Regs used in _cw_por: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4039  035E  0140               	movlb	0	; select bank0
  4040  035F  01B8               	clrf	cw_por@ret
  4041  0360  01B9               	clrf	cw_por@ret+1
  4042                           
  4043                           ;CW201x.c: 281: unsigned char reset_val = 0;
  4044  0361  01B7               	clrf	cw_por@reset_val
  4045                           
  4046                           ;CW201x.c: 282: reset_val = (0x3<<6);
  4047  0362  30C0               	movlw	192
  4048  0363  00B5               	movwf	??_cw_por
  4049  0364  0835               	movf	??_cw_por,w
  4050  0365  00B7               	movwf	cw_por@reset_val
  4051                           
  4052                           ;CW201x.c: 283: ret = cw_write(0xA, &reset_val);
  4053  0366  3037               	movlw	(low (cw_por@reset_val| 0))& (0+255)
  4054  0367  00B5               	movwf	??_cw_por
  4055  0368  0835               	movf	??_cw_por,w
  4056  0369  00A4               	movwf	cw_write@w_pdata
  4057  036A  300A               	movlw	10
  4058  036B  222E               	fcall	_cw_write
  4059  036C  0140               	movlb	0	; select bank0
  4060  036D  0825               	movf	?_cw_write+1,w
  4061  036E  00B9               	movwf	cw_por@ret+1
  4062  036F  0824               	movf	?_cw_write,w
  4063  0370  00B8               	movwf	cw_por@ret
  4064                           
  4065                           ;CW201x.c: 284: if (ret)
  4066  0371  0838               	movf	cw_por@ret,w
  4067  0372  0439               	iorwf	cw_por@ret+1,w
  4068  0373  1903               	btfsc	3,2
  4069  0374  2B7A               	goto	l2195
  4070                           
  4071                           ;CW201x.c: 285: return -1;
  4072  0375  30FF               	movlw	255
  4073  0376  00B3               	movwf	?_cw_por
  4074  0377  30FF               	movlw	255
  4075  0378  00B4               	movwf	?_cw_por+1
  4076  0379  0008               	return
  4077  037A                     l2195:	
  4078                           
  4079                           ;CW201x.c: 286: CW_Delay100us();
  4080  037A  20FA               	fcall	_CW_Delay100us
  4081                           
  4082                           ;CW201x.c: 288: reset_val = (0x0<<6);
  4083  037B  0140               	movlb	0	; select bank0
  4084  037C  01B7               	clrf	cw_por@reset_val
  4085                           
  4086                           ;CW201x.c: 289: ret = cw_write(0xA, &reset_val);
  4087  037D  3037               	movlw	(low (cw_por@reset_val| 0))& (0+255)
  4088  037E  00B5               	movwf	??_cw_por
  4089  037F  0835               	movf	??_cw_por,w
  4090  0380  00A4               	movwf	cw_write@w_pdata
  4091  0381  300A               	movlw	10
  4092  0382  222E               	fcall	_cw_write
  4093  0383  0140               	movlb	0	; select bank0
  4094  0384  0825               	movf	?_cw_write+1,w
  4095  0385  00B9               	movwf	cw_por@ret+1
  4096  0386  0824               	movf	?_cw_write,w
  4097  0387  00B8               	movwf	cw_por@ret
  4098                           
  4099                           ;CW201x.c: 290: if (ret)
  4100  0388  0838               	movf	cw_por@ret,w
  4101  0389  0439               	iorwf	cw_por@ret+1,w
  4102  038A  1903               	btfsc	3,2
  4103  038B  2B91               	goto	l2207
  4104                           
  4105                           ;CW201x.c: 291: return -1;
  4106  038C  30FF               	movlw	255
  4107  038D  00B3               	movwf	?_cw_por
  4108  038E  30FF               	movlw	255
  4109  038F  00B4               	movwf	?_cw_por+1
  4110  0390  0008               	return
  4111  0391                     l2207:	
  4112                           
  4113                           ;CW201x.c: 292: CW_Delay100us();
  4114  0391  20FA               	fcall	_CW_Delay100us
  4115                           
  4116                           ;CW201x.c: 294: ret = cw_init();
  4117  0392  25DA               	fcall	_cw_init
  4118  0393  0140               	movlb	0	; select bank0
  4119  0394  00B5               	movwf	??_cw_por
  4120  0395  01B6               	clrf	??_cw_por+1
  4121  0396  0835               	movf	??_cw_por,w
  4122  0397  00B8               	movwf	cw_por@ret
  4123  0398  0836               	movf	??_cw_por+1,w
  4124  0399  00B9               	movwf	cw_por@ret+1
  4125                           
  4126                           ;CW201x.c: 295: if (ret)
  4127  039A  0838               	movf	cw_por@ret,w
  4128  039B  0439               	iorwf	cw_por@ret+1,w
  4129  039C  1903               	btfsc	3,2
  4130  039D  2BA3               	goto	l2217
  4131                           
  4132                           ;CW201x.c: 296: return ret;
  4133  039E  0839               	movf	cw_por@ret+1,w
  4134  039F  00B4               	movwf	?_cw_por+1
  4135  03A0  0838               	movf	cw_por@ret,w
  4136  03A1  00B3               	movwf	?_cw_por
  4137  03A2  0008               	return
  4138  03A3                     l2217:	
  4139                           
  4140                           ;CW201x.c: 297: return 0;
  4141  03A3  01B3               	clrf	?_cw_por
  4142  03A4  01B4               	clrf	?_cw_por+1
  4143  03A5  0008               	return
  4144  03A6                     __end_of_cw_por:	
  4145                           
  4146                           	psect	text12
  4147  00C0                     __ptext12:	
  4148 ;; *************** function _cw_bat_init *****************
  4149 ;; Defined at:
  4150 ;;		line 560 in file "CW201x.c"
  4151 ;; Parameters:    Size  Location     Type
  4152 ;;		None
  4153 ;; Auto vars:     Size  Location     Type
  4154 ;;  ret             1   21[BANK0 ] unsigned char 
  4155 ;;  loop            1   20[BANK0 ] unsigned char 
  4156 ;; Return value:  Size  Location     Type
  4157 ;;                  1    wreg      unsigned char 
  4158 ;; Registers used:
  4159 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4160 ;; Tracked objects:
  4161 ;;		On entry : 0/0
  4162 ;;		On exit  : 0/0
  4163 ;;		Unchanged: 0/0
  4164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4165 ;;      Params:         0       0       0       0
  4166 ;;      Locals:         0       2       0       0
  4167 ;;      Temps:          0       1       0       0
  4168 ;;      Totals:         0       3       0       0
  4169 ;;Total ram usage:        3 bytes
  4170 ;; Hardware stack levels used:    1
  4171 ;; Hardware stack levels required when called:    6
  4172 ;; This function calls:
  4173 ;;		_cw_init
  4174 ;; This function is called by:
  4175 ;;		_main
  4176 ;; This function uses a non-reentrant model
  4177 ;;
  4178                           
  4179                           
  4180                           ;psect for function _cw_bat_init
  4181  00C0                     _cw_bat_init:	
  4182                           
  4183                           ;CW201x.c: 562: unsigned char ret;
  4184                           ;CW201x.c: 563: unsigned char loop = 0;
  4185                           
  4186                           ;incstack = 0
  4187                           ; Regs used in _cw_bat_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4188  00C0  0140               	movlb	0	; select bank0
  4189  00C1  01B4               	clrf	cw_bat_init@loop
  4190  00C2                     l2545:	
  4191                           ;CW201x.c: 567: while((loop++ < 200) && (ret != 0))
  4192                           
  4193                           ;CW201x.c: 566: ret = cw_init();
  4194                           
  4195                           
  4196                           ;CW201x.c: 568: {
  4197                           ;CW201x.c: 569: ret = cw_init();
  4198  00C2  25DA               	fcall	_cw_init
  4199  00C3  0140               	movlb	0	; select bank0
  4200  00C4  00B3               	movwf	??_cw_bat_init
  4201  00C5  0833               	movf	??_cw_bat_init,w
  4202  00C6  00B5               	movwf	cw_bat_init@ret
  4203  00C7  0834               	movf	cw_bat_init@loop,w
  4204  00C8  0AB4               	incf	cw_bat_init@loop,f
  4205  00C9  00B3               	movwf	??_cw_bat_init
  4206  00CA  30C8               	movlw	200
  4207  00CB  0233               	subwf	??_cw_bat_init,w
  4208  00CC  1803               	skipnc
  4209  00CD  28D1               	goto	l2551
  4210  00CE  0835               	movf	cw_bat_init@ret,w
  4211  00CF  1D03               	btfss	3,2
  4212  00D0  28C2               	goto	l2545
  4213  00D1                     l2551:	
  4214                           
  4215                           ;CW201x.c: 570: }
  4216                           ;CW201x.c: 572: cw_bat.usb_online = 0;
  4217  00D1  01CC               	clrf	_cw_bat
  4218                           
  4219                           ;CW201x.c: 573: cw_bat.capacity = 2;
  4220  00D2  3002               	movlw	2
  4221  00D3  00CD               	movwf	_cw_bat+1
  4222  00D4  3000               	movlw	0
  4223  00D5  00CE               	movwf	_cw_bat+2
  4224                           
  4225                           ;CW201x.c: 574: cw_bat.voltage = 0;
  4226  00D6  01CF               	clrf	_cw_bat+3
  4227  00D7  01D0               	clrf	_cw_bat+4
  4228                           
  4229                           ;CW201x.c: 578: cw_bat.alt = 0;
  4230  00D8  01D1               	clrf	_cw_bat+5
  4231                           
  4232                           ;CW201x.c: 580: return ret;
  4233  00D9  0835               	movf	cw_bat_init@ret,w
  4234  00DA  0008               	return
  4235  00DB                     __end_of_cw_bat_init:	
  4236                           
  4237                           	psect	text13
  4238  05DA                     __ptext13:	
  4239 ;; *************** function _cw_init *****************
  4240 ;; Defined at:
  4241 ;;		line 126 in file "CW201x.c"
  4242 ;; Parameters:    Size  Location     Type
  4243 ;;		None
  4244 ;; Auto vars:     Size  Location     Type
  4245 ;;  ret             2   16[BANK0 ] unsigned int 
  4246 ;;  reg_val         1   18[BANK0 ] unsigned char 
  4247 ;;  i               1   15[BANK0 ] unsigned char 
  4248 ;; Return value:  Size  Location     Type
  4249 ;;                  1    wreg      unsigned char 
  4250 ;; Registers used:
  4251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4252 ;; Tracked objects:
  4253 ;;		On entry : 0/0
  4254 ;;		On exit  : 0/0
  4255 ;;		Unchanged: 0/0
  4256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4257 ;;      Params:         0       0       0       0
  4258 ;;      Locals:         0       4       0       0
  4259 ;;      Temps:          0       2       0       0
  4260 ;;      Totals:         0       6       0       0
  4261 ;;Total ram usage:        6 bytes
  4262 ;; Hardware stack levels used:    1
  4263 ;; Hardware stack levels required when called:    5
  4264 ;; This function calls:
  4265 ;;		_CW_Delay10ms
  4266 ;;		_cw_read
  4267 ;;		_cw_update_config_info
  4268 ;;		_cw_write
  4269 ;; This function is called by:
  4270 ;;		_cw_por
  4271 ;;		_cw_bat_init
  4272 ;; This function uses a non-reentrant model
  4273 ;;
  4274                           
  4275                           
  4276                           ;psect for function _cw_init
  4277  05DA                     _cw_init:	
  4278                           
  4279                           ;CW201x.c: 128: unsigned ret;
  4280                           ;CW201x.c: 129: unsigned char i;
  4281                           ;CW201x.c: 130: unsigned char reg_val = (0x0<<6);
  4282                           
  4283                           ;incstack = 0
  4284                           ; Regs used in _cw_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4285  05DA  0140               	movlb	0	; select bank0
  4286  05DB  01B2               	clrf	cw_init@reg_val
  4287                           
  4288                           ;CW201x.c: 133: ret = cw_write(0xA, &reg_val);
  4289  05DC  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4290  05DD  00AD               	movwf	??_cw_init
  4291  05DE  082D               	movf	??_cw_init,w
  4292  05DF  00A4               	movwf	cw_write@w_pdata
  4293  05E0  300A               	movlw	10
  4294  05E1  222E               	fcall	_cw_write
  4295  05E2  0140               	movlb	0	; select bank0
  4296  05E3  0825               	movf	?_cw_write+1,w
  4297  05E4  00B1               	movwf	cw_init@ret+1
  4298  05E5  0824               	movf	?_cw_write,w
  4299  05E6  00B0               	movwf	cw_init@ret
  4300                           
  4301                           ;CW201x.c: 134: if(ret)
  4302  05E7  0830               	movf	cw_init@ret,w
  4303  05E8  0431               	iorwf	cw_init@ret+1,w
  4304  05E9  1903               	btfsc	3,2
  4305  05EA  2DED               	goto	l2067
  4306                           
  4307                           ;CW201x.c: 135: {
  4308                           ;CW201x.c: 136: return 1;
  4309  05EB  3001               	movlw	1
  4310  05EC  0008               	return
  4311  05ED                     l2067:	
  4312                           
  4313                           ;CW201x.c: 137: }
  4314                           ;CW201x.c: 140: ret = cw_read(0x8, &reg_val);
  4315  05ED  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4316  05EE  00AD               	movwf	??_cw_init
  4317  05EF  082D               	movf	??_cw_init,w
  4318  05F0  00A4               	movwf	cw_read@r_pdata
  4319  05F1  3008               	movlw	8
  4320  05F2  2260               	fcall	_cw_read
  4321  05F3  0140               	movlb	0	; select bank0
  4322  05F4  0825               	movf	?_cw_read+1,w
  4323  05F5  00B1               	movwf	cw_init@ret+1
  4324  05F6  0824               	movf	?_cw_read,w
  4325  05F7  00B0               	movwf	cw_init@ret
  4326                           
  4327                           ;CW201x.c: 141: if(ret)
  4328  05F8  0830               	movf	cw_init@ret,w
  4329  05F9  0431               	iorwf	cw_init@ret+1,w
  4330  05FA  1903               	btfsc	3,2
  4331  05FB  2DFE               	goto	l2075
  4332                           
  4333                           ;CW201x.c: 142: {
  4334                           ;CW201x.c: 143: return 1;
  4335  05FC  3001               	movlw	1
  4336  05FD  0008               	return
  4337  05FE                     l2075:	
  4338                           
  4339                           ;CW201x.c: 144: }
  4340                           ;CW201x.c: 145: if((reg_val & 0xf8) != (0x0<<3))
  4341  05FE  0832               	movf	cw_init@reg_val,w
  4342  05FF  39F8               	andlw	248
  4343  0600  1903               	btfsc	3,2
  4344  0601  2E17               	goto	l2087
  4345                           
  4346                           ;CW201x.c: 149: reg_val |= (0x0<<3);
  4347  0602  3007               	movlw	7
  4348  0603  00AD               	movwf	??_cw_init
  4349  0604  082D               	movf	??_cw_init,w
  4350  0605  05B2               	andwf	cw_init@reg_val,f
  4351                           
  4352                           ;CW201x.c: 150: ret = cw_write(0x8, &reg_val);
  4353  0606  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4354  0607  00AD               	movwf	??_cw_init
  4355  0608  082D               	movf	??_cw_init,w
  4356  0609  00A4               	movwf	cw_write@w_pdata
  4357  060A  3008               	movlw	8
  4358  060B  222E               	fcall	_cw_write
  4359  060C  0140               	movlb	0	; select bank0
  4360  060D  0825               	movf	?_cw_write+1,w
  4361  060E  00B1               	movwf	cw_init@ret+1
  4362  060F  0824               	movf	?_cw_write,w
  4363  0610  00B0               	movwf	cw_init@ret
  4364                           
  4365                           ;CW201x.c: 151: if(ret)
  4366  0611  0830               	movf	cw_init@ret,w
  4367  0612  0431               	iorwf	cw_init@ret+1,w
  4368  0613  1903               	btfsc	3,2
  4369  0614  2E17               	goto	l2087
  4370                           
  4371                           ;CW201x.c: 152: {
  4372                           ;CW201x.c: 153: return 1;
  4373  0615  3001               	movlw	1
  4374  0616  0008               	return
  4375  0617                     l2087:	
  4376                           
  4377                           ;CW201x.c: 154: }
  4378                           ;CW201x.c: 155: }
  4379                           ;CW201x.c: 158: ret = cw_read(0x8, &reg_val);
  4380  0617  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4381  0618  00AD               	movwf	??_cw_init
  4382  0619  082D               	movf	??_cw_init,w
  4383  061A  00A4               	movwf	cw_read@r_pdata
  4384  061B  3008               	movlw	8
  4385  061C  2260               	fcall	_cw_read
  4386  061D  0140               	movlb	0	; select bank0
  4387  061E  0825               	movf	?_cw_read+1,w
  4388  061F  00B1               	movwf	cw_init@ret+1
  4389  0620  0824               	movf	?_cw_read,w
  4390  0621  00B0               	movwf	cw_init@ret
  4391                           
  4392                           ;CW201x.c: 159: if(ret)
  4393  0622  0830               	movf	cw_init@ret,w
  4394  0623  0431               	iorwf	cw_init@ret+1,w
  4395  0624  1903               	btfsc	3,2
  4396  0625  2E28               	goto	l239
  4397                           
  4398                           ;CW201x.c: 160: {
  4399                           ;CW201x.c: 161: return 1;
  4400  0626  3001               	movlw	1
  4401  0627  0008               	return
  4402  0628                     l239:	
  4403                           
  4404                           ;CW201x.c: 162: }
  4405                           ;CW201x.c: 163: if(!(reg_val & (0x1<<1)))
  4406  0628  18B2               	btfsc	cw_init@reg_val,1
  4407  0629  2E38               	goto	l2103
  4408                           
  4409                           ;CW201x.c: 164: {
  4410                           ;CW201x.c: 166: ret = cw_update_config_info();
  4411  062A  245A               	fcall	_cw_update_config_info
  4412  062B  0140               	movlb	0	; select bank0
  4413  062C  00AD               	movwf	??_cw_init
  4414  062D  01AE               	clrf	??_cw_init+1
  4415  062E  082D               	movf	??_cw_init,w
  4416  062F  00B0               	movwf	cw_init@ret
  4417  0630  082E               	movf	??_cw_init+1,w
  4418  0631  00B1               	movwf	cw_init@ret+1
  4419                           
  4420                           ;CW201x.c: 167: if(ret)
  4421  0632  0830               	movf	cw_init@ret,w
  4422  0633  0431               	iorwf	cw_init@ret+1,w
  4423  0634  1903               	btfsc	3,2
  4424  0635  2E71               	goto	l2135
  4425                           
  4426                           ;CW201x.c: 168: {
  4427                           ;CW201x.c: 169: return ret;
  4428  0636  0830               	movf	cw_init@ret,w
  4429  0637  0008               	return
  4430  0638                     l2103:	
  4431                           ;CW201x.c: 170: }
  4432                           ;CW201x.c: 171: }
  4433                           
  4434                           
  4435                           ;CW201x.c: 172: else
  4436                           ;CW201x.c: 173: {
  4437                           ;CW201x.c: 174: for(i = 0; i < 64; i++)
  4438  0638  01AF               	clrf	cw_init@i
  4439  0639  3040               	movlw	64
  4440  063A  022F               	subwf	cw_init@i,w
  4441  063B  1803               	btfsc	3,0
  4442  063C  2E5F               	goto	l2125
  4443  063D                     l2109:	
  4444                           
  4445                           ;CW201x.c: 175: {
  4446                           ;CW201x.c: 176: ret = cw_read(0x10 +i, &reg_val);
  4447  063D  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4448  063E  00AD               	movwf	??_cw_init
  4449  063F  082D               	movf	??_cw_init,w
  4450  0640  00A4               	movwf	cw_read@r_pdata
  4451  0641  082F               	movf	cw_init@i,w
  4452  0642  3E10               	addlw	16
  4453  0643  2260               	fcall	_cw_read
  4454  0644  0140               	movlb	0	; select bank0
  4455  0645  0825               	movf	?_cw_read+1,w
  4456  0646  00B1               	movwf	cw_init@ret+1
  4457  0647  0824               	movf	?_cw_read,w
  4458  0648  00B0               	movwf	cw_init@ret
  4459                           
  4460                           ;CW201x.c: 177: if(ret)
  4461  0649  0830               	movf	cw_init@ret,w
  4462  064A  0431               	iorwf	cw_init@ret+1,w
  4463  064B  1903               	btfsc	3,2
  4464  064C  2E4F               	goto	l2117
  4465                           
  4466                           ;CW201x.c: 178: {
  4467                           ;CW201x.c: 179: return 1;
  4468  064D  3001               	movlw	1
  4469  064E  0008               	return
  4470  064F                     l2117:	
  4471                           
  4472                           ;CW201x.c: 180: }
  4473                           ;CW201x.c: 181: if(cw_bat_config_info[i] != reg_val)
  4474  064F  082F               	movf	cw_init@i,w
  4475  0650  3EA0               	addlw	(low (CW201x@cw_bat_config_info| 0))& (0+255)
  4476  0651  0086               	movwf	6
  4477  0652  0187               	clrf	7
  4478  0653  0801               	movf	1,w
  4479  0654  0632               	xorwf	cw_init@reg_val,w
  4480  0655  1D03               	btfss	3,2
  4481  0656  2E5F               	goto	l2125
  4482                           
  4483                           ;CW201x.c: 182: {
  4484                           ;CW201x.c: 183: break;
  4485  0657  3001               	movlw	1
  4486  0658  00AD               	movwf	??_cw_init
  4487  0659  082D               	movf	??_cw_init,w
  4488  065A  07AF               	addwf	cw_init@i,f
  4489  065B  3040               	movlw	64
  4490  065C  022F               	subwf	cw_init@i,w
  4491  065D  1C03               	skipc
  4492  065E  2E3D               	goto	l2109
  4493  065F                     l2125:	
  4494                           
  4495                           ;CW201x.c: 184: }
  4496                           ;CW201x.c: 185: }
  4497                           ;CW201x.c: 186: if(i != 64)
  4498  065F  3040               	movlw	64
  4499  0660  062F               	xorwf	cw_init@i,w
  4500  0661  1903               	btfsc	3,2
  4501  0662  2E71               	goto	l2135
  4502                           
  4503                           ;CW201x.c: 187: {
  4504                           ;CW201x.c: 189: ret = cw_update_config_info();
  4505  0663  245A               	fcall	_cw_update_config_info
  4506  0664  0140               	movlb	0	; select bank0
  4507  0665  00AD               	movwf	??_cw_init
  4508  0666  01AE               	clrf	??_cw_init+1
  4509  0667  082D               	movf	??_cw_init,w
  4510  0668  00B0               	movwf	cw_init@ret
  4511  0669  082E               	movf	??_cw_init+1,w
  4512  066A  00B1               	movwf	cw_init@ret+1
  4513                           
  4514                           ;CW201x.c: 190: if(ret)
  4515  066B  0830               	movf	cw_init@ret,w
  4516  066C  0431               	iorwf	cw_init@ret+1,w
  4517  066D  1903               	btfsc	3,2
  4518  066E  2E71               	goto	l2135
  4519                           
  4520                           ;CW201x.c: 191: {
  4521                           ;CW201x.c: 192: return ret;
  4522  066F  0830               	movf	cw_init@ret,w
  4523  0670  0008               	return
  4524  0671                     l2135:	
  4525                           
  4526                           ;CW201x.c: 193: }
  4527                           ;CW201x.c: 194: }
  4528                           ;CW201x.c: 195: }
  4529                           ;CW201x.c: 197: for (i = 0; i < 30; i++) {
  4530  0671  01AF               	clrf	cw_init@i
  4531  0672  301E               	movlw	30
  4532  0673  022F               	subwf	cw_init@i,w
  4533  0674  1803               	btfsc	3,0
  4534  0675  2E99               	goto	l2161
  4535  0676                     l2141:	
  4536                           
  4537                           ;CW201x.c: 198: CW_Delay10ms(10);
  4538  0676  300A               	movlw	10
  4539  0677  00F0               	movwf	CW_Delay10ms@c
  4540  0678  3000               	movlw	0
  4541  0679  00F1               	movwf	CW_Delay10ms@c+1
  4542  067A  213A               	fcall	_CW_Delay10ms
  4543                           
  4544                           ;CW201x.c: 199: ret = cw_read(0x4, &reg_val);
  4545  067B  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4546  067C  0140               	movlb	0	; select bank0
  4547  067D  00AD               	movwf	??_cw_init
  4548  067E  082D               	movf	??_cw_init,w
  4549  067F  00A4               	movwf	cw_read@r_pdata
  4550  0680  3004               	movlw	4
  4551  0681  2260               	fcall	_cw_read
  4552  0682  0140               	movlb	0	; select bank0
  4553  0683  0825               	movf	?_cw_read+1,w
  4554  0684  00B1               	movwf	cw_init@ret+1
  4555  0685  0824               	movf	?_cw_read,w
  4556  0686  00B0               	movwf	cw_init@ret
  4557                           
  4558                           ;CW201x.c: 200: if (ret)
  4559  0687  0830               	movf	cw_init@ret,w
  4560  0688  0431               	iorwf	cw_init@ret+1,w
  4561  0689  1903               	btfsc	3,2
  4562  068A  2E8D               	goto	l2153
  4563                           
  4564                           ;CW201x.c: 201: return 1;
  4565  068B  3001               	movlw	1
  4566  068C  0008               	return
  4567  068D                     l2153:	
  4568                           
  4569                           ;CW201x.c: 202: else if (reg_val <= 100)
  4570  068D  3065               	movlw	101
  4571  068E  0232               	subwf	cw_init@reg_val,w
  4572  068F  1C03               	btfss	3,0
  4573  0690  2E99               	goto	l2161
  4574                           
  4575                           ;CW201x.c: 203: break;
  4576  0691  3001               	movlw	1
  4577  0692  00AD               	movwf	??_cw_init
  4578  0693  082D               	movf	??_cw_init,w
  4579  0694  07AF               	addwf	cw_init@i,f
  4580  0695  301E               	movlw	30
  4581  0696  022F               	subwf	cw_init@i,w
  4582  0697  1C03               	skipc
  4583  0698  2E76               	goto	l2141
  4584  0699                     l2161:	
  4585                           
  4586                           ;CW201x.c: 204: }
  4587                           ;CW201x.c: 206: if (i >=30){
  4588  0699  301E               	movlw	30
  4589  069A  022F               	subwf	cw_init@i,w
  4590  069B  1C03               	skipc
  4591  069C  2EAE               	goto	l2171
  4592                           
  4593                           ;CW201x.c: 207: reg_val = (0x3<<6);
  4594  069D  30C0               	movlw	192
  4595  069E  00AD               	movwf	??_cw_init
  4596  069F  082D               	movf	??_cw_init,w
  4597  06A0  00B2               	movwf	cw_init@reg_val
  4598                           
  4599                           ;CW201x.c: 208: ret = cw_write(0xA, &reg_val);
  4600  06A1  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4601  06A2  00AD               	movwf	??_cw_init
  4602  06A3  082D               	movf	??_cw_init,w
  4603  06A4  00A4               	movwf	cw_write@w_pdata
  4604  06A5  300A               	movlw	10
  4605  06A6  222E               	fcall	_cw_write
  4606  06A7  0140               	movlb	0	; select bank0
  4607  06A8  0825               	movf	?_cw_write+1,w
  4608  06A9  00B1               	movwf	cw_init@ret+1
  4609  06AA  0824               	movf	?_cw_write,w
  4610  06AB  00B0               	movwf	cw_init@ret
  4611                           
  4612                           ;CW201x.c: 210: return 4;
  4613  06AC  3004               	movlw	4
  4614  06AD  0008               	return
  4615  06AE                     l2171:	
  4616                           
  4617                           ;CW201x.c: 211: }
  4618                           ;CW201x.c: 212: return 0;
  4619  06AE  3000               	movlw	0
  4620  06AF  0008               	return
  4621  06B0                     __end_of_cw_init:	
  4622                           
  4623                           	psect	text14
  4624  045A                     __ptext14:	
  4625 ;; *************** function _cw_update_config_info *****************
  4626 ;; Defined at:
  4627 ;;		line 53 in file "CW201x.c"
  4628 ;; Parameters:    Size  Location     Type
  4629 ;;		None
  4630 ;; Auto vars:     Size  Location     Type
  4631 ;;  ret             2    9[BANK0 ] int 
  4632 ;;  reg_val         1   12[BANK0 ] unsigned char 
  4633 ;;  i               1   11[BANK0 ] unsigned char 
  4634 ;;  reset_val       1    8[BANK0 ] unsigned char 
  4635 ;; Return value:  Size  Location     Type
  4636 ;;                  1    wreg      unsigned char 
  4637 ;; Registers used:
  4638 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4639 ;; Tracked objects:
  4640 ;;		On entry : 0/0
  4641 ;;		On exit  : 0/0
  4642 ;;		Unchanged: 0/0
  4643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4644 ;;      Params:         0       0       0       0
  4645 ;;      Locals:         0       5       0       0
  4646 ;;      Temps:          0       1       0       0
  4647 ;;      Totals:         0       6       0       0
  4648 ;;Total ram usage:        6 bytes
  4649 ;; Hardware stack levels used:    1
  4650 ;; Hardware stack levels required when called:    4
  4651 ;; This function calls:
  4652 ;;		_CW_Delay100us
  4653 ;;		_cw_read
  4654 ;;		_cw_write
  4655 ;; This function is called by:
  4656 ;;		_cw_init
  4657 ;; This function uses a non-reentrant model
  4658 ;;
  4659                           
  4660                           
  4661                           ;psect for function _cw_update_config_info
  4662  045A                     _cw_update_config_info:	
  4663                           
  4664                           ;CW201x.c: 55: int ret = 0;
  4665                           
  4666                           ;incstack = 0
  4667                           ; Regs used in _cw_update_config_info: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  4668  045A  0140               	movlb	0	; select bank0
  4669  045B  01A9               	clrf	cw_update_config_info@ret
  4670  045C  01AA               	clrf	cw_update_config_info@ret+1
  4671                           
  4672                           ;CW201x.c: 56: unsigned char i;
  4673                           ;CW201x.c: 57: unsigned char reset_val;
  4674                           ;CW201x.c: 58: unsigned char reg_val;
  4675                           ;CW201x.c: 60: ret = cw_read(0xA, &reg_val);
  4676  045D  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4677  045E  00A7               	movwf	??_cw_update_config_info
  4678  045F  0827               	movf	??_cw_update_config_info,w
  4679  0460  00A4               	movwf	cw_read@r_pdata
  4680  0461  300A               	movlw	10
  4681  0462  2260               	fcall	_cw_read
  4682  0463  0140               	movlb	0	; select bank0
  4683  0464  0825               	movf	?_cw_read+1,w
  4684  0465  00AA               	movwf	cw_update_config_info@ret+1
  4685  0466  0824               	movf	?_cw_read,w
  4686  0467  00A9               	movwf	cw_update_config_info@ret
  4687                           
  4688                           ;CW201x.c: 61: if(ret)
  4689  0468  0829               	movf	cw_update_config_info@ret,w
  4690  0469  042A               	iorwf	cw_update_config_info@ret+1,w
  4691  046A  1903               	btfsc	3,2
  4692  046B  2C6E               	goto	l1963
  4693                           
  4694                           ;CW201x.c: 62: {
  4695                           ;CW201x.c: 63: return 1;
  4696  046C  3001               	movlw	1
  4697  046D  0008               	return
  4698  046E                     l1963:	
  4699                           
  4700                           ;CW201x.c: 64: }
  4701                           ;CW201x.c: 65: if((reg_val & (0x3<<6)) == (0x3<<6))
  4702  046E  30C0               	movlw	192
  4703  046F  052C               	andwf	cw_update_config_info@reg_val,w
  4704  0470  00A7               	movwf	??_cw_update_config_info
  4705  0471  30C0               	movlw	192
  4706  0472  0627               	xorwf	??_cw_update_config_info,w
  4707  0473  1D03               	btfss	3,2
  4708  0474  2C77               	goto	l1969
  4709                           
  4710                           ;CW201x.c: 66: {
  4711                           ;CW201x.c: 67: return 2;
  4712  0475  3002               	movlw	2
  4713  0476  0008               	return
  4714  0477                     l1969:	
  4715                           
  4716                           ;CW201x.c: 68: }
  4717                           ;CW201x.c: 70: for(i = 0; i < 64; i++)
  4718  0477  01AB               	clrf	cw_update_config_info@i
  4719  0478  3040               	movlw	64
  4720  0479  022B               	subwf	cw_update_config_info@i,w
  4721  047A  1803               	btfsc	3,0
  4722  047B  2C9E               	goto	l1989
  4723  047C                     l1975:	
  4724                           
  4725                           ;CW201x.c: 71: {
  4726                           ;CW201x.c: 72: reg_val = cw_bat_config_info[i];
  4727  047C  082B               	movf	cw_update_config_info@i,w
  4728  047D  3EA0               	addlw	(low (CW201x@cw_bat_config_info| 0))& (0+255)
  4729  047E  0086               	movwf	6
  4730  047F  0187               	clrf	7
  4731  0480  0801               	movf	1,w
  4732  0481  00A7               	movwf	??_cw_update_config_info
  4733  0482  0827               	movf	??_cw_update_config_info,w
  4734  0483  00AC               	movwf	cw_update_config_info@reg_val
  4735                           
  4736                           ;CW201x.c: 73: ret = cw_write(0x10+i, &reg_val);
  4737  0484  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4738  0485  00A7               	movwf	??_cw_update_config_info
  4739  0486  0827               	movf	??_cw_update_config_info,w
  4740  0487  00A4               	movwf	cw_write@w_pdata
  4741  0488  082B               	movf	cw_update_config_info@i,w
  4742  0489  3E10               	addlw	16
  4743  048A  222E               	fcall	_cw_write
  4744  048B  0140               	movlb	0	; select bank0
  4745  048C  0825               	movf	?_cw_write+1,w
  4746  048D  00AA               	movwf	cw_update_config_info@ret+1
  4747  048E  0824               	movf	?_cw_write,w
  4748  048F  00A9               	movwf	cw_update_config_info@ret
  4749                           
  4750                           ;CW201x.c: 74: if(ret)
  4751  0490  0829               	movf	cw_update_config_info@ret,w
  4752  0491  042A               	iorwf	cw_update_config_info@ret+1,w
  4753  0492  1903               	btfsc	3,2
  4754  0493  2C96               	goto	l1985
  4755                           
  4756                           ;CW201x.c: 75: {
  4757                           ;CW201x.c: 76: return 1;
  4758  0494  3001               	movlw	1
  4759  0495  0008               	return
  4760  0496                     l1985:	
  4761  0496  3001               	movlw	1
  4762  0497  00A7               	movwf	??_cw_update_config_info
  4763  0498  0827               	movf	??_cw_update_config_info,w
  4764  0499  07AB               	addwf	cw_update_config_info@i,f
  4765  049A  3040               	movlw	64
  4766  049B  022B               	subwf	cw_update_config_info@i,w
  4767  049C  1C03               	skipc
  4768  049D  2C7C               	goto	l1975
  4769  049E                     l1989:	
  4770                           
  4771                           ;CW201x.c: 77: }
  4772                           ;CW201x.c: 78: }
  4773                           ;CW201x.c: 81: for(i = 0; i < 64; i++)
  4774  049E  01AB               	clrf	cw_update_config_info@i
  4775  049F  3040               	movlw	64
  4776  04A0  022B               	subwf	cw_update_config_info@i,w
  4777  04A1  1803               	btfsc	3,0
  4778  04A2  2CC7               	goto	l2013
  4779  04A3                     l1995:	
  4780                           
  4781                           ;CW201x.c: 82: {
  4782                           ;CW201x.c: 83: ret = cw_read(0x10+i, &reg_val);
  4783  04A3  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4784  04A4  00A7               	movwf	??_cw_update_config_info
  4785  04A5  0827               	movf	??_cw_update_config_info,w
  4786  04A6  00A4               	movwf	cw_read@r_pdata
  4787  04A7  082B               	movf	cw_update_config_info@i,w
  4788  04A8  3E10               	addlw	16
  4789  04A9  2260               	fcall	_cw_read
  4790  04AA  0140               	movlb	0	; select bank0
  4791  04AB  0825               	movf	?_cw_read+1,w
  4792  04AC  00AA               	movwf	cw_update_config_info@ret+1
  4793  04AD  0824               	movf	?_cw_read,w
  4794  04AE  00A9               	movwf	cw_update_config_info@ret
  4795                           
  4796                           ;CW201x.c: 84: if(ret)
  4797  04AF  0829               	movf	cw_update_config_info@ret,w
  4798  04B0  042A               	iorwf	cw_update_config_info@ret+1,w
  4799  04B1  1903               	btfsc	3,2
  4800  04B2  2CB5               	goto	l2003
  4801                           
  4802                           ;CW201x.c: 85: {
  4803                           ;CW201x.c: 86: return 1;
  4804  04B3  3001               	movlw	1
  4805  04B4  0008               	return
  4806  04B5                     l2003:	
  4807                           
  4808                           ;CW201x.c: 87: }
  4809                           ;CW201x.c: 88: if(reg_val != cw_bat_config_info[i])
  4810  04B5  082B               	movf	cw_update_config_info@i,w
  4811  04B6  3EA0               	addlw	(low (CW201x@cw_bat_config_info| 0))& (0+255)
  4812  04B7  0086               	movwf	6
  4813  04B8  0187               	clrf	7
  4814  04B9  0801               	movf	1,w
  4815  04BA  062C               	xorwf	cw_update_config_info@reg_val,w
  4816  04BB  1903               	skipnz
  4817  04BC  2CBF               	goto	l2009
  4818                           
  4819                           ;CW201x.c: 89: {
  4820                           ;CW201x.c: 90: return 3;
  4821  04BD  3003               	movlw	3
  4822  04BE  0008               	return
  4823  04BF                     l2009:	
  4824  04BF  3001               	movlw	1
  4825  04C0  00A7               	movwf	??_cw_update_config_info
  4826  04C1  0827               	movf	??_cw_update_config_info,w
  4827  04C2  07AB               	addwf	cw_update_config_info@i,f
  4828  04C3  3040               	movlw	64
  4829  04C4  022B               	subwf	cw_update_config_info@i,w
  4830  04C5  1C03               	skipc
  4831  04C6  2CA3               	goto	l1995
  4832  04C7                     l2013:	
  4833                           
  4834                           ;CW201x.c: 91: }
  4835                           ;CW201x.c: 92: }
  4836                           ;CW201x.c: 94: ret = cw_read(0x8, &reg_val);
  4837  04C7  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4838  04C8  00A7               	movwf	??_cw_update_config_info
  4839  04C9  0827               	movf	??_cw_update_config_info,w
  4840  04CA  00A4               	movwf	cw_read@r_pdata
  4841  04CB  3008               	movlw	8
  4842  04CC  2260               	fcall	_cw_read
  4843  04CD  0140               	movlb	0	; select bank0
  4844  04CE  0825               	movf	?_cw_read+1,w
  4845  04CF  00AA               	movwf	cw_update_config_info@ret+1
  4846  04D0  0824               	movf	?_cw_read,w
  4847  04D1  00A9               	movwf	cw_update_config_info@ret
  4848                           
  4849                           ;CW201x.c: 95: if(ret)
  4850  04D2  0829               	movf	cw_update_config_info@ret,w
  4851  04D3  042A               	iorwf	cw_update_config_info@ret+1,w
  4852  04D4  1903               	btfsc	3,2
  4853  04D5  2CD8               	goto	l228
  4854                           
  4855                           ;CW201x.c: 96: {
  4856                           ;CW201x.c: 97: return 1;
  4857  04D6  3001               	movlw	1
  4858  04D7  0008               	return
  4859  04D8                     l228:	
  4860                           
  4861                           ;CW201x.c: 98: }
  4862                           ;CW201x.c: 99: reg_val |= (0x1<<1);
  4863  04D8  14AC               	bsf	cw_update_config_info@reg_val,1
  4864                           
  4865                           ;CW201x.c: 101: reg_val |= (0x0<<3);
  4866  04D9  3007               	movlw	7
  4867  04DA  00A7               	movwf	??_cw_update_config_info
  4868  04DB  0827               	movf	??_cw_update_config_info,w
  4869  04DC  05AC               	andwf	cw_update_config_info@reg_val,f
  4870                           
  4871                           ;CW201x.c: 102: ret = cw_write(0x8, &reg_val);
  4872  04DD  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4873  04DE  00A7               	movwf	??_cw_update_config_info
  4874  04DF  0827               	movf	??_cw_update_config_info,w
  4875  04E0  00A4               	movwf	cw_write@w_pdata
  4876  04E1  3008               	movlw	8
  4877  04E2  222E               	fcall	_cw_write
  4878  04E3  0140               	movlb	0	; select bank0
  4879  04E4  0825               	movf	?_cw_write+1,w
  4880  04E5  00AA               	movwf	cw_update_config_info@ret+1
  4881  04E6  0824               	movf	?_cw_write,w
  4882  04E7  00A9               	movwf	cw_update_config_info@ret
  4883                           
  4884                           ;CW201x.c: 103: if(ret)
  4885  04E8  0829               	movf	cw_update_config_info@ret,w
  4886  04E9  042A               	iorwf	cw_update_config_info@ret+1,w
  4887  04EA  1903               	btfsc	3,2
  4888  04EB  2CEE               	goto	l2031
  4889                           
  4890                           ;CW201x.c: 104: {
  4891                           ;CW201x.c: 105: return 1;
  4892  04EC  3001               	movlw	1
  4893  04ED  0008               	return
  4894  04EE                     l2031:	
  4895                           
  4896                           ;CW201x.c: 106: }
  4897                           ;CW201x.c: 108: reset_val = (0x0<<6);
  4898  04EE  01A8               	clrf	cw_update_config_info@reset_val
  4899                           
  4900                           ;CW201x.c: 109: reg_val = (0xf<<0);
  4901  04EF  300F               	movlw	15
  4902  04F0  00A7               	movwf	??_cw_update_config_info
  4903  04F1  0827               	movf	??_cw_update_config_info,w
  4904  04F2  00AC               	movwf	cw_update_config_info@reg_val
  4905                           
  4906                           ;CW201x.c: 110: ret = cw_write(0xA, &reg_val);
  4907  04F3  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4908  04F4  00A7               	movwf	??_cw_update_config_info
  4909  04F5  0827               	movf	??_cw_update_config_info,w
  4910  04F6  00A4               	movwf	cw_write@w_pdata
  4911  04F7  300A               	movlw	10
  4912  04F8  222E               	fcall	_cw_write
  4913  04F9  0140               	movlb	0	; select bank0
  4914  04FA  0825               	movf	?_cw_write+1,w
  4915  04FB  00AA               	movwf	cw_update_config_info@ret+1
  4916  04FC  0824               	movf	?_cw_write,w
  4917  04FD  00A9               	movwf	cw_update_config_info@ret
  4918                           
  4919                           ;CW201x.c: 111: if(ret)
  4920  04FE  0829               	movf	cw_update_config_info@ret,w
  4921  04FF  042A               	iorwf	cw_update_config_info@ret+1,w
  4922  0500  1903               	btfsc	3,2
  4923  0501  2D04               	goto	l2043
  4924                           
  4925                           ;CW201x.c: 112: {
  4926                           ;CW201x.c: 113: return 1;
  4927  0502  3001               	movlw	1
  4928  0503  0008               	return
  4929  0504                     l2043:	
  4930                           
  4931                           ;CW201x.c: 114: }
  4932                           ;CW201x.c: 115: CW_Delay100us();
  4933  0504  20FA               	fcall	_CW_Delay100us
  4934                           
  4935                           ;CW201x.c: 116: ret = cw_write(0xA, &reset_val);
  4936  0505  3028               	movlw	(low (cw_update_config_info@reset_val| 0))& (0+255)
  4937  0506  0140               	movlb	0	; select bank0
  4938  0507  00A7               	movwf	??_cw_update_config_info
  4939  0508  0827               	movf	??_cw_update_config_info,w
  4940  0509  00A4               	movwf	cw_write@w_pdata
  4941  050A  300A               	movlw	10
  4942  050B  222E               	fcall	_cw_write
  4943  050C  0140               	movlb	0	; select bank0
  4944  050D  0825               	movf	?_cw_write+1,w
  4945  050E  00AA               	movwf	cw_update_config_info@ret+1
  4946  050F  0824               	movf	?_cw_write,w
  4947  0510  00A9               	movwf	cw_update_config_info@ret
  4948                           
  4949                           ;CW201x.c: 117: if(ret)
  4950  0511  0829               	movf	cw_update_config_info@ret,w
  4951  0512  042A               	iorwf	cw_update_config_info@ret+1,w
  4952  0513  1903               	btfsc	3,2
  4953  0514  2D17               	goto	l2053
  4954                           
  4955                           ;CW201x.c: 118: {
  4956                           ;CW201x.c: 119: return 1;
  4957  0515  3001               	movlw	1
  4958  0516  0008               	return
  4959  0517                     l2053:	
  4960                           
  4961                           ;CW201x.c: 120: }
  4962                           ;CW201x.c: 121: return 0;
  4963  0517  3000               	movlw	0
  4964  0518  0008               	return
  4965  0519                     __end_of_cw_update_config_info:	
  4966                           
  4967                           	psect	text15
  4968  022E                     __ptext15:	
  4969 ;; *************** function _cw_write *****************
  4970 ;; Defined at:
  4971 ;;		line 222 in file "iic.c"
  4972 ;; Parameters:    Size  Location     Type
  4973 ;;  point_reg       1    wreg     unsigned char 
  4974 ;;  w_pdata         1    4[BANK0 ] PTR unsigned char 
  4975 ;;		 -> cw_por@reset_val(1), cw_init@reg_val(1), cw_update_config_info@reset_val(1), cw_update_config_info@reg_val(1), 
  4976 ;; Auto vars:     Size  Location     Type
  4977 ;;  point_reg       1   12[COMMON] unsigned char 
  4978 ;; Return value:  Size  Location     Type
  4979 ;;                  2    4[BANK0 ] int 
  4980 ;; Registers used:
  4981 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4982 ;; Tracked objects:
  4983 ;;		On entry : 0/0
  4984 ;;		On exit  : 0/0
  4985 ;;		Unchanged: 0/0
  4986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4987 ;;      Params:         0       3       0       0
  4988 ;;      Locals:         1       0       0       0
  4989 ;;      Temps:          0       0       0       0
  4990 ;;      Totals:         1       3       0       0
  4991 ;;Total ram usage:        4 bytes
  4992 ;; Hardware stack levels used:    1
  4993 ;; Hardware stack levels required when called:    3
  4994 ;; This function calls:
  4995 ;;		_start
  4996 ;;		_stop
  4997 ;;		_wait_r_ack
  4998 ;;		_write_byte
  4999 ;; This function is called by:
  5000 ;;		_cw_update_config_info
  5001 ;;		_cw_init
  5002 ;;		_cw_por
  5003 ;; This function uses a non-reentrant model
  5004 ;;
  5005                           
  5006                           
  5007                           ;psect for function _cw_write
  5008  022E                     _cw_write:	
  5009                           
  5010                           ;incstack = 0
  5011                           ; Regs used in _cw_write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5012                           ;cw_write@point_reg stored from wreg
  5013  022E  00FC               	movwf	cw_write@point_reg
  5014                           
  5015                           ;iic.c: 224: start();
  5016  022F  2058               	fcall	_start
  5017                           
  5018                           ;iic.c: 225: write_byte(0xc4);
  5019  0230  30C4               	movlw	196
  5020  0231  20DB               	fcall	_write_byte
  5021                           
  5022                           ;iic.c: 226: if(wait_r_ack())
  5023  0232  21FC               	fcall	_wait_r_ack
  5024  0233  087A               	movf	?_wait_r_ack,w
  5025  0234  047B               	iorwf	?_wait_r_ack+1,w
  5026  0235  1903               	btfsc	3,2
  5027  0236  2A3D               	goto	l1909
  5028                           
  5029                           ;iic.c: 227: {
  5030                           ;iic.c: 228: return 1;
  5031  0237  3001               	movlw	1
  5032  0238  0140               	movlb	0	; select bank0
  5033  0239  00A4               	movwf	?_cw_write
  5034  023A  3000               	movlw	0
  5035  023B  00A5               	movwf	?_cw_write+1
  5036  023C  0008               	return
  5037  023D                     l1909:	
  5038                           
  5039                           ;iic.c: 229: }
  5040                           ;iic.c: 230: write_byte(point_reg);
  5041  023D  087C               	movf	cw_write@point_reg,w
  5042  023E  20DB               	fcall	_write_byte
  5043                           
  5044                           ;iic.c: 231: if(wait_r_ack())
  5045  023F  21FC               	fcall	_wait_r_ack
  5046  0240  087A               	movf	?_wait_r_ack,w
  5047  0241  047B               	iorwf	?_wait_r_ack+1,w
  5048  0242  1903               	btfsc	3,2
  5049  0243  2A4A               	goto	l1915
  5050                           
  5051                           ;iic.c: 232: {
  5052                           ;iic.c: 233: return 1;
  5053  0244  3001               	movlw	1
  5054  0245  0140               	movlb	0	; select bank0
  5055  0246  00A4               	movwf	?_cw_write
  5056  0247  3000               	movlw	0
  5057  0248  00A5               	movwf	?_cw_write+1
  5058  0249  0008               	return
  5059  024A                     l1915:	
  5060                           
  5061                           ;iic.c: 234: }
  5062                           ;iic.c: 235: write_byte(*w_pdata);
  5063  024A  0140               	movlb	0	; select bank0
  5064  024B  0824               	movf	cw_write@w_pdata,w
  5065  024C  0086               	movwf	6
  5066  024D  0187               	clrf	7
  5067  024E  0801               	movf	1,w
  5068  024F  20DB               	fcall	_write_byte
  5069                           
  5070                           ;iic.c: 236: if(wait_r_ack())
  5071  0250  21FC               	fcall	_wait_r_ack
  5072  0251  087A               	movf	?_wait_r_ack,w
  5073  0252  047B               	iorwf	?_wait_r_ack+1,w
  5074  0253  1903               	btfsc	3,2
  5075  0254  2A5B               	goto	l1923
  5076                           
  5077                           ;iic.c: 237: {
  5078                           ;iic.c: 238: return 1;
  5079  0255  3001               	movlw	1
  5080  0256  0140               	movlb	0	; select bank0
  5081  0257  00A4               	movwf	?_cw_write
  5082  0258  3000               	movlw	0
  5083  0259  00A5               	movwf	?_cw_write+1
  5084  025A  0008               	return
  5085  025B                     l1923:	
  5086                           
  5087                           ;iic.c: 239: }
  5088                           ;iic.c: 240: stop();
  5089  025B  207B               	fcall	_stop
  5090                           
  5091                           ;iic.c: 241: return 0;
  5092  025C  0140               	movlb	0	; select bank0
  5093  025D  01A4               	clrf	?_cw_write
  5094  025E  01A5               	clrf	?_cw_write+1
  5095  025F  0008               	return
  5096  0260                     __end_of_cw_write:	
  5097                           
  5098                           	psect	text16
  5099  0260                     __ptext16:	
  5100 ;; *************** function _cw_read *****************
  5101 ;; Defined at:
  5102 ;;		line 164 in file "iic.c"
  5103 ;; Parameters:    Size  Location     Type
  5104 ;;  point_reg       1    wreg     unsigned char 
  5105 ;;  r_pdata         1    4[BANK0 ] PTR unsigned char 
  5106 ;;		 -> cw_get_capacity@reg_val(1), cw_init@reg_val(1), cw_update_config_info@reg_val(1), 
  5107 ;; Auto vars:     Size  Location     Type
  5108 ;;  point_reg       1   13[COMMON] unsigned char 
  5109 ;; Return value:  Size  Location     Type
  5110 ;;                  2    4[BANK0 ] int 
  5111 ;; Registers used:
  5112 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5113 ;; Tracked objects:
  5114 ;;		On entry : 0/0
  5115 ;;		On exit  : 0/0
  5116 ;;		Unchanged: 0/0
  5117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5118 ;;      Params:         0       2       0       0
  5119 ;;      Locals:         1       0       0       0
  5120 ;;      Temps:          1       0       0       0
  5121 ;;      Totals:         2       2       0       0
  5122 ;;Total ram usage:        4 bytes
  5123 ;; Hardware stack levels used:    1
  5124 ;; Hardware stack levels required when called:    3
  5125 ;; This function calls:
  5126 ;;		_read_byte
  5127 ;;		_s_ack
  5128 ;;		_start
  5129 ;;		_stop
  5130 ;;		_wait_r_ack
  5131 ;;		_write_byte
  5132 ;; This function is called by:
  5133 ;;		_cw_update_config_info
  5134 ;;		_cw_init
  5135 ;;		_cw_get_capacity
  5136 ;; This function uses a non-reentrant model
  5137 ;;
  5138                           
  5139                           
  5140                           ;psect for function _cw_read
  5141  0260                     _cw_read:	
  5142                           
  5143                           ;incstack = 0
  5144                           ; Regs used in _cw_read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5145                           ;cw_read@point_reg stored from wreg
  5146  0260  00FD               	movwf	cw_read@point_reg
  5147                           
  5148                           ;iic.c: 166: start();
  5149  0261  2058               	fcall	_start
  5150                           
  5151                           ;iic.c: 167: write_byte(0xc4);
  5152  0262  30C4               	movlw	196
  5153  0263  20DB               	fcall	_write_byte
  5154                           
  5155                           ;iic.c: 168: if(wait_r_ack())
  5156  0264  21FC               	fcall	_wait_r_ack
  5157  0265  087A               	movf	?_wait_r_ack,w
  5158  0266  047B               	iorwf	?_wait_r_ack+1,w
  5159  0267  1903               	btfsc	3,2
  5160  0268  2A6F               	goto	l1881
  5161                           
  5162                           ;iic.c: 169: {
  5163                           ;iic.c: 170: return 1;
  5164  0269  3001               	movlw	1
  5165  026A  0140               	movlb	0	; select bank0
  5166  026B  00A4               	movwf	?_cw_read
  5167  026C  3000               	movlw	0
  5168  026D  00A5               	movwf	?_cw_read+1
  5169  026E  0008               	return
  5170  026F                     l1881:	
  5171                           
  5172                           ;iic.c: 171: }
  5173                           ;iic.c: 172: write_byte(point_reg);
  5174  026F  087D               	movf	cw_read@point_reg,w
  5175  0270  20DB               	fcall	_write_byte
  5176                           
  5177                           ;iic.c: 173: if(wait_r_ack())
  5178  0271  21FC               	fcall	_wait_r_ack
  5179  0272  087A               	movf	?_wait_r_ack,w
  5180  0273  047B               	iorwf	?_wait_r_ack+1,w
  5181  0274  1903               	btfsc	3,2
  5182  0275  2A7C               	goto	l1887
  5183                           
  5184                           ;iic.c: 174: {
  5185                           ;iic.c: 175: return 1;
  5186  0276  3001               	movlw	1
  5187  0277  0140               	movlb	0	; select bank0
  5188  0278  00A4               	movwf	?_cw_read
  5189  0279  3000               	movlw	0
  5190  027A  00A5               	movwf	?_cw_read+1
  5191  027B  0008               	return
  5192  027C                     l1887:	
  5193                           
  5194                           ;iic.c: 176: }
  5195                           ;iic.c: 177: start();
  5196  027C  2058               	fcall	_start
  5197                           
  5198                           ;iic.c: 178: write_byte(0xc5);
  5199  027D  30C5               	movlw	197
  5200  027E  20DB               	fcall	_write_byte
  5201                           
  5202                           ;iic.c: 179: if(wait_r_ack())
  5203  027F  21FC               	fcall	_wait_r_ack
  5204  0280  087A               	movf	?_wait_r_ack,w
  5205  0281  047B               	iorwf	?_wait_r_ack+1,w
  5206  0282  1903               	btfsc	3,2
  5207  0283  2A8A               	goto	l1893
  5208                           
  5209                           ;iic.c: 180: {
  5210                           ;iic.c: 181: return 1;
  5211  0284  3001               	movlw	1
  5212  0285  0140               	movlb	0	; select bank0
  5213  0286  00A4               	movwf	?_cw_read
  5214  0287  3000               	movlw	0
  5215  0288  00A5               	movwf	?_cw_read+1
  5216  0289  0008               	return
  5217  028A                     l1893:	
  5218                           
  5219                           ;iic.c: 182: }
  5220                           ;iic.c: 183: *r_pdata = read_byte();
  5221  028A  217C               	fcall	_read_byte
  5222  028B  00FC               	movwf	??_cw_read
  5223  028C  0140               	movlb	0	; select bank0
  5224  028D  0824               	movf	cw_read@r_pdata,w
  5225  028E  0086               	movwf	6
  5226  028F  0187               	clrf	7
  5227  0290  087C               	movf	??_cw_read,w
  5228  0291  0081               	movwf	1
  5229                           
  5230                           ;iic.c: 184: s_ack();
  5231  0292  204D               	fcall	_s_ack
  5232                           
  5233                           ;iic.c: 185: stop();
  5234  0293  207B               	fcall	_stop
  5235                           
  5236                           ;iic.c: 186: return 0;
  5237  0294  0140               	movlb	0	; select bank0
  5238  0295  01A4               	clrf	?_cw_read
  5239  0296  01A5               	clrf	?_cw_read+1
  5240  0297  0008               	return
  5241  0298                     __end_of_cw_read:	
  5242                           
  5243                           	psect	text17
  5244  00DB                     __ptext17:	
  5245 ;; *************** function _write_byte *****************
  5246 ;; Defined at:
  5247 ;;		line 126 in file "iic.c"
  5248 ;; Parameters:    Size  Location     Type
  5249 ;;  w_data          1    wreg     unsigned char 
  5250 ;; Auto vars:     Size  Location     Type
  5251 ;;  w_data          1    5[COMMON] unsigned char 
  5252 ;;  i               1    6[COMMON] unsigned char 
  5253 ;; Return value:  Size  Location     Type
  5254 ;;                  1    wreg      void 
  5255 ;; Registers used:
  5256 ;;		wreg, status,2, status,0, pclath, cstack
  5257 ;; Tracked objects:
  5258 ;;		On entry : 0/0
  5259 ;;		On exit  : 0/0
  5260 ;;		Unchanged: 0/0
  5261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5262 ;;      Params:         0       0       0       0
  5263 ;;      Locals:         2       0       0       0
  5264 ;;      Temps:          1       0       0       0
  5265 ;;      Totals:         3       0       0       0
  5266 ;;Total ram usage:        3 bytes
  5267 ;; Hardware stack levels used:    1
  5268 ;; Hardware stack levels required when called:    1
  5269 ;; This function calls:
  5270 ;;		_Delay10us
  5271 ;; This function is called by:
  5272 ;;		_cw_read
  5273 ;;		_cw_read_word
  5274 ;;		_cw_write
  5275 ;; This function uses a non-reentrant model
  5276 ;;
  5277                           
  5278                           
  5279                           ;psect for function _write_byte
  5280  00DB                     _write_byte:	
  5281                           
  5282                           ;incstack = 0
  5283                           ; Regs used in _write_byte: [wreg+status,2+status,0+pclath+cstack]
  5284                           ;write_byte@w_data stored from wreg
  5285  00DB  00F5               	movwf	write_byte@w_data
  5286                           
  5287                           ;iic.c: 128: unsigned char i;
  5288                           ;iic.c: 129: do { TRISCbits.TRISC1 = 0; } while(0);
  5289  00DC  0140               	movlb	0	; select bank0
  5290  00DD  1094               	bcf	20,1	;volatile
  5291                           
  5292                           ;iic.c: 130: for(i = 0; i < 8; i++)
  5293  00DE  01F6               	clrf	write_byte@i
  5294  00DF                     L8:	
  5295  00DF  3008               	movlw	8
  5296  00E0  0276               	subwf	write_byte@i,w
  5297  00E1  1803               	btfsc	3,0
  5298  00E2  0008               	return
  5299                           
  5300                           ;iic.c: 131: {
  5301                           ;iic.c: 132: LATCbits.LATC1 = (w_data & 0x80)?1:0;
  5302  00E3  1FF5               	btfss	write_byte@w_data,7
  5303  00E4  28E8               	goto	u1480
  5304  00E5  0140               	movlb	0	; select bank0
  5305  00E6  149A               	bsf	26,1	;volatile
  5306  00E7  28EA               	goto	l1811
  5307  00E8                     u1480:	
  5308  00E8  0140               	movlb	0	; select bank0
  5309  00E9  109A               	bcf	26,1	;volatile
  5310  00EA                     l1811:	
  5311                           
  5312                           ;iic.c: 133: Delay10us();
  5313  00EA  211A               	fcall	_Delay10us
  5314                           
  5315                           ;iic.c: 134: do { LATCbits.LATC0 = 1; } while(0);
  5316  00EB  0140               	movlb	0	; select bank0
  5317  00EC  141A               	bsf	26,0	;volatile
  5318                           
  5319                           ;iic.c: 135: Delay10us();
  5320  00ED  211A               	fcall	_Delay10us
  5321                           
  5322                           ;iic.c: 136: do { LATCbits.LATC0 = 0; } while(0);
  5323  00EE  0140               	movlb	0	; select bank0
  5324  00EF  101A               	bcf	26,0	;volatile
  5325                           
  5326                           ;iic.c: 137: Delay10us();
  5327  00F0  211A               	fcall	_Delay10us
  5328                           
  5329                           ;iic.c: 138: w_data = w_data << 1;
  5330  00F1  3575               	lslf	write_byte@w_data,w
  5331  00F2  00F4               	movwf	??_write_byte
  5332  00F3  0874               	movf	??_write_byte,w
  5333  00F4  00F5               	movwf	write_byte@w_data
  5334  00F5  3001               	movlw	1
  5335  00F6  00F4               	movwf	??_write_byte
  5336  00F7  0874               	movf	??_write_byte,w
  5337  00F8  07F6               	addwf	write_byte@i,f
  5338  00F9  28DF               	goto	L8
  5339  00FA                     __end_of_write_byte:	
  5340                           
  5341                           	psect	text18
  5342  01FC                     __ptext18:	
  5343 ;; *************** function _wait_r_ack *****************
  5344 ;; Defined at:
  5345 ;;		line 80 in file "iic.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;		None
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;  i               2    2[BANK0 ] unsigned int 
  5350 ;;  ack             2    0[BANK0 ] int 
  5351 ;; Return value:  Size  Location     Type
  5352 ;;                  2   10[COMMON] int 
  5353 ;; Registers used:
  5354 ;;		wreg, status,2, status,0, pclath, cstack
  5355 ;; Tracked objects:
  5356 ;;		On entry : 0/0
  5357 ;;		On exit  : 0/0
  5358 ;;		Unchanged: 0/0
  5359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5360 ;;      Params:         2       0       0       0
  5361 ;;      Locals:         0       4       0       0
  5362 ;;      Temps:          0       0       0       0
  5363 ;;      Totals:         2       4       0       0
  5364 ;;Total ram usage:        6 bytes
  5365 ;; Hardware stack levels used:    1
  5366 ;; Hardware stack levels required when called:    2
  5367 ;; This function calls:
  5368 ;;		_r_ack
  5369 ;;		_stop
  5370 ;; This function is called by:
  5371 ;;		_cw_read
  5372 ;;		_cw_read_word
  5373 ;;		_cw_write
  5374 ;; This function uses a non-reentrant model
  5375 ;;
  5376                           
  5377                           
  5378                           ;psect for function _wait_r_ack
  5379  01FC                     _wait_r_ack:	
  5380                           
  5381                           ;iic.c: 82: int ack;
  5382                           ;iic.c: 83: unsigned int i;
  5383                           ;iic.c: 84: ack = 1;
  5384                           
  5385                           ;incstack = 0
  5386                           ; Regs used in _wait_r_ack: [wreg+status,2+status,0+pclath+cstack]
  5387  01FC  3001               	movlw	1
  5388  01FD  0140               	movlb	0	; select bank0
  5389  01FE  00A0               	movwf	wait_r_ack@ack
  5390  01FF  3000               	movlw	0
  5391  0200  00A1               	movwf	wait_r_ack@ack+1
  5392                           
  5393                           ;iic.c: 85: for(i = 0; i < 100; i++)
  5394  0201  01A2               	clrf	wait_r_ack@i
  5395  0202  01A3               	clrf	wait_r_ack@i+1
  5396  0203  3000               	movlw	0
  5397  0204  0223               	subwf	wait_r_ack@i+1,w
  5398  0205  3064               	movlw	100
  5399  0206  1903               	skipnz
  5400  0207  0222               	subwf	wait_r_ack@i,w
  5401  0208  1803               	btfsc	3,0
  5402  0209  2A2B               	goto	l1795
  5403  020A                     l1779:	
  5404                           
  5405                           ;iic.c: 86: {
  5406                           ;iic.c: 87: ack = r_ack();
  5407  020A  2093               	fcall	_r_ack
  5408  020B  0875               	movf	?_r_ack+1,w
  5409  020C  0140               	movlb	0	; select bank0
  5410  020D  00A1               	movwf	wait_r_ack@ack+1
  5411  020E  0874               	movf	?_r_ack,w
  5412  020F  00A0               	movwf	wait_r_ack@ack
  5413                           
  5414                           ;iic.c: 88: if(!ack)
  5415  0210  0820               	movf	wait_r_ack@ack,w
  5416  0211  0421               	iorwf	wait_r_ack@ack+1,w
  5417  0212  1903               	btfsc	3,2
  5418  0213  2A2B               	goto	l1795
  5419                           
  5420                           ;iic.c: 91: }
  5421                           ;iic.c: 92: if(i == 99)
  5422                           
  5423                           ;iic.c: 89: {
  5424                           ;iic.c: 90: break;
  5425  0214  3063               	movlw	99
  5426  0215  0622               	xorwf	wait_r_ack@i,w
  5427  0216  0423               	iorwf	wait_r_ack@i+1,w
  5428  0217  1D03               	btfss	3,2
  5429  0218  2A1F               	goto	l1793
  5430                           
  5431                           ;iic.c: 93: {
  5432                           ;iic.c: 94: stop();
  5433  0219  207B               	fcall	_stop
  5434                           
  5435                           ;iic.c: 95: return 1;
  5436  021A  3001               	movlw	1
  5437  021B  00FA               	movwf	?_wait_r_ack
  5438  021C  3000               	movlw	0
  5439  021D  00FB               	movwf	?_wait_r_ack+1
  5440  021E  0008               	return
  5441  021F                     l1793:	
  5442  021F  3001               	movlw	1
  5443  0220  0140               	movlb	0	; select bank0
  5444  0221  07A2               	addwf	wait_r_ack@i,f
  5445  0222  3000               	movlw	0
  5446  0223  3DA3               	addwfc	wait_r_ack@i+1,f
  5447  0224  3000               	movlw	0
  5448  0225  0223               	subwf	wait_r_ack@i+1,w
  5449  0226  3064               	movlw	100
  5450  0227  1903               	skipnz
  5451  0228  0222               	subwf	wait_r_ack@i,w
  5452  0229  1C03               	skipc
  5453  022A  2A0A               	goto	l1779
  5454  022B                     l1795:	
  5455                           
  5456                           ;iic.c: 96: }
  5457                           ;iic.c: 97: }
  5458                           ;iic.c: 98: return 0;
  5459  022B  01FA               	clrf	?_wait_r_ack
  5460  022C  01FB               	clrf	?_wait_r_ack+1
  5461  022D  0008               	return
  5462  022E                     __end_of_wait_r_ack:	
  5463                           
  5464                           	psect	text19
  5465  007B                     __ptext19:	
  5466 ;; *************** function _stop *****************
  5467 ;; Defined at:
  5468 ;;		line 54 in file "iic.c"
  5469 ;; Parameters:    Size  Location     Type
  5470 ;;		None
  5471 ;; Auto vars:     Size  Location     Type
  5472 ;;		None
  5473 ;; Return value:  Size  Location     Type
  5474 ;;                  1    wreg      void 
  5475 ;; Registers used:
  5476 ;;		wreg, status,2, status,0, pclath, cstack
  5477 ;; Tracked objects:
  5478 ;;		On entry : 0/0
  5479 ;;		On exit  : 0/0
  5480 ;;		Unchanged: 0/0
  5481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5482 ;;      Params:         0       0       0       0
  5483 ;;      Locals:         0       0       0       0
  5484 ;;      Temps:          0       0       0       0
  5485 ;;      Totals:         0       0       0       0
  5486 ;;Total ram usage:        0 bytes
  5487 ;; Hardware stack levels used:    1
  5488 ;; Hardware stack levels required when called:    1
  5489 ;; This function calls:
  5490 ;;		_Delay10us
  5491 ;; This function is called by:
  5492 ;;		_wait_r_ack
  5493 ;;		_cw_read
  5494 ;;		_cw_read_word
  5495 ;;		_cw_write
  5496 ;; This function uses a non-reentrant model
  5497 ;;
  5498                           
  5499                           
  5500                           ;psect for function _stop
  5501  007B                     _stop:	
  5502                           
  5503                           ;incstack = 0
  5504                           ; Regs used in _stop: [wreg+status,2+status,0+pclath+cstack]
  5505                           ;iic.c: 56: do { TRISCbits.TRISC1 = 0; } while(0);
  5506  007B  0140               	movlb	0	; select bank0
  5507  007C  1094               	bcf	20,1	;volatile
  5508                           
  5509                           ;iic.c: 57: do { LATCbits.LATC1 = 0; } while(0);
  5510  007D  109A               	bcf	26,1	;volatile
  5511                           
  5512                           ;iic.c: 58: Delay10us();
  5513  007E  211A               	fcall	_Delay10us
  5514                           
  5515                           ;iic.c: 59: do { LATCbits.LATC0 = 1; } while(0);
  5516  007F  0140               	movlb	0	; select bank0
  5517  0080  141A               	bsf	26,0	;volatile
  5518                           
  5519                           ;iic.c: 60: Delay10us();
  5520  0081  211A               	fcall	_Delay10us
  5521                           
  5522                           ;iic.c: 61: do { LATCbits.LATC1 = 1; } while(0);
  5523  0082  0140               	movlb	0	; select bank0
  5524  0083  149A               	bsf	26,1	;volatile
  5525                           
  5526                           ;iic.c: 62: Delay10us();
  5527  0084  211A               	fcall	_Delay10us
  5528                           
  5529                           ;iic.c: 64: Delay10us();
  5530  0085  211A               	fcall	_Delay10us
  5531  0086  0008               	return
  5532  0087                     __end_of_stop:	
  5533                           
  5534                           	psect	text20
  5535  0093                     __ptext20:	
  5536 ;; *************** function _r_ack *****************
  5537 ;; Defined at:
  5538 ;;		line 67 in file "iic.c"
  5539 ;; Parameters:    Size  Location     Type
  5540 ;;		None
  5541 ;; Auto vars:     Size  Location     Type
  5542 ;;  ack             2    8[COMMON] int 
  5543 ;; Return value:  Size  Location     Type
  5544 ;;                  2    4[COMMON] int 
  5545 ;; Registers used:
  5546 ;;		wreg, status,2, status,0, pclath, cstack
  5547 ;; Tracked objects:
  5548 ;;		On entry : 0/0
  5549 ;;		On exit  : 0/0
  5550 ;;		Unchanged: 0/0
  5551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5552 ;;      Params:         2       0       0       0
  5553 ;;      Locals:         2       0       0       0
  5554 ;;      Temps:          2       0       0       0
  5555 ;;      Totals:         6       0       0       0
  5556 ;;Total ram usage:        6 bytes
  5557 ;; Hardware stack levels used:    1
  5558 ;; Hardware stack levels required when called:    1
  5559 ;; This function calls:
  5560 ;;		_Delay10us
  5561 ;; This function is called by:
  5562 ;;		_wait_r_ack
  5563 ;; This function uses a non-reentrant model
  5564 ;;
  5565                           
  5566                           
  5567                           ;psect for function _r_ack
  5568  0093                     _r_ack:	
  5569                           
  5570                           ;incstack = 0
  5571                           ; Regs used in _r_ack: [wreg+status,2+status,0+pclath+cstack]
  5572                           ;iic.c: 69: int ack;
  5573                           ;iic.c: 70: do { TRISCbits.TRISC1 = 1; } while(0);
  5574  0093  0140               	movlb	0	; select bank0
  5575  0094  1494               	bsf	20,1	;volatile
  5576                           
  5577                           ;iic.c: 71: do { LATCbits.LATC0 = 1; } while(0);
  5578  0095  141A               	bsf	26,0	;volatile
  5579                           
  5580                           ;iic.c: 72: Delay10us();
  5581  0096  211A               	fcall	_Delay10us
  5582                           
  5583                           ;iic.c: 73: ack = PORTCbits.RC1;
  5584  0097  0140               	movlb	0	; select bank0
  5585  0098  0C0E               	rrf	14,w	;volatile
  5586  0099  3901               	andlw	1
  5587  009A  00F6               	movwf	??_r_ack
  5588  009B  01F7               	clrf	??_r_ack+1
  5589  009C  0876               	movf	??_r_ack,w
  5590  009D  00F8               	movwf	r_ack@ack
  5591  009E  0877               	movf	??_r_ack+1,w
  5592  009F  00F9               	movwf	r_ack@ack+1
  5593                           
  5594                           ;iic.c: 74: Delay10us();
  5595  00A0  211A               	fcall	_Delay10us
  5596                           
  5597                           ;iic.c: 75: do { LATCbits.LATC0 = 0; } while(0);
  5598  00A1  0140               	movlb	0	; select bank0
  5599  00A2  101A               	bcf	26,0	;volatile
  5600                           
  5601                           ;iic.c: 76: Delay10us();
  5602  00A3  211A               	fcall	_Delay10us
  5603                           
  5604                           ;iic.c: 77: return ack;
  5605  00A4  0879               	movf	r_ack@ack+1,w
  5606  00A5  00F5               	movwf	?_r_ack+1
  5607  00A6  0878               	movf	r_ack@ack,w
  5608  00A7  00F4               	movwf	?_r_ack
  5609  00A8  0008               	return
  5610  00A9                     __end_of_r_ack:	
  5611                           
  5612                           	psect	text21
  5613  0058                     __ptext21:	
  5614 ;; *************** function _start *****************
  5615 ;; Defined at:
  5616 ;;		line 43 in file "iic.c"
  5617 ;; Parameters:    Size  Location     Type
  5618 ;;		None
  5619 ;; Auto vars:     Size  Location     Type
  5620 ;;		None
  5621 ;; Return value:  Size  Location     Type
  5622 ;;                  1    wreg      void 
  5623 ;; Registers used:
  5624 ;;		wreg, status,2, status,0, pclath, cstack
  5625 ;; Tracked objects:
  5626 ;;		On entry : 0/0
  5627 ;;		On exit  : 0/0
  5628 ;;		Unchanged: 0/0
  5629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5630 ;;      Params:         0       0       0       0
  5631 ;;      Locals:         0       0       0       0
  5632 ;;      Temps:          0       0       0       0
  5633 ;;      Totals:         0       0       0       0
  5634 ;;Total ram usage:        0 bytes
  5635 ;; Hardware stack levels used:    1
  5636 ;; Hardware stack levels required when called:    1
  5637 ;; This function calls:
  5638 ;;		_Delay10us
  5639 ;; This function is called by:
  5640 ;;		_cw_read
  5641 ;;		_cw_read_word
  5642 ;;		_cw_write
  5643 ;; This function uses a non-reentrant model
  5644 ;;
  5645                           
  5646                           
  5647                           ;psect for function _start
  5648  0058                     _start:	
  5649                           
  5650                           ;incstack = 0
  5651                           ; Regs used in _start: [wreg+status,2+status,0+pclath+cstack]
  5652                           ;iic.c: 45: do { TRISCbits.TRISC1 = 0; } while(0);
  5653  0058  0140               	movlb	0	; select bank0
  5654  0059  1094               	bcf	20,1	;volatile
  5655                           
  5656                           ;iic.c: 46: do { LATCbits.LATC1 = 1; } while(0);
  5657  005A  149A               	bsf	26,1	;volatile
  5658                           
  5659                           ;iic.c: 47: do { LATCbits.LATC0 = 1; } while(0);
  5660  005B  141A               	bsf	26,0	;volatile
  5661                           
  5662                           ;iic.c: 48: Delay10us();
  5663  005C  211A               	fcall	_Delay10us
  5664                           
  5665                           ;iic.c: 49: do { LATCbits.LATC1 = 0; } while(0);
  5666  005D  0140               	movlb	0	; select bank0
  5667  005E  109A               	bcf	26,1	;volatile
  5668                           
  5669                           ;iic.c: 50: Delay10us();
  5670  005F  211A               	fcall	_Delay10us
  5671                           
  5672                           ;iic.c: 51: do { LATCbits.LATC0 = 0; } while(0);
  5673  0060  0140               	movlb	0	; select bank0
  5674  0061  101A               	bcf	26,0	;volatile
  5675  0062  0008               	return
  5676  0063                     __end_of_start:	
  5677                           
  5678                           	psect	text22
  5679  004D                     __ptext22:	
  5680 ;; *************** function _s_ack *****************
  5681 ;; Defined at:
  5682 ;;		line 101 in file "iic.c"
  5683 ;; Parameters:    Size  Location     Type
  5684 ;;		None
  5685 ;; Auto vars:     Size  Location     Type
  5686 ;;		None
  5687 ;; Return value:  Size  Location     Type
  5688 ;;                  1    wreg      void 
  5689 ;; Registers used:
  5690 ;;		wreg, status,2, status,0, pclath, cstack
  5691 ;; Tracked objects:
  5692 ;;		On entry : 0/0
  5693 ;;		On exit  : 0/0
  5694 ;;		Unchanged: 0/0
  5695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5696 ;;      Params:         0       0       0       0
  5697 ;;      Locals:         0       0       0       0
  5698 ;;      Temps:          0       0       0       0
  5699 ;;      Totals:         0       0       0       0
  5700 ;;Total ram usage:        0 bytes
  5701 ;; Hardware stack levels used:    1
  5702 ;; Hardware stack levels required when called:    1
  5703 ;; This function calls:
  5704 ;;		_Delay10us
  5705 ;; This function is called by:
  5706 ;;		_cw_read
  5707 ;;		_cw_read_word
  5708 ;; This function uses a non-reentrant model
  5709 ;;
  5710                           
  5711                           
  5712                           ;psect for function _s_ack
  5713  004D                     _s_ack:	
  5714                           
  5715                           ;incstack = 0
  5716                           ; Regs used in _s_ack: [wreg+status,2+status,0+pclath+cstack]
  5717                           ;iic.c: 103: do { TRISCbits.TRISC1 = 0; } while(0);
  5718  004D  0140               	movlb	0	; select bank0
  5719  004E  1094               	bcf	20,1	;volatile
  5720                           
  5721                           ;iic.c: 104: do { LATCbits.LATC1 = 1; } while(0);
  5722  004F  149A               	bsf	26,1	;volatile
  5723                           
  5724                           ;iic.c: 105: Delay10us();
  5725  0050  211A               	fcall	_Delay10us
  5726                           
  5727                           ;iic.c: 106: do { LATCbits.LATC0 = 1; } while(0);
  5728  0051  0140               	movlb	0	; select bank0
  5729  0052  141A               	bsf	26,0	;volatile
  5730                           
  5731                           ;iic.c: 107: Delay10us();
  5732  0053  211A               	fcall	_Delay10us
  5733                           
  5734                           ;iic.c: 108: do { LATCbits.LATC0 = 0; } while(0);
  5735  0054  0140               	movlb	0	; select bank0
  5736  0055  101A               	bcf	26,0	;volatile
  5737                           
  5738                           ;iic.c: 109: Delay10us();
  5739  0056  211A               	fcall	_Delay10us
  5740  0057  0008               	return
  5741  0058                     __end_of_s_ack:	
  5742                           
  5743                           	psect	text23
  5744  017C                     __ptext23:	
  5745 ;; *************** function _read_byte *****************
  5746 ;; Defined at:
  5747 ;;		line 142 in file "iic.c"
  5748 ;; Parameters:    Size  Location     Type
  5749 ;;		None
  5750 ;; Auto vars:     Size  Location     Type
  5751 ;;  r_data          1    6[COMMON] unsigned char 
  5752 ;;  i               1    5[COMMON] unsigned char 
  5753 ;; Return value:  Size  Location     Type
  5754 ;;                  1    wreg      unsigned char 
  5755 ;; Registers used:
  5756 ;;		wreg, status,2, status,0, pclath, cstack
  5757 ;; Tracked objects:
  5758 ;;		On entry : 0/0
  5759 ;;		On exit  : 0/0
  5760 ;;		Unchanged: 0/0
  5761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5762 ;;      Params:         0       0       0       0
  5763 ;;      Locals:         2       0       0       0
  5764 ;;      Temps:          1       0       0       0
  5765 ;;      Totals:         3       0       0       0
  5766 ;;Total ram usage:        3 bytes
  5767 ;; Hardware stack levels used:    1
  5768 ;; Hardware stack levels required when called:    1
  5769 ;; This function calls:
  5770 ;;		_Delay10us
  5771 ;; This function is called by:
  5772 ;;		_cw_read
  5773 ;;		_cw_read_word
  5774 ;; This function uses a non-reentrant model
  5775 ;;
  5776                           
  5777                           
  5778                           ;psect for function _read_byte
  5779  017C                     _read_byte:	
  5780                           
  5781                           ;incstack = 0
  5782                           ; Regs used in _read_byte: [wreg+status,2+status,0+pclath+cstack]
  5783                           ;iic.c: 144: unsigned char i;
  5784                           ;iic.c: 145: unsigned char r_data;
  5785                           ;iic.c: 146: do { TRISCbits.TRISC1 = 1; } while(0);
  5786  017C  0140               	movlb	0	; select bank0
  5787  017D  1494               	bsf	20,1	;volatile
  5788                           
  5789                           ;iic.c: 147: for(i = 0; i < 8; i++)
  5790  017E  01F5               	clrf	read_byte@i
  5791  017F  3008               	movlw	8
  5792  0180  0275               	subwf	read_byte@i,w
  5793  0181  1803               	btfsc	3,0
  5794  0182  299D               	goto	l1847
  5795  0183                     l438:	
  5796                           ;iic.c: 148: {
  5797                           ;iic.c: 149: do { LATCbits.LATC0 = 1; } while(0);
  5798                           
  5799  0183  0140               	movlb	0	; select bank0
  5800  0184  141A               	bsf	26,0	;volatile
  5801                           
  5802                           ;iic.c: 150: Delay10us();
  5803  0185  211A               	fcall	_Delay10us
  5804                           
  5805                           ;iic.c: 151: r_data = r_data << 1;
  5806  0186  3576               	lslf	read_byte@r_data,w
  5807  0187  00F4               	movwf	??_read_byte
  5808  0188  0874               	movf	??_read_byte,w
  5809  0189  00F6               	movwf	read_byte@r_data
  5810                           
  5811                           ;iic.c: 152: Delay10us();
  5812  018A  211A               	fcall	_Delay10us
  5813                           
  5814                           ;iic.c: 153: if(PORTCbits.RC1)
  5815  018B  0140               	movlb	0	; select bank0
  5816  018C  1C8E               	btfss	14,1	;volatile
  5817  018D  2993               	goto	l1839
  5818                           
  5819                           ;iic.c: 154: {
  5820                           ;iic.c: 155: r_data = r_data | 0x1;
  5821  018E  0876               	movf	read_byte@r_data,w
  5822  018F  3801               	iorlw	1
  5823  0190  00F4               	movwf	??_read_byte
  5824  0191  0874               	movf	??_read_byte,w
  5825  0192  00F6               	movwf	read_byte@r_data
  5826  0193                     l1839:	
  5827                           ;iic.c: 156: }
  5828                           ;iic.c: 157: do { LATCbits.LATC0 = 0; } while(0);
  5829                           
  5830  0193  101A               	bcf	26,0	;volatile
  5831                           
  5832                           ;iic.c: 158: Delay10us();
  5833  0194  211A               	fcall	_Delay10us
  5834  0195  3001               	movlw	1
  5835  0196  00F4               	movwf	??_read_byte
  5836  0197  0874               	movf	??_read_byte,w
  5837  0198  07F5               	addwf	read_byte@i,f
  5838  0199  3008               	movlw	8
  5839  019A  0275               	subwf	read_byte@i,w
  5840  019B  1C03               	skipc
  5841  019C  2983               	goto	l438
  5842  019D                     l1847:	
  5843                           
  5844                           ;iic.c: 159: }
  5845                           ;iic.c: 160: return r_data;
  5846  019D  0876               	movf	read_byte@r_data,w
  5847  019E  0008               	return
  5848  019F                     __end_of_read_byte:	
  5849                           
  5850                           	psect	text24
  5851  011A                     __ptext24:	
  5852 ;; *************** function _Delay10us *****************
  5853 ;; Defined at:
  5854 ;;		line 22 in file "iic.c"
  5855 ;; Parameters:    Size  Location     Type
  5856 ;;		None
  5857 ;; Auto vars:     Size  Location     Type
  5858 ;;  i               1    3[COMMON] unsigned char 
  5859 ;;  b               1    2[COMMON] unsigned char 
  5860 ;;  a               1    1[COMMON] unsigned char 
  5861 ;; Return value:  Size  Location     Type
  5862 ;;                  1    wreg      void 
  5863 ;; Registers used:
  5864 ;;		wreg, status,2, status,0
  5865 ;; Tracked objects:
  5866 ;;		On entry : 0/0
  5867 ;;		On exit  : 0/0
  5868 ;;		Unchanged: 0/0
  5869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5870 ;;      Params:         0       0       0       0
  5871 ;;      Locals:         3       0       0       0
  5872 ;;      Temps:          1       0       0       0
  5873 ;;      Totals:         4       0       0       0
  5874 ;;Total ram usage:        4 bytes
  5875 ;; Hardware stack levels used:    1
  5876 ;; This function calls:
  5877 ;;		Nothing
  5878 ;; This function is called by:
  5879 ;;		_start
  5880 ;;		_stop
  5881 ;;		_r_ack
  5882 ;;		_s_ack
  5883 ;;		_sn_ack
  5884 ;;		_write_byte
  5885 ;;		_read_byte
  5886 ;; This function uses a non-reentrant model
  5887 ;;
  5888                           
  5889                           
  5890                           ;psect for function _Delay10us
  5891  011A                     _Delay10us:	
  5892                           
  5893                           ;iic.c: 24: unsigned char a, b;
  5894                           ;iic.c: 25: unsigned char i;
  5895                           ;iic.c: 26: for(i = 0; i < 2; i++)
  5896                           
  5897                           ;incstack = 0
  5898                           ; Regs used in _Delay10us: [wreg+status,2+status,0]
  5899  011A  01F3               	clrf	Delay10us@i
  5900  011B                     L9:	
  5901  011B  3002               	movlw	2
  5902  011C  0273               	subwf	Delay10us@i,w
  5903  011D  1803               	btfsc	3,0
  5904  011E  0008               	return
  5905                           
  5906                           ;iic.c: 27: {
  5907                           ;iic.c: 28: for(b = 1;b > 0;b --)
  5908  011F  01F2               	clrf	Delay10us@b
  5909  0120  0AF2               	incf	Delay10us@b,f
  5910  0121  0872               	movf	Delay10us@b,w
  5911  0122  1903               	btfsc	3,2
  5912  0123  2935               	goto	l1741
  5913  0124                     l1731:	
  5914                           
  5915                           ;iic.c: 29: {
  5916                           ;iic.c: 30: for(a = 7;a > 0;a --) ;
  5917  0124  3007               	movlw	7
  5918  0125  00F0               	movwf	??_Delay10us
  5919  0126  0870               	movf	??_Delay10us,w
  5920  0127  00F1               	movwf	Delay10us@a
  5921  0128  0871               	movf	Delay10us@a,w
  5922  0129  1903               	btfsc	3,2
  5923  012A  2930               	goto	l1739
  5924  012B                     l1737:	
  5925  012B  3001               	movlw	1
  5926  012C  02F1               	subwf	Delay10us@a,f
  5927  012D  0871               	movf	Delay10us@a,w
  5928  012E  1D03               	btfss	3,2
  5929  012F  292B               	goto	l1737
  5930  0130                     l1739:	
  5931  0130  3001               	movlw	1
  5932  0131  02F2               	subwf	Delay10us@b,f
  5933  0132  0872               	movf	Delay10us@b,w
  5934  0133  1D03               	btfss	3,2
  5935  0134  2924               	goto	l1731
  5936  0135                     l1741:	
  5937  0135  3001               	movlw	1
  5938  0136  00F0               	movwf	??_Delay10us
  5939  0137  0870               	movf	??_Delay10us,w
  5940  0138  07F3               	addwf	Delay10us@i,f
  5941  0139  291B               	goto	L9
  5942  013A                     __end_of_Delay10us:	
  5943                           
  5944                           	psect	text25
  5945  00FA                     __ptext25:	
  5946 ;; *************** function _CW_Delay100us *****************
  5947 ;; Defined at:
  5948 ;;		line 38 in file "CW201x.c"
  5949 ;; Parameters:    Size  Location     Type
  5950 ;;		None
  5951 ;; Auto vars:     Size  Location     Type
  5952 ;;  i               1    3[COMMON] unsigned char 
  5953 ;;  b               1    2[COMMON] unsigned char 
  5954 ;;  a               1    1[COMMON] unsigned char 
  5955 ;; Return value:  Size  Location     Type
  5956 ;;                  1    wreg      void 
  5957 ;; Registers used:
  5958 ;;		wreg, status,2, status,0
  5959 ;; Tracked objects:
  5960 ;;		On entry : 0/0
  5961 ;;		On exit  : 0/0
  5962 ;;		Unchanged: 0/0
  5963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5964 ;;      Params:         0       0       0       0
  5965 ;;      Locals:         3       0       0       0
  5966 ;;      Temps:          1       0       0       0
  5967 ;;      Totals:         4       0       0       0
  5968 ;;Total ram usage:        4 bytes
  5969 ;; Hardware stack levels used:    1
  5970 ;; This function calls:
  5971 ;;		Nothing
  5972 ;; This function is called by:
  5973 ;;		_cw_update_config_info
  5974 ;;		_cw_por
  5975 ;; This function uses a non-reentrant model
  5976 ;;
  5977                           
  5978                           
  5979                           ;psect for function _CW_Delay100us
  5980  00FA                     _CW_Delay100us:	
  5981                           
  5982                           ;CW201x.c: 40: unsigned char a, b;
  5983                           ;CW201x.c: 41: unsigned char i;
  5984                           ;CW201x.c: 42: for(i = 0; i < 10; i++)
  5985                           
  5986                           ;incstack = 0
  5987                           ; Regs used in _CW_Delay100us: [wreg+status,2+status,0]
  5988  00FA  01F3               	clrf	CW_Delay100us@i
  5989  00FB                     L10:	
  5990  00FB  300A               	movlw	10
  5991  00FC  0273               	subwf	CW_Delay100us@i,w
  5992  00FD  1803               	btfsc	3,0
  5993  00FE  0008               	return
  5994                           
  5995                           ;CW201x.c: 43: {
  5996                           ;CW201x.c: 44: for(b = 1;b > 0;b --)
  5997  00FF  01F2               	clrf	CW_Delay100us@b
  5998  0100  0AF2               	incf	CW_Delay100us@b,f
  5999  0101  0872               	movf	CW_Delay100us@b,w
  6000  0102  1903               	btfsc	3,2
  6001  0103  2915               	goto	l1871
  6002  0104                     l1861:	
  6003                           
  6004                           ;CW201x.c: 45: {
  6005                           ;CW201x.c: 46: for(a = 7;a > 0;a --);
  6006  0104  3007               	movlw	7
  6007  0105  00F0               	movwf	??_CW_Delay100us
  6008  0106  0870               	movf	??_CW_Delay100us,w
  6009  0107  00F1               	movwf	CW_Delay100us@a
  6010  0108  0871               	movf	CW_Delay100us@a,w
  6011  0109  1903               	btfsc	3,2
  6012  010A  2910               	goto	l1869
  6013  010B                     l1867:	
  6014  010B  3001               	movlw	1
  6015  010C  02F1               	subwf	CW_Delay100us@a,f
  6016  010D  0871               	movf	CW_Delay100us@a,w
  6017  010E  1D03               	btfss	3,2
  6018  010F  290B               	goto	l1867
  6019  0110                     l1869:	
  6020  0110  3001               	movlw	1
  6021  0111  02F2               	subwf	CW_Delay100us@b,f
  6022  0112  0872               	movf	CW_Delay100us@b,w
  6023  0113  1D03               	btfss	3,2
  6024  0114  2904               	goto	l1861
  6025  0115                     l1871:	
  6026  0115  3001               	movlw	1
  6027  0116  00F0               	movwf	??_CW_Delay100us
  6028  0117  0870               	movf	??_CW_Delay100us,w
  6029  0118  07F3               	addwf	CW_Delay100us@i,f
  6030  0119  28FB               	goto	L10
  6031  011A                     __end_of_CW_Delay100us:	
  6032                           
  6033                           	psect	text26
  6034  013A                     __ptext26:	
  6035 ;; *************** function _CW_Delay10ms *****************
  6036 ;; Defined at:
  6037 ;;		line 26 in file "CW201x.c"
  6038 ;; Parameters:    Size  Location     Type
  6039 ;;  c               2    0[COMMON] unsigned int 
  6040 ;; Auto vars:     Size  Location     Type
  6041 ;;  b               1    4[COMMON] unsigned char 
  6042 ;;  a               1    3[COMMON] unsigned char 
  6043 ;;  d               1    0        unsigned char 
  6044 ;; Return value:  Size  Location     Type
  6045 ;;                  1    wreg      void 
  6046 ;; Registers used:
  6047 ;;		wreg, status,2, status,0
  6048 ;; Tracked objects:
  6049 ;;		On entry : 0/0
  6050 ;;		On exit  : 0/0
  6051 ;;		Unchanged: 0/0
  6052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6053 ;;      Params:         2       0       0       0
  6054 ;;      Locals:         2       0       0       0
  6055 ;;      Temps:          1       0       0       0
  6056 ;;      Totals:         5       0       0       0
  6057 ;;Total ram usage:        5 bytes
  6058 ;; Hardware stack levels used:    1
  6059 ;; This function calls:
  6060 ;;		Nothing
  6061 ;; This function is called by:
  6062 ;;		_main
  6063 ;;		_cw_init
  6064 ;; This function uses a non-reentrant model
  6065 ;;
  6066                           
  6067                           
  6068                           ;psect for function _CW_Delay10ms
  6069  013A                     _CW_Delay10ms:	
  6070                           
  6071                           ;CW201x.c: 28: unsigned char a, b, d;
  6072                           ;CW201x.c: 29: for (;c>0;c--)
  6073                           
  6074                           ;incstack = 0
  6075                           ; Regs used in _CW_Delay10ms: [wreg+status,2+status,0]
  6076  013A  0870               	movf	CW_Delay10ms@c,w
  6077  013B  0471               	iorwf	CW_Delay10ms@c+1,w
  6078  013C  1903               	btfsc	3,2
  6079  013D  0008               	return
  6080                           
  6081                           ;CW201x.c: 30: {
  6082                           ;CW201x.c: 31: for(b=95;b>0;b--)
  6083  013E  305F               	movlw	95
  6084  013F  00F2               	movwf	??_CW_Delay10ms
  6085  0140  0872               	movf	??_CW_Delay10ms,w
  6086  0141  00F4               	movwf	CW_Delay10ms@b
  6087  0142  0874               	movf	CW_Delay10ms@b,w
  6088  0143  1903               	btfsc	3,2
  6089  0144  2956               	goto	l1949
  6090  0145                     l1939:	
  6091                           
  6092                           ;CW201x.c: 32: {
  6093                           ;CW201x.c: 33: for(a=209;a>0;a--) ;
  6094  0145  30D1               	movlw	209
  6095  0146  00F2               	movwf	??_CW_Delay10ms
  6096  0147  0872               	movf	??_CW_Delay10ms,w
  6097  0148  00F3               	movwf	CW_Delay10ms@a
  6098  0149  0873               	movf	CW_Delay10ms@a,w
  6099  014A  1903               	btfsc	3,2
  6100  014B  2951               	goto	l1947
  6101  014C                     l1945:	
  6102  014C  3001               	movlw	1
  6103  014D  02F3               	subwf	CW_Delay10ms@a,f
  6104  014E  0873               	movf	CW_Delay10ms@a,w
  6105  014F  1D03               	btfss	3,2
  6106  0150  294C               	goto	l1945
  6107  0151                     l1947:	
  6108  0151  3001               	movlw	1
  6109  0152  02F4               	subwf	CW_Delay10ms@b,f
  6110  0153  0874               	movf	CW_Delay10ms@b,w
  6111  0154  1D03               	btfss	3,2
  6112  0155  2945               	goto	l1939
  6113  0156                     l1949:	
  6114  0156  3001               	movlw	1
  6115  0157  02F0               	subwf	CW_Delay10ms@c,f
  6116  0158  3000               	movlw	0
  6117  0159  3BF1               	subwfb	CW_Delay10ms@c+1,f
  6118  015A  293A               	goto	_CW_Delay10ms
  6119  015B                     __end_of_CW_Delay10ms:	
  6120                           
  6121                           	psect	text27
  6122  0027                     __ptext27:	
  6123 ;; *************** function _SYSTEM_Initialize *****************
  6124 ;; Defined at:
  6125 ;;		line 86 in file "mcc_generated_files/mcc.c"
  6126 ;; Parameters:    Size  Location     Type
  6127 ;;		None
  6128 ;; Auto vars:     Size  Location     Type
  6129 ;;		None
  6130 ;; Return value:  Size  Location     Type
  6131 ;;                  1    wreg      void 
  6132 ;; Registers used:
  6133 ;;		wreg, status,2, status,0, pclath, cstack
  6134 ;; Tracked objects:
  6135 ;;		On entry : 0/0
  6136 ;;		On exit  : 0/0
  6137 ;;		Unchanged: 0/0
  6138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6139 ;;      Params:         0       0       0       0
  6140 ;;      Locals:         0       0       0       0
  6141 ;;      Temps:          0       0       0       0
  6142 ;;      Totals:         0       0       0       0
  6143 ;;Total ram usage:        0 bytes
  6144 ;; Hardware stack levels used:    1
  6145 ;; Hardware stack levels required when called:    1
  6146 ;; This function calls:
  6147 ;;		_EUSART1_Initialize
  6148 ;;		_OSCILLATOR_Initialize
  6149 ;;		_PIN_MANAGER_Initialize
  6150 ;; This function is called by:
  6151 ;;		_main
  6152 ;; This function uses a non-reentrant model
  6153 ;;
  6154                           
  6155                           
  6156                           ;psect for function _SYSTEM_Initialize
  6157  0027                     _SYSTEM_Initialize:	
  6158                           
  6159                           ;mcc.c: 89: PIN_MANAGER_Initialize();
  6160                           
  6161                           ;incstack = 0
  6162                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6163  0027  219F               	fcall	_PIN_MANAGER_Initialize
  6164                           
  6165                           ;mcc.c: 90: OSCILLATOR_Initialize();
  6166  0028  206F               	fcall	_OSCILLATOR_Initialize
  6167                           
  6168                           ;mcc.c: 91: EUSART1_Initialize();
  6169  0029  2063               	fcall	_EUSART1_Initialize
  6170  002A  0008               	return
  6171  002B                     __end_of_SYSTEM_Initialize:	
  6172                           
  6173                           	psect	text28
  6174  019F                     __ptext28:	
  6175 ;; *************** function _PIN_MANAGER_Initialize *****************
  6176 ;; Defined at:
  6177 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  6178 ;; Parameters:    Size  Location     Type
  6179 ;;		None
  6180 ;; Auto vars:     Size  Location     Type
  6181 ;;  state           1    0[COMMON] unsigned char 
  6182 ;; Return value:  Size  Location     Type
  6183 ;;                  1    wreg      void 
  6184 ;; Registers used:
  6185 ;;		wreg, status,2, status,0
  6186 ;; Tracked objects:
  6187 ;;		On entry : 0/0
  6188 ;;		On exit  : 0/0
  6189 ;;		Unchanged: 0/0
  6190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6191 ;;      Params:         0       0       0       0
  6192 ;;      Locals:         1       0       0       0
  6193 ;;      Temps:          0       0       0       0
  6194 ;;      Totals:         1       0       0       0
  6195 ;;Total ram usage:        1 bytes
  6196 ;; Hardware stack levels used:    1
  6197 ;; This function calls:
  6198 ;;		Nothing
  6199 ;; This function is called by:
  6200 ;;		_SYSTEM_Initialize
  6201 ;; This function uses a non-reentrant model
  6202 ;;
  6203                           
  6204                           
  6205                           ;psect for function _PIN_MANAGER_Initialize
  6206  019F                     _PIN_MANAGER_Initialize:	
  6207                           
  6208                           ;pin_manager.c: 56: LATA = 0x00;
  6209                           
  6210                           ;incstack = 0
  6211                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  6212  019F  0140               	movlb	0	; select bank0
  6213  01A0  0198               	clrf	24	;volatile
  6214                           
  6215                           ;pin_manager.c: 57: LATC = 0x00;
  6216  01A1  019A               	clrf	26	;volatile
  6217                           
  6218                           ;pin_manager.c: 62: TRISA = 0x03;
  6219  01A2  3003               	movlw	3
  6220  01A3  0092               	movwf	18	;volatile
  6221                           
  6222                           ;pin_manager.c: 63: TRISC = 0x22;
  6223  01A4  3022               	movlw	34
  6224  01A5  0094               	movwf	20	;volatile
  6225                           
  6226                           ;pin_manager.c: 68: ANSELC = 0x1D;
  6227  01A6  301D               	movlw	29
  6228  01A7  017E               	movlb	62	; select bank62
  6229  01A8  00CE               	movwf	78	;volatile
  6230                           
  6231                           ;pin_manager.c: 69: ANSELA = 0x37;
  6232  01A9  3037               	movlw	55
  6233  01AA  00B8               	movwf	56	;volatile
  6234                           
  6235                           ;pin_manager.c: 74: WPUA = 0x00;
  6236  01AB  01B9               	clrf	57	;volatile
  6237                           
  6238                           ;pin_manager.c: 75: WPUC = 0x00;
  6239  01AC  01CF               	clrf	79	;volatile
  6240                           
  6241                           ;pin_manager.c: 80: ODCONA = 0x00;
  6242  01AD  01BA               	clrf	58	;volatile
  6243                           
  6244                           ;pin_manager.c: 81: ODCONC = 0x00;
  6245  01AE  01D0               	clrf	80	;volatile
  6246                           
  6247                           ;pin_manager.c: 88: bool state = GIE;
  6248  01AF  3000               	movlw	0
  6249  01B0  1B8B               	btfsc	11,7	;volatile
  6250  01B1  3001               	movlw	1
  6251  01B2  00F0               	movwf	PIN_MANAGER_Initialize@state
  6252                           
  6253                           ;pin_manager.c: 89: GIE = 0;
  6254  01B3  138B               	bcf	11,7	;volatile
  6255                           
  6256                           ;pin_manager.c: 90: PPSLOCK = 0x55;
  6257  01B4  3055               	movlw	85
  6258  01B5  017D               	movlb	61	; select bank61
  6259  01B6  008F               	movwf	15	;volatile
  6260                           
  6261                           ;pin_manager.c: 91: PPSLOCK = 0xAA;
  6262  01B7  30AA               	movlw	170
  6263  01B8  008F               	movwf	15	;volatile
  6264                           
  6265                           ;pin_manager.c: 92: PPSLOCKbits.PPSLOCKED = 0x00;
  6266  01B9  100F               	bcf	15,0	;volatile
  6267                           
  6268                           ;pin_manager.c: 94: RX1DTPPSbits.RX1DTPPS = 0x15;
  6269  01BA  084B               	movf	75,w	;volatile
  6270  01BB  39C0               	andlw	-64
  6271  01BC  3815               	iorlw	21
  6272  01BD  00CB               	movwf	75	;volatile
  6273                           
  6274                           ;pin_manager.c: 95: RC4PPS = 0x0F;
  6275  01BE  300F               	movlw	15
  6276  01BF  017E               	movlb	62	; select bank62
  6277  01C0  00A4               	movwf	36	;volatile
  6278                           
  6279                           ;pin_manager.c: 97: PPSLOCK = 0x55;
  6280  01C1  3055               	movlw	85
  6281  01C2  017D               	movlb	61	; select bank61
  6282  01C3  008F               	movwf	15	;volatile
  6283                           
  6284                           ;pin_manager.c: 98: PPSLOCK = 0xAA;
  6285  01C4  30AA               	movlw	170
  6286  01C5  008F               	movwf	15	;volatile
  6287                           
  6288                           ;pin_manager.c: 99: PPSLOCKbits.PPSLOCKED = 0x01;
  6289  01C6  140F               	bsf	15,0	;volatile
  6290                           
  6291                           ;pin_manager.c: 101: GIE = state;
  6292  01C7  1C70               	btfss	PIN_MANAGER_Initialize@state,0
  6293  01C8  29CB               	goto	u2620
  6294  01C9  178B               	bsf	11,7	;volatile
  6295  01CA  0008               	return
  6296  01CB                     u2620:	
  6297  01CB  138B               	bcf	11,7	;volatile
  6298  01CC  0008               	return
  6299  01CD                     __end_of_PIN_MANAGER_Initialize:	
  6300                           
  6301                           	psect	text29
  6302  006F                     __ptext29:	
  6303 ;; *************** function _OSCILLATOR_Initialize *****************
  6304 ;; Defined at:
  6305 ;;		line 94 in file "mcc_generated_files/mcc.c"
  6306 ;; Parameters:    Size  Location     Type
  6307 ;;		None
  6308 ;; Auto vars:     Size  Location     Type
  6309 ;;		None
  6310 ;; Return value:  Size  Location     Type
  6311 ;;                  1    wreg      void 
  6312 ;; Registers used:
  6313 ;;		wreg, status,2
  6314 ;; Tracked objects:
  6315 ;;		On entry : 0/0
  6316 ;;		On exit  : 0/0
  6317 ;;		Unchanged: 0/0
  6318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6319 ;;      Params:         0       0       0       0
  6320 ;;      Locals:         0       0       0       0
  6321 ;;      Temps:          0       0       0       0
  6322 ;;      Totals:         0       0       0       0
  6323 ;;Total ram usage:        0 bytes
  6324 ;; Hardware stack levels used:    1
  6325 ;; This function calls:
  6326 ;;		Nothing
  6327 ;; This function is called by:
  6328 ;;		_SYSTEM_Initialize
  6329 ;; This function uses a non-reentrant model
  6330 ;;
  6331                           
  6332                           
  6333                           ;psect for function _OSCILLATOR_Initialize
  6334  006F                     _OSCILLATOR_Initialize:	
  6335                           
  6336                           ;mcc.c: 97: OSCCON1 = 0x10;
  6337                           
  6338                           ;incstack = 0
  6339                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6340  006F  3010               	movlw	16
  6341  0070  0151               	movlb	17	; select bank17
  6342  0071  008D               	movwf	13	;volatile
  6343                           
  6344                           ;mcc.c: 99: OSCCON3 = 0x00;
  6345  0072  018F               	clrf	15	;volatile
  6346                           
  6347                           ;mcc.c: 101: OSCEN = 0x00;
  6348  0073  0191               	clrf	17	;volatile
  6349                           
  6350                           ;mcc.c: 103: OSCFRQ = 0x05;
  6351  0074  3005               	movlw	5
  6352  0075  0093               	movwf	19	;volatile
  6353                           
  6354                           ;mcc.c: 105: OSCSTAT = 0x00;
  6355  0076  0190               	clrf	16	;volatile
  6356                           
  6357                           ;mcc.c: 107: OSCTUNE = 0x00;
  6358  0077  0192               	clrf	18	;volatile
  6359  0078                     l60:	
  6360                           ;mcc.c: 110: {
  6361                           
  6362                           ;mcc.c: 109: while(PLLR == 0)
  6363                           
  6364  0078  1810               	btfsc	16,0	;volatile
  6365  0079  0008               	return
  6366  007A  2878               	goto	l60
  6367  007B                     __end_of_OSCILLATOR_Initialize:	
  6368                           
  6369                           	psect	text30
  6370  0063                     __ptext30:	
  6371 ;; *************** function _EUSART1_Initialize *****************
  6372 ;; Defined at:
  6373 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  6374 ;; Parameters:    Size  Location     Type
  6375 ;;		None
  6376 ;; Auto vars:     Size  Location     Type
  6377 ;;		None
  6378 ;; Return value:  Size  Location     Type
  6379 ;;                  1    wreg      void 
  6380 ;; Registers used:
  6381 ;;		wreg
  6382 ;; Tracked objects:
  6383 ;;		On entry : 0/0
  6384 ;;		On exit  : 0/0
  6385 ;;		Unchanged: 0/0
  6386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6387 ;;      Params:         0       0       0       0
  6388 ;;      Locals:         0       0       0       0
  6389 ;;      Temps:          0       0       0       0
  6390 ;;      Totals:         0       0       0       0
  6391 ;;Total ram usage:        0 bytes
  6392 ;; Hardware stack levels used:    1
  6393 ;; This function calls:
  6394 ;;		Nothing
  6395 ;; This function is called by:
  6396 ;;		_SYSTEM_Initialize
  6397 ;; This function uses a non-reentrant model
  6398 ;;
  6399                           
  6400                           
  6401                           ;psect for function _EUSART1_Initialize
  6402  0063                     _EUSART1_Initialize:	
  6403                           
  6404                           ;eusart1.c: 60: BAUD1CON = 0x08;
  6405                           
  6406                           ;incstack = 0
  6407                           ; Regs used in _EUSART1_Initialize: [wreg]
  6408  0063  3008               	movlw	8
  6409  0064  0142               	movlb	2	; select bank2
  6410  0065  009F               	movwf	31	;volatile
  6411                           
  6412                           ;eusart1.c: 63: RC1STA = 0x90;
  6413  0066  3090               	movlw	144
  6414  0067  009D               	movwf	29	;volatile
  6415                           
  6416                           ;eusart1.c: 66: TX1STA = 0x24;
  6417  0068  3024               	movlw	36
  6418  0069  009E               	movwf	30	;volatile
  6419                           
  6420                           ;eusart1.c: 69: SP1BRGL = 0x40;
  6421  006A  3040               	movlw	64
  6422  006B  009B               	movwf	27	;volatile
  6423                           
  6424                           ;eusart1.c: 72: SP1BRGH = 0x03;
  6425  006C  3003               	movlw	3
  6426  006D  009C               	movwf	28	;volatile
  6427  006E  0008               	return
  6428  006F                     __end_of_EUSART1_Initialize:	
  6429                           
  6430                           	psect	text31
  6431  003B                     __ptext31:	
  6432 ;; *************** function _EUSART1_Write *****************
  6433 ;; Defined at:
  6434 ;;		line 96 in file "mcc_generated_files/eusart1.c"
  6435 ;; Parameters:    Size  Location     Type
  6436 ;;  txData          1    wreg     unsigned char 
  6437 ;; Auto vars:     Size  Location     Type
  6438 ;;  txData          1    0[COMMON] unsigned char 
  6439 ;; Return value:  Size  Location     Type
  6440 ;;                  1    wreg      void 
  6441 ;; Registers used:
  6442 ;;		wreg
  6443 ;; Tracked objects:
  6444 ;;		On entry : 0/0
  6445 ;;		On exit  : 0/0
  6446 ;;		Unchanged: 0/0
  6447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6448 ;;      Params:         0       0       0       0
  6449 ;;      Locals:         1       0       0       0
  6450 ;;      Temps:          0       0       0       0
  6451 ;;      Totals:         1       0       0       0
  6452 ;;Total ram usage:        1 bytes
  6453 ;; Hardware stack levels used:    1
  6454 ;; This function calls:
  6455 ;;		Nothing
  6456 ;; This function is called by:
  6457 ;;		_main
  6458 ;; This function uses a non-reentrant model
  6459 ;;
  6460                           
  6461                           
  6462                           ;psect for function _EUSART1_Write
  6463  003B                     _EUSART1_Write:	
  6464                           
  6465                           ;incstack = 0
  6466                           ; Regs used in _EUSART1_Write: [wreg]
  6467                           ;EUSART1_Write@txData stored from wreg
  6468  003B  00F0               	movwf	EUSART1_Write@txData
  6469  003C                     l31:	
  6470                           ;eusart1.c: 99: {
  6471                           
  6472                           ;eusart1.c: 98: while(0 == PIR3bits.TX1IF)
  6473                           
  6474  003C  014E               	movlb	14	; select bank14
  6475  003D  1E0F               	btfss	15,4	;volatile
  6476  003E  283C               	goto	l31
  6477                           
  6478                           ;eusart1.c: 100: }
  6479                           ;eusart1.c: 102: TX1REG = txData;
  6480  003F  0870               	movf	EUSART1_Write@txData,w
  6481  0040  0142               	movlb	2	; select bank2
  6482  0041  009A               	movwf	26	;volatile
  6483  0042  0008               	return
  6484  0043                     __end_of_EUSART1_Write:	
  6485  007E                     btemp	set	126	;btemp
  6486  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        128
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     44      62
    BANK1            80      0      64
    BANK2            80      0      64

Pointer List with Targets:

    cw_write@w_pdata	PTR unsigned char  size(1) Largest target is 1
		 -> cw_por@reset_val(BANK0[1]), cw_init@reg_val(BANK0[1]), cw_update_config_info@reset_val(BANK0[1]), cw_update_config_info@reg_val(BANK0[1]), 

    cw_read_word@r_pdata	PTR unsigned char  size(1) Largest target is 2
		 -> cw_get_vol@reg_val(BANK0[2]), 

    cw_read@r_pdata	PTR unsigned char  size(1) Largest target is 1
		 -> cw_get_capacity@reg_val(BANK0[1]), cw_init@reg_val(BANK0[1]), cw_update_config_info@reg_val(BANK0[1]), 


Critical Paths under _main in COMMON

    _cw_get_vol->_cw_read_word
    _cw_read_word->_wait_r_ack
    _sn_ack->_Delay10us
    ___lldiv->___lmul
    _cw_get_capacity->_cw_read
    _cw_init->_cw_read
    _cw_update_config_info->_cw_read
    _cw_write->_wait_r_ack
    _cw_read->_wait_r_ack
    _write_byte->_Delay10us
    _wait_r_ack->_r_ack
    _stop->_Delay10us
    _r_ack->_Delay10us
    _start->_Delay10us
    _s_ack->_Delay10us
    _read_byte->_Delay10us
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize

Critical Paths under _main in BANK0

    _cw_bat_work->_update_capacity
    _update_vol->_cw_get_vol
    _cw_get_vol->___lldiv
    _cw_read_word->_wait_r_ack
    _update_capacity->_cw_get_capacity
    _cw_get_capacity->_cw_por
    _cw_por->_cw_init
    _cw_bat_init->_cw_init
    _cw_init->_cw_update_config_info
    _cw_update_config_info->_cw_write
    _cw_write->_wait_r_ack
    _cw_read->_wait_r_ack

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   24105
                                             42 BANK0      2     2      0
                       _CW_Delay10ms
                      _EUSART1_Write
                  _SYSTEM_Initialize
                        _cw_bat_init
                        _cw_bat_work
 ---------------------------------------------------------------------------------
 (1) _cw_bat_work                                          0     0      0   15395
                    _update_capacity
                  _update_usb_online
                         _update_vol
 ---------------------------------------------------------------------------------
 (2) _update_vol                                           2     2      0    2755
                                             35 BANK0      2     2      0
                         _cw_get_vol
 ---------------------------------------------------------------------------------
 (3) _cw_get_vol                                          22    20      2    2659
                                             13 BANK0     22    20      2
                            ___lldiv
                             ___lmul
                       _cw_read_word
 ---------------------------------------------------------------------------------
 (4) _cw_read_word                                         7     4      3    1687
                                             12 COMMON     2     2      0
                                              4 BANK0      5     2      3
                          _read_byte
                              _s_ack
                             _sn_ack
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (5) _sn_ack                                               0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     220
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     290
                                             12 COMMON     1     1      0
                                              0 BANK0     13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _update_usb_online                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _update_capacity                                      3     3      0   12640
                                             39 BANK0      3     3      0
                    _cw_get_capacity
 ---------------------------------------------------------------------------------
 (3) _cw_get_capacity                                     13    11      2   12551
                                             26 BANK0     13    11      2
                             _cw_por
                            _cw_read
 ---------------------------------------------------------------------------------
 (4) _cw_por                                               7     5      2   10119
                                             19 BANK0      7     5      2
                      _CW_Delay100us
                            _cw_init
                           _cw_write
 ---------------------------------------------------------------------------------
 (1) _cw_bat_init                                          3     3      0    8394
                                             19 BANK0      3     3      0
                            _cw_init
 ---------------------------------------------------------------------------------
 (5) _cw_init                                              6     6      0    8325
                                             13 BANK0      6     6      0
                       _CW_Delay10ms
                            _cw_read
              _cw_update_config_info
                           _cw_write
 ---------------------------------------------------------------------------------
 (6) _cw_update_config_info                                6     6      0    4045
                                              7 BANK0      6     6      0
                      _CW_Delay100us
                            _cw_read
                           _cw_write
 ---------------------------------------------------------------------------------
 (5) _cw_write                                             4     1      3    1516
                                             12 COMMON     1     1      0
                                              4 BANK0      3     0      3
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (4) _cw_read                                              4     2      2    1842
                                             12 COMMON     2     2      0
                                              4 BANK0      2     0      2
                          _read_byte
                              _s_ack
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (5) _write_byte                                           3     3      0     229
                                              4 COMMON     3     3      0
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _wait_r_ack                                           6     4      2     391
                                             10 COMMON     2     0      2
                                              0 BANK0      4     4      0
                              _r_ack
                               _stop
 ---------------------------------------------------------------------------------
 (6) _stop                                                 0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (6) _r_ack                                                6     4      2     161
                                              4 COMMON     6     4      2
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _start                                                0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _s_ack                                                0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _read_byte                                            3     3      0     252
                                              4 COMMON     3     3      0
                          _Delay10us
 ---------------------------------------------------------------------------------
 (6) _Delay10us                                            4     4      0     138
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (7) _CW_Delay100us                                        4     4      0     138
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (6) _CW_Delay10ms                                         6     4      2     265
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      23
                 _EUSART1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Write                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CW_Delay10ms
   _EUSART1_Write
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _cw_bat_init
     _cw_init
       _CW_Delay10ms
       _cw_read
         _read_byte
           _Delay10us
         _s_ack
           _Delay10us
         _start
           _Delay10us
         _stop
           _Delay10us
         _wait_r_ack
           _r_ack
             _Delay10us
           _stop
             _Delay10us
         _write_byte
           _Delay10us
       _cw_update_config_info
         _CW_Delay100us
         _cw_read
           _read_byte
             _Delay10us
           _s_ack
             _Delay10us
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us
         _cw_write
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us
       _cw_write
         _start
           _Delay10us
         _stop
           _Delay10us
         _wait_r_ack
           _r_ack
             _Delay10us
           _stop
             _Delay10us
         _write_byte
           _Delay10us
   _cw_bat_work
     _update_capacity
       _cw_get_capacity
         _cw_por
           _CW_Delay100us
           _cw_init
             _CW_Delay10ms
             _cw_read
               _read_byte
                 _Delay10us
               _s_ack
                 _Delay10us
               _start
                 _Delay10us
               _stop
                 _Delay10us
               _wait_r_ack
                 _r_ack
                   _Delay10us
                 _stop
                   _Delay10us
               _write_byte
                 _Delay10us
             _cw_update_config_info
               _CW_Delay100us
               _cw_read
                 _read_byte
                   _Delay10us
                 _s_ack
                   _Delay10us
                 _start
                   _Delay10us
                 _stop
                   _Delay10us
                 _wait_r_ack
                   _r_ack
                     _Delay10us
                   _stop
                     _Delay10us
                 _write_byte
                   _Delay10us
               _cw_write
                 _start
                   _Delay10us
                 _stop
                   _Delay10us
                 _wait_r_ack
                   _r_ack
                     _Delay10us
                   _stop
                     _Delay10us
                 _write_byte
                   _Delay10us
             _cw_write
               _start
                 _Delay10us
               _stop
                 _Delay10us
               _wait_r_ack
                 _r_ack
                   _Delay10us
                 _stop
                   _Delay10us
               _write_byte
                 _Delay10us
           _cw_write
             _start
               _Delay10us
             _stop
               _Delay10us
             _wait_r_ack
               _r_ack
                 _Delay10us
               _stop
                 _Delay10us
             _write_byte
               _Delay10us
         _cw_read
           _read_byte
             _Delay10us
           _s_ack
             _Delay10us
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us
     _update_usb_online
     _update_vol
       _cw_get_vol
         ___lldiv
           ___lmul (ARG)
         ___lmul
         _cw_read_word
           _read_byte
             _Delay10us
           _s_ack
             _Delay10us
           _sn_ack
             _Delay10us
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2C      3E       5       77.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      40       7       80.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      40       9       80.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
ABS                  0      0      CC      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      CC      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Mon Aug 28 19:07:23 2017

                    __CFG_CP$OFF 0000                               l31 003C                               l60 0078  
                _update_capacity 015B                      __CFG_LVP$ON 0000                              l302 07D0  
                            l126 0321                              l136 0323                              l313 0566  
                            l314 0572                              l146 0326                              l315 057E  
                            l228 04D8                              l156 032A                              l239 0628  
                            l438 0183                              l296 0799                              l289 0777  
                            _GIE 005F                     __CFG_BORV$LO 0000                              wreg 0009  
                  __CFG_BBEN$OFF 0000                     __CFG_ZCD$OFF 0000                    ?_cw_read_word 0024  
                           l2003 04B5                    CW_Delay10ms@a 0073                             l2013 04C7  
                  CW_Delay10ms@b 0074                    CW_Delay10ms@c 0070                             l2031 04EE  
                           l2103 0638                             l2009 04BF                             l2043 0504  
                           l2053 0517                             l2141 0676                             l2117 064F  
                           l2125 065F                             l2109 063D                             l2135 0671  
                           l2207 0391                             l2153 068D                             l2161 0699  
                           l2217 03A3                             l2401 07AB                             l2321 06E6  
                           l2233 0417                             l2171 06AE                             l2075 05FE  
                           l2067 05ED                             l2403 07AD                             l2323 06E7  
                           l2307 06C7                             l2251 0427                             l2227 0409  
                           l2421 07D5                             l2261 01D5                             l2253 0454  
                           l2087 0617                             l2343 0713                             l2335 06FB  
                           l2239 0425                             l2329 06EC                             l2281 03C5  
                           l2265 01DF                             l2249 044E                             l2441 0534  
                           l1731 0124                             l1811 00EA                             l2195 037A  
                           l2427 07DC                             l2363 074A                             l2371 075A  
                           l2347 071C                             l2339 0709                             l1741 0135  
                           l2349 0720                             l2533 004B                             l2293 03F0  
                           l2461 058D                             l2551 00D1                             l2391 078C  
                           l2279 03B7                             l2615 032E                             l1737 012B  
                           l2545 00C2                             l2289 03E5                             l2449 054C  
                           l1739 0130                             l1923 025B                             l1915 024A  
                           l2395 0792                             l1861 0104                             l1909 023D  
                           l2397 079B                             l1871 0115                             l1839 0193  
                           l1847 019D                             l1945 014C                             l1793 021F  
                           l1881 026F                             l1947 0151                             l1939 0145  
                           l1867 010B                             l1795 022B                             l1779 020A  
                           l1963 046E                             l1949 0156                             l1869 0110  
                           l1893 028A                             l1887 027C                             l1975 047C  
                           l1985 0496                             l1969 0477                             l1995 04A3  
                           l1989 049E                             u2105 0430                             u2205 03E6  
                           u2125 01E0                             _LATA 0018                             u2135 01E7  
                           _LATC 001A                             u2165 03BA                             u2415 0766  
                           u2095 0447                             u1480 00E8                             u2185 03C6  
                           u2195 03DA                             u2620 01CB                             u2365 0730  
                           u2605 0578                             u2485 07A4                             u2665 016C  
                           u2675 0175                             u2595 056C                             u2795 00B9  
                           _PLLR 4480                             _WPUA 1F39                             _WPUC 1F4F  
                  _EUSART1_Write 003B                    __CFG_FCMEN$ON 0000                             _main 0318  
                           fsr0h 0005                             fsr1h 0007                             indf0 0000  
                           fsr0l 0004                             indf1 0001                             fsr1l 0006  
                           btemp 007E                             _stop 007B                    __CFG_BOREN$ON 0000  
                           start 0001                    __CFG_CSWEN$ON 0000                   CW_Delay100us@a 0071  
                 CW_Delay100us@b 0072                   CW_Delay100us@i 0073                 ?_cw_get_capacity 003A  
     update_capacity@cw_capacity 0048   __size_of_OSCILLATOR_Initialize 000C    __end_of_OSCILLATOR_Initialize 007B  
          _cw_update_config_info 045A                            ?_main 0070                    __CFG_WDTE$OFF 0000  
                __end_of___lldiv 03F9                            ?_stop 0070                            _OSCEN 0891  
                          _TRISA 0012                            _TRISC 0014              ___lmul@multiplicand 0074  
                  __CFG_WRTB$OFF 0000                    __CFG_WRTC$OFF 0000                  __end_of_cw_init 06B0  
                __end_of_cw_read 0298                   ??_cw_read_word 007C                            _r_ack 0093  
                          _s_ack 004D                            _start 0058                   ?_EUSART1_Write 0070  
                          status 0003                            wtemp0 007E                   __CFG_MCLRE$OFF 0000  
        __end_of_update_capacity 017C                  __initialization 07E4       __end_of_EUSART1_Initialize 006F  
                   __end_of_main 035E               __size_of_Delay10us 0020                     __end_of_stop 0087  
                 __CFG_SAFEN$OFF 0000                   cw_bat_init@ret 0035                           ??_main 004A  
                         ??_stop 0074                           ?_r_ack 0074                           ?_s_ack 0070  
               cw_read@point_reg 007D                           _CHARGE 005A                           _ANSELA 1F38  
                         _ANSELC 1F4E                           ?_start 0070                           _RC1REG 0119  
                         _RC1STA 011D                           _RC4PPS 1F24                           _ODCONA 1F3A  
                         _ODCONC 1F50                   __CFG_WDTCCS$SC 0000                           _OSCFRQ 0893  
                         _TX1REG 011A                           _TX1STA 011E                  cw_write@w_pdata 0024  
                 __CFG_PWRTE$OFF 0000              _cw_get_capacity$288 003E              _cw_get_capacity$289 0040  
                  cw_get_vol@F83 0052             __size_of_cw_bat_init 001B             __size_of_cw_bat_work 0004  
                         ___lmul 01CD                    cw_get_vol@ret 0034                   __CFG_STVREN$ON 0000  
                      ??___lldiv 007C                 __end_of_cw_write 0260                           _cw_bat 004C  
                         _cw_por 035E           ?_cw_update_config_info 0070                           _sn_ack 0087  
                      ??_cw_init 002D                        ??_cw_read 007C                    ?_CW_Delay10ms 0070  
                ??_EUSART1_Write 0070                __end_of_Delay10us 013A                _SYSTEM_Initialize 0027  
        __end_of__initialization 07FE               ?_SYSTEM_Initialize 0070             _no_charger_full_jump 0058  
              _update_usb_online 0043                 ?_update_capacity 0070                cw_get_vol@ad_buff 0041  
                 __pcstackCOMMON 0070                     __pidataBANK1 02D8                     __pidataBANK2 0298  
             ?_update_usb_online 0070              ??_SYSTEM_Initialize 0071             __end_of_cw_read_word 045A  
                  __end_of_r_ack 00A9                    __end_of_s_ack 0058                    __end_of_start 0063  
         __size_of_CW_Delay100us 0020                   ??_CW_Delay10ms 0072              ??_update_usb_online 0070  
              cw_get_vol@reg_val 0036                  cw_bat_init@loop 0034                          ??_r_ack 0076  
                        ??_s_ack 0074        __end_of_SYSTEM_Initialize 002B                          ??_start 0074  
                     __pbssBANK0 004C        __end_of_update_usb_online 004D               __size_of_read_byte 0023  
                     __pmaintext 0318                          ?___lmul 0070                  __CFG_PPS1WAY$ON 0000  
                        ?_cw_por 0033                   ___lmul@product 0078                          ?_sn_ack 0070  
                        _SP1BRGH 011C                          _SP1BRGL 011B                          _OSCCON1 088D  
                        _OSCCON3 088F                          _OSCSTAT 0890                          _OSCTUNE 0892  
                        _PPSLOCK 1E8F                       _cw_get_vol 0519                        ?_cw_write 0024  
                  _CW_Delay100us 00FA             update_vol@cw_voltage 0043                  __size_of___lmul 002F  
                        ___lldiv 03A6                  __size_of_cw_por 0048                  __size_of_sn_ack 000C  
                        __ptext1 002B                          __ptext2 00A9                          __ptext3 0519  
                        __ptext4 03F9                          __ptext5 0087                          __ptext6 01CD  
                        __ptext7 03A6                          __ptext8 0043                          __ptext9 015B  
                        _cw_init 05DA                          _cw_read 0260                  __CFG_WRTAPP$OFF 0000  
          _OSCILLATOR_Initialize 006F                __end_of_read_byte 019F               _EUSART1_Initialize 0063  
       __size_of_cw_get_capacity 0134         ??_PIN_MANAGER_Initialize 0070                  __CFG_WRTSAF$OFF 0000  
     __size_of_SYSTEM_Initialize 0004                          clrloop0 0030                          main@ret 004B  
           end_of_initialization 07FE                 write_byte@w_data 0075                   ?_CW_Delay100us 0070  
            ?_EUSART1_Initialize 0070                       ??_cw_write 007C                          init_ram 0035  
                        initloop 0036       __size_of_update_usb_online 000A             __end_of_CW_Delay10ms 015B  
          __size_of_cw_read_word 0061                  ___lldiv@divisor 0020                  cw_por@reset_val 0037  
                ___lldiv@counter 002C                       _reset_loop 005C     cw_update_config_info@reg_val 002C  
        ??_cw_update_config_info 0027                      wait_r_ack@i 0022                       _wait_r_ack 01FC  
           ??_EUSART1_Initialize 0070            __CFG_WDTCPS$WDTCPS_31 0000                        _PORTCbits 000E  
       cw_update_config_info@ret 0029                        _TRISCbits 0014                       _update_vol 00A9  
                    ?_cw_get_vol 002D              EUSART1_Write@txData 0070                 __CFG_FEXTOSC$OFF 0000  
                   _cw_read_word 03F9                        _Delay10us 011A                   cw_init@reg_val 0032  
                  ??_cw_bat_init 0033                    ??_cw_bat_work 007E                       cw_init@ret 0030  
                 cw_read@r_pdata 0024               cw_get_vol@ad_value 003C                   __end_of___lmul 01FC  
                     _write_byte 00DB                   __end_of_cw_por 03A6           ?_OSCILLATOR_Initialize 0070  
  cw_get_capacity@allow_capacity 0045                   __end_of_sn_ack 0093              start_initialization 07E4  
__size_of_PIN_MANAGER_Initialize 002E                  ??_CW_Delay100us 0070            __end_of_EUSART1_Write 0043  
     cw_get_capacity@cw_capacity 0046                ??_cw_get_capacity 003C                       ?_Delay10us 0070  
               __CFG_LPBOREN$OFF 0000                         ??___lmul 0078              __end_of_cw_bat_init 00DB  
            __size_of_cw_get_vol 00C1                      ?_wait_r_ack 007A              __end_of_cw_bat_work 002F  
                    __pdataBANK1 00A0                      __pdataBANK2 0120                         ??_cw_por 0035  
                       ??_sn_ack 0074                       read_byte@i 0075         __size_of_update_capacity 0021  
         cw_update_config_info@i 002B           cw_get_capacity@reg_val 0042                        ___latbits 0000  
                  __pcstackBANK0 0020                      ?_update_vol 0070            __size_of_CW_Delay10ms 0021  
      _allow_charger_always_zero 0054                __size_of_cw_write 0032           cw_get_vol@ad_value_max 003A  
         cw_get_vol@ad_value_min 0038              cw_read_word@r_pdata 0024           _PIN_MANAGER_Initialize 019F  
                       ?___lldiv 0020                      ?_write_byte 0070            cw_read_word@point_reg 0027  
                       ?_cw_init 0070                         ?_cw_read 0024                         _BAUD1CON 011F  
                   _CW_Delay10ms 013A             __CFG_RSTOSC$HFINTPLL 0000                   __size_of_r_ack 0016  
                 __size_of_s_ack 000B                        _read_byte 017C                   __size_of_start 000B  
            __size_of_wait_r_ack 0032                      ??_Delay10us 0070                         _LATAbits 0018  
                       _LATCbits 001A                        clear_ram0 002F                      _cw_bat_init 00C0  
                    _cw_bat_work 002B                         _PIR3bits 070F                __CFG_BBSIZE$BB512 0000  
            __size_of_update_vol 0017   __size_of_cw_update_config_info 00BF    __end_of_cw_update_config_info 0519  
                   _RX1DTPPSbits 1ECB                      write_byte@i 0076                     ??_cw_get_vol 002F  
              ??_update_capacity 0047                        cw_por@ret 0038                ___lmul@multiplier 0070  
                     ?_read_byte 0070                cw_write@point_reg 007C              __size_of_write_byte 001F  
                read_byte@r_data 0076          ??_OSCILLATOR_Initialize 0070               __end_of_cw_get_vol 05DA  
               __size_of___lldiv 0053      __size_of_EUSART1_Initialize 000C                  _cw_get_capacity 06B0  
               __size_of_cw_init 00D6                 __size_of_cw_read 0038               _cw_bat_config_info 0120  
             cw_read_word@length 0025                         __ptext10 06B0                         __ptext11 035E  
                       __ptext20 0093                         __ptext12 00C0                         __ptext21 0058  
                       __ptext13 05DA                         __ptext30 0063                         __ptext22 004D  
                       __ptext14 045A                         __ptext31 003B                         __ptext23 017C  
                       __ptext15 022E                         __ptext24 011A                         __ptext16 0260  
                       __ptext25 00FA                         __ptext17 00DB                         __ptext26 013A  
                       __ptext18 01FC                         __ptext27 0027                         __ptext19 007B  
                       __ptext28 019F                         __ptext29 006F                         _cw_write 022E  
          _allow_no_charger_full 0056               cw_get_capacity@ret 0043                    __size_of_main 0046  
                  __size_of_stop 000C             __CFG_WDTCWS$WDTCWS_7 0000                       Delay10us@a 0071  
                     Delay10us@b 0072                       Delay10us@i 0073                       _RC1STAbits 011D  
                   ??_wait_r_ack 007C                         cw_init@i 002F   cw_update_config_info@reset_val 0028  
    PIN_MANAGER_Initialize@state 0070                         r_ack@ack 0078                    wait_r_ack@ack 0020  
                   ??_update_vol 007E                      ??_read_byte 0074            __end_of_CW_Delay100us 011A  
              cw_read_word@count 0028               __end_of_wait_r_ack 022E                 ___lldiv@dividend 0024  
        ?_PIN_MANAGER_Initialize 0070                __CFG_CLKOUTEN$OFF 0000                      _PPSLOCKbits 1E8F  
       CW201x@cw_bat_config_info 00A0                    _if_quickstart 005D          __end_of_cw_get_capacity 07E4  
             __end_of_update_vol 00C0           cw_get_vol@get_ad_times 0040                     ??_write_byte 0074  
         __size_of_EUSART1_Write 0008                 ___lldiv@quotient 0028   __end_of_PIN_MANAGER_Initialize 01CD  
             __end_of_write_byte 00FA                     ?_cw_bat_init 0070                     ?_cw_bat_work 0070  
