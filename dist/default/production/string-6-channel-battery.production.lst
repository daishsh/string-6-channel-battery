

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Tue Aug 29 16:13:34 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F15323
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	intentry,global,class=CODE,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	dabs	1,0x7E,2
    48  0000                     
    49                           ; Version 1.43
    50                           ; Generated 25/07/2017 GMT
    51                           ; 
    52                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC16F15323 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     	;# 
    84  0001                     	;# 
    85  0002                     	;# 
    86  0003                     	;# 
    87  0004                     	;# 
    88  0005                     	;# 
    89  0006                     	;# 
    90  0007                     	;# 
    91  0008                     	;# 
    92  0009                     	;# 
    93  000A                     	;# 
    94  000B                     	;# 
    95  000C                     	;# 
    96  000E                     	;# 
    97  0012                     	;# 
    98  0014                     	;# 
    99  0018                     	;# 
   100  001A                     	;# 
   101  009B                     	;# 
   102  009B                     	;# 
   103  009C                     	;# 
   104  009D                     	;# 
   105  009E                     	;# 
   106  009F                     	;# 
   107  0119                     	;# 
   108  0119                     	;# 
   109  0119                     	;# 
   110  011A                     	;# 
   111  011A                     	;# 
   112  011A                     	;# 
   113  011B                     	;# 
   114  011B                     	;# 
   115  011B                     	;# 
   116  011B                     	;# 
   117  011B                     	;# 
   118  011C                     	;# 
   119  011C                     	;# 
   120  011C                     	;# 
   121  011D                     	;# 
   122  011D                     	;# 
   123  011D                     	;# 
   124  011E                     	;# 
   125  011E                     	;# 
   126  011E                     	;# 
   127  011F                     	;# 
   128  011F                     	;# 
   129  011F                     	;# 
   130  011F                     	;# 
   131  011F                     	;# 
   132  018C                     	;# 
   133  018D                     	;# 
   134  018E                     	;# 
   135  018F                     	;# 
   136  0190                     	;# 
   137  0191                     	;# 
   138  0192                     	;# 
   139  020C                     	;# 
   140  020C                     	;# 
   141  020D                     	;# 
   142  020E                     	;# 
   143  020F                     	;# 
   144  020F                     	;# 
   145  0210                     	;# 
   146  0210                     	;# 
   147  0211                     	;# 
   148  0211                     	;# 
   149  028C                     	;# 
   150  028C                     	;# 
   151  028D                     	;# 
   152  028D                     	;# 
   153  028E                     	;# 
   154  028F                     	;# 
   155  0290                     	;# 
   156  0291                     	;# 
   157  030C                     	;# 
   158  030C                     	;# 
   159  030D                     	;# 
   160  030E                     	;# 
   161  030F                     	;# 
   162  0310                     	;# 
   163  0310                     	;# 
   164  0311                     	;# 
   165  0312                     	;# 
   166  0313                     	;# 
   167  0314                     	;# 
   168  0315                     	;# 
   169  0316                     	;# 
   170  0318                     	;# 
   171  0319                     	;# 
   172  031A                     	;# 
   173  031C                     	;# 
   174  031D                     	;# 
   175  031E                     	;# 
   176  038C                     	;# 
   177  038D                     	;# 
   178  038E                     	;# 
   179  058C                     	;# 
   180  058C                     	;# 
   181  058D                     	;# 
   182  058E                     	;# 
   183  058F                     	;# 
   184  058F                     	;# 
   185  0590                     	;# 
   186  0591                     	;# 
   187  0592                     	;# 
   188  0593                     	;# 
   189  059C                     	;# 
   190  059C                     	;# 
   191  059D                     	;# 
   192  059D                     	;# 
   193  059E                     	;# 
   194  059F                     	;# 
   195  060C                     	;# 
   196  060D                     	;# 
   197  060E                     	;# 
   198  060F                     	;# 
   199  0610                     	;# 
   200  0611                     	;# 
   201  0612                     	;# 
   202  0613                     	;# 
   203  0614                     	;# 
   204  070C                     	;# 
   205  070D                     	;# 
   206  070E                     	;# 
   207  070F                     	;# 
   208  0710                     	;# 
   209  0711                     	;# 
   210  0712                     	;# 
   211  0713                     	;# 
   212  0716                     	;# 
   213  0717                     	;# 
   214  0718                     	;# 
   215  0719                     	;# 
   216  071A                     	;# 
   217  071B                     	;# 
   218  071C                     	;# 
   219  071D                     	;# 
   220  0796                     	;# 
   221  0797                     	;# 
   222  0798                     	;# 
   223  0799                     	;# 
   224  079A                     	;# 
   225  079B                     	;# 
   226  080C                     	;# 
   227  080D                     	;# 
   228  080E                     	;# 
   229  080F                     	;# 
   230  0810                     	;# 
   231  0811                     	;# 
   232  0812                     	;# 
   233  0813                     	;# 
   234  0814                     	;# 
   235  081A                     	;# 
   236  081A                     	;# 
   237  081B                     	;# 
   238  081C                     	;# 
   239  081C                     	;# 
   240  081D                     	;# 
   241  081E                     	;# 
   242  081F                     	;# 
   243  088C                     	;# 
   244  088D                     	;# 
   245  088E                     	;# 
   246  088F                     	;# 
   247  0890                     	;# 
   248  0891                     	;# 
   249  0892                     	;# 
   250  0893                     	;# 
   251  0895                     	;# 
   252  0896                     	;# 
   253  090C                     	;# 
   254  090E                     	;# 
   255  090F                     	;# 
   256  091F                     	;# 
   257  098F                     	;# 
   258  098F                     	;# 
   259  0990                     	;# 
   260  0991                     	;# 
   261  0992                     	;# 
   262  0993                     	;# 
   263  0994                     	;# 
   264  0995                     	;# 
   265  0996                     	;# 
   266  0997                     	;# 
   267  1E0F                     	;# 
   268  1E10                     	;# 
   269  1E11                     	;# 
   270  1E12                     	;# 
   271  1E13                     	;# 
   272  1E14                     	;# 
   273  1E15                     	;# 
   274  1E16                     	;# 
   275  1E17                     	;# 
   276  1E18                     	;# 
   277  1E19                     	;# 
   278  1E1A                     	;# 
   279  1E1B                     	;# 
   280  1E1C                     	;# 
   281  1E1D                     	;# 
   282  1E1E                     	;# 
   283  1E1F                     	;# 
   284  1E20                     	;# 
   285  1E21                     	;# 
   286  1E22                     	;# 
   287  1E23                     	;# 
   288  1E24                     	;# 
   289  1E25                     	;# 
   290  1E26                     	;# 
   291  1E27                     	;# 
   292  1E28                     	;# 
   293  1E29                     	;# 
   294  1E2A                     	;# 
   295  1E2B                     	;# 
   296  1E2C                     	;# 
   297  1E2D                     	;# 
   298  1E2E                     	;# 
   299  1E2F                     	;# 
   300  1E30                     	;# 
   301  1E31                     	;# 
   302  1E32                     	;# 
   303  1E33                     	;# 
   304  1E34                     	;# 
   305  1E35                     	;# 
   306  1E36                     	;# 
   307  1E37                     	;# 
   308  1E8F                     	;# 
   309  1E90                     	;# 
   310  1E91                     	;# 
   311  1E92                     	;# 
   312  1E93                     	;# 
   313  1E9C                     	;# 
   314  1EA1                     	;# 
   315  1EA2                     	;# 
   316  1EB1                     	;# 
   317  1EBB                     	;# 
   318  1EBC                     	;# 
   319  1EBD                     	;# 
   320  1EBE                     	;# 
   321  1EC3                     	;# 
   322  1EC5                     	;# 
   323  1EC6                     	;# 
   324  1EC7                     	;# 
   325  1ECB                     	;# 
   326  1ECC                     	;# 
   327  1F10                     	;# 
   328  1F11                     	;# 
   329  1F12                     	;# 
   330  1F13                     	;# 
   331  1F14                     	;# 
   332  1F15                     	;# 
   333  1F20                     	;# 
   334  1F21                     	;# 
   335  1F22                     	;# 
   336  1F23                     	;# 
   337  1F24                     	;# 
   338  1F25                     	;# 
   339  1F38                     	;# 
   340  1F39                     	;# 
   341  1F3A                     	;# 
   342  1F3B                     	;# 
   343  1F3C                     	;# 
   344  1F3D                     	;# 
   345  1F3E                     	;# 
   346  1F3F                     	;# 
   347  1F4E                     	;# 
   348  1F4F                     	;# 
   349  1F50                     	;# 
   350  1F51                     	;# 
   351  1F52                     	;# 
   352  1F53                     	;# 
   353  1F54                     	;# 
   354  1F55                     	;# 
   355  1FE4                     	;# 
   356  1FE5                     	;# 
   357  1FE6                     	;# 
   358  1FE7                     	;# 
   359  1FE8                     	;# 
   360  1FE8                     	;# 
   361  1FE9                     	;# 
   362  1FEA                     	;# 
   363  1FEA                     	;# 
   364  1FEB                     	;# 
   365  1FED                     	;# 
   366  1FEE                     	;# 
   367  1FEF                     	;# 
   368  0000                     	;# 
   369  0001                     	;# 
   370  0002                     	;# 
   371  0003                     	;# 
   372  0004                     	;# 
   373  0005                     	;# 
   374  0006                     	;# 
   375  0007                     	;# 
   376  0008                     	;# 
   377  0009                     	;# 
   378  000A                     	;# 
   379  000B                     	;# 
   380  000C                     	;# 
   381  000E                     	;# 
   382  0012                     	;# 
   383  0014                     	;# 
   384  0018                     	;# 
   385  001A                     	;# 
   386  009B                     	;# 
   387  009B                     	;# 
   388  009C                     	;# 
   389  009D                     	;# 
   390  009E                     	;# 
   391  009F                     	;# 
   392  0119                     	;# 
   393  0119                     	;# 
   394  0119                     	;# 
   395  011A                     	;# 
   396  011A                     	;# 
   397  011A                     	;# 
   398  011B                     	;# 
   399  011B                     	;# 
   400  011B                     	;# 
   401  011B                     	;# 
   402  011B                     	;# 
   403  011C                     	;# 
   404  011C                     	;# 
   405  011C                     	;# 
   406  011D                     	;# 
   407  011D                     	;# 
   408  011D                     	;# 
   409  011E                     	;# 
   410  011E                     	;# 
   411  011E                     	;# 
   412  011F                     	;# 
   413  011F                     	;# 
   414  011F                     	;# 
   415  011F                     	;# 
   416  011F                     	;# 
   417  018C                     	;# 
   418  018D                     	;# 
   419  018E                     	;# 
   420  018F                     	;# 
   421  0190                     	;# 
   422  0191                     	;# 
   423  0192                     	;# 
   424  020C                     	;# 
   425  020C                     	;# 
   426  020D                     	;# 
   427  020E                     	;# 
   428  020F                     	;# 
   429  020F                     	;# 
   430  0210                     	;# 
   431  0210                     	;# 
   432  0211                     	;# 
   433  0211                     	;# 
   434  028C                     	;# 
   435  028C                     	;# 
   436  028D                     	;# 
   437  028D                     	;# 
   438  028E                     	;# 
   439  028F                     	;# 
   440  0290                     	;# 
   441  0291                     	;# 
   442  030C                     	;# 
   443  030C                     	;# 
   444  030D                     	;# 
   445  030E                     	;# 
   446  030F                     	;# 
   447  0310                     	;# 
   448  0310                     	;# 
   449  0311                     	;# 
   450  0312                     	;# 
   451  0313                     	;# 
   452  0314                     	;# 
   453  0315                     	;# 
   454  0316                     	;# 
   455  0318                     	;# 
   456  0319                     	;# 
   457  031A                     	;# 
   458  031C                     	;# 
   459  031D                     	;# 
   460  031E                     	;# 
   461  038C                     	;# 
   462  038D                     	;# 
   463  038E                     	;# 
   464  058C                     	;# 
   465  058C                     	;# 
   466  058D                     	;# 
   467  058E                     	;# 
   468  058F                     	;# 
   469  058F                     	;# 
   470  0590                     	;# 
   471  0591                     	;# 
   472  0592                     	;# 
   473  0593                     	;# 
   474  059C                     	;# 
   475  059C                     	;# 
   476  059D                     	;# 
   477  059D                     	;# 
   478  059E                     	;# 
   479  059F                     	;# 
   480  060C                     	;# 
   481  060D                     	;# 
   482  060E                     	;# 
   483  060F                     	;# 
   484  0610                     	;# 
   485  0611                     	;# 
   486  0612                     	;# 
   487  0613                     	;# 
   488  0614                     	;# 
   489  070C                     	;# 
   490  070D                     	;# 
   491  070E                     	;# 
   492  070F                     	;# 
   493  0710                     	;# 
   494  0711                     	;# 
   495  0712                     	;# 
   496  0713                     	;# 
   497  0716                     	;# 
   498  0717                     	;# 
   499  0718                     	;# 
   500  0719                     	;# 
   501  071A                     	;# 
   502  071B                     	;# 
   503  071C                     	;# 
   504  071D                     	;# 
   505  0796                     	;# 
   506  0797                     	;# 
   507  0798                     	;# 
   508  0799                     	;# 
   509  079A                     	;# 
   510  079B                     	;# 
   511  080C                     	;# 
   512  080D                     	;# 
   513  080E                     	;# 
   514  080F                     	;# 
   515  0810                     	;# 
   516  0811                     	;# 
   517  0812                     	;# 
   518  0813                     	;# 
   519  0814                     	;# 
   520  081A                     	;# 
   521  081A                     	;# 
   522  081B                     	;# 
   523  081C                     	;# 
   524  081C                     	;# 
   525  081D                     	;# 
   526  081E                     	;# 
   527  081F                     	;# 
   528  088C                     	;# 
   529  088D                     	;# 
   530  088E                     	;# 
   531  088F                     	;# 
   532  0890                     	;# 
   533  0891                     	;# 
   534  0892                     	;# 
   535  0893                     	;# 
   536  0895                     	;# 
   537  0896                     	;# 
   538  090C                     	;# 
   539  090E                     	;# 
   540  090F                     	;# 
   541  091F                     	;# 
   542  098F                     	;# 
   543  098F                     	;# 
   544  0990                     	;# 
   545  0991                     	;# 
   546  0992                     	;# 
   547  0993                     	;# 
   548  0994                     	;# 
   549  0995                     	;# 
   550  0996                     	;# 
   551  0997                     	;# 
   552  1E0F                     	;# 
   553  1E10                     	;# 
   554  1E11                     	;# 
   555  1E12                     	;# 
   556  1E13                     	;# 
   557  1E14                     	;# 
   558  1E15                     	;# 
   559  1E16                     	;# 
   560  1E17                     	;# 
   561  1E18                     	;# 
   562  1E19                     	;# 
   563  1E1A                     	;# 
   564  1E1B                     	;# 
   565  1E1C                     	;# 
   566  1E1D                     	;# 
   567  1E1E                     	;# 
   568  1E1F                     	;# 
   569  1E20                     	;# 
   570  1E21                     	;# 
   571  1E22                     	;# 
   572  1E23                     	;# 
   573  1E24                     	;# 
   574  1E25                     	;# 
   575  1E26                     	;# 
   576  1E27                     	;# 
   577  1E28                     	;# 
   578  1E29                     	;# 
   579  1E2A                     	;# 
   580  1E2B                     	;# 
   581  1E2C                     	;# 
   582  1E2D                     	;# 
   583  1E2E                     	;# 
   584  1E2F                     	;# 
   585  1E30                     	;# 
   586  1E31                     	;# 
   587  1E32                     	;# 
   588  1E33                     	;# 
   589  1E34                     	;# 
   590  1E35                     	;# 
   591  1E36                     	;# 
   592  1E37                     	;# 
   593  1E8F                     	;# 
   594  1E90                     	;# 
   595  1E91                     	;# 
   596  1E92                     	;# 
   597  1E93                     	;# 
   598  1E9C                     	;# 
   599  1EA1                     	;# 
   600  1EA2                     	;# 
   601  1EB1                     	;# 
   602  1EBB                     	;# 
   603  1EBC                     	;# 
   604  1EBD                     	;# 
   605  1EBE                     	;# 
   606  1EC3                     	;# 
   607  1EC5                     	;# 
   608  1EC6                     	;# 
   609  1EC7                     	;# 
   610  1ECB                     	;# 
   611  1ECC                     	;# 
   612  1F10                     	;# 
   613  1F11                     	;# 
   614  1F12                     	;# 
   615  1F13                     	;# 
   616  1F14                     	;# 
   617  1F15                     	;# 
   618  1F20                     	;# 
   619  1F21                     	;# 
   620  1F22                     	;# 
   621  1F23                     	;# 
   622  1F24                     	;# 
   623  1F25                     	;# 
   624  1F38                     	;# 
   625  1F39                     	;# 
   626  1F3A                     	;# 
   627  1F3B                     	;# 
   628  1F3C                     	;# 
   629  1F3D                     	;# 
   630  1F3E                     	;# 
   631  1F3F                     	;# 
   632  1F4E                     	;# 
   633  1F4F                     	;# 
   634  1F50                     	;# 
   635  1F51                     	;# 
   636  1F52                     	;# 
   637  1F53                     	;# 
   638  1F54                     	;# 
   639  1F55                     	;# 
   640  1FE4                     	;# 
   641  1FE5                     	;# 
   642  1FE6                     	;# 
   643  1FE7                     	;# 
   644  1FE8                     	;# 
   645  1FE8                     	;# 
   646  1FE9                     	;# 
   647  1FEA                     	;# 
   648  1FEA                     	;# 
   649  1FEB                     	;# 
   650  1FED                     	;# 
   651  1FEE                     	;# 
   652  1FEF                     	;# 
   653  0000                     	;# 
   654  0001                     	;# 
   655  0002                     	;# 
   656  0003                     	;# 
   657  0004                     	;# 
   658  0005                     	;# 
   659  0006                     	;# 
   660  0007                     	;# 
   661  0008                     	;# 
   662  0009                     	;# 
   663  000A                     	;# 
   664  000B                     	;# 
   665  000C                     	;# 
   666  000E                     	;# 
   667  0012                     	;# 
   668  0014                     	;# 
   669  0018                     	;# 
   670  001A                     	;# 
   671  009B                     	;# 
   672  009B                     	;# 
   673  009C                     	;# 
   674  009D                     	;# 
   675  009E                     	;# 
   676  009F                     	;# 
   677  0119                     	;# 
   678  0119                     	;# 
   679  0119                     	;# 
   680  011A                     	;# 
   681  011A                     	;# 
   682  011A                     	;# 
   683  011B                     	;# 
   684  011B                     	;# 
   685  011B                     	;# 
   686  011B                     	;# 
   687  011B                     	;# 
   688  011C                     	;# 
   689  011C                     	;# 
   690  011C                     	;# 
   691  011D                     	;# 
   692  011D                     	;# 
   693  011D                     	;# 
   694  011E                     	;# 
   695  011E                     	;# 
   696  011E                     	;# 
   697  011F                     	;# 
   698  011F                     	;# 
   699  011F                     	;# 
   700  011F                     	;# 
   701  011F                     	;# 
   702  018C                     	;# 
   703  018D                     	;# 
   704  018E                     	;# 
   705  018F                     	;# 
   706  0190                     	;# 
   707  0191                     	;# 
   708  0192                     	;# 
   709  020C                     	;# 
   710  020C                     	;# 
   711  020D                     	;# 
   712  020E                     	;# 
   713  020F                     	;# 
   714  020F                     	;# 
   715  0210                     	;# 
   716  0210                     	;# 
   717  0211                     	;# 
   718  0211                     	;# 
   719  028C                     	;# 
   720  028C                     	;# 
   721  028D                     	;# 
   722  028D                     	;# 
   723  028E                     	;# 
   724  028F                     	;# 
   725  0290                     	;# 
   726  0291                     	;# 
   727  030C                     	;# 
   728  030C                     	;# 
   729  030D                     	;# 
   730  030E                     	;# 
   731  030F                     	;# 
   732  0310                     	;# 
   733  0310                     	;# 
   734  0311                     	;# 
   735  0312                     	;# 
   736  0313                     	;# 
   737  0314                     	;# 
   738  0315                     	;# 
   739  0316                     	;# 
   740  0318                     	;# 
   741  0319                     	;# 
   742  031A                     	;# 
   743  031C                     	;# 
   744  031D                     	;# 
   745  031E                     	;# 
   746  038C                     	;# 
   747  038D                     	;# 
   748  038E                     	;# 
   749  058C                     	;# 
   750  058C                     	;# 
   751  058D                     	;# 
   752  058E                     	;# 
   753  058F                     	;# 
   754  058F                     	;# 
   755  0590                     	;# 
   756  0591                     	;# 
   757  0592                     	;# 
   758  0593                     	;# 
   759  059C                     	;# 
   760  059C                     	;# 
   761  059D                     	;# 
   762  059D                     	;# 
   763  059E                     	;# 
   764  059F                     	;# 
   765  060C                     	;# 
   766  060D                     	;# 
   767  060E                     	;# 
   768  060F                     	;# 
   769  0610                     	;# 
   770  0611                     	;# 
   771  0612                     	;# 
   772  0613                     	;# 
   773  0614                     	;# 
   774  070C                     	;# 
   775  070D                     	;# 
   776  070E                     	;# 
   777  070F                     	;# 
   778  0710                     	;# 
   779  0711                     	;# 
   780  0712                     	;# 
   781  0713                     	;# 
   782  0716                     	;# 
   783  0717                     	;# 
   784  0718                     	;# 
   785  0719                     	;# 
   786  071A                     	;# 
   787  071B                     	;# 
   788  071C                     	;# 
   789  071D                     	;# 
   790  0796                     	;# 
   791  0797                     	;# 
   792  0798                     	;# 
   793  0799                     	;# 
   794  079A                     	;# 
   795  079B                     	;# 
   796  080C                     	;# 
   797  080D                     	;# 
   798  080E                     	;# 
   799  080F                     	;# 
   800  0810                     	;# 
   801  0811                     	;# 
   802  0812                     	;# 
   803  0813                     	;# 
   804  0814                     	;# 
   805  081A                     	;# 
   806  081A                     	;# 
   807  081B                     	;# 
   808  081C                     	;# 
   809  081C                     	;# 
   810  081D                     	;# 
   811  081E                     	;# 
   812  081F                     	;# 
   813  088C                     	;# 
   814  088D                     	;# 
   815  088E                     	;# 
   816  088F                     	;# 
   817  0890                     	;# 
   818  0891                     	;# 
   819  0892                     	;# 
   820  0893                     	;# 
   821  0895                     	;# 
   822  0896                     	;# 
   823  090C                     	;# 
   824  090E                     	;# 
   825  090F                     	;# 
   826  091F                     	;# 
   827  098F                     	;# 
   828  098F                     	;# 
   829  0990                     	;# 
   830  0991                     	;# 
   831  0992                     	;# 
   832  0993                     	;# 
   833  0994                     	;# 
   834  0995                     	;# 
   835  0996                     	;# 
   836  0997                     	;# 
   837  1E0F                     	;# 
   838  1E10                     	;# 
   839  1E11                     	;# 
   840  1E12                     	;# 
   841  1E13                     	;# 
   842  1E14                     	;# 
   843  1E15                     	;# 
   844  1E16                     	;# 
   845  1E17                     	;# 
   846  1E18                     	;# 
   847  1E19                     	;# 
   848  1E1A                     	;# 
   849  1E1B                     	;# 
   850  1E1C                     	;# 
   851  1E1D                     	;# 
   852  1E1E                     	;# 
   853  1E1F                     	;# 
   854  1E20                     	;# 
   855  1E21                     	;# 
   856  1E22                     	;# 
   857  1E23                     	;# 
   858  1E24                     	;# 
   859  1E25                     	;# 
   860  1E26                     	;# 
   861  1E27                     	;# 
   862  1E28                     	;# 
   863  1E29                     	;# 
   864  1E2A                     	;# 
   865  1E2B                     	;# 
   866  1E2C                     	;# 
   867  1E2D                     	;# 
   868  1E2E                     	;# 
   869  1E2F                     	;# 
   870  1E30                     	;# 
   871  1E31                     	;# 
   872  1E32                     	;# 
   873  1E33                     	;# 
   874  1E34                     	;# 
   875  1E35                     	;# 
   876  1E36                     	;# 
   877  1E37                     	;# 
   878  1E8F                     	;# 
   879  1E90                     	;# 
   880  1E91                     	;# 
   881  1E92                     	;# 
   882  1E93                     	;# 
   883  1E9C                     	;# 
   884  1EA1                     	;# 
   885  1EA2                     	;# 
   886  1EB1                     	;# 
   887  1EBB                     	;# 
   888  1EBC                     	;# 
   889  1EBD                     	;# 
   890  1EBE                     	;# 
   891  1EC3                     	;# 
   892  1EC5                     	;# 
   893  1EC6                     	;# 
   894  1EC7                     	;# 
   895  1ECB                     	;# 
   896  1ECC                     	;# 
   897  1F10                     	;# 
   898  1F11                     	;# 
   899  1F12                     	;# 
   900  1F13                     	;# 
   901  1F14                     	;# 
   902  1F15                     	;# 
   903  1F20                     	;# 
   904  1F21                     	;# 
   905  1F22                     	;# 
   906  1F23                     	;# 
   907  1F24                     	;# 
   908  1F25                     	;# 
   909  1F38                     	;# 
   910  1F39                     	;# 
   911  1F3A                     	;# 
   912  1F3B                     	;# 
   913  1F3C                     	;# 
   914  1F3D                     	;# 
   915  1F3E                     	;# 
   916  1F3F                     	;# 
   917  1F4E                     	;# 
   918  1F4F                     	;# 
   919  1F50                     	;# 
   920  1F51                     	;# 
   921  1F52                     	;# 
   922  1F53                     	;# 
   923  1F54                     	;# 
   924  1F55                     	;# 
   925  1FE4                     	;# 
   926  1FE5                     	;# 
   927  1FE6                     	;# 
   928  1FE7                     	;# 
   929  1FE8                     	;# 
   930  1FE8                     	;# 
   931  1FE9                     	;# 
   932  1FEA                     	;# 
   933  1FEA                     	;# 
   934  1FEB                     	;# 
   935  1FED                     	;# 
   936  1FEE                     	;# 
   937  1FEF                     	;# 
   938  0000                     	;# 
   939  0001                     	;# 
   940  0002                     	;# 
   941  0003                     	;# 
   942  0004                     	;# 
   943  0005                     	;# 
   944  0006                     	;# 
   945  0007                     	;# 
   946  0008                     	;# 
   947  0009                     	;# 
   948  000A                     	;# 
   949  000B                     	;# 
   950  000C                     	;# 
   951  000E                     	;# 
   952  0012                     	;# 
   953  0014                     	;# 
   954  0018                     	;# 
   955  001A                     	;# 
   956  009B                     	;# 
   957  009B                     	;# 
   958  009C                     	;# 
   959  009D                     	;# 
   960  009E                     	;# 
   961  009F                     	;# 
   962  0119                     	;# 
   963  0119                     	;# 
   964  0119                     	;# 
   965  011A                     	;# 
   966  011A                     	;# 
   967  011A                     	;# 
   968  011B                     	;# 
   969  011B                     	;# 
   970  011B                     	;# 
   971  011B                     	;# 
   972  011B                     	;# 
   973  011C                     	;# 
   974  011C                     	;# 
   975  011C                     	;# 
   976  011D                     	;# 
   977  011D                     	;# 
   978  011D                     	;# 
   979  011E                     	;# 
   980  011E                     	;# 
   981  011E                     	;# 
   982  011F                     	;# 
   983  011F                     	;# 
   984  011F                     	;# 
   985  011F                     	;# 
   986  011F                     	;# 
   987  018C                     	;# 
   988  018D                     	;# 
   989  018E                     	;# 
   990  018F                     	;# 
   991  0190                     	;# 
   992  0191                     	;# 
   993  0192                     	;# 
   994  020C                     	;# 
   995  020C                     	;# 
   996  020D                     	;# 
   997  020E                     	;# 
   998  020F                     	;# 
   999  020F                     	;# 
  1000  0210                     	;# 
  1001  0210                     	;# 
  1002  0211                     	;# 
  1003  0211                     	;# 
  1004  028C                     	;# 
  1005  028C                     	;# 
  1006  028D                     	;# 
  1007  028D                     	;# 
  1008  028E                     	;# 
  1009  028F                     	;# 
  1010  0290                     	;# 
  1011  0291                     	;# 
  1012  030C                     	;# 
  1013  030C                     	;# 
  1014  030D                     	;# 
  1015  030E                     	;# 
  1016  030F                     	;# 
  1017  0310                     	;# 
  1018  0310                     	;# 
  1019  0311                     	;# 
  1020  0312                     	;# 
  1021  0313                     	;# 
  1022  0314                     	;# 
  1023  0315                     	;# 
  1024  0316                     	;# 
  1025  0318                     	;# 
  1026  0319                     	;# 
  1027  031A                     	;# 
  1028  031C                     	;# 
  1029  031D                     	;# 
  1030  031E                     	;# 
  1031  038C                     	;# 
  1032  038D                     	;# 
  1033  038E                     	;# 
  1034  058C                     	;# 
  1035  058C                     	;# 
  1036  058D                     	;# 
  1037  058E                     	;# 
  1038  058F                     	;# 
  1039  058F                     	;# 
  1040  0590                     	;# 
  1041  0591                     	;# 
  1042  0592                     	;# 
  1043  0593                     	;# 
  1044  059C                     	;# 
  1045  059C                     	;# 
  1046  059D                     	;# 
  1047  059D                     	;# 
  1048  059E                     	;# 
  1049  059F                     	;# 
  1050  060C                     	;# 
  1051  060D                     	;# 
  1052  060E                     	;# 
  1053  060F                     	;# 
  1054  0610                     	;# 
  1055  0611                     	;# 
  1056  0612                     	;# 
  1057  0613                     	;# 
  1058  0614                     	;# 
  1059  070C                     	;# 
  1060  070D                     	;# 
  1061  070E                     	;# 
  1062  070F                     	;# 
  1063  0710                     	;# 
  1064  0711                     	;# 
  1065  0712                     	;# 
  1066  0713                     	;# 
  1067  0716                     	;# 
  1068  0717                     	;# 
  1069  0718                     	;# 
  1070  0719                     	;# 
  1071  071A                     	;# 
  1072  071B                     	;# 
  1073  071C                     	;# 
  1074  071D                     	;# 
  1075  0796                     	;# 
  1076  0797                     	;# 
  1077  0798                     	;# 
  1078  0799                     	;# 
  1079  079A                     	;# 
  1080  079B                     	;# 
  1081  080C                     	;# 
  1082  080D                     	;# 
  1083  080E                     	;# 
  1084  080F                     	;# 
  1085  0810                     	;# 
  1086  0811                     	;# 
  1087  0812                     	;# 
  1088  0813                     	;# 
  1089  0814                     	;# 
  1090  081A                     	;# 
  1091  081A                     	;# 
  1092  081B                     	;# 
  1093  081C                     	;# 
  1094  081C                     	;# 
  1095  081D                     	;# 
  1096  081E                     	;# 
  1097  081F                     	;# 
  1098  088C                     	;# 
  1099  088D                     	;# 
  1100  088E                     	;# 
  1101  088F                     	;# 
  1102  0890                     	;# 
  1103  0891                     	;# 
  1104  0892                     	;# 
  1105  0893                     	;# 
  1106  0895                     	;# 
  1107  0896                     	;# 
  1108  090C                     	;# 
  1109  090E                     	;# 
  1110  090F                     	;# 
  1111  091F                     	;# 
  1112  098F                     	;# 
  1113  098F                     	;# 
  1114  0990                     	;# 
  1115  0991                     	;# 
  1116  0992                     	;# 
  1117  0993                     	;# 
  1118  0994                     	;# 
  1119  0995                     	;# 
  1120  0996                     	;# 
  1121  0997                     	;# 
  1122  1E0F                     	;# 
  1123  1E10                     	;# 
  1124  1E11                     	;# 
  1125  1E12                     	;# 
  1126  1E13                     	;# 
  1127  1E14                     	;# 
  1128  1E15                     	;# 
  1129  1E16                     	;# 
  1130  1E17                     	;# 
  1131  1E18                     	;# 
  1132  1E19                     	;# 
  1133  1E1A                     	;# 
  1134  1E1B                     	;# 
  1135  1E1C                     	;# 
  1136  1E1D                     	;# 
  1137  1E1E                     	;# 
  1138  1E1F                     	;# 
  1139  1E20                     	;# 
  1140  1E21                     	;# 
  1141  1E22                     	;# 
  1142  1E23                     	;# 
  1143  1E24                     	;# 
  1144  1E25                     	;# 
  1145  1E26                     	;# 
  1146  1E27                     	;# 
  1147  1E28                     	;# 
  1148  1E29                     	;# 
  1149  1E2A                     	;# 
  1150  1E2B                     	;# 
  1151  1E2C                     	;# 
  1152  1E2D                     	;# 
  1153  1E2E                     	;# 
  1154  1E2F                     	;# 
  1155  1E30                     	;# 
  1156  1E31                     	;# 
  1157  1E32                     	;# 
  1158  1E33                     	;# 
  1159  1E34                     	;# 
  1160  1E35                     	;# 
  1161  1E36                     	;# 
  1162  1E37                     	;# 
  1163  1E8F                     	;# 
  1164  1E90                     	;# 
  1165  1E91                     	;# 
  1166  1E92                     	;# 
  1167  1E93                     	;# 
  1168  1E9C                     	;# 
  1169  1EA1                     	;# 
  1170  1EA2                     	;# 
  1171  1EB1                     	;# 
  1172  1EBB                     	;# 
  1173  1EBC                     	;# 
  1174  1EBD                     	;# 
  1175  1EBE                     	;# 
  1176  1EC3                     	;# 
  1177  1EC5                     	;# 
  1178  1EC6                     	;# 
  1179  1EC7                     	;# 
  1180  1ECB                     	;# 
  1181  1ECC                     	;# 
  1182  1F10                     	;# 
  1183  1F11                     	;# 
  1184  1F12                     	;# 
  1185  1F13                     	;# 
  1186  1F14                     	;# 
  1187  1F15                     	;# 
  1188  1F20                     	;# 
  1189  1F21                     	;# 
  1190  1F22                     	;# 
  1191  1F23                     	;# 
  1192  1F24                     	;# 
  1193  1F25                     	;# 
  1194  1F38                     	;# 
  1195  1F39                     	;# 
  1196  1F3A                     	;# 
  1197  1F3B                     	;# 
  1198  1F3C                     	;# 
  1199  1F3D                     	;# 
  1200  1F3E                     	;# 
  1201  1F3F                     	;# 
  1202  1F4E                     	;# 
  1203  1F4F                     	;# 
  1204  1F50                     	;# 
  1205  1F51                     	;# 
  1206  1F52                     	;# 
  1207  1F53                     	;# 
  1208  1F54                     	;# 
  1209  1F55                     	;# 
  1210  1FE4                     	;# 
  1211  1FE5                     	;# 
  1212  1FE6                     	;# 
  1213  1FE7                     	;# 
  1214  1FE8                     	;# 
  1215  1FE8                     	;# 
  1216  1FE9                     	;# 
  1217  1FEA                     	;# 
  1218  1FEA                     	;# 
  1219  1FEB                     	;# 
  1220  1FED                     	;# 
  1221  1FEE                     	;# 
  1222  1FEF                     	;# 
  1223  0000                     	;# 
  1224  0001                     	;# 
  1225  0002                     	;# 
  1226  0003                     	;# 
  1227  0004                     	;# 
  1228  0005                     	;# 
  1229  0006                     	;# 
  1230  0007                     	;# 
  1231  0008                     	;# 
  1232  0009                     	;# 
  1233  000A                     	;# 
  1234  000B                     	;# 
  1235  000C                     	;# 
  1236  000E                     	;# 
  1237  0012                     	;# 
  1238  0014                     	;# 
  1239  0018                     	;# 
  1240  001A                     	;# 
  1241  009B                     	;# 
  1242  009B                     	;# 
  1243  009C                     	;# 
  1244  009D                     	;# 
  1245  009E                     	;# 
  1246  009F                     	;# 
  1247  0119                     	;# 
  1248  0119                     	;# 
  1249  0119                     	;# 
  1250  011A                     	;# 
  1251  011A                     	;# 
  1252  011A                     	;# 
  1253  011B                     	;# 
  1254  011B                     	;# 
  1255  011B                     	;# 
  1256  011B                     	;# 
  1257  011B                     	;# 
  1258  011C                     	;# 
  1259  011C                     	;# 
  1260  011C                     	;# 
  1261  011D                     	;# 
  1262  011D                     	;# 
  1263  011D                     	;# 
  1264  011E                     	;# 
  1265  011E                     	;# 
  1266  011E                     	;# 
  1267  011F                     	;# 
  1268  011F                     	;# 
  1269  011F                     	;# 
  1270  011F                     	;# 
  1271  011F                     	;# 
  1272  018C                     	;# 
  1273  018D                     	;# 
  1274  018E                     	;# 
  1275  018F                     	;# 
  1276  0190                     	;# 
  1277  0191                     	;# 
  1278  0192                     	;# 
  1279  020C                     	;# 
  1280  020C                     	;# 
  1281  020D                     	;# 
  1282  020E                     	;# 
  1283  020F                     	;# 
  1284  020F                     	;# 
  1285  0210                     	;# 
  1286  0210                     	;# 
  1287  0211                     	;# 
  1288  0211                     	;# 
  1289  028C                     	;# 
  1290  028C                     	;# 
  1291  028D                     	;# 
  1292  028D                     	;# 
  1293  028E                     	;# 
  1294  028F                     	;# 
  1295  0290                     	;# 
  1296  0291                     	;# 
  1297  030C                     	;# 
  1298  030C                     	;# 
  1299  030D                     	;# 
  1300  030E                     	;# 
  1301  030F                     	;# 
  1302  0310                     	;# 
  1303  0310                     	;# 
  1304  0311                     	;# 
  1305  0312                     	;# 
  1306  0313                     	;# 
  1307  0314                     	;# 
  1308  0315                     	;# 
  1309  0316                     	;# 
  1310  0318                     	;# 
  1311  0319                     	;# 
  1312  031A                     	;# 
  1313  031C                     	;# 
  1314  031D                     	;# 
  1315  031E                     	;# 
  1316  038C                     	;# 
  1317  038D                     	;# 
  1318  038E                     	;# 
  1319  058C                     	;# 
  1320  058C                     	;# 
  1321  058D                     	;# 
  1322  058E                     	;# 
  1323  058F                     	;# 
  1324  058F                     	;# 
  1325  0590                     	;# 
  1326  0591                     	;# 
  1327  0592                     	;# 
  1328  0593                     	;# 
  1329  059C                     	;# 
  1330  059C                     	;# 
  1331  059D                     	;# 
  1332  059D                     	;# 
  1333  059E                     	;# 
  1334  059F                     	;# 
  1335  060C                     	;# 
  1336  060D                     	;# 
  1337  060E                     	;# 
  1338  060F                     	;# 
  1339  0610                     	;# 
  1340  0611                     	;# 
  1341  0612                     	;# 
  1342  0613                     	;# 
  1343  0614                     	;# 
  1344  070C                     	;# 
  1345  070D                     	;# 
  1346  070E                     	;# 
  1347  070F                     	;# 
  1348  0710                     	;# 
  1349  0711                     	;# 
  1350  0712                     	;# 
  1351  0713                     	;# 
  1352  0716                     	;# 
  1353  0717                     	;# 
  1354  0718                     	;# 
  1355  0719                     	;# 
  1356  071A                     	;# 
  1357  071B                     	;# 
  1358  071C                     	;# 
  1359  071D                     	;# 
  1360  0796                     	;# 
  1361  0797                     	;# 
  1362  0798                     	;# 
  1363  0799                     	;# 
  1364  079A                     	;# 
  1365  079B                     	;# 
  1366  080C                     	;# 
  1367  080D                     	;# 
  1368  080E                     	;# 
  1369  080F                     	;# 
  1370  0810                     	;# 
  1371  0811                     	;# 
  1372  0812                     	;# 
  1373  0813                     	;# 
  1374  0814                     	;# 
  1375  081A                     	;# 
  1376  081A                     	;# 
  1377  081B                     	;# 
  1378  081C                     	;# 
  1379  081C                     	;# 
  1380  081D                     	;# 
  1381  081E                     	;# 
  1382  081F                     	;# 
  1383  088C                     	;# 
  1384  088D                     	;# 
  1385  088E                     	;# 
  1386  088F                     	;# 
  1387  0890                     	;# 
  1388  0891                     	;# 
  1389  0892                     	;# 
  1390  0893                     	;# 
  1391  0895                     	;# 
  1392  0896                     	;# 
  1393  090C                     	;# 
  1394  090E                     	;# 
  1395  090F                     	;# 
  1396  091F                     	;# 
  1397  098F                     	;# 
  1398  098F                     	;# 
  1399  0990                     	;# 
  1400  0991                     	;# 
  1401  0992                     	;# 
  1402  0993                     	;# 
  1403  0994                     	;# 
  1404  0995                     	;# 
  1405  0996                     	;# 
  1406  0997                     	;# 
  1407  1E0F                     	;# 
  1408  1E10                     	;# 
  1409  1E11                     	;# 
  1410  1E12                     	;# 
  1411  1E13                     	;# 
  1412  1E14                     	;# 
  1413  1E15                     	;# 
  1414  1E16                     	;# 
  1415  1E17                     	;# 
  1416  1E18                     	;# 
  1417  1E19                     	;# 
  1418  1E1A                     	;# 
  1419  1E1B                     	;# 
  1420  1E1C                     	;# 
  1421  1E1D                     	;# 
  1422  1E1E                     	;# 
  1423  1E1F                     	;# 
  1424  1E20                     	;# 
  1425  1E21                     	;# 
  1426  1E22                     	;# 
  1427  1E23                     	;# 
  1428  1E24                     	;# 
  1429  1E25                     	;# 
  1430  1E26                     	;# 
  1431  1E27                     	;# 
  1432  1E28                     	;# 
  1433  1E29                     	;# 
  1434  1E2A                     	;# 
  1435  1E2B                     	;# 
  1436  1E2C                     	;# 
  1437  1E2D                     	;# 
  1438  1E2E                     	;# 
  1439  1E2F                     	;# 
  1440  1E30                     	;# 
  1441  1E31                     	;# 
  1442  1E32                     	;# 
  1443  1E33                     	;# 
  1444  1E34                     	;# 
  1445  1E35                     	;# 
  1446  1E36                     	;# 
  1447  1E37                     	;# 
  1448  1E8F                     	;# 
  1449  1E90                     	;# 
  1450  1E91                     	;# 
  1451  1E92                     	;# 
  1452  1E93                     	;# 
  1453  1E9C                     	;# 
  1454  1EA1                     	;# 
  1455  1EA2                     	;# 
  1456  1EB1                     	;# 
  1457  1EBB                     	;# 
  1458  1EBC                     	;# 
  1459  1EBD                     	;# 
  1460  1EBE                     	;# 
  1461  1EC3                     	;# 
  1462  1EC5                     	;# 
  1463  1EC6                     	;# 
  1464  1EC7                     	;# 
  1465  1ECB                     	;# 
  1466  1ECC                     	;# 
  1467  1F10                     	;# 
  1468  1F11                     	;# 
  1469  1F12                     	;# 
  1470  1F13                     	;# 
  1471  1F14                     	;# 
  1472  1F15                     	;# 
  1473  1F20                     	;# 
  1474  1F21                     	;# 
  1475  1F22                     	;# 
  1476  1F23                     	;# 
  1477  1F24                     	;# 
  1478  1F25                     	;# 
  1479  1F38                     	;# 
  1480  1F39                     	;# 
  1481  1F3A                     	;# 
  1482  1F3B                     	;# 
  1483  1F3C                     	;# 
  1484  1F3D                     	;# 
  1485  1F3E                     	;# 
  1486  1F3F                     	;# 
  1487  1F4E                     	;# 
  1488  1F4F                     	;# 
  1489  1F50                     	;# 
  1490  1F51                     	;# 
  1491  1F52                     	;# 
  1492  1F53                     	;# 
  1493  1F54                     	;# 
  1494  1F55                     	;# 
  1495  1FE4                     	;# 
  1496  1FE5                     	;# 
  1497  1FE6                     	;# 
  1498  1FE7                     	;# 
  1499  1FE8                     	;# 
  1500  1FE8                     	;# 
  1501  1FE9                     	;# 
  1502  1FEA                     	;# 
  1503  1FEA                     	;# 
  1504  1FEB                     	;# 
  1505  1FED                     	;# 
  1506  1FEE                     	;# 
  1507  1FEF                     	;# 
  1508  0000                     	;# 
  1509  0001                     	;# 
  1510  0002                     	;# 
  1511  0003                     	;# 
  1512  0004                     	;# 
  1513  0005                     	;# 
  1514  0006                     	;# 
  1515  0007                     	;# 
  1516  0008                     	;# 
  1517  0009                     	;# 
  1518  000A                     	;# 
  1519  000B                     	;# 
  1520  000C                     	;# 
  1521  000E                     	;# 
  1522  0012                     	;# 
  1523  0014                     	;# 
  1524  0018                     	;# 
  1525  001A                     	;# 
  1526  009B                     	;# 
  1527  009B                     	;# 
  1528  009C                     	;# 
  1529  009D                     	;# 
  1530  009E                     	;# 
  1531  009F                     	;# 
  1532  0119                     	;# 
  1533  0119                     	;# 
  1534  0119                     	;# 
  1535  011A                     	;# 
  1536  011A                     	;# 
  1537  011A                     	;# 
  1538  011B                     	;# 
  1539  011B                     	;# 
  1540  011B                     	;# 
  1541  011B                     	;# 
  1542  011B                     	;# 
  1543  011C                     	;# 
  1544  011C                     	;# 
  1545  011C                     	;# 
  1546  011D                     	;# 
  1547  011D                     	;# 
  1548  011D                     	;# 
  1549  011E                     	;# 
  1550  011E                     	;# 
  1551  011E                     	;# 
  1552  011F                     	;# 
  1553  011F                     	;# 
  1554  011F                     	;# 
  1555  011F                     	;# 
  1556  011F                     	;# 
  1557  018C                     	;# 
  1558  018D                     	;# 
  1559  018E                     	;# 
  1560  018F                     	;# 
  1561  0190                     	;# 
  1562  0191                     	;# 
  1563  0192                     	;# 
  1564  020C                     	;# 
  1565  020C                     	;# 
  1566  020D                     	;# 
  1567  020E                     	;# 
  1568  020F                     	;# 
  1569  020F                     	;# 
  1570  0210                     	;# 
  1571  0210                     	;# 
  1572  0211                     	;# 
  1573  0211                     	;# 
  1574  028C                     	;# 
  1575  028C                     	;# 
  1576  028D                     	;# 
  1577  028D                     	;# 
  1578  028E                     	;# 
  1579  028F                     	;# 
  1580  0290                     	;# 
  1581  0291                     	;# 
  1582  030C                     	;# 
  1583  030C                     	;# 
  1584  030D                     	;# 
  1585  030E                     	;# 
  1586  030F                     	;# 
  1587  0310                     	;# 
  1588  0310                     	;# 
  1589  0311                     	;# 
  1590  0312                     	;# 
  1591  0313                     	;# 
  1592  0314                     	;# 
  1593  0315                     	;# 
  1594  0316                     	;# 
  1595  0318                     	;# 
  1596  0319                     	;# 
  1597  031A                     	;# 
  1598  031C                     	;# 
  1599  031D                     	;# 
  1600  031E                     	;# 
  1601  038C                     	;# 
  1602  038D                     	;# 
  1603  038E                     	;# 
  1604  058C                     	;# 
  1605  058C                     	;# 
  1606  058D                     	;# 
  1607  058E                     	;# 
  1608  058F                     	;# 
  1609  058F                     	;# 
  1610  0590                     	;# 
  1611  0591                     	;# 
  1612  0592                     	;# 
  1613  0593                     	;# 
  1614  059C                     	;# 
  1615  059C                     	;# 
  1616  059D                     	;# 
  1617  059D                     	;# 
  1618  059E                     	;# 
  1619  059F                     	;# 
  1620  060C                     	;# 
  1621  060D                     	;# 
  1622  060E                     	;# 
  1623  060F                     	;# 
  1624  0610                     	;# 
  1625  0611                     	;# 
  1626  0612                     	;# 
  1627  0613                     	;# 
  1628  0614                     	;# 
  1629  070C                     	;# 
  1630  070D                     	;# 
  1631  070E                     	;# 
  1632  070F                     	;# 
  1633  0710                     	;# 
  1634  0711                     	;# 
  1635  0712                     	;# 
  1636  0713                     	;# 
  1637  0716                     	;# 
  1638  0717                     	;# 
  1639  0718                     	;# 
  1640  0719                     	;# 
  1641  071A                     	;# 
  1642  071B                     	;# 
  1643  071C                     	;# 
  1644  071D                     	;# 
  1645  0796                     	;# 
  1646  0797                     	;# 
  1647  0798                     	;# 
  1648  0799                     	;# 
  1649  079A                     	;# 
  1650  079B                     	;# 
  1651  080C                     	;# 
  1652  080D                     	;# 
  1653  080E                     	;# 
  1654  080F                     	;# 
  1655  0810                     	;# 
  1656  0811                     	;# 
  1657  0812                     	;# 
  1658  0813                     	;# 
  1659  0814                     	;# 
  1660  081A                     	;# 
  1661  081A                     	;# 
  1662  081B                     	;# 
  1663  081C                     	;# 
  1664  081C                     	;# 
  1665  081D                     	;# 
  1666  081E                     	;# 
  1667  081F                     	;# 
  1668  088C                     	;# 
  1669  088D                     	;# 
  1670  088E                     	;# 
  1671  088F                     	;# 
  1672  0890                     	;# 
  1673  0891                     	;# 
  1674  0892                     	;# 
  1675  0893                     	;# 
  1676  0895                     	;# 
  1677  0896                     	;# 
  1678  090C                     	;# 
  1679  090E                     	;# 
  1680  090F                     	;# 
  1681  091F                     	;# 
  1682  098F                     	;# 
  1683  098F                     	;# 
  1684  0990                     	;# 
  1685  0991                     	;# 
  1686  0992                     	;# 
  1687  0993                     	;# 
  1688  0994                     	;# 
  1689  0995                     	;# 
  1690  0996                     	;# 
  1691  0997                     	;# 
  1692  1E0F                     	;# 
  1693  1E10                     	;# 
  1694  1E11                     	;# 
  1695  1E12                     	;# 
  1696  1E13                     	;# 
  1697  1E14                     	;# 
  1698  1E15                     	;# 
  1699  1E16                     	;# 
  1700  1E17                     	;# 
  1701  1E18                     	;# 
  1702  1E19                     	;# 
  1703  1E1A                     	;# 
  1704  1E1B                     	;# 
  1705  1E1C                     	;# 
  1706  1E1D                     	;# 
  1707  1E1E                     	;# 
  1708  1E1F                     	;# 
  1709  1E20                     	;# 
  1710  1E21                     	;# 
  1711  1E22                     	;# 
  1712  1E23                     	;# 
  1713  1E24                     	;# 
  1714  1E25                     	;# 
  1715  1E26                     	;# 
  1716  1E27                     	;# 
  1717  1E28                     	;# 
  1718  1E29                     	;# 
  1719  1E2A                     	;# 
  1720  1E2B                     	;# 
  1721  1E2C                     	;# 
  1722  1E2D                     	;# 
  1723  1E2E                     	;# 
  1724  1E2F                     	;# 
  1725  1E30                     	;# 
  1726  1E31                     	;# 
  1727  1E32                     	;# 
  1728  1E33                     	;# 
  1729  1E34                     	;# 
  1730  1E35                     	;# 
  1731  1E36                     	;# 
  1732  1E37                     	;# 
  1733  1E8F                     	;# 
  1734  1E90                     	;# 
  1735  1E91                     	;# 
  1736  1E92                     	;# 
  1737  1E93                     	;# 
  1738  1E9C                     	;# 
  1739  1EA1                     	;# 
  1740  1EA2                     	;# 
  1741  1EB1                     	;# 
  1742  1EBB                     	;# 
  1743  1EBC                     	;# 
  1744  1EBD                     	;# 
  1745  1EBE                     	;# 
  1746  1EC3                     	;# 
  1747  1EC5                     	;# 
  1748  1EC6                     	;# 
  1749  1EC7                     	;# 
  1750  1ECB                     	;# 
  1751  1ECC                     	;# 
  1752  1F10                     	;# 
  1753  1F11                     	;# 
  1754  1F12                     	;# 
  1755  1F13                     	;# 
  1756  1F14                     	;# 
  1757  1F15                     	;# 
  1758  1F20                     	;# 
  1759  1F21                     	;# 
  1760  1F22                     	;# 
  1761  1F23                     	;# 
  1762  1F24                     	;# 
  1763  1F25                     	;# 
  1764  1F38                     	;# 
  1765  1F39                     	;# 
  1766  1F3A                     	;# 
  1767  1F3B                     	;# 
  1768  1F3C                     	;# 
  1769  1F3D                     	;# 
  1770  1F3E                     	;# 
  1771  1F3F                     	;# 
  1772  1F4E                     	;# 
  1773  1F4F                     	;# 
  1774  1F50                     	;# 
  1775  1F51                     	;# 
  1776  1F52                     	;# 
  1777  1F53                     	;# 
  1778  1F54                     	;# 
  1779  1F55                     	;# 
  1780  1FE4                     	;# 
  1781  1FE5                     	;# 
  1782  1FE6                     	;# 
  1783  1FE7                     	;# 
  1784  1FE8                     	;# 
  1785  1FE8                     	;# 
  1786  1FE9                     	;# 
  1787  1FEA                     	;# 
  1788  1FEA                     	;# 
  1789  1FEB                     	;# 
  1790  1FED                     	;# 
  1791  1FEE                     	;# 
  1792  1FEF                     	;# 
  1793                           
  1794                           	psect	stringtext1
  1795  0473                     __pstringtext1:	
  1796  0473                     cw_init@cw_bat_config_info:	
  1797  0473  3414               	retlw	20
  1798  0474  34A6               	retlw	166
  1799  0475  3470               	retlw	112
  1800  0476  346C               	retlw	108
  1801  0477  346C               	retlw	108
  1802  0478  3467               	retlw	103
  1803  0479  3464               	retlw	100
  1804  047A  3462               	retlw	98
  1805  047B  3460               	retlw	96
  1806  047C  345C               	retlw	92
  1807  047D  3459               	retlw	89
  1808  047E  344E               	retlw	78
  1809  047F  3450               	retlw	80
  1810  0480  3442               	retlw	66
  1811  0481  342E               	retlw	46
  1812  0482  3426               	retlw	38
  1813  0483  3425               	retlw	37
  1814  0484  3424               	retlw	36
  1815  0485  3427               	retlw	39
  1816  0486  342E               	retlw	46
  1817  0487  3441               	retlw	65
  1818  0488  345A               	retlw	90
  1819  0489  346D               	retlw	109
  1820  048A  344C               	retlw	76
  1821  048B  3439               	retlw	57
  1822  048C  34D7               	retlw	215
  1823  048D  3406               	retlw	6
  1824  048E  3466               	retlw	102
  1825  048F  3400               	retlw	0
  1826  0490  3401               	retlw	1
  1827  0491  3405               	retlw	5
  1828  0492  3434               	retlw	52
  1829  0493  3461               	retlw	97
  1830  0494  3476               	retlw	118
  1831  0495  3479               	retlw	121
  1832  0496  347D               	retlw	125
  1833  0497  3442               	retlw	66
  1834  0498  341E               	retlw	30
  1835  0499  34A4               	retlw	164
  1836  049A  3400               	retlw	0
  1837  049B  3427               	retlw	39
  1838  049C  345A               	retlw	90
  1839  049D  3452               	retlw	82
  1840  049E  3487               	retlw	135
  1841  049F  348F               	retlw	143
  1842  04A0  3491               	retlw	145
  1843  04A1  3494               	retlw	148
  1844  04A2  3452               	retlw	82
  1845  04A3  3482               	retlw	130
  1846  04A4  348C               	retlw	140
  1847  04A5  3492               	retlw	146
  1848  04A6  3496               	retlw	150
  1849  04A7  342B               	retlw	43
  1850  04A8  3459               	retlw	89
  1851  04A9  346E               	retlw	110
  1852  04AA  34CB               	retlw	203
  1853  04AB  342F               	retlw	47
  1854  04AC  347D               	retlw	125
  1855  04AD  3472               	retlw	114
  1856  04AE  34A5               	retlw	165
  1857  04AF  34B5               	retlw	181
  1858  04B0  34C1               	retlw	193
  1859  04B1  3494               	retlw	148
  1860  04B2  3499               	retlw	153
  1861  04B3                     __end_ofcw_init@cw_bat_config_info:	
  1862                           
  1863                           	psect	stringtext2
  1864  04B3                     __pstringtext2:	
  1865  04B3                     cw_update_config_info@cw_bat_config_info:	
  1866  04B3  3414               	retlw	20
  1867  04B4  34A6               	retlw	166
  1868  04B5  3470               	retlw	112
  1869  04B6  346C               	retlw	108
  1870  04B7  346C               	retlw	108
  1871  04B8  3467               	retlw	103
  1872  04B9  3464               	retlw	100
  1873  04BA  3462               	retlw	98
  1874  04BB  3460               	retlw	96
  1875  04BC  345C               	retlw	92
  1876  04BD  3459               	retlw	89
  1877  04BE  344E               	retlw	78
  1878  04BF  3450               	retlw	80
  1879  04C0  3442               	retlw	66
  1880  04C1  342E               	retlw	46
  1881  04C2  3426               	retlw	38
  1882  04C3  3425               	retlw	37
  1883  04C4  3424               	retlw	36
  1884  04C5  3427               	retlw	39
  1885  04C6  342E               	retlw	46
  1886  04C7  3441               	retlw	65
  1887  04C8  345A               	retlw	90
  1888  04C9  346D               	retlw	109
  1889  04CA  344C               	retlw	76
  1890  04CB  3439               	retlw	57
  1891  04CC  34D7               	retlw	215
  1892  04CD  3406               	retlw	6
  1893  04CE  3466               	retlw	102
  1894  04CF  3400               	retlw	0
  1895  04D0  3401               	retlw	1
  1896  04D1  3405               	retlw	5
  1897  04D2  3434               	retlw	52
  1898  04D3  3461               	retlw	97
  1899  04D4  3476               	retlw	118
  1900  04D5  3479               	retlw	121
  1901  04D6  347D               	retlw	125
  1902  04D7  3442               	retlw	66
  1903  04D8  341E               	retlw	30
  1904  04D9  34A4               	retlw	164
  1905  04DA  3400               	retlw	0
  1906  04DB  3427               	retlw	39
  1907  04DC  345A               	retlw	90
  1908  04DD  3452               	retlw	82
  1909  04DE  3487               	retlw	135
  1910  04DF  348F               	retlw	143
  1911  04E0  3491               	retlw	145
  1912  04E1  3494               	retlw	148
  1913  04E2  3452               	retlw	82
  1914  04E3  3482               	retlw	130
  1915  04E4  348C               	retlw	140
  1916  04E5  3492               	retlw	146
  1917  04E6  3496               	retlw	150
  1918  04E7  342B               	retlw	43
  1919  04E8  3459               	retlw	89
  1920  04E9  346E               	retlw	110
  1921  04EA  34CB               	retlw	203
  1922  04EB  342F               	retlw	47
  1923  04EC  347D               	retlw	125
  1924  04ED  3472               	retlw	114
  1925  04EE  34A5               	retlw	165
  1926  04EF  34B5               	retlw	181
  1927  04F0  34C1               	retlw	193
  1928  04F1  3494               	retlw	148
  1929  04F2  3499               	retlw	153
  1930  04F3                     __end_ofcw_update_config_info@cw_bat_config_info:	
  1931  000E                     _PORTCbits	set	14
  1932  0014                     _TRISCbits	set	20
  1933  0018                     _LATAbits	set	24
  1934  000B                     _INTCONbits	set	11
  1935  0014                     _TRISC	set	20
  1936  0012                     _TRISA	set	18
  1937  001A                     _LATC	set	26
  1938  0018                     _LATA	set	24
  1939  001A                     _LATCbits	set	26
  1940  005F                     _GIE	set	95
  1941  0119                     _RC1REG	set	281
  1942  011D                     _RC1STAbits	set	285
  1943  011A                     _TX1REG	set	282
  1944  011C                     _SP1BRGH	set	284
  1945  011B                     _SP1BRGL	set	283
  1946  011E                     _TX1STA	set	286
  1947  011D                     _RC1STA	set	285
  1948  011F                     _BAUD1CON	set	287
  1949  070F                     _PIR3bits	set	1807
  1950  0719                     _PIE3bits	set	1817
  1951  0892                     _OSCTUNE	set	2194
  1952  0890                     _OSCSTAT	set	2192
  1953  0893                     _OSCFRQ	set	2195
  1954  0891                     _OSCEN	set	2193
  1955  088F                     _OSCCON3	set	2191
  1956  088D                     _OSCCON1	set	2189
  1957  4480                     _PLLR	set	17536
  1958  1ECB                     _RX1DTPPSbits	set	7883
  1959  1E8F                     _PPSLOCKbits	set	7823
  1960  1E8F                     _PPSLOCK	set	7823
  1961  1F24                     _RC4PPS	set	7972
  1962  1F50                     _ODCONC	set	8016
  1963  1F3A                     _ODCONA	set	7994
  1964  1F4F                     _WPUC	set	8015
  1965  1F39                     _WPUA	set	7993
  1966  1F38                     _ANSELA	set	7992
  1967  1F4E                     _ANSELC	set	8014
  1968                           
  1969                           ; #config settings
  1970  0000                     
  1971                           	psect	cinit
  1972  0016                     start_initialization:	
  1973  0016                     __initialization:	
  1974                           
  1975                           ; Clear objects allocated to COMMON
  1976  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  1977  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  1978  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  1979                           
  1980                           ; Clear objects allocated to BANK0
  1981  0019  3054               	movlw	low __pbssBANK0
  1982  001A  0084               	movwf	4
  1983  001B  3000               	movlw	high __pbssBANK0
  1984  001C  0085               	movwf	5
  1985  001D  3018               	movlw	24
  1986  001E  2780               	fcall	clear_ram0
  1987  001F                     end_of_initialization:	
  1988                           ;End of C runtime variable initialization code
  1989                           
  1990  001F                     __end_of__initialization:	
  1991  001F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1992  0020  0140               	movlb	0
  1993  0021  2BE9               	ljmp	_main	;jump to C main() function
  1994                           
  1995                           	psect	bssCOMMON
  1996  0078                     __pbssCOMMON:	
  1997  0078                     _CHARGE:	
  1998  0078                     	ds	1
  1999  0079                     _state:	
  2000  0079                     	ds	1
  2001  007A                     _count:	
  2002  007A                     	ds	1
  2003                           
  2004                           	psect	bssBANK0
  2005  0054                     __pbssBANK0:	
  2006  0054                     _rxbuf:	
  2007  0054                     	ds	15
  2008  0063                     _cw_bat:	
  2009  0063                     	ds	6
  2010  0069                     cw_get_vol@F80:	
  2011  0069                     	ds	2
  2012  006B                     _reset_loop:	
  2013  006B                     	ds	1
  2014                           
  2015                           	psect	clrtext
  2016  0780                     clear_ram0:	
  2017                           ;	Called with FSR0 containing the base address, and
  2018                           ;	WREG with the size to clear
  2019                           
  2020  0780  0064               	clrwdt	;clear the watchdog before getting into this loop
  2021  0781                     clrloop0:	
  2022  0781  0180               	clrf	0	;clear RAM location pointed to by FSR
  2023  0782  3101               	addfsr 0,1
  2024  0783  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2025  0784  2F81               	goto	clrloop0	;have we reached the end yet?
  2026  0785  3400               	retlw	0	;all done for this memory range, return
  2027                           
  2028                           	psect	cstackCOMMON
  2029  0070                     __pcstackCOMMON:	
  2030  0070                     ?_PIN_MANAGER_Initialize:	
  2031  0070                     ?_OSCILLATOR_Initialize:	
  2032                           ; 1 bytes @ 0x0
  2033                           
  2034  0070                     ?_cw_bat_init:	
  2035                           ; 1 bytes @ 0x0
  2036                           
  2037  0070                     ?_cw_bat_work:	
  2038                           ; 1 bytes @ 0x0
  2039                           
  2040  0070                     ?_EUSART1_Initialize:	
  2041                           ; 1 bytes @ 0x0
  2042                           
  2043  0070                     ?_EUSART1_Write:	
  2044                           ; 1 bytes @ 0x0
  2045                           
  2046  0070                     ??_EUSART1_Write:	
  2047                           ; 1 bytes @ 0x0
  2048                           
  2049  0070                     ?_EUSART1_Receive_ISR:	
  2050                           ; 1 bytes @ 0x0
  2051                           
  2052  0070                     ?_SYSTEM_Initialize:	
  2053                           ; 1 bytes @ 0x0
  2054                           
  2055  0070                     ?_INTERRUPT_InterruptManager:	
  2056                           ; 1 bytes @ 0x0
  2057                           
  2058  0070                     ?_main:	
  2059                           ; 1 bytes @ 0x0
  2060                           
  2061  0070                     ?_CW_Delay100us:	
  2062                           ; 1 bytes @ 0x0
  2063                           
  2064  0070                     ?_cw_update_config_info:	
  2065                           ; 1 bytes @ 0x0
  2066                           
  2067  0070                     ?_cw_init:	
  2068                           ; 1 bytes @ 0x0
  2069                           
  2070  0070                     ?_update_capacity:	
  2071                           ; 1 bytes @ 0x0
  2072                           
  2073  0070                     ?_update_vol:	
  2074                           ; 1 bytes @ 0x0
  2075                           
  2076  0070                     ?_update_usb_online:	
  2077                           ; 1 bytes @ 0x0
  2078                           
  2079  0070                     ?_Delay10us:	
  2080                           ; 1 bytes @ 0x0
  2081                           
  2082  0070                     ?_start:	
  2083                           ; 1 bytes @ 0x0
  2084                           
  2085  0070                     ?_stop:	
  2086                           ; 1 bytes @ 0x0
  2087                           
  2088  0070                     ?_s_ack:	
  2089                           ; 1 bytes @ 0x0
  2090                           
  2091  0070                     ?_sn_ack:	
  2092                           ; 1 bytes @ 0x0
  2093                           
  2094  0070                     ?_write_byte:	
  2095                           ; 1 bytes @ 0x0
  2096                           
  2097  0070                     ?_read_byte:	
  2098                           ; 1 bytes @ 0x0
  2099                           
  2100  0070                     ?i1_CW_Delay10ms:	
  2101                           ; 1 bytes @ 0x0
  2102                           
  2103  0070                     EUSART1_Write@txData:	
  2104                           ; 1 bytes @ 0x0
  2105                           
  2106  0070                     i1CW_Delay10ms@c:	
  2107                           ; 1 bytes @ 0x0
  2108                           
  2109                           
  2110                           ; 2 bytes @ 0x0
  2111  0070                     	ds	2
  2112  0072                     ??i1_CW_Delay10ms:	
  2113                           
  2114                           ; 1 bytes @ 0x2
  2115  0072                     	ds	1
  2116  0073                     i1CW_Delay10ms@a:	
  2117                           
  2118                           ; 1 bytes @ 0x3
  2119  0073                     	ds	1
  2120  0074                     i1CW_Delay10ms@b:	
  2121                           
  2122                           ; 1 bytes @ 0x4
  2123  0074                     	ds	1
  2124  0075                     ??_EUSART1_Receive_ISR:	
  2125                           
  2126                           ; 1 bytes @ 0x5
  2127  0075                     	ds	1
  2128  0076                     EUSART1_Receive_ISR@dat:	
  2129                           
  2130                           ; 1 bytes @ 0x6
  2131  0076                     	ds	1
  2132  0077                     ??_INTERRUPT_InterruptManager:	
  2133                           
  2134                           ; 1 bytes @ 0x7
  2135  0077                     	ds	1
  2136                           
  2137                           	psect	cstackBANK0
  2138  0020                     __pcstackBANK0:	
  2139  0020                     ?_CW_Delay10ms:	
  2140  0020                     ??_PIN_MANAGER_Initialize:	
  2141                           ; 1 bytes @ 0x0
  2142                           
  2143  0020                     ??_OSCILLATOR_Initialize:	
  2144                           ; 1 bytes @ 0x0
  2145                           
  2146  0020                     ??_EUSART1_Initialize:	
  2147                           ; 1 bytes @ 0x0
  2148                           
  2149  0020                     ??_CW_Delay100us:	
  2150                           ; 1 bytes @ 0x0
  2151                           
  2152  0020                     ??_update_usb_online:	
  2153                           ; 1 bytes @ 0x0
  2154                           
  2155  0020                     ??_Delay10us:	
  2156                           ; 1 bytes @ 0x0
  2157                           
  2158  0020                     ?___lmul:	
  2159                           ; 1 bytes @ 0x0
  2160                           
  2161  0020                     PIN_MANAGER_Initialize@state:	
  2162                           ; 4 bytes @ 0x0
  2163                           
  2164  0020                     CW_Delay10ms@c:	
  2165                           ; 1 bytes @ 0x0
  2166                           
  2167  0020                     ___lmul@multiplier:	
  2168                           ; 2 bytes @ 0x0
  2169                           
  2170                           
  2171                           ; 4 bytes @ 0x0
  2172  0020                     	ds	1
  2173  0021                     ??_SYSTEM_Initialize:	
  2174  0021                     CW_Delay100us@a:	
  2175                           ; 1 bytes @ 0x1
  2176                           
  2177  0021                     Delay10us@a:	
  2178                           ; 1 bytes @ 0x1
  2179                           
  2180                           
  2181                           ; 1 bytes @ 0x1
  2182  0021                     	ds	1
  2183  0022                     ??_CW_Delay10ms:	
  2184  0022                     CW_Delay100us@b:	
  2185                           ; 1 bytes @ 0x2
  2186                           
  2187  0022                     Delay10us@b:	
  2188                           ; 1 bytes @ 0x2
  2189                           
  2190                           
  2191                           ; 1 bytes @ 0x2
  2192  0022                     	ds	1
  2193  0023                     CW_Delay10ms@a:	
  2194  0023                     CW_Delay100us@i:	
  2195                           ; 1 bytes @ 0x3
  2196                           
  2197  0023                     Delay10us@i:	
  2198                           ; 1 bytes @ 0x3
  2199                           
  2200                           
  2201                           ; 1 bytes @ 0x3
  2202  0023                     	ds	1
  2203  0024                     ??_start:	
  2204  0024                     ??_stop:	
  2205                           ; 1 bytes @ 0x4
  2206                           
  2207  0024                     ??_s_ack:	
  2208                           ; 1 bytes @ 0x4
  2209                           
  2210  0024                     ??_sn_ack:	
  2211                           ; 1 bytes @ 0x4
  2212                           
  2213  0024                     ??_write_byte:	
  2214                           ; 1 bytes @ 0x4
  2215                           
  2216  0024                     ??_read_byte:	
  2217                           ; 1 bytes @ 0x4
  2218                           
  2219  0024                     ?_r_ack:	
  2220                           ; 1 bytes @ 0x4
  2221                           
  2222  0024                     CW_Delay10ms@b:	
  2223                           ; 2 bytes @ 0x4
  2224                           
  2225  0024                     ___lmul@multiplicand:	
  2226                           ; 1 bytes @ 0x4
  2227                           
  2228                           
  2229                           ; 4 bytes @ 0x4
  2230  0024                     	ds	1
  2231  0025                     write_byte@w_data:	
  2232  0025                     read_byte@i:	
  2233                           ; 1 bytes @ 0x5
  2234                           
  2235                           
  2236                           ; 1 bytes @ 0x5
  2237  0025                     	ds	1
  2238  0026                     ??_r_ack:	
  2239  0026                     write_byte@i:	
  2240                           ; 1 bytes @ 0x6
  2241                           
  2242  0026                     read_byte@r_data:	
  2243                           ; 1 bytes @ 0x6
  2244                           
  2245                           
  2246                           ; 1 bytes @ 0x6
  2247  0026                     	ds	2
  2248  0028                     ??___lmul:	
  2249  0028                     r_ack@ack:	
  2250                           ; 1 bytes @ 0x8
  2251                           
  2252  0028                     ___lmul@product:	
  2253                           ; 2 bytes @ 0x8
  2254                           
  2255                           
  2256                           ; 4 bytes @ 0x8
  2257  0028                     	ds	2
  2258  002A                     ?_wait_r_ack:	
  2259                           
  2260                           ; 2 bytes @ 0xA
  2261  002A                     	ds	2
  2262  002C                     ??_wait_r_ack:	
  2263  002C                     ?___lldiv:	
  2264                           ; 1 bytes @ 0xC
  2265                           
  2266  002C                     wait_r_ack@ack:	
  2267                           ; 4 bytes @ 0xC
  2268                           
  2269  002C                     ___lldiv@divisor:	
  2270                           ; 2 bytes @ 0xC
  2271                           
  2272                           
  2273                           ; 4 bytes @ 0xC
  2274  002C                     	ds	2
  2275  002E                     wait_r_ack@i:	
  2276                           
  2277                           ; 2 bytes @ 0xE
  2278  002E                     	ds	2
  2279  0030                     ?_cw_read:	
  2280  0030                     ?_cw_write:	
  2281                           ; 2 bytes @ 0x10
  2282                           
  2283  0030                     ?_cw_read_word:	
  2284                           ; 2 bytes @ 0x10
  2285                           
  2286  0030                     cw_read@r_pdata:	
  2287                           ; 2 bytes @ 0x10
  2288                           
  2289  0030                     cw_read_word@r_pdata:	
  2290                           ; 1 bytes @ 0x10
  2291                           
  2292  0030                     cw_write@w_pdata:	
  2293                           ; 1 bytes @ 0x10
  2294                           
  2295  0030                     ___lldiv@dividend:	
  2296                           ; 1 bytes @ 0x10
  2297                           
  2298                           
  2299                           ; 4 bytes @ 0x10
  2300  0030                     	ds	1
  2301  0031                     cw_read_word@length:	
  2302                           
  2303                           ; 2 bytes @ 0x11
  2304  0031                     	ds	1
  2305  0032                     ??_cw_read:	
  2306                           
  2307                           ; 1 bytes @ 0x12
  2308  0032                     	ds	1
  2309  0033                     ??_cw_write:	
  2310  0033                     ??_cw_read_word:	
  2311                           ; 1 bytes @ 0x13
  2312                           
  2313  0033                     cw_read@point_reg:	
  2314                           ; 1 bytes @ 0x13
  2315                           
  2316  0033                     cw_write@point_reg:	
  2317                           ; 1 bytes @ 0x13
  2318                           
  2319                           
  2320                           ; 1 bytes @ 0x13
  2321  0033                     	ds	1
  2322  0034                     ??_cw_update_config_info:	
  2323  0034                     ??___lldiv:	
  2324                           ; 1 bytes @ 0x14
  2325                           
  2326                           
  2327                           ; 1 bytes @ 0x14
  2328  0034                     	ds	1
  2329  0035                     cw_update_config_info@reset_val:	
  2330  0035                     cw_read_word@point_reg:	
  2331                           ; 1 bytes @ 0x15
  2332                           
  2333  0035                     ___lldiv@quotient:	
  2334                           ; 1 bytes @ 0x15
  2335                           
  2336                           
  2337                           ; 4 bytes @ 0x15
  2338  0035                     	ds	1
  2339  0036                     cw_read_word@count:	
  2340  0036                     cw_update_config_info@ret:	
  2341                           ; 1 bytes @ 0x16
  2342                           
  2343                           
  2344                           ; 2 bytes @ 0x16
  2345  0036                     	ds	2
  2346  0038                     cw_update_config_info@i:	
  2347                           
  2348                           ; 1 bytes @ 0x18
  2349  0038                     	ds	1
  2350  0039                     cw_update_config_info@reg_val:	
  2351  0039                     ___lldiv@counter:	
  2352                           ; 1 bytes @ 0x19
  2353                           
  2354                           
  2355                           ; 1 bytes @ 0x19
  2356  0039                     	ds	1
  2357  003A                     ??_cw_init:	
  2358  003A                     ?_cw_get_vol:	
  2359                           ; 1 bytes @ 0x1A
  2360                           
  2361                           
  2362                           ; 2 bytes @ 0x1A
  2363  003A                     	ds	2
  2364  003C                     ??_cw_get_vol:	
  2365  003C                     cw_init@i:	
  2366                           ; 1 bytes @ 0x1C
  2367                           
  2368                           
  2369                           ; 1 bytes @ 0x1C
  2370  003C                     	ds	1
  2371  003D                     cw_init@ret:	
  2372                           
  2373                           ; 2 bytes @ 0x1D
  2374  003D                     	ds	2
  2375  003F                     cw_init@reg_val:	
  2376                           
  2377                           ; 1 bytes @ 0x1F
  2378  003F                     	ds	1
  2379  0040                     ??_cw_bat_init:	
  2380  0040                     ?_cw_por:	
  2381                           ; 1 bytes @ 0x20
  2382                           
  2383                           
  2384                           ; 2 bytes @ 0x20
  2385  0040                     	ds	1
  2386  0041                     cw_bat_init@loop:	
  2387  0041                     cw_get_vol@ret:	
  2388                           ; 1 bytes @ 0x21
  2389                           
  2390                           
  2391                           ; 2 bytes @ 0x21
  2392  0041                     	ds	1
  2393  0042                     ??_cw_por:	
  2394  0042                     cw_bat_init@ret:	
  2395                           ; 1 bytes @ 0x22
  2396                           
  2397                           
  2398                           ; 1 bytes @ 0x22
  2399  0042                     	ds	1
  2400  0043                     cw_get_vol@reg_val:	
  2401                           
  2402                           ; 2 bytes @ 0x23
  2403  0043                     	ds	1
  2404  0044                     cw_por@reset_val:	
  2405                           
  2406                           ; 1 bytes @ 0x24
  2407  0044                     	ds	1
  2408  0045                     cw_por@ret:	
  2409  0045                     cw_get_vol@ad_value_min:	
  2410                           ; 2 bytes @ 0x25
  2411                           
  2412                           
  2413                           ; 2 bytes @ 0x25
  2414  0045                     	ds	2
  2415  0047                     ?_cw_get_capacity:	
  2416  0047                     cw_get_vol@ad_value_max:	
  2417                           ; 2 bytes @ 0x27
  2418                           
  2419                           
  2420                           ; 2 bytes @ 0x27
  2421  0047                     	ds	2
  2422  0049                     ??_cw_get_capacity:	
  2423  0049                     cw_get_vol@ad_value:	
  2424                           ; 1 bytes @ 0x29
  2425                           
  2426                           
  2427                           ; 4 bytes @ 0x29
  2428  0049                     	ds	2
  2429  004B                     cw_get_capacity@cw_capacity:	
  2430                           
  2431                           ; 1 bytes @ 0x2B
  2432  004B                     	ds	1
  2433  004C                     cw_get_capacity@ret:	
  2434                           
  2435                           ; 2 bytes @ 0x2C
  2436  004C                     	ds	1
  2437  004D                     cw_get_vol@get_ad_times:	
  2438                           
  2439                           ; 1 bytes @ 0x2D
  2440  004D                     	ds	1
  2441  004E                     cw_get_capacity@reg_val:	
  2442  004E                     cw_get_vol@ad_buff:	
  2443                           ; 1 bytes @ 0x2E
  2444                           
  2445                           
  2446                           ; 2 bytes @ 0x2E
  2447  004E                     	ds	1
  2448  004F                     ??_update_capacity:	
  2449                           
  2450                           ; 1 bytes @ 0x2F
  2451  004F                     	ds	1
  2452  0050                     ??_update_vol:	
  2453  0050                     update_capacity@cw_capacity:	
  2454                           ; 1 bytes @ 0x30
  2455                           
  2456  0050                     update_vol@cw_voltage:	
  2457                           ; 2 bytes @ 0x30
  2458                           
  2459                           
  2460                           ; 2 bytes @ 0x30
  2461  0050                     	ds	2
  2462  0052                     ??_cw_bat_work:	
  2463  0052                     ??_main:	
  2464                           ; 1 bytes @ 0x32
  2465                           
  2466                           
  2467                           ; 1 bytes @ 0x32
  2468  0052                     	ds	1
  2469  0053                     main@ret:	
  2470                           
  2471                           ; 1 bytes @ 0x33
  2472  0053                     	ds	1
  2473                           
  2474                           	psect	maintext
  2475  03E9                     __pmaintext:	
  2476 ;;
  2477 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2478 ;;
  2479 ;; *************** function _main *****************
  2480 ;; Defined at:
  2481 ;;		line 54 in file "main.c"
  2482 ;; Parameters:    Size  Location     Type
  2483 ;;		None
  2484 ;; Auto vars:     Size  Location     Type
  2485 ;;  ret             1   51[BANK0 ] unsigned char 
  2486 ;;  send_char       1    0        unsigned char 
  2487 ;; Return value:  Size  Location     Type
  2488 ;;                  1    wreg      void 
  2489 ;; Registers used:
  2490 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2491 ;; Tracked objects:
  2492 ;;		On entry : B3F/0
  2493 ;;		On exit  : 0/0
  2494 ;;		Unchanged: 0/0
  2495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2496 ;;      Params:         0       0       0       0
  2497 ;;      Locals:         0       1       0       0
  2498 ;;      Temps:          0       1       0       0
  2499 ;;      Totals:         0       2       0       0
  2500 ;;Total ram usage:        2 bytes
  2501 ;; Hardware stack levels required when called:   13
  2502 ;; This function calls:
  2503 ;;		_CW_Delay10ms
  2504 ;;		_SYSTEM_Initialize
  2505 ;;		_cw_bat_init
  2506 ;;		_cw_bat_work
  2507 ;; This function is called by:
  2508 ;;		Startup code after reset
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           
  2513                           ;psect for function _main
  2514  03E9                     _main:	
  2515                           
  2516                           ;main.c: 57: unsigned char ret = 0;
  2517                           
  2518                           ;incstack = 0
  2519                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2520  03E9  0140               	movlb	0	; select bank0
  2521  03EA  01D3               	clrf	main@ret
  2522                           
  2523                           ;main.c: 58: uint8_t send_char;
  2524                           ;main.c: 59: SYSTEM_Initialize();
  2525  03EB  278A               	fcall	_SYSTEM_Initialize
  2526                           
  2527                           ;main.c: 60: do { LATCbits.LATC2 = 1; } while(0);
  2528  03EC  0140               	movlb	0	; select bank0
  2529  03ED  151A               	bsf	26,2	;volatile
  2530                           
  2531                           ;main.c: 61: do { LATAbits.LATA2 = 1; } while(0);
  2532  03EE  1518               	bsf	24,2	;volatile
  2533                           
  2534                           ;main.c: 62: do { LATAbits.LATA5 = 1; } while(0);
  2535  03EF  1698               	bsf	24,5	;volatile
  2536                           
  2537                           ;main.c: 63: do { LATAbits.LATA4 = 1; } while(0);
  2538  03F0  1618               	bsf	24,4	;volatile
  2539                           
  2540                           ;main.c: 64: ret = cw_bat_init();
  2541  03F1  26DA               	fcall	_cw_bat_init
  2542  03F2  0140               	movlb	0	; select bank0
  2543  03F3  00D2               	movwf	??_main
  2544  03F4  0852               	movf	??_main,w
  2545  03F5  00D3               	movwf	main@ret
  2546                           
  2547                           ;main.c: 69: (INTCONbits.GIE = 1);
  2548  03F6  178B               	bsf	11,7	;volatile
  2549                           
  2550                           ;main.c: 72: (INTCONbits.PEIE = 1);
  2551  03F7  170B               	bsf	11,6	;volatile
  2552  03F8                     l2547:	
  2553                           ;main.c: 80: while (1)
  2554                           
  2555                           
  2556                           ;main.c: 81: {
  2557                           ;main.c: 89: cw_bat_work();
  2558  03F8  2786               	fcall	_cw_bat_work
  2559                           
  2560                           ;main.c: 90: if(cw_bat.capacity >= 80)
  2561  03F9  3000               	movlw	0
  2562  03FA  0140               	movlb	0	; select bank0
  2563  03FB  0265               	subwf	_cw_bat+2,w
  2564  03FC  3050               	movlw	80
  2565  03FD  1903               	skipnz
  2566  03FE  0264               	subwf	_cw_bat+1,w
  2567  03FF  1C03               	skipc
  2568  0400  2C03               	goto	l2551
  2569                           
  2570                           ;main.c: 91: {
  2571                           ;main.c: 92: do { LATCbits.LATC2 = 0; } while(0);
  2572  0401  111A               	bcf	26,2	;volatile
  2573  0402  2C0B               	goto	L1
  2574  0403                     l2551:	
  2575                           ;main.c: 96: }
  2576                           
  2577                           ;main.c: 95: do { LATAbits.LATA4 = 0; } while(0);
  2578                           
  2579                           ;main.c: 94: do { LATAbits.LATA5 = 0; } while(0);
  2580                           
  2581                           ;main.c: 93: do { LATAbits.LATA2 = 0; } while(0);
  2582                           
  2583                           
  2584                           ;main.c: 97: else if(cw_bat.capacity >= 60)
  2585  0403  3000               	movlw	0
  2586  0404  0265               	subwf	_cw_bat+2,w
  2587  0405  303C               	movlw	60
  2588  0406  1903               	skipnz
  2589  0407  0264               	subwf	_cw_bat+1,w
  2590  0408  1C03               	skipc
  2591  0409  2C0D               	goto	l2553
  2592                           
  2593                           ;main.c: 98: {
  2594                           ;main.c: 99: do { LATCbits.LATC2 = 1; } while(0);
  2595  040A  151A               	bsf	26,2	;volatile
  2596  040B                     L1:	
  2597                           
  2598                           ;main.c: 100: do { LATAbits.LATA2 = 0; } while(0);
  2599  040B  1118               	bcf	24,2	;volatile
  2600  040C  2C16               	goto	L2
  2601  040D                     l2553:	
  2602                           ;main.c: 103: }
  2603                           
  2604                           ;main.c: 102: do { LATAbits.LATA4 = 0; } while(0);
  2605                           
  2606                           ;main.c: 101: do { LATAbits.LATA5 = 0; } while(0);
  2607                           
  2608                           
  2609                           ;main.c: 104: else if(cw_bat.capacity >= 40)
  2610  040D  3000               	movlw	0
  2611  040E  0265               	subwf	_cw_bat+2,w
  2612  040F  3028               	movlw	40
  2613  0410  1903               	skipnz
  2614  0411  0264               	subwf	_cw_bat+1,w
  2615  0412  1C03               	skipc
  2616  0413  2C18               	goto	l2555
  2617                           
  2618                           ;main.c: 105: {
  2619                           ;main.c: 106: do { LATCbits.LATC2 = 1; } while(0);
  2620  0414  151A               	bsf	26,2	;volatile
  2621                           
  2622                           ;main.c: 107: do { LATAbits.LATA2 = 1; } while(0);
  2623  0415  1518               	bsf	24,2	;volatile
  2624  0416                     L2:	
  2625                           
  2626                           ;main.c: 108: do { LATAbits.LATA5 = 0; } while(0);
  2627  0416  1298               	bcf	24,5	;volatile
  2628                           
  2629                           ;main.c: 109: do { LATAbits.LATA4 = 0; } while(0);
  2630  0417  2C22               	goto	l206
  2631  0418                     l2555:	
  2632                           ;main.c: 110: }
  2633                           
  2634                           
  2635                           ;main.c: 111: else if(cw_bat.capacity >= 20)
  2636  0418  3000               	movlw	0
  2637  0419  0265               	subwf	_cw_bat+2,w
  2638  041A  3014               	movlw	20
  2639  041B  1903               	skipnz
  2640  041C  0264               	subwf	_cw_bat+1,w
  2641  041D  1C03               	skipc
  2642  041E  2C24               	goto	l209
  2643                           
  2644                           ;main.c: 112: {
  2645                           ;main.c: 113: do { LATCbits.LATC2 = 1; } while(0);
  2646  041F  151A               	bsf	26,2	;volatile
  2647                           
  2648                           ;main.c: 114: do { LATAbits.LATA2 = 1; } while(0);
  2649  0420  1518               	bsf	24,2	;volatile
  2650                           
  2651                           ;main.c: 115: do { LATAbits.LATA5 = 1; } while(0);
  2652  0421  1698               	bsf	24,5	;volatile
  2653  0422                     l206:	
  2654                           ;main.c: 116: do { LATAbits.LATA4 = 0; } while(0);
  2655                           
  2656  0422  1218               	bcf	24,4	;volatile
  2657                           
  2658                           ;main.c: 117: }
  2659  0423  2C28               	goto	l2557
  2660  0424                     l209:	
  2661                           ;main.c: 118: else
  2662                           ;main.c: 119: {
  2663                           ;main.c: 120: do { LATCbits.LATC2 = 1; } while(0);
  2664                           
  2665  0424  151A               	bsf	26,2	;volatile
  2666                           
  2667                           ;main.c: 121: do { LATAbits.LATA2 = 1; } while(0);
  2668  0425  1518               	bsf	24,2	;volatile
  2669                           
  2670                           ;main.c: 122: do { LATAbits.LATA5 = 1; } while(0);
  2671  0426  1698               	bsf	24,5	;volatile
  2672                           
  2673                           ;main.c: 123: do { LATAbits.LATA4 = 1; } while(0);
  2674  0427  1618               	bsf	24,4	;volatile
  2675  0428                     l2557:	
  2676                           
  2677                           ;main.c: 124: }
  2678                           ;main.c: 125: CW_Delay10ms(100);
  2679  0428  3064               	movlw	100
  2680  0429  00A0               	movwf	CW_Delay10ms@c
  2681  042A  3000               	movlw	0
  2682  042B  00A1               	movwf	CW_Delay10ms@c+1
  2683  042C  2614               	fcall	_CW_Delay10ms
  2684  042D  2BF8               	goto	l2547
  2685  042E                     __end_of_main:	
  2686                           
  2687                           	psect	text1
  2688  0786                     __ptext1:	
  2689 ;; *************** function _cw_bat_work *****************
  2690 ;; Defined at:
  2691 ;;		line 555 in file "CW201x.c"
  2692 ;; Parameters:    Size  Location     Type
  2693 ;;		None
  2694 ;; Auto vars:     Size  Location     Type
  2695 ;;		None
  2696 ;; Return value:  Size  Location     Type
  2697 ;;                  1    wreg      void 
  2698 ;; Registers used:
  2699 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2700 ;; Tracked objects:
  2701 ;;		On entry : 0/0
  2702 ;;		On exit  : 0/0
  2703 ;;		Unchanged: 0/0
  2704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2705 ;;      Params:         0       0       0       0
  2706 ;;      Locals:         0       0       0       0
  2707 ;;      Temps:          0       0       0       0
  2708 ;;      Totals:         0       0       0       0
  2709 ;;Total ram usage:        0 bytes
  2710 ;; Hardware stack levels used:    1
  2711 ;; Hardware stack levels required when called:   12
  2712 ;; This function calls:
  2713 ;;		_update_capacity
  2714 ;;		_update_usb_online
  2715 ;;		_update_vol
  2716 ;; This function is called by:
  2717 ;;		_main
  2718 ;; This function uses a non-reentrant model
  2719 ;;
  2720                           
  2721                           
  2722                           ;psect for function _cw_bat_work
  2723  0786                     _cw_bat_work:	
  2724                           
  2725                           ;CW201x.c: 557: update_usb_online();
  2726                           
  2727                           ;incstack = 0
  2728                           ; Regs used in _cw_bat_work: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2729  0786  276E               	fcall	_update_usb_online
  2730                           
  2731                           ;CW201x.c: 558: update_capacity();
  2732  0787  2636               	fcall	_update_capacity
  2733                           
  2734                           ;CW201x.c: 559: update_vol();
  2735  0788  26F5               	fcall	_update_vol
  2736  0789  0008               	return
  2737  078A                     __end_of_cw_bat_work:	
  2738                           
  2739                           	psect	text2
  2740  06F5                     __ptext2:	
  2741 ;; *************** function _update_vol *****************
  2742 ;; Defined at:
  2743 ;;		line 508 in file "CW201x.c"
  2744 ;; Parameters:    Size  Location     Type
  2745 ;;		None
  2746 ;; Auto vars:     Size  Location     Type
  2747 ;;  cw_voltage      2   48[BANK0 ] unsigned int 
  2748 ;; Return value:  Size  Location     Type
  2749 ;;                  1    wreg      void 
  2750 ;; Registers used:
  2751 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2752 ;; Tracked objects:
  2753 ;;		On entry : 0/0
  2754 ;;		On exit  : 0/0
  2755 ;;		Unchanged: 0/0
  2756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2757 ;;      Params:         0       0       0       0
  2758 ;;      Locals:         0       2       0       0
  2759 ;;      Temps:          0       0       0       0
  2760 ;;      Totals:         0       2       0       0
  2761 ;;Total ram usage:        2 bytes
  2762 ;; Hardware stack levels used:    1
  2763 ;; Hardware stack levels required when called:    8
  2764 ;; This function calls:
  2765 ;;		_cw_get_vol
  2766 ;; This function is called by:
  2767 ;;		_cw_bat_work
  2768 ;; This function uses a non-reentrant model
  2769 ;;
  2770                           
  2771                           
  2772                           ;psect for function _update_vol
  2773  06F5                     _update_vol:	
  2774                           
  2775                           ;CW201x.c: 510: unsigned int cw_voltage;
  2776                           ;CW201x.c: 511: cw_voltage = cw_get_vol();
  2777                           
  2778                           ;incstack = 0
  2779                           ; Regs used in _update_vol: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2780  06F5  20FB               	fcall	_cw_get_vol
  2781  06F6  0140               	movlb	0	; select bank0
  2782  06F7  083B               	movf	?_cw_get_vol+1,w
  2783  06F8  00D1               	movwf	update_vol@cw_voltage+1
  2784  06F9  083A               	movf	?_cw_get_vol,w
  2785  06FA  00D0               	movwf	update_vol@cw_voltage
  2786                           
  2787                           ;CW201x.c: 512: if(cw_voltage == 1){
  2788  06FB  0350               	decf	update_vol@cw_voltage,w
  2789  06FC  0451               	iorwf	update_vol@cw_voltage+1,w
  2790  06FD  1903               	btfsc	3,2
  2791  06FE  0008               	return
  2792                           
  2793                           ;CW201x.c: 515: }else if(cw_bat.voltage != cw_voltage)
  2794  06FF  0851               	movf	update_vol@cw_voltage+1,w
  2795  0700  0667               	xorwf	_cw_bat+4,w
  2796  0701  1D03               	skipz
  2797  0702  2F05               	goto	u2335
  2798  0703  0850               	movf	update_vol@cw_voltage,w
  2799  0704  0666               	xorwf	_cw_bat+3,w
  2800  0705                     u2335:	
  2801  0705  1903               	skipnz
  2802  0706  0008               	return
  2803                           
  2804                           ;CW201x.c: 516: {
  2805                           ;CW201x.c: 517: cw_bat.voltage = cw_voltage;
  2806  0707  0851               	movf	update_vol@cw_voltage+1,w
  2807  0708  00E7               	movwf	_cw_bat+4
  2808  0709  0850               	movf	update_vol@cw_voltage,w
  2809  070A  00E6               	movwf	_cw_bat+3
  2810  070B  0008               	return
  2811  070C                     __end_of_update_vol:	
  2812                           
  2813                           	psect	text3
  2814  00FB                     __ptext3:	
  2815 ;; *************** function _cw_get_vol *****************
  2816 ;; Defined at:
  2817 ;;		line 434 in file "CW201x.c"
  2818 ;; Parameters:    Size  Location     Type
  2819 ;;		None
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;  ad_value        4   41[BANK0 ] unsigned long 
  2822 ;;  ad_buff         2   46[BANK0 ] unsigned int 
  2823 ;;  reg_val         2   35[BANK0 ] unsigned char [2]
  2824 ;;  ad_value_max    2   39[BANK0 ] unsigned int 
  2825 ;;  ad_value_min    2   37[BANK0 ] unsigned int 
  2826 ;;  ret             2   33[BANK0 ] int 
  2827 ;;  get_ad_times    1   45[BANK0 ] unsigned char 
  2828 ;; Return value:  Size  Location     Type
  2829 ;;                  2   26[BANK0 ] unsigned int 
  2830 ;; Registers used:
  2831 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2832 ;; Tracked objects:
  2833 ;;		On entry : 0/0
  2834 ;;		On exit  : 0/0
  2835 ;;		Unchanged: 0/0
  2836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2837 ;;      Params:         0       2       0       0
  2838 ;;      Locals:         0      15       0       0
  2839 ;;      Temps:          0       5       0       0
  2840 ;;      Totals:         0      22       0       0
  2841 ;;Total ram usage:       22 bytes
  2842 ;; Hardware stack levels used:    1
  2843 ;; Hardware stack levels required when called:    7
  2844 ;; This function calls:
  2845 ;;		___lldiv
  2846 ;;		___lmul
  2847 ;;		_cw_read_word
  2848 ;; This function is called by:
  2849 ;;		_update_vol
  2850 ;; This function uses a non-reentrant model
  2851 ;;
  2852                           
  2853                           
  2854                           ;psect for function _cw_get_vol
  2855  00FB                     _cw_get_vol:	
  2856                           
  2857                           ;CW201x.c: 436: int ret = 0;
  2858                           
  2859                           ;incstack = 0
  2860                           ; Regs used in _cw_get_vol: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2861  00FB  0140               	movlb	0	; select bank0
  2862  00FC  01C1               	clrf	cw_get_vol@ret
  2863  00FD  01C2               	clrf	cw_get_vol@ret+1
  2864                           
  2865                           ;CW201x.c: 437: unsigned char get_ad_times = 0;
  2866  00FE  01CD               	clrf	cw_get_vol@get_ad_times
  2867                           
  2868                           ;CW201x.c: 438: unsigned char reg_val[2] = {0 , 0};
  2869  00FF  086A               	movf	cw_get_vol@F80+1,w
  2870  0100  00C4               	movwf	cw_get_vol@reg_val+1
  2871  0101  0869               	movf	cw_get_vol@F80,w
  2872  0102  00C3               	movwf	cw_get_vol@reg_val
  2873                           
  2874                           ;CW201x.c: 439: unsigned long ad_value = 0;
  2875  0103  3000               	movlw	0
  2876  0104  00CC               	movwf	cw_get_vol@ad_value+3
  2877  0105  3000               	movlw	0
  2878  0106  00CB               	movwf	cw_get_vol@ad_value+2
  2879  0107  3000               	movlw	0
  2880  0108  00CA               	movwf	cw_get_vol@ad_value+1
  2881  0109  3000               	movlw	0
  2882  010A  00C9               	movwf	cw_get_vol@ad_value
  2883                           
  2884                           ;CW201x.c: 440: unsigned int ad_buff = 0;
  2885  010B  01CE               	clrf	cw_get_vol@ad_buff
  2886  010C  01CF               	clrf	cw_get_vol@ad_buff+1
  2887                           
  2888                           ;CW201x.c: 441: unsigned int ad_value_min = 0;
  2889  010D  01C5               	clrf	cw_get_vol@ad_value_min
  2890  010E  01C6               	clrf	cw_get_vol@ad_value_min+1
  2891                           
  2892                           ;CW201x.c: 442: unsigned int ad_value_max = 0;
  2893  010F  01C7               	clrf	cw_get_vol@ad_value_max
  2894  0110  01C8               	clrf	cw_get_vol@ad_value_max+1
  2895                           
  2896                           ;CW201x.c: 444: for(get_ad_times = 0; get_ad_times < 3; get_ad_times++)
  2897  0111  01CD               	clrf	cw_get_vol@get_ad_times
  2898  0112  3003               	movlw	3
  2899  0113  024D               	subwf	cw_get_vol@get_ad_times,w
  2900  0114  1803               	btfsc	3,0
  2901  0115  296F               	goto	l2349
  2902  0116                     l2329:	
  2903                           
  2904                           ;CW201x.c: 445: {
  2905                           ;CW201x.c: 446: ret = cw_read_word(0x2, &reg_val[0],2);
  2906  0116  3043               	movlw	(low (cw_get_vol@reg_val| 0))& (0+255)
  2907  0117  00BC               	movwf	??_cw_get_vol
  2908  0118  083C               	movf	??_cw_get_vol,w
  2909  0119  00B0               	movwf	cw_read_word@r_pdata
  2910  011A  3002               	movlw	2
  2911  011B  00B1               	movwf	cw_read_word@length
  2912  011C  3000               	movlw	0
  2913  011D  00B2               	movwf	cw_read_word@length+1
  2914  011E  3002               	movlw	2
  2915  011F  2291               	fcall	_cw_read_word
  2916  0120  0140               	movlb	0	; select bank0
  2917  0121  0831               	movf	?_cw_read_word+1,w
  2918  0122  00C2               	movwf	cw_get_vol@ret+1
  2919  0123  0830               	movf	?_cw_read_word,w
  2920  0124  00C1               	movwf	cw_get_vol@ret
  2921                           
  2922                           ;CW201x.c: 447: if(ret)
  2923  0125  0841               	movf	cw_get_vol@ret,w
  2924  0126  0442               	iorwf	cw_get_vol@ret+1,w
  2925  0127  1903               	btfsc	3,2
  2926  0128  292E               	goto	l2337
  2927                           
  2928                           ;CW201x.c: 448: {
  2929                           ;CW201x.c: 449: return 1;
  2930  0129  3001               	movlw	1
  2931  012A  00BA               	movwf	?_cw_get_vol
  2932  012B  3000               	movlw	0
  2933  012C  00BB               	movwf	?_cw_get_vol+1
  2934  012D  0008               	return
  2935  012E                     l2337:	
  2936                           
  2937                           ;CW201x.c: 450: }
  2938                           ;CW201x.c: 451: ad_buff = (reg_val[0] << 8) + reg_val[1];
  2939  012E  0844               	movf	cw_get_vol@reg_val+1,w
  2940  012F  00BC               	movwf	??_cw_get_vol
  2941  0130  01BD               	clrf	??_cw_get_vol+1
  2942  0131  0843               	movf	cw_get_vol@reg_val,w
  2943  0132  00BE               	movwf	??_cw_get_vol+2
  2944  0133  01BF               	clrf	??_cw_get_vol+3
  2945  0134  083E               	movf	??_cw_get_vol+2,w
  2946  0135  00BF               	movwf	??_cw_get_vol+3
  2947  0136  01BE               	clrf	??_cw_get_vol+2
  2948  0137  083C               	movf	??_cw_get_vol,w
  2949  0138  073E               	addwf	??_cw_get_vol+2,w
  2950  0139  00CE               	movwf	cw_get_vol@ad_buff
  2951  013A  083D               	movf	??_cw_get_vol+1,w
  2952  013B  3D3F               	addwfc	??_cw_get_vol+3,w
  2953  013C  00CF               	movwf	cw_get_vol@ad_buff+1
  2954                           
  2955                           ;CW201x.c: 453: if(get_ad_times == 0)
  2956  013D  084D               	movf	cw_get_vol@get_ad_times,w
  2957  013E  1D03               	btfss	3,2
  2958  013F  2948               	goto	l315
  2959                           
  2960                           ;CW201x.c: 454: {
  2961                           ;CW201x.c: 455: ad_value_min = ad_buff;
  2962  0140  084F               	movf	cw_get_vol@ad_buff+1,w
  2963  0141  00C6               	movwf	cw_get_vol@ad_value_min+1
  2964  0142  084E               	movf	cw_get_vol@ad_buff,w
  2965  0143  00C5               	movwf	cw_get_vol@ad_value_min
  2966                           
  2967                           ;CW201x.c: 456: ad_value_max = ad_buff;
  2968  0144  084F               	movf	cw_get_vol@ad_buff+1,w
  2969  0145  00C8               	movwf	cw_get_vol@ad_value_max+1
  2970  0146  084E               	movf	cw_get_vol@ad_buff,w
  2971  0147  00C7               	movwf	cw_get_vol@ad_value_max
  2972  0148                     l315:	
  2973                           
  2974                           ;CW201x.c: 457: }
  2975                           ;CW201x.c: 458: if(ad_buff < ad_value_min)
  2976  0148  0846               	movf	cw_get_vol@ad_value_min+1,w
  2977  0149  024F               	subwf	cw_get_vol@ad_buff+1,w
  2978  014A  1D03               	skipz
  2979  014B  294E               	goto	u2225
  2980  014C  0845               	movf	cw_get_vol@ad_value_min,w
  2981  014D  024E               	subwf	cw_get_vol@ad_buff,w
  2982  014E                     u2225:	
  2983  014E  1803               	skipnc
  2984  014F  2954               	goto	l316
  2985                           
  2986                           ;CW201x.c: 459: {
  2987                           ;CW201x.c: 460: ad_value_min = ad_buff;
  2988  0150  084F               	movf	cw_get_vol@ad_buff+1,w
  2989  0151  00C6               	movwf	cw_get_vol@ad_value_min+1
  2990  0152  084E               	movf	cw_get_vol@ad_buff,w
  2991  0153  00C5               	movwf	cw_get_vol@ad_value_min
  2992  0154                     l316:	
  2993                           
  2994                           ;CW201x.c: 461: }
  2995                           ;CW201x.c: 462: if(ad_buff > ad_value_max)
  2996  0154  084F               	movf	cw_get_vol@ad_buff+1,w
  2997  0155  0248               	subwf	cw_get_vol@ad_value_max+1,w
  2998  0156  1D03               	skipz
  2999  0157  295A               	goto	u2235
  3000  0158  084E               	movf	cw_get_vol@ad_buff,w
  3001  0159  0247               	subwf	cw_get_vol@ad_value_max,w
  3002  015A                     u2235:	
  3003  015A  1803               	skipnc
  3004  015B  2960               	goto	l317
  3005                           
  3006                           ;CW201x.c: 463: {
  3007                           ;CW201x.c: 464: ad_value_max = ad_buff;
  3008  015C  084F               	movf	cw_get_vol@ad_buff+1,w
  3009  015D  00C8               	movwf	cw_get_vol@ad_value_max+1
  3010  015E  084E               	movf	cw_get_vol@ad_buff,w
  3011  015F  00C7               	movwf	cw_get_vol@ad_value_max
  3012  0160                     l317:	
  3013                           
  3014                           ;CW201x.c: 465: }
  3015                           ;CW201x.c: 466: ad_value += ad_buff;
  3016  0160  084E               	movf	cw_get_vol@ad_buff,w
  3017  0161  07C9               	addwf	cw_get_vol@ad_value,f
  3018  0162  084F               	movf	cw_get_vol@ad_buff+1,w
  3019  0163  3DCA               	addwfc	cw_get_vol@ad_value+1,f
  3020  0164  3000               	movlw	0
  3021  0165  3DCB               	addwfc	cw_get_vol@ad_value+2,f
  3022  0166  3DCC               	addwfc	cw_get_vol@ad_value+3,f
  3023  0167  3001               	movlw	1
  3024  0168  00BC               	movwf	??_cw_get_vol
  3025  0169  083C               	movf	??_cw_get_vol,w
  3026  016A  07CD               	addwf	cw_get_vol@get_ad_times,f
  3027  016B  3003               	movlw	3
  3028  016C  024D               	subwf	cw_get_vol@get_ad_times,w
  3029  016D  1C03               	skipc
  3030  016E  2916               	goto	l2329
  3031  016F                     l2349:	
  3032                           
  3033                           ;CW201x.c: 467: }
  3034                           ;CW201x.c: 468: ad_value -= ad_value_min;
  3035  016F  0845               	movf	cw_get_vol@ad_value_min,w
  3036  0170  00BC               	movwf	??_cw_get_vol
  3037  0171  0846               	movf	cw_get_vol@ad_value_min+1,w
  3038  0172  00BD               	movwf	??_cw_get_vol+1
  3039  0173  01BE               	clrf	??_cw_get_vol+2
  3040  0174  01BF               	clrf	??_cw_get_vol+3
  3041  0175  083C               	movf	??_cw_get_vol,w
  3042  0176  02C9               	subwf	cw_get_vol@ad_value,f
  3043  0177  083D               	movf	??_cw_get_vol+1,w
  3044  0178  3BCA               	subwfb	cw_get_vol@ad_value+1,f
  3045  0179  083E               	movf	??_cw_get_vol+2,w
  3046  017A  3BCB               	subwfb	cw_get_vol@ad_value+2,f
  3047  017B  083F               	movf	??_cw_get_vol+3,w
  3048  017C  3BCC               	subwfb	cw_get_vol@ad_value+3,f
  3049                           
  3050                           ;CW201x.c: 469: ad_value -= ad_value_max;
  3051  017D  0847               	movf	cw_get_vol@ad_value_max,w
  3052  017E  00BC               	movwf	??_cw_get_vol
  3053  017F  0848               	movf	cw_get_vol@ad_value_max+1,w
  3054  0180  00BD               	movwf	??_cw_get_vol+1
  3055  0181  01BE               	clrf	??_cw_get_vol+2
  3056  0182  01BF               	clrf	??_cw_get_vol+3
  3057  0183  083C               	movf	??_cw_get_vol,w
  3058  0184  02C9               	subwf	cw_get_vol@ad_value,f
  3059  0185  083D               	movf	??_cw_get_vol+1,w
  3060  0186  3BCA               	subwfb	cw_get_vol@ad_value+1,f
  3061  0187  083E               	movf	??_cw_get_vol+2,w
  3062  0188  3BCB               	subwfb	cw_get_vol@ad_value+2,f
  3063  0189  083F               	movf	??_cw_get_vol+3,w
  3064  018A  3BCC               	subwfb	cw_get_vol@ad_value+3,f
  3065                           
  3066                           ;CW201x.c: 470: ad_value = (ad_value * 305 + 50000) / 100000;
  3067  018B  3000               	movlw	0
  3068  018C  00AF               	movwf	___lldiv@divisor+3
  3069  018D  3001               	movlw	1
  3070  018E  00AE               	movwf	___lldiv@divisor+2
  3071  018F  3086               	movlw	134
  3072  0190  00AD               	movwf	___lldiv@divisor+1
  3073  0191  30A0               	movlw	160
  3074  0192  00AC               	movwf	___lldiv@divisor
  3075  0193  3050               	movlw	80
  3076  0194  00BC               	movwf	??_cw_get_vol
  3077  0195  30C3               	movlw	195
  3078  0196  00BD               	movwf	??_cw_get_vol+1
  3079  0197  3000               	movlw	0
  3080  0198  00BE               	movwf	??_cw_get_vol+2
  3081  0199  3000               	movlw	0
  3082  019A  00BF               	movwf	??_cw_get_vol+3
  3083  019B  084C               	movf	cw_get_vol@ad_value+3,w
  3084  019C  00A3               	movwf	___lmul@multiplier+3
  3085  019D  084B               	movf	cw_get_vol@ad_value+2,w
  3086  019E  00A2               	movwf	___lmul@multiplier+2
  3087  019F  084A               	movf	cw_get_vol@ad_value+1,w
  3088  01A0  00A1               	movwf	___lmul@multiplier+1
  3089  01A1  0849               	movf	cw_get_vol@ad_value,w
  3090  01A2  00A0               	movwf	___lmul@multiplier
  3091  01A3  3000               	movlw	0
  3092  01A4  00A7               	movwf	___lmul@multiplicand+3
  3093  01A5  3000               	movlw	0
  3094  01A6  00A6               	movwf	___lmul@multiplicand+2
  3095  01A7  3001               	movlw	1
  3096  01A8  00A5               	movwf	___lmul@multiplicand+1
  3097  01A9  3031               	movlw	49
  3098  01AA  00A4               	movwf	___lmul@multiplicand
  3099  01AB  2590               	fcall	___lmul
  3100  01AC  0140               	movlb	0	; select bank0
  3101  01AD  0820               	movf	?___lmul,w
  3102  01AE  07BC               	addwf	??_cw_get_vol,f
  3103  01AF  0821               	movf	?___lmul+1,w
  3104  01B0  3DBD               	addwfc	??_cw_get_vol+1,f
  3105  01B1  0822               	movf	?___lmul+2,w
  3106  01B2  3DBE               	addwfc	??_cw_get_vol+2,f
  3107  01B3  0823               	movf	?___lmul+3,w
  3108  01B4  3DBF               	addwfc	??_cw_get_vol+3,f
  3109  01B5  083F               	movf	??_cw_get_vol+3,w
  3110  01B6  00B3               	movwf	___lldiv@dividend+3
  3111  01B7  083E               	movf	??_cw_get_vol+2,w
  3112  01B8  00B2               	movwf	___lldiv@dividend+2
  3113  01B9  083D               	movf	??_cw_get_vol+1,w
  3114  01BA  00B1               	movwf	___lldiv@dividend+1
  3115  01BB  083C               	movf	??_cw_get_vol,w
  3116  01BC  00B0               	movwf	___lldiv@dividend
  3117  01BD  234E               	fcall	___lldiv
  3118  01BE  0140               	movlb	0	; select bank0
  3119  01BF  082F               	movf	?___lldiv+3,w
  3120  01C0  00CC               	movwf	cw_get_vol@ad_value+3
  3121  01C1  082E               	movf	?___lldiv+2,w
  3122  01C2  00CB               	movwf	cw_get_vol@ad_value+2
  3123  01C3  082D               	movf	?___lldiv+1,w
  3124  01C4  00CA               	movwf	cw_get_vol@ad_value+1
  3125  01C5  082C               	movf	?___lldiv,w
  3126  01C6  00C9               	movwf	cw_get_vol@ad_value
  3127                           
  3128                           ;CW201x.c: 471: return(ad_value);
  3129  01C7  084A               	movf	cw_get_vol@ad_value+1,w
  3130  01C8  00BB               	movwf	?_cw_get_vol+1
  3131  01C9  0849               	movf	cw_get_vol@ad_value,w
  3132  01CA  00BA               	movwf	?_cw_get_vol
  3133  01CB  0008               	return
  3134  01CC                     __end_of_cw_get_vol:	
  3135                           
  3136                           	psect	text4
  3137  0291                     __ptext4:	
  3138 ;; *************** function _cw_read_word *****************
  3139 ;; Defined at:
  3140 ;;		line 189 in file "iic.c"
  3141 ;; Parameters:    Size  Location     Type
  3142 ;;  point_reg       1    wreg     unsigned char 
  3143 ;;  r_pdata         1   16[BANK0 ] PTR unsigned char 
  3144 ;;		 -> cw_get_vol@reg_val(2), 
  3145 ;;  length          2   17[BANK0 ] unsigned int 
  3146 ;; Auto vars:     Size  Location     Type
  3147 ;;  point_reg       1   21[BANK0 ] unsigned char 
  3148 ;;  count           1   22[BANK0 ] unsigned char 
  3149 ;; Return value:  Size  Location     Type
  3150 ;;                  2   16[BANK0 ] int 
  3151 ;; Registers used:
  3152 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3153 ;; Tracked objects:
  3154 ;;		On entry : 0/0
  3155 ;;		On exit  : 0/0
  3156 ;;		Unchanged: 0/0
  3157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3158 ;;      Params:         0       3       0       0
  3159 ;;      Locals:         0       2       0       0
  3160 ;;      Temps:          0       2       0       0
  3161 ;;      Totals:         0       7       0       0
  3162 ;;Total ram usage:        7 bytes
  3163 ;; Hardware stack levels used:    1
  3164 ;; Hardware stack levels required when called:    6
  3165 ;; This function calls:
  3166 ;;		_read_byte
  3167 ;;		_s_ack
  3168 ;;		_sn_ack
  3169 ;;		_start
  3170 ;;		_stop
  3171 ;;		_wait_r_ack
  3172 ;;		_write_byte
  3173 ;; This function is called by:
  3174 ;;		_cw_get_vol
  3175 ;; This function uses a non-reentrant model
  3176 ;;
  3177                           
  3178                           
  3179                           ;psect for function _cw_read_word
  3180  0291                     _cw_read_word:	
  3181                           
  3182                           ;incstack = 0
  3183                           ; Regs used in _cw_read_word: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3184                           ;cw_read_word@point_reg stored from wreg
  3185  0291  0140               	movlb	0	; select bank0
  3186  0292  00B5               	movwf	cw_read_word@point_reg
  3187                           
  3188                           ;iic.c: 191: unsigned char count;
  3189                           ;iic.c: 193: start();
  3190  0293  2758               	fcall	_start
  3191                           
  3192                           ;iic.c: 194: write_byte(0xc4);
  3193  0294  30C4               	movlw	196
  3194  0295  26BA               	fcall	_write_byte
  3195                           
  3196                           ;iic.c: 195: if(wait_r_ack())
  3197  0296  255E               	fcall	_wait_r_ack
  3198  0297  0140               	movlb	0	; select bank0
  3199  0298  082A               	movf	?_wait_r_ack,w
  3200  0299  042B               	iorwf	?_wait_r_ack+1,w
  3201  029A  1903               	btfsc	3,2
  3202  029B  2AA1               	goto	l2211
  3203                           
  3204                           ;iic.c: 196: {
  3205                           ;iic.c: 197: return 1;
  3206  029C  3001               	movlw	1
  3207  029D  00B0               	movwf	?_cw_read_word
  3208  029E  3000               	movlw	0
  3209  029F  00B1               	movwf	?_cw_read_word+1
  3210  02A0  0008               	return
  3211  02A1                     l2211:	
  3212                           
  3213                           ;iic.c: 198: }
  3214                           ;iic.c: 199: write_byte(point_reg);
  3215  02A1  0835               	movf	cw_read_word@point_reg,w
  3216  02A2  26BA               	fcall	_write_byte
  3217                           
  3218                           ;iic.c: 200: if(wait_r_ack())
  3219  02A3  255E               	fcall	_wait_r_ack
  3220  02A4  0140               	movlb	0	; select bank0
  3221  02A5  082A               	movf	?_wait_r_ack,w
  3222  02A6  042B               	iorwf	?_wait_r_ack+1,w
  3223  02A7  1903               	btfsc	3,2
  3224  02A8  2AAE               	goto	l2217
  3225                           
  3226                           ;iic.c: 201: {
  3227                           ;iic.c: 202: return 1;
  3228  02A9  3001               	movlw	1
  3229  02AA  00B0               	movwf	?_cw_read_word
  3230  02AB  3000               	movlw	0
  3231  02AC  00B1               	movwf	?_cw_read_word+1
  3232  02AD  0008               	return
  3233  02AE                     l2217:	
  3234                           
  3235                           ;iic.c: 203: }
  3236                           ;iic.c: 204: start();
  3237  02AE  2758               	fcall	_start
  3238                           
  3239                           ;iic.c: 205: write_byte(0xc5);
  3240  02AF  30C5               	movlw	197
  3241  02B0  26BA               	fcall	_write_byte
  3242                           
  3243                           ;iic.c: 206: if(wait_r_ack())
  3244  02B1  255E               	fcall	_wait_r_ack
  3245  02B2  0140               	movlb	0	; select bank0
  3246  02B3  082A               	movf	?_wait_r_ack,w
  3247  02B4  042B               	iorwf	?_wait_r_ack+1,w
  3248  02B5  1903               	btfsc	3,2
  3249  02B6  2ABC               	goto	l2223
  3250                           
  3251                           ;iic.c: 207: {
  3252                           ;iic.c: 208: return 1;
  3253  02B7  3001               	movlw	1
  3254  02B8  00B0               	movwf	?_cw_read_word
  3255  02B9  3000               	movlw	0
  3256  02BA  00B1               	movwf	?_cw_read_word+1
  3257  02BB  0008               	return
  3258  02BC                     l2223:	
  3259                           
  3260                           ;iic.c: 209: }
  3261                           ;iic.c: 210: for(count = 0; count < length; count++ ){
  3262  02BC  01B6               	clrf	cw_read_word@count
  3263  02BD                     l2235:	
  3264  02BD  0836               	movf	cw_read_word@count,w
  3265  02BE  00B3               	movwf	??_cw_read_word
  3266  02BF  01B4               	clrf	??_cw_read_word+1
  3267  02C0  0832               	movf	cw_read_word@length+1,w
  3268  02C1  0234               	subwf	??_cw_read_word+1,w
  3269  02C2  1D03               	skipz
  3270  02C3  2AC6               	goto	u2035
  3271  02C4  0831               	movf	cw_read_word@length,w
  3272  02C5  0233               	subwf	??_cw_read_word,w
  3273  02C6                     u2035:	
  3274  02C6  1803               	btfsc	3,0
  3275  02C7  2AEA               	goto	l2237
  3276                           
  3277                           ;iic.c: 211: *r_pdata = read_byte();
  3278  02C8  25F0               	fcall	_read_byte
  3279  02C9  0140               	movlb	0	; select bank0
  3280  02CA  00B3               	movwf	??_cw_read_word
  3281  02CB  0830               	movf	cw_read_word@r_pdata,w
  3282  02CC  0086               	movwf	6
  3283  02CD  0187               	clrf	7
  3284  02CE  0833               	movf	??_cw_read_word,w
  3285  02CF  0081               	movwf	1
  3286                           
  3287                           ;iic.c: 212: if(count + 1 < length){
  3288  02D0  0836               	movf	cw_read_word@count,w
  3289  02D1  3E01               	addlw	1
  3290  02D2  00B3               	movwf	??_cw_read_word
  3291  02D3  3000               	movlw	0
  3292  02D4  1803               	skipnc
  3293  02D5  3001               	movlw	1
  3294  02D6  00B4               	movwf	??_cw_read_word+1
  3295  02D7  0832               	movf	cw_read_word@length+1,w
  3296  02D8  0234               	subwf	??_cw_read_word+1,w
  3297  02D9  1D03               	skipz
  3298  02DA  2ADD               	goto	u2025
  3299  02DB  0831               	movf	cw_read_word@length,w
  3300  02DC  0233               	subwf	??_cw_read_word,w
  3301  02DD                     u2025:	
  3302  02DD  1803               	skipnc
  3303  02DE  2AE4               	goto	l2233
  3304                           
  3305                           ;iic.c: 213: r_pdata++;
  3306  02DF  3001               	movlw	1
  3307  02E0  00B3               	movwf	??_cw_read_word
  3308  02E1  0833               	movf	??_cw_read_word,w
  3309  02E2  07B0               	addwf	cw_read_word@r_pdata,f
  3310                           
  3311                           ;iic.c: 214: sn_ack();
  3312  02E3  2734               	fcall	_sn_ack
  3313  02E4                     l2233:	
  3314  02E4  3001               	movlw	1
  3315  02E5  0140               	movlb	0	; select bank0
  3316  02E6  00B3               	movwf	??_cw_read_word
  3317  02E7  0833               	movf	??_cw_read_word,w
  3318  02E8  07B6               	addwf	cw_read_word@count,f
  3319  02E9  2ABD               	goto	l2235
  3320  02EA                     l2237:	
  3321                           
  3322                           ;iic.c: 215: }
  3323                           ;iic.c: 216: }
  3324                           ;iic.c: 217: s_ack();
  3325  02EA  2763               	fcall	_s_ack
  3326                           
  3327                           ;iic.c: 218: stop();
  3328  02EB  2740               	fcall	_stop
  3329                           
  3330                           ;iic.c: 219: return 0;
  3331  02EC  0140               	movlb	0	; select bank0
  3332  02ED  01B0               	clrf	?_cw_read_word
  3333  02EE  01B1               	clrf	?_cw_read_word+1
  3334  02EF  0008               	return
  3335  02F0                     __end_of_cw_read_word:	
  3336                           
  3337                           	psect	text5
  3338  0734                     __ptext5:	
  3339 ;; *************** function _sn_ack *****************
  3340 ;; Defined at:
  3341 ;;		line 113 in file "iic.c"
  3342 ;; Parameters:    Size  Location     Type
  3343 ;;		None
  3344 ;; Auto vars:     Size  Location     Type
  3345 ;;		None
  3346 ;; Return value:  Size  Location     Type
  3347 ;;                  1    wreg      void 
  3348 ;; Registers used:
  3349 ;;		wreg, status,2, status,0, pclath, cstack
  3350 ;; Tracked objects:
  3351 ;;		On entry : 0/0
  3352 ;;		On exit  : 0/0
  3353 ;;		Unchanged: 0/0
  3354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3355 ;;      Params:         0       0       0       0
  3356 ;;      Locals:         0       0       0       0
  3357 ;;      Temps:          0       0       0       0
  3358 ;;      Totals:         0       0       0       0
  3359 ;;Total ram usage:        0 bytes
  3360 ;; Hardware stack levels used:    1
  3361 ;; Hardware stack levels required when called:    4
  3362 ;; This function calls:
  3363 ;;		_Delay10us
  3364 ;; This function is called by:
  3365 ;;		_cw_read_word
  3366 ;; This function uses a non-reentrant model
  3367 ;;
  3368                           
  3369                           
  3370                           ;psect for function _sn_ack
  3371  0734                     _sn_ack:	
  3372                           
  3373                           ;incstack = 0
  3374                           ; Regs used in _sn_ack: [wreg+status,2+status,0+pclath+cstack]
  3375                           ;iic.c: 115: do { TRISCbits.TRISC1 = 0; } while(0);
  3376  0734  0140               	movlb	0	; select bank0
  3377  0735  1094               	bcf	20,1	;volatile
  3378                           
  3379                           ;iic.c: 116: do { LATCbits.LATC1 = 0; } while(0);
  3380  0736  109A               	bcf	26,1	;volatile
  3381                           
  3382                           ;iic.c: 117: Delay10us();
  3383  0737  2657               	fcall	_Delay10us
  3384                           
  3385                           ;iic.c: 118: do { LATCbits.LATC0 = 1; } while(0);
  3386  0738  0140               	movlb	0	; select bank0
  3387  0739  141A               	bsf	26,0	;volatile
  3388                           
  3389                           ;iic.c: 119: Delay10us();
  3390  073A  2657               	fcall	_Delay10us
  3391                           
  3392                           ;iic.c: 120: do { LATCbits.LATC0 = 0; } while(0);
  3393  073B  0140               	movlb	0	; select bank0
  3394  073C  101A               	bcf	26,0	;volatile
  3395                           
  3396                           ;iic.c: 121: do { LATCbits.LATC1 = 1; } while(0);
  3397  073D  149A               	bsf	26,1	;volatile
  3398                           
  3399                           ;iic.c: 122: Delay10us();
  3400  073E  2657               	fcall	_Delay10us
  3401  073F  0008               	return
  3402  0740                     __end_of_sn_ack:	
  3403                           
  3404                           	psect	text6
  3405  0590                     __ptext6:	
  3406 ;; *************** function ___lmul *****************
  3407 ;; Defined at:
  3408 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul32.c"
  3409 ;; Parameters:    Size  Location     Type
  3410 ;;  multiplier      4    0[BANK0 ] unsigned long 
  3411 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  3412 ;; Auto vars:     Size  Location     Type
  3413 ;;  product         4    8[BANK0 ] unsigned long 
  3414 ;; Return value:  Size  Location     Type
  3415 ;;                  4    0[BANK0 ] unsigned long 
  3416 ;; Registers used:
  3417 ;;		wreg, status,2, status,0
  3418 ;; Tracked objects:
  3419 ;;		On entry : 0/0
  3420 ;;		On exit  : 0/0
  3421 ;;		Unchanged: 0/0
  3422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3423 ;;      Params:         0       8       0       0
  3424 ;;      Locals:         0       4       0       0
  3425 ;;      Temps:          0       0       0       0
  3426 ;;      Totals:         0      12       0       0
  3427 ;;Total ram usage:       12 bytes
  3428 ;; Hardware stack levels used:    1
  3429 ;; Hardware stack levels required when called:    3
  3430 ;; This function calls:
  3431 ;;		Nothing
  3432 ;; This function is called by:
  3433 ;;		_cw_get_vol
  3434 ;; This function uses a non-reentrant model
  3435 ;;
  3436                           
  3437                           
  3438                           ;psect for function ___lmul
  3439  0590                     ___lmul:	
  3440                           
  3441                           ;incstack = 0
  3442                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3443  0590  3000               	movlw	0
  3444  0591  0140               	movlb	0	; select bank0
  3445  0592  00AB               	movwf	___lmul@product+3
  3446  0593  3000               	movlw	0
  3447  0594  00AA               	movwf	___lmul@product+2
  3448  0595  3000               	movlw	0
  3449  0596  00A9               	movwf	___lmul@product+1
  3450  0597  3000               	movlw	0
  3451  0598  00A8               	movwf	___lmul@product
  3452  0599                     l2245:	
  3453  0599  1C20               	btfss	___lmul@multiplier,0
  3454  059A  2DA3               	goto	l2249
  3455  059B  0824               	movf	___lmul@multiplicand,w
  3456  059C  07A8               	addwf	___lmul@product,f
  3457  059D  0825               	movf	___lmul@multiplicand+1,w
  3458  059E  3DA9               	addwfc	___lmul@product+1,f
  3459  059F  0826               	movf	___lmul@multiplicand+2,w
  3460  05A0  3DAA               	addwfc	___lmul@product+2,f
  3461  05A1  0827               	movf	___lmul@multiplicand+3,w
  3462  05A2  3DAB               	addwfc	___lmul@product+3,f
  3463  05A3                     l2249:	
  3464  05A3  3001               	movlw	1
  3465  05A4                     u2055:	
  3466  05A4  35A4               	lslf	___lmul@multiplicand,f
  3467  05A5  0DA5               	rlf	___lmul@multiplicand+1,f
  3468  05A6  0DA6               	rlf	___lmul@multiplicand+2,f
  3469  05A7  0DA7               	rlf	___lmul@multiplicand+3,f
  3470  05A8  0B89               	decfsz	9,f
  3471  05A9  2DA4               	goto	u2055
  3472  05AA  3001               	movlw	1
  3473  05AB                     u2065:	
  3474  05AB  36A3               	lsrf	___lmul@multiplier+3,f
  3475  05AC  0CA2               	rrf	___lmul@multiplier+2,f
  3476  05AD  0CA1               	rrf	___lmul@multiplier+1,f
  3477  05AE  0CA0               	rrf	___lmul@multiplier,f
  3478  05AF  0B89               	decfsz	9,f
  3479  05B0  2DAB               	goto	u2065
  3480  05B1  0823               	movf	___lmul@multiplier+3,w
  3481  05B2  0422               	iorwf	___lmul@multiplier+2,w
  3482  05B3  0421               	iorwf	___lmul@multiplier+1,w
  3483  05B4  0420               	iorwf	___lmul@multiplier,w
  3484  05B5  1D03               	skipz
  3485  05B6  2D99               	goto	l2245
  3486  05B7  082B               	movf	___lmul@product+3,w
  3487  05B8  00A3               	movwf	?___lmul+3
  3488  05B9  082A               	movf	___lmul@product+2,w
  3489  05BA  00A2               	movwf	?___lmul+2
  3490  05BB  0829               	movf	___lmul@product+1,w
  3491  05BC  00A1               	movwf	?___lmul+1
  3492  05BD  0828               	movf	___lmul@product,w
  3493  05BE  00A0               	movwf	?___lmul
  3494  05BF  0008               	return
  3495  05C0                     __end_of___lmul:	
  3496                           
  3497                           	psect	text7
  3498  034E                     __ptext7:	
  3499 ;; *************** function ___lldiv *****************
  3500 ;; Defined at:
  3501 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
  3502 ;; Parameters:    Size  Location     Type
  3503 ;;  divisor         4   12[BANK0 ] unsigned long 
  3504 ;;  dividend        4   16[BANK0 ] unsigned long 
  3505 ;; Auto vars:     Size  Location     Type
  3506 ;;  quotient        4   21[BANK0 ] unsigned long 
  3507 ;;  counter         1   25[BANK0 ] unsigned char 
  3508 ;; Return value:  Size  Location     Type
  3509 ;;                  4   12[BANK0 ] unsigned long 
  3510 ;; Registers used:
  3511 ;;		wreg, status,2, status,0
  3512 ;; Tracked objects:
  3513 ;;		On entry : 0/0
  3514 ;;		On exit  : 0/0
  3515 ;;		Unchanged: 0/0
  3516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3517 ;;      Params:         0       8       0       0
  3518 ;;      Locals:         0       5       0       0
  3519 ;;      Temps:          0       1       0       0
  3520 ;;      Totals:         0      14       0       0
  3521 ;;Total ram usage:       14 bytes
  3522 ;; Hardware stack levels used:    1
  3523 ;; Hardware stack levels required when called:    3
  3524 ;; This function calls:
  3525 ;;		Nothing
  3526 ;; This function is called by:
  3527 ;;		_cw_get_vol
  3528 ;; This function uses a non-reentrant model
  3529 ;;
  3530                           
  3531                           
  3532                           ;psect for function ___lldiv
  3533  034E                     ___lldiv:	
  3534                           
  3535                           ;incstack = 0
  3536                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3537  034E  3000               	movlw	0
  3538  034F  0140               	movlb	0	; select bank0
  3539  0350  00B8               	movwf	___lldiv@quotient+3
  3540  0351  3000               	movlw	0
  3541  0352  00B7               	movwf	___lldiv@quotient+2
  3542  0353  3000               	movlw	0
  3543  0354  00B6               	movwf	___lldiv@quotient+1
  3544  0355  3000               	movlw	0
  3545  0356  00B5               	movwf	___lldiv@quotient
  3546  0357  082F               	movf	___lldiv@divisor+3,w
  3547  0358  042E               	iorwf	___lldiv@divisor+2,w
  3548  0359  042D               	iorwf	___lldiv@divisor+1,w
  3549  035A  042C               	iorwf	___lldiv@divisor,w
  3550  035B  1903               	skipnz
  3551  035C  2B98               	goto	l2277
  3552  035D  01B9               	clrf	___lldiv@counter
  3553  035E  0AB9               	incf	___lldiv@counter,f
  3554  035F                     l2263:	
  3555  035F  1BAF               	btfsc	___lldiv@divisor+3,7
  3556  0360  2B6D               	goto	l2265
  3557  0361  3001               	movlw	1
  3558  0362                     u2095:	
  3559  0362  35AC               	lslf	___lldiv@divisor,f
  3560  0363  0DAD               	rlf	___lldiv@divisor+1,f
  3561  0364  0DAE               	rlf	___lldiv@divisor+2,f
  3562  0365  0DAF               	rlf	___lldiv@divisor+3,f
  3563  0366  0B89               	decfsz	9,f
  3564  0367  2B62               	goto	u2095
  3565  0368  3001               	movlw	1
  3566  0369  00B4               	movwf	??___lldiv
  3567  036A  0834               	movf	??___lldiv,w
  3568  036B  07B9               	addwf	___lldiv@counter,f
  3569  036C  2B5F               	goto	l2263
  3570  036D                     l2265:	
  3571  036D  3001               	movlw	1
  3572  036E                     u2115:	
  3573  036E  35B5               	lslf	___lldiv@quotient,f
  3574  036F  0DB6               	rlf	___lldiv@quotient+1,f
  3575  0370  0DB7               	rlf	___lldiv@quotient+2,f
  3576  0371  0DB8               	rlf	___lldiv@quotient+3,f
  3577  0372  0B89               	decfsz	9,f
  3578  0373  2B6E               	goto	u2115
  3579  0374  082F               	movf	___lldiv@divisor+3,w
  3580  0375  0233               	subwf	___lldiv@dividend+3,w
  3581  0376  1D03               	skipz
  3582  0377  2B82               	goto	u2125
  3583  0378  082E               	movf	___lldiv@divisor+2,w
  3584  0379  0232               	subwf	___lldiv@dividend+2,w
  3585  037A  1D03               	skipz
  3586  037B  2B82               	goto	u2125
  3587  037C  082D               	movf	___lldiv@divisor+1,w
  3588  037D  0231               	subwf	___lldiv@dividend+1,w
  3589  037E  1D03               	skipz
  3590  037F  2B82               	goto	u2125
  3591  0380  082C               	movf	___lldiv@divisor,w
  3592  0381  0230               	subwf	___lldiv@dividend,w
  3593  0382                     u2125:	
  3594  0382  1C03               	skipc
  3595  0383  2B8D               	goto	l2273
  3596  0384  082C               	movf	___lldiv@divisor,w
  3597  0385  02B0               	subwf	___lldiv@dividend,f
  3598  0386  082D               	movf	___lldiv@divisor+1,w
  3599  0387  3BB1               	subwfb	___lldiv@dividend+1,f
  3600  0388  082E               	movf	___lldiv@divisor+2,w
  3601  0389  3BB2               	subwfb	___lldiv@dividend+2,f
  3602  038A  082F               	movf	___lldiv@divisor+3,w
  3603  038B  3BB3               	subwfb	___lldiv@dividend+3,f
  3604  038C  1435               	bsf	___lldiv@quotient,0
  3605  038D                     l2273:	
  3606  038D  3001               	movlw	1
  3607  038E                     u2135:	
  3608  038E  36AF               	lsrf	___lldiv@divisor+3,f
  3609  038F  0CAE               	rrf	___lldiv@divisor+2,f
  3610  0390  0CAD               	rrf	___lldiv@divisor+1,f
  3611  0391  0CAC               	rrf	___lldiv@divisor,f
  3612  0392  0B89               	decfsz	9,f
  3613  0393  2B8E               	goto	u2135
  3614  0394  3001               	movlw	1
  3615  0395  02B9               	subwf	___lldiv@counter,f
  3616  0396  1D03               	btfss	3,2
  3617  0397  2B6D               	goto	l2265
  3618  0398                     l2277:	
  3619  0398  0838               	movf	___lldiv@quotient+3,w
  3620  0399  00AF               	movwf	?___lldiv+3
  3621  039A  0837               	movf	___lldiv@quotient+2,w
  3622  039B  00AE               	movwf	?___lldiv+2
  3623  039C  0836               	movf	___lldiv@quotient+1,w
  3624  039D  00AD               	movwf	?___lldiv+1
  3625  039E  0835               	movf	___lldiv@quotient,w
  3626  039F  00AC               	movwf	?___lldiv
  3627  03A0  0008               	return
  3628  03A1                     __end_of___lldiv:	
  3629                           
  3630                           	psect	text8
  3631  076E                     __ptext8:	
  3632 ;; *************** function _update_usb_online *****************
  3633 ;; Defined at:
  3634 ;;		line 544 in file "CW201x.c"
  3635 ;; Parameters:    Size  Location     Type
  3636 ;;		None
  3637 ;; Auto vars:     Size  Location     Type
  3638 ;;		None
  3639 ;; Return value:  Size  Location     Type
  3640 ;;                  1    wreg      void 
  3641 ;; Registers used:
  3642 ;;		wreg, status,2, status,0
  3643 ;; Tracked objects:
  3644 ;;		On entry : 0/0
  3645 ;;		On exit  : 0/0
  3646 ;;		Unchanged: 0/0
  3647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3648 ;;      Params:         0       0       0       0
  3649 ;;      Locals:         0       0       0       0
  3650 ;;      Temps:          0       0       0       0
  3651 ;;      Totals:         0       0       0       0
  3652 ;;Total ram usage:        0 bytes
  3653 ;; Hardware stack levels used:    1
  3654 ;; Hardware stack levels required when called:    3
  3655 ;; This function calls:
  3656 ;;		Nothing
  3657 ;; This function is called by:
  3658 ;;		_cw_bat_work
  3659 ;; This function uses a non-reentrant model
  3660 ;;
  3661                           
  3662                           
  3663                           ;psect for function _update_usb_online
  3664  076E                     _update_usb_online:	
  3665                           
  3666                           ;CW201x.c: 546: if(CHARGE == 1)
  3667                           
  3668                           ;incstack = 0
  3669                           ; Regs used in _update_usb_online: [wreg+status,2+status,0]
  3670  076E  0378               	decf	_CHARGE,w
  3671  076F  1D03               	btfss	3,2
  3672  0770  2F75               	goto	l2429
  3673                           
  3674                           ;CW201x.c: 547: {
  3675                           ;CW201x.c: 548: cw_bat.usb_online = 1;
  3676  0771  0140               	movlb	0	; select bank0
  3677  0772  01E3               	clrf	_cw_bat
  3678  0773  0AE3               	incf	_cw_bat,f
  3679                           
  3680                           ;CW201x.c: 549: }else{
  3681  0774  0008               	return
  3682  0775                     l2429:	
  3683                           
  3684                           ;CW201x.c: 550: cw_bat.usb_online = 0;
  3685  0775  0140               	movlb	0	; select bank0
  3686  0776  01E3               	clrf	_cw_bat
  3687  0777  0008               	return
  3688  0778                     __end_of_update_usb_online:	
  3689                           
  3690                           	psect	text9
  3691  0636                     __ptext9:	
  3692 ;; *************** function _update_capacity *****************
  3693 ;; Defined at:
  3694 ;;		line 497 in file "CW201x.c"
  3695 ;; Parameters:    Size  Location     Type
  3696 ;;		None
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;  cw_capacity     2   48[BANK0 ] int 
  3699 ;; Return value:  Size  Location     Type
  3700 ;;                  1    wreg      void 
  3701 ;; Registers used:
  3702 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3703 ;; Tracked objects:
  3704 ;;		On entry : 0/0
  3705 ;;		On exit  : 0/0
  3706 ;;		Unchanged: 0/0
  3707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3708 ;;      Params:         0       0       0       0
  3709 ;;      Locals:         0       2       0       0
  3710 ;;      Temps:          0       1       0       0
  3711 ;;      Totals:         0       3       0       0
  3712 ;;Total ram usage:        3 bytes
  3713 ;; Hardware stack levels used:    1
  3714 ;; Hardware stack levels required when called:   11
  3715 ;; This function calls:
  3716 ;;		_cw_get_capacity
  3717 ;; This function is called by:
  3718 ;;		_cw_bat_work
  3719 ;; This function uses a non-reentrant model
  3720 ;;
  3721                           
  3722                           
  3723                           ;psect for function _update_capacity
  3724  0636                     _update_capacity:	
  3725                           
  3726                           ;CW201x.c: 499: int cw_capacity;
  3727                           ;CW201x.c: 500: cw_capacity = cw_get_capacity();
  3728                           
  3729                           ;incstack = 0
  3730                           ; Regs used in _update_capacity: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3731  0636  242E               	fcall	_cw_get_capacity
  3732  0637  0140               	movlb	0	; select bank0
  3733  0638  0848               	movf	?_cw_get_capacity+1,w
  3734  0639  00D1               	movwf	update_capacity@cw_capacity+1
  3735  063A  0847               	movf	?_cw_get_capacity,w
  3736  063B  00D0               	movwf	update_capacity@cw_capacity
  3737                           
  3738                           ;CW201x.c: 501: if((cw_capacity >= 0) && (cw_capacity <= 100) && (cw_bat.capacity != cw_
      +                          capacity))
  3739  063C  1BD1               	btfsc	update_capacity@cw_capacity+1,7
  3740  063D  0008               	return
  3741  063E  0851               	movf	update_capacity@cw_capacity+1,w
  3742  063F  3A80               	xorlw	128
  3743  0640  00CF               	movwf	??_update_capacity
  3744  0641  3080               	movlw	128
  3745  0642  024F               	subwf	??_update_capacity,w
  3746  0643  1D03               	skipz
  3747  0644  2E47               	goto	u2305
  3748  0645  3065               	movlw	101
  3749  0646  0250               	subwf	update_capacity@cw_capacity,w
  3750  0647                     u2305:	
  3751  0647  1803               	skipnc
  3752  0648  0008               	return
  3753  0649  0140               	movlb	0	; select bank0
  3754  064A  0851               	movf	update_capacity@cw_capacity+1,w
  3755  064B  0665               	xorwf	_cw_bat+2,w
  3756  064C  1D03               	skipz
  3757  064D  2E50               	goto	u2315
  3758  064E  0850               	movf	update_capacity@cw_capacity,w
  3759  064F  0664               	xorwf	_cw_bat+1,w
  3760  0650                     u2315:	
  3761  0650  1903               	skipnz
  3762  0651  0008               	return
  3763                           
  3764                           ;CW201x.c: 502: {
  3765                           ;CW201x.c: 503: cw_bat.capacity = cw_capacity;
  3766  0652  0851               	movf	update_capacity@cw_capacity+1,w
  3767  0653  00E5               	movwf	_cw_bat+2
  3768  0654  0850               	movf	update_capacity@cw_capacity,w
  3769  0655  00E4               	movwf	_cw_bat+1
  3770  0656  0008               	return
  3771  0657                     __end_of_update_capacity:	
  3772                           
  3773                           	psect	text10
  3774  042E                     __ptext10:	
  3775 ;; *************** function _cw_get_capacity *****************
  3776 ;; Defined at:
  3777 ;;		line 325 in file "CW201x.c"
  3778 ;; Parameters:    Size  Location     Type
  3779 ;;		None
  3780 ;; Auto vars:     Size  Location     Type
  3781 ;;  ret             2   44[BANK0 ] int 
  3782 ;;  reg_val         1   46[BANK0 ] unsigned char 
  3783 ;;  cw_capacity     1   43[BANK0 ] unsigned char 
  3784 ;;  allow_capaci    1    0        unsigned char 
  3785 ;; Return value:  Size  Location     Type
  3786 ;;                  2   39[BANK0 ] int 
  3787 ;; Registers used:
  3788 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3789 ;; Tracked objects:
  3790 ;;		On entry : 0/0
  3791 ;;		On exit  : 0/0
  3792 ;;		Unchanged: 0/0
  3793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3794 ;;      Params:         0       2       0       0
  3795 ;;      Locals:         0       4       0       0
  3796 ;;      Temps:          0       2       0       0
  3797 ;;      Totals:         0       8       0       0
  3798 ;;Total ram usage:        8 bytes
  3799 ;; Hardware stack levels used:    1
  3800 ;; Hardware stack levels required when called:   10
  3801 ;; This function calls:
  3802 ;;		_cw_por
  3803 ;;		_cw_read
  3804 ;; This function is called by:
  3805 ;;		_update_capacity
  3806 ;; This function uses a non-reentrant model
  3807 ;;
  3808                           
  3809                           
  3810                           ;psect for function _cw_get_capacity
  3811  042E                     _cw_get_capacity:	
  3812                           
  3813                           ;CW201x.c: 327: int ret = 0;
  3814                           
  3815                           ;incstack = 0
  3816                           ; Regs used in _cw_get_capacity: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3817  042E  0140               	movlb	0	; select bank0
  3818  042F  01CC               	clrf	cw_get_capacity@ret
  3819  0430  01CD               	clrf	cw_get_capacity@ret+1
  3820                           
  3821                           ;CW201x.c: 328: unsigned char allow_capacity;
  3822                           ;CW201x.c: 329: unsigned char reg_val;
  3823                           ;CW201x.c: 331: unsigned char cw_capacity;
  3824                           ;CW201x.c: 334: ret = cw_read(0x4, &reg_val);
  3825  0431  304E               	movlw	(low (cw_get_capacity@reg_val| 0))& (0+255)
  3826  0432  00C9               	movwf	??_cw_get_capacity
  3827  0433  0849               	movf	??_cw_get_capacity,w
  3828  0434  00B0               	movwf	cw_read@r_pdata
  3829  0435  3004               	movlw	4
  3830  0436  24F3               	fcall	_cw_read
  3831  0437  0140               	movlb	0	; select bank0
  3832  0438  0831               	movf	?_cw_read+1,w
  3833  0439  00CD               	movwf	cw_get_capacity@ret+1
  3834  043A  0830               	movf	?_cw_read,w
  3835  043B  00CC               	movwf	cw_get_capacity@ret
  3836                           
  3837                           ;CW201x.c: 335: if(ret)
  3838  043C  084C               	movf	cw_get_capacity@ret,w
  3839  043D  044D               	iorwf	cw_get_capacity@ret+1,w
  3840  043E  1903               	btfsc	3,2
  3841  043F  2C45               	goto	l2291
  3842                           
  3843                           ;CW201x.c: 336: {
  3844                           ;CW201x.c: 337: return -1;
  3845  0440  30FF               	movlw	255
  3846  0441  00C7               	movwf	?_cw_get_capacity
  3847  0442  30FF               	movlw	255
  3848  0443  00C8               	movwf	?_cw_get_capacity+1
  3849  0444  0008               	return
  3850  0445                     l2291:	
  3851                           
  3852                           ;CW201x.c: 338: }
  3853                           ;CW201x.c: 340: cw_capacity = reg_val;
  3854  0445  084E               	movf	cw_get_capacity@reg_val,w
  3855  0446  00C9               	movwf	??_cw_get_capacity
  3856  0447  0849               	movf	??_cw_get_capacity,w
  3857  0448  00CB               	movwf	cw_get_capacity@cw_capacity
  3858                           
  3859                           ;CW201x.c: 342: if ((cw_capacity < 0) || (cw_capacity > 100)) {
  3860  0449  3065               	movlw	101
  3861  044A  024B               	subwf	cw_get_capacity@cw_capacity,w
  3862  044B  1C03               	skipc
  3863  044C  2C6A               	goto	l2313
  3864                           
  3865                           ;CW201x.c: 344: reset_loop++;
  3866  044D  3001               	movlw	1
  3867  044E  00C9               	movwf	??_cw_get_capacity
  3868  044F  0849               	movf	??_cw_get_capacity,w
  3869  0450  07EB               	addwf	_reset_loop,f
  3870                           
  3871                           ;CW201x.c: 345: if (reset_loop >5) {
  3872  0451  3006               	movlw	6
  3873  0452  026B               	subwf	_reset_loop,w
  3874  0453  1C03               	skipc
  3875  0454  2C65               	goto	l2307
  3876                           
  3877                           ;CW201x.c: 346: ret = cw_por();
  3878  0455  23A1               	fcall	_cw_por
  3879  0456  0140               	movlb	0	; select bank0
  3880  0457  0841               	movf	?_cw_por+1,w
  3881  0458  00CD               	movwf	cw_get_capacity@ret+1
  3882  0459  0840               	movf	?_cw_por,w
  3883  045A  00CC               	movwf	cw_get_capacity@ret
  3884                           
  3885                           ;CW201x.c: 347: if(ret)
  3886  045B  084C               	movf	cw_get_capacity@ret,w
  3887  045C  044D               	iorwf	cw_get_capacity@ret+1,w
  3888  045D  1903               	btfsc	3,2
  3889  045E  2C64               	goto	l2305
  3890                           
  3891                           ;CW201x.c: 348: return -1;
  3892  045F  30FF               	movlw	255
  3893  0460  00C7               	movwf	?_cw_get_capacity
  3894  0461  30FF               	movlw	255
  3895  0462  00C8               	movwf	?_cw_get_capacity+1
  3896  0463  0008               	return
  3897  0464                     l2305:	
  3898                           
  3899                           ;CW201x.c: 349: reset_loop =0;
  3900  0464  01EB               	clrf	_reset_loop
  3901  0465                     l2307:	
  3902                           
  3903                           ;CW201x.c: 350: }
  3904                           ;CW201x.c: 351: return cw_bat.capacity;
  3905  0465  0865               	movf	_cw_bat+2,w
  3906  0466  00C8               	movwf	?_cw_get_capacity+1
  3907  0467  0864               	movf	_cw_bat+1,w
  3908  0468  00C7               	movwf	?_cw_get_capacity
  3909  0469  0008               	return
  3910  046A                     l2313:	
  3911                           ;CW201x.c: 352: }else {
  3912                           
  3913                           
  3914                           ;CW201x.c: 353: reset_loop =0;
  3915  046A  01EB               	clrf	_reset_loop
  3916                           
  3917                           ;CW201x.c: 354: }
  3918                           ;CW201x.c: 431: return(cw_capacity);
  3919  046B  084B               	movf	cw_get_capacity@cw_capacity,w
  3920  046C  00C9               	movwf	??_cw_get_capacity
  3921  046D  01CA               	clrf	??_cw_get_capacity+1
  3922  046E  0849               	movf	??_cw_get_capacity,w
  3923  046F  00C7               	movwf	?_cw_get_capacity
  3924  0470  084A               	movf	??_cw_get_capacity+1,w
  3925  0471  00C8               	movwf	?_cw_get_capacity+1
  3926  0472  0008               	return
  3927  0473                     __end_of_cw_get_capacity:	
  3928                           
  3929                           	psect	text11
  3930  03A1                     __ptext11:	
  3931 ;; *************** function _cw_por *****************
  3932 ;; Defined at:
  3933 ;;		line 303 in file "CW201x.c"
  3934 ;; Parameters:    Size  Location     Type
  3935 ;;		None
  3936 ;; Auto vars:     Size  Location     Type
  3937 ;;  ret             2   37[BANK0 ] int 
  3938 ;;  reset_val       1   36[BANK0 ] unsigned char 
  3939 ;; Return value:  Size  Location     Type
  3940 ;;                  2   32[BANK0 ] int 
  3941 ;; Registers used:
  3942 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3943 ;; Tracked objects:
  3944 ;;		On entry : 0/0
  3945 ;;		On exit  : 0/0
  3946 ;;		Unchanged: 0/0
  3947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3948 ;;      Params:         0       2       0       0
  3949 ;;      Locals:         0       3       0       0
  3950 ;;      Temps:          0       2       0       0
  3951 ;;      Totals:         0       7       0       0
  3952 ;;Total ram usage:        7 bytes
  3953 ;; Hardware stack levels used:    1
  3954 ;; Hardware stack levels required when called:    9
  3955 ;; This function calls:
  3956 ;;		_CW_Delay100us
  3957 ;;		_cw_init
  3958 ;;		_cw_write
  3959 ;; This function is called by:
  3960 ;;		_cw_get_capacity
  3961 ;; This function uses a non-reentrant model
  3962 ;;
  3963                           
  3964                           
  3965                           ;psect for function _cw_por
  3966  03A1                     _cw_por:	
  3967                           
  3968                           ;CW201x.c: 305: int ret = 0;
  3969                           
  3970                           ;incstack = 0
  3971                           ; Regs used in _cw_por: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3972  03A1  0140               	movlb	0	; select bank0
  3973  03A2  01C5               	clrf	cw_por@ret
  3974  03A3  01C6               	clrf	cw_por@ret+1
  3975                           
  3976                           ;CW201x.c: 306: unsigned char reset_val = 0;
  3977  03A4  01C4               	clrf	cw_por@reset_val
  3978                           
  3979                           ;CW201x.c: 307: reset_val = (0x3<<6);
  3980  03A5  30C0               	movlw	192
  3981  03A6  00C2               	movwf	??_cw_por
  3982  03A7  0842               	movf	??_cw_por,w
  3983  03A8  00C4               	movwf	cw_por@reset_val
  3984                           
  3985                           ;CW201x.c: 308: ret = cw_write(0xA, &reset_val);
  3986  03A9  3044               	movlw	(low (cw_por@reset_val| 0))& (0+255)
  3987  03AA  00C2               	movwf	??_cw_por
  3988  03AB  0842               	movf	??_cw_por,w
  3989  03AC  00B0               	movwf	cw_write@w_pdata
  3990  03AD  300A               	movlw	10
  3991  03AE  252C               	fcall	_cw_write
  3992  03AF  0140               	movlb	0	; select bank0
  3993  03B0  0831               	movf	?_cw_write+1,w
  3994  03B1  00C6               	movwf	cw_por@ret+1
  3995  03B2  0830               	movf	?_cw_write,w
  3996  03B3  00C5               	movwf	cw_por@ret
  3997                           
  3998                           ;CW201x.c: 309: if (ret)
  3999  03B4  0845               	movf	cw_por@ret,w
  4000  03B5  0446               	iorwf	cw_por@ret+1,w
  4001  03B6  1903               	btfsc	3,2
  4002  03B7  2BBD               	goto	l2179
  4003                           
  4004                           ;CW201x.c: 310: return -1;
  4005  03B8  30FF               	movlw	255
  4006  03B9  00C0               	movwf	?_cw_por
  4007  03BA  30FF               	movlw	255
  4008  03BB  00C1               	movwf	?_cw_por+1
  4009  03BC  0008               	return
  4010  03BD                     l2179:	
  4011                           
  4012                           ;CW201x.c: 311: CW_Delay100us();
  4013  03BD  2678               	fcall	_CW_Delay100us
  4014                           
  4015                           ;CW201x.c: 313: reset_val = (0x0<<6);
  4016  03BE  0140               	movlb	0	; select bank0
  4017  03BF  01C4               	clrf	cw_por@reset_val
  4018                           
  4019                           ;CW201x.c: 314: ret = cw_write(0xA, &reset_val);
  4020  03C0  3044               	movlw	(low (cw_por@reset_val| 0))& (0+255)
  4021  03C1  00C2               	movwf	??_cw_por
  4022  03C2  0842               	movf	??_cw_por,w
  4023  03C3  00B0               	movwf	cw_write@w_pdata
  4024  03C4  300A               	movlw	10
  4025  03C5  252C               	fcall	_cw_write
  4026  03C6  0140               	movlb	0	; select bank0
  4027  03C7  0831               	movf	?_cw_write+1,w
  4028  03C8  00C6               	movwf	cw_por@ret+1
  4029  03C9  0830               	movf	?_cw_write,w
  4030  03CA  00C5               	movwf	cw_por@ret
  4031                           
  4032                           ;CW201x.c: 315: if (ret)
  4033  03CB  0845               	movf	cw_por@ret,w
  4034  03CC  0446               	iorwf	cw_por@ret+1,w
  4035  03CD  1903               	btfsc	3,2
  4036  03CE  2BD4               	goto	l2191
  4037                           
  4038                           ;CW201x.c: 316: return -1;
  4039  03CF  30FF               	movlw	255
  4040  03D0  00C0               	movwf	?_cw_por
  4041  03D1  30FF               	movlw	255
  4042  03D2  00C1               	movwf	?_cw_por+1
  4043  03D3  0008               	return
  4044  03D4                     l2191:	
  4045                           
  4046                           ;CW201x.c: 317: CW_Delay100us();
  4047  03D4  2678               	fcall	_CW_Delay100us
  4048                           
  4049                           ;CW201x.c: 319: ret = cw_init();
  4050  03D5  2022               	fcall	_cw_init
  4051  03D6  0140               	movlb	0	; select bank0
  4052  03D7  00C2               	movwf	??_cw_por
  4053  03D8  01C3               	clrf	??_cw_por+1
  4054  03D9  0842               	movf	??_cw_por,w
  4055  03DA  00C5               	movwf	cw_por@ret
  4056  03DB  0843               	movf	??_cw_por+1,w
  4057  03DC  00C6               	movwf	cw_por@ret+1
  4058                           
  4059                           ;CW201x.c: 320: if (ret)
  4060  03DD  0845               	movf	cw_por@ret,w
  4061  03DE  0446               	iorwf	cw_por@ret+1,w
  4062  03DF  1903               	btfsc	3,2
  4063  03E0  2BE6               	goto	l2201
  4064                           
  4065                           ;CW201x.c: 321: return ret;
  4066  03E1  0846               	movf	cw_por@ret+1,w
  4067  03E2  00C1               	movwf	?_cw_por+1
  4068  03E3  0845               	movf	cw_por@ret,w
  4069  03E4  00C0               	movwf	?_cw_por
  4070  03E5  0008               	return
  4071  03E6                     l2201:	
  4072                           
  4073                           ;CW201x.c: 322: return 0;
  4074  03E6  01C0               	clrf	?_cw_por
  4075  03E7  01C1               	clrf	?_cw_por+1
  4076  03E8  0008               	return
  4077  03E9                     __end_of_cw_por:	
  4078                           
  4079                           	psect	text12
  4080  06DA                     __ptext12:	
  4081 ;; *************** function _cw_bat_init *****************
  4082 ;; Defined at:
  4083 ;;		line 577 in file "CW201x.c"
  4084 ;; Parameters:    Size  Location     Type
  4085 ;;		None
  4086 ;; Auto vars:     Size  Location     Type
  4087 ;;  ret             1   34[BANK0 ] unsigned char 
  4088 ;;  loop            1   33[BANK0 ] unsigned char 
  4089 ;; Return value:  Size  Location     Type
  4090 ;;                  1    wreg      unsigned char 
  4091 ;; Registers used:
  4092 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4093 ;; Tracked objects:
  4094 ;;		On entry : 0/0
  4095 ;;		On exit  : 0/0
  4096 ;;		Unchanged: 0/0
  4097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4098 ;;      Params:         0       0       0       0
  4099 ;;      Locals:         0       2       0       0
  4100 ;;      Temps:          0       1       0       0
  4101 ;;      Totals:         0       3       0       0
  4102 ;;Total ram usage:        3 bytes
  4103 ;; Hardware stack levels used:    1
  4104 ;; Hardware stack levels required when called:    9
  4105 ;; This function calls:
  4106 ;;		_cw_init
  4107 ;; This function is called by:
  4108 ;;		_main
  4109 ;; This function uses a non-reentrant model
  4110 ;;
  4111                           
  4112                           
  4113                           ;psect for function _cw_bat_init
  4114  06DA                     _cw_bat_init:	
  4115                           
  4116                           ;CW201x.c: 579: unsigned char ret;
  4117                           ;CW201x.c: 580: unsigned char loop = 0;
  4118                           
  4119                           ;incstack = 0
  4120                           ; Regs used in _cw_bat_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4121  06DA  0140               	movlb	0	; select bank0
  4122  06DB  01C1               	clrf	cw_bat_init@loop
  4123  06DC                     l2497:	
  4124                           ;CW201x.c: 584: while((loop++ < 200) && (ret != 0))
  4125                           
  4126                           ;CW201x.c: 583: ret = cw_init();
  4127                           
  4128                           
  4129                           ;CW201x.c: 585: {
  4130                           ;CW201x.c: 586: ret = cw_init();
  4131  06DC  2022               	fcall	_cw_init
  4132  06DD  0140               	movlb	0	; select bank0
  4133  06DE  00C0               	movwf	??_cw_bat_init
  4134  06DF  0840               	movf	??_cw_bat_init,w
  4135  06E0  00C2               	movwf	cw_bat_init@ret
  4136  06E1  0841               	movf	cw_bat_init@loop,w
  4137  06E2  0AC1               	incf	cw_bat_init@loop,f
  4138  06E3  00C0               	movwf	??_cw_bat_init
  4139  06E4  30C8               	movlw	200
  4140  06E5  0240               	subwf	??_cw_bat_init,w
  4141  06E6  1803               	skipnc
  4142  06E7  2EEB               	goto	l2503
  4143  06E8  0842               	movf	cw_bat_init@ret,w
  4144  06E9  1D03               	btfss	3,2
  4145  06EA  2EDC               	goto	l2497
  4146  06EB                     l2503:	
  4147                           
  4148                           ;CW201x.c: 587: }
  4149                           ;CW201x.c: 589: cw_bat.usb_online = 0;
  4150  06EB  01E3               	clrf	_cw_bat
  4151                           
  4152                           ;CW201x.c: 590: cw_bat.capacity = 2;
  4153  06EC  3002               	movlw	2
  4154  06ED  00E4               	movwf	_cw_bat+1
  4155  06EE  3000               	movlw	0
  4156  06EF  00E5               	movwf	_cw_bat+2
  4157                           
  4158                           ;CW201x.c: 591: cw_bat.voltage = 0;
  4159  06F0  01E6               	clrf	_cw_bat+3
  4160  06F1  01E7               	clrf	_cw_bat+4
  4161                           
  4162                           ;CW201x.c: 595: cw_bat.alt = 0;
  4163  06F2  01E8               	clrf	_cw_bat+5
  4164                           
  4165                           ;CW201x.c: 597: return ret;
  4166  06F3  0842               	movf	cw_bat_init@ret,w
  4167  06F4  0008               	return
  4168  06F5                     __end_of_cw_bat_init:	
  4169                           
  4170                           	psect	text13
  4171  0022                     __ptext13:	
  4172 ;; *************** function _cw_init *****************
  4173 ;; Defined at:
  4174 ;;		line 139 in file "CW201x.c"
  4175 ;; Parameters:    Size  Location     Type
  4176 ;;		None
  4177 ;; Auto vars:     Size  Location     Type
  4178 ;;  ret             2   29[BANK0 ] unsigned int 
  4179 ;;  reg_val         1   31[BANK0 ] unsigned char 
  4180 ;;  i               1   28[BANK0 ] unsigned char 
  4181 ;; Return value:  Size  Location     Type
  4182 ;;                  1    wreg      unsigned char 
  4183 ;; Registers used:
  4184 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4185 ;; Tracked objects:
  4186 ;;		On entry : 0/0
  4187 ;;		On exit  : 0/0
  4188 ;;		Unchanged: 0/0
  4189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4190 ;;      Params:         0       0       0       0
  4191 ;;      Locals:         0       4       0       0
  4192 ;;      Temps:          0       2       0       0
  4193 ;;      Totals:         0       6       0       0
  4194 ;;Total ram usage:        6 bytes
  4195 ;; Hardware stack levels used:    1
  4196 ;; Hardware stack levels required when called:    8
  4197 ;; This function calls:
  4198 ;;		_CW_Delay10ms
  4199 ;;		_cw_read
  4200 ;;		_cw_update_config_info
  4201 ;;		_cw_write
  4202 ;; This function is called by:
  4203 ;;		_cw_por
  4204 ;;		_cw_bat_init
  4205 ;; This function uses a non-reentrant model
  4206 ;;
  4207                           
  4208                           
  4209                           ;psect for function _cw_init
  4210  0022                     _cw_init:	
  4211                           
  4212                           ;CW201x.c: 141: unsigned ret;
  4213                           ;CW201x.c: 142: unsigned char i;
  4214                           ;CW201x.c: 143: unsigned char reg_val = (0x0<<6);
  4215                           
  4216                           ;incstack = 0
  4217                           ; Regs used in _cw_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4218  0022  0140               	movlb	0	; select bank0
  4219  0023  01BF               	clrf	cw_init@reg_val
  4220                           
  4221                           ;CW201x.c: 144: const unsigned char cw_bat_config_info[64] = {
  4222                           ;CW201x.c: 145: 0x14,0xA6,0x70,0x6C,0x6C,0x67,0x64,
  4223                           ;CW201x.c: 146: 0x62,0x60,0x5C,0x59,0x4E,0x50,0x42,
  4224                           ;CW201x.c: 147: 0x2E,0x26,0x25,0x24,0x27,0x2E,0x41,
  4225                           ;CW201x.c: 148: 0x5A,0x6D,0x4C,0x39,0xD7,0x06,0x66,
  4226                           ;CW201x.c: 149: 0x00,0x01,0x05,0x34,0x61,0x76,0x79,
  4227                           ;CW201x.c: 150: 0x7D,0x42,0x1E,0xA4,0x00,0x27,0x5A,
  4228                           ;CW201x.c: 151: 0x52,0x87,0x8F,0x91,0x94,0x52,0x82,
  4229                           ;CW201x.c: 152: 0x8C,0x92,0x96,0x2B,0x59,0x6E,0xCB,
  4230                           ;CW201x.c: 153: 0x2F,0x7D,0x72,0xA5,0xB5,0xC1,0x94,
  4231  0024  303F               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4232  0025  00BA               	movwf	??_cw_init
  4233  0026  083A               	movf	??_cw_init,w
  4234  0027  00B0               	movwf	cw_write@w_pdata
  4235  0028  300A               	movlw	10
  4236  0029  252C               	fcall	_cw_write
  4237  002A  0140               	movlb	0	; select bank0
  4238  002B  0831               	movf	?_cw_write+1,w
  4239  002C  00BE               	movwf	cw_init@ret+1
  4240  002D  0830               	movf	?_cw_write,w
  4241  002E  00BD               	movwf	cw_init@ret
  4242                           
  4243                           ;CW201x.c: 159: if(ret)
  4244  002F  083D               	movf	cw_init@ret,w
  4245  0030  043E               	iorwf	cw_init@ret+1,w
  4246  0031  1903               	btfsc	3,2
  4247  0032  2835               	goto	l2051
  4248                           
  4249                           ;CW201x.c: 160: {
  4250                           ;CW201x.c: 161: return 1;
  4251  0033  3001               	movlw	1
  4252  0034  0008               	return
  4253  0035                     l2051:	
  4254                           
  4255                           ;CW201x.c: 162: }
  4256                           ;CW201x.c: 165: ret = cw_read(0x8, &reg_val);
  4257  0035  303F               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4258  0036  00BA               	movwf	??_cw_init
  4259  0037  083A               	movf	??_cw_init,w
  4260  0038  00B0               	movwf	cw_read@r_pdata
  4261  0039  3008               	movlw	8
  4262  003A  24F3               	fcall	_cw_read
  4263  003B  0140               	movlb	0	; select bank0
  4264  003C  0831               	movf	?_cw_read+1,w
  4265  003D  00BE               	movwf	cw_init@ret+1
  4266  003E  0830               	movf	?_cw_read,w
  4267  003F  00BD               	movwf	cw_init@ret
  4268                           
  4269                           ;CW201x.c: 166: if(ret)
  4270  0040  083D               	movf	cw_init@ret,w
  4271  0041  043E               	iorwf	cw_init@ret+1,w
  4272  0042  1903               	btfsc	3,2
  4273  0043  2846               	goto	l2059
  4274                           
  4275                           ;CW201x.c: 167: {
  4276                           ;CW201x.c: 168: return 1;
  4277  0044  3001               	movlw	1
  4278  0045  0008               	return
  4279  0046                     l2059:	
  4280                           
  4281                           ;CW201x.c: 169: }
  4282                           ;CW201x.c: 170: if((reg_val & 0xf8) != (0x0<<3))
  4283  0046  083F               	movf	cw_init@reg_val,w
  4284  0047  39F8               	andlw	248
  4285  0048  1903               	btfsc	3,2
  4286  0049  285F               	goto	l2071
  4287                           
  4288                           ;CW201x.c: 174: reg_val |= (0x0<<3);
  4289  004A  3007               	movlw	7
  4290  004B  00BA               	movwf	??_cw_init
  4291  004C  083A               	movf	??_cw_init,w
  4292  004D  05BF               	andwf	cw_init@reg_val,f
  4293                           
  4294                           ;CW201x.c: 175: ret = cw_write(0x8, &reg_val);
  4295  004E  303F               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4296  004F  00BA               	movwf	??_cw_init
  4297  0050  083A               	movf	??_cw_init,w
  4298  0051  00B0               	movwf	cw_write@w_pdata
  4299  0052  3008               	movlw	8
  4300  0053  252C               	fcall	_cw_write
  4301  0054  0140               	movlb	0	; select bank0
  4302  0055  0831               	movf	?_cw_write+1,w
  4303  0056  00BE               	movwf	cw_init@ret+1
  4304  0057  0830               	movf	?_cw_write,w
  4305  0058  00BD               	movwf	cw_init@ret
  4306                           
  4307                           ;CW201x.c: 176: if(ret)
  4308  0059  083D               	movf	cw_init@ret,w
  4309  005A  043E               	iorwf	cw_init@ret+1,w
  4310  005B  1903               	btfsc	3,2
  4311  005C  285F               	goto	l2071
  4312                           
  4313                           ;CW201x.c: 177: {
  4314                           ;CW201x.c: 178: return 1;
  4315  005D  3001               	movlw	1
  4316  005E  0008               	return
  4317  005F                     l2071:	
  4318                           
  4319                           ;CW201x.c: 179: }
  4320                           ;CW201x.c: 180: }
  4321                           ;CW201x.c: 183: ret = cw_read(0x8, &reg_val);
  4322  005F  303F               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4323  0060  00BA               	movwf	??_cw_init
  4324  0061  083A               	movf	??_cw_init,w
  4325  0062  00B0               	movwf	cw_read@r_pdata
  4326  0063  3008               	movlw	8
  4327  0064  24F3               	fcall	_cw_read
  4328  0065  0140               	movlb	0	; select bank0
  4329  0066  0831               	movf	?_cw_read+1,w
  4330  0067  00BE               	movwf	cw_init@ret+1
  4331  0068  0830               	movf	?_cw_read,w
  4332  0069  00BD               	movwf	cw_init@ret
  4333                           
  4334                           ;CW201x.c: 184: if(ret)
  4335  006A  083D               	movf	cw_init@ret,w
  4336  006B  043E               	iorwf	cw_init@ret+1,w
  4337  006C  1903               	btfsc	3,2
  4338  006D  2870               	goto	l277
  4339                           
  4340                           ;CW201x.c: 185: {
  4341                           ;CW201x.c: 186: return 1;
  4342  006E  3001               	movlw	1
  4343  006F  0008               	return
  4344  0070                     l277:	
  4345                           
  4346                           ;CW201x.c: 187: }
  4347                           ;CW201x.c: 188: if(!(reg_val & (0x1<<1)))
  4348  0070  18BF               	btfsc	cw_init@reg_val,1
  4349  0071  2880               	goto	l2087
  4350                           
  4351                           ;CW201x.c: 189: {
  4352                           ;CW201x.c: 191: ret = cw_update_config_info();
  4353  0072  21CC               	fcall	_cw_update_config_info
  4354  0073  0140               	movlb	0	; select bank0
  4355  0074  00BA               	movwf	??_cw_init
  4356  0075  01BB               	clrf	??_cw_init+1
  4357  0076  083A               	movf	??_cw_init,w
  4358  0077  00BD               	movwf	cw_init@ret
  4359  0078  083B               	movf	??_cw_init+1,w
  4360  0079  00BE               	movwf	cw_init@ret+1
  4361                           
  4362                           ;CW201x.c: 192: if(ret)
  4363  007A  083D               	movf	cw_init@ret,w
  4364  007B  043E               	iorwf	cw_init@ret+1,w
  4365  007C  1903               	btfsc	3,2
  4366  007D  28BC               	goto	l2119
  4367                           
  4368                           ;CW201x.c: 193: {
  4369                           ;CW201x.c: 194: return ret;
  4370  007E  083D               	movf	cw_init@ret,w
  4371  007F  0008               	return
  4372  0080                     l2087:	
  4373                           ;CW201x.c: 195: }
  4374                           ;CW201x.c: 196: }
  4375                           
  4376                           
  4377                           ;CW201x.c: 197: else
  4378                           ;CW201x.c: 198: {
  4379                           ;CW201x.c: 199: for(i = 0; i < 64; i++)
  4380  0080  01BC               	clrf	cw_init@i
  4381  0081  3040               	movlw	64
  4382  0082  023C               	subwf	cw_init@i,w
  4383  0083  1803               	btfsc	3,0
  4384  0084  28AA               	goto	l2109
  4385  0085                     l2093:	
  4386                           
  4387                           ;CW201x.c: 200: {
  4388                           ;CW201x.c: 201: ret = cw_read(0x10 +i, &reg_val);
  4389  0085  303F               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4390  0086  00BA               	movwf	??_cw_init
  4391  0087  083A               	movf	??_cw_init,w
  4392  0088  00B0               	movwf	cw_read@r_pdata
  4393  0089  083C               	movf	cw_init@i,w
  4394  008A  3E10               	addlw	16
  4395  008B  24F3               	fcall	_cw_read
  4396  008C  0140               	movlb	0	; select bank0
  4397  008D  0831               	movf	?_cw_read+1,w
  4398  008E  00BE               	movwf	cw_init@ret+1
  4399  008F  0830               	movf	?_cw_read,w
  4400  0090  00BD               	movwf	cw_init@ret
  4401                           
  4402                           ;CW201x.c: 202: if(ret)
  4403  0091  083D               	movf	cw_init@ret,w
  4404  0092  043E               	iorwf	cw_init@ret+1,w
  4405  0093  1903               	btfsc	3,2
  4406  0094  2897               	goto	l2101
  4407                           
  4408                           ;CW201x.c: 203: {
  4409                           ;CW201x.c: 204: return 1;
  4410  0095  3001               	movlw	1
  4411  0096  0008               	return
  4412  0097                     l2101:	
  4413                           
  4414                           ;CW201x.c: 205: }
  4415                           ;CW201x.c: 206: if(cw_bat_config_info[i] != reg_val)
  4416  0097  083C               	movf	cw_init@i,w
  4417  0098  3E73               	addlw	low (cw_init@cw_bat_config_info| (0+32768))
  4418  0099  0084               	movwf	4
  4419  009A  3084               	movlw	high (cw_init@cw_bat_config_info| (0+32768))
  4420  009B  1803               	skipnc
  4421  009C  3E01               	addlw	1
  4422  009D  0085               	movwf	5
  4423  009E  0800               	movf	0,w	;code access
  4424  009F  063F               	xorwf	cw_init@reg_val,w
  4425  00A0  1D03               	btfss	3,2
  4426  00A1  28AA               	goto	l2109
  4427                           
  4428                           ;CW201x.c: 207: {
  4429                           ;CW201x.c: 208: break;
  4430  00A2  3001               	movlw	1
  4431  00A3  00BA               	movwf	??_cw_init
  4432  00A4  083A               	movf	??_cw_init,w
  4433  00A5  07BC               	addwf	cw_init@i,f
  4434  00A6  3040               	movlw	64
  4435  00A7  023C               	subwf	cw_init@i,w
  4436  00A8  1C03               	skipc
  4437  00A9  2885               	goto	l2093
  4438  00AA                     l2109:	
  4439                           
  4440                           ;CW201x.c: 209: }
  4441                           ;CW201x.c: 210: }
  4442                           ;CW201x.c: 211: if(i != 64)
  4443  00AA  3040               	movlw	64
  4444  00AB  063C               	xorwf	cw_init@i,w
  4445  00AC  1903               	btfsc	3,2
  4446  00AD  28BC               	goto	l2119
  4447                           
  4448                           ;CW201x.c: 212: {
  4449                           ;CW201x.c: 214: ret = cw_update_config_info();
  4450  00AE  21CC               	fcall	_cw_update_config_info
  4451  00AF  0140               	movlb	0	; select bank0
  4452  00B0  00BA               	movwf	??_cw_init
  4453  00B1  01BB               	clrf	??_cw_init+1
  4454  00B2  083A               	movf	??_cw_init,w
  4455  00B3  00BD               	movwf	cw_init@ret
  4456  00B4  083B               	movf	??_cw_init+1,w
  4457  00B5  00BE               	movwf	cw_init@ret+1
  4458                           
  4459                           ;CW201x.c: 215: if(ret)
  4460  00B6  083D               	movf	cw_init@ret,w
  4461  00B7  043E               	iorwf	cw_init@ret+1,w
  4462  00B8  1903               	btfsc	3,2
  4463  00B9  28BC               	goto	l2119
  4464                           
  4465                           ;CW201x.c: 216: {
  4466                           ;CW201x.c: 217: return ret;
  4467  00BA  083D               	movf	cw_init@ret,w
  4468  00BB  0008               	return
  4469  00BC                     l2119:	
  4470                           
  4471                           ;CW201x.c: 218: }
  4472                           ;CW201x.c: 219: }
  4473                           ;CW201x.c: 220: }
  4474                           ;CW201x.c: 222: for (i = 0; i < 30; i++) {
  4475  00BC  01BC               	clrf	cw_init@i
  4476  00BD  301E               	movlw	30
  4477  00BE  023C               	subwf	cw_init@i,w
  4478  00BF  1803               	btfsc	3,0
  4479  00C0  28E4               	goto	l2145
  4480  00C1                     l2125:	
  4481                           
  4482                           ;CW201x.c: 223: CW_Delay10ms(10);
  4483  00C1  300A               	movlw	10
  4484  00C2  00A0               	movwf	CW_Delay10ms@c
  4485  00C3  3000               	movlw	0
  4486  00C4  00A1               	movwf	CW_Delay10ms@c+1
  4487  00C5  2614               	fcall	_CW_Delay10ms
  4488                           
  4489                           ;CW201x.c: 224: ret = cw_read(0x4, &reg_val);
  4490  00C6  303F               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4491  00C7  0140               	movlb	0	; select bank0
  4492  00C8  00BA               	movwf	??_cw_init
  4493  00C9  083A               	movf	??_cw_init,w
  4494  00CA  00B0               	movwf	cw_read@r_pdata
  4495  00CB  3004               	movlw	4
  4496  00CC  24F3               	fcall	_cw_read
  4497  00CD  0140               	movlb	0	; select bank0
  4498  00CE  0831               	movf	?_cw_read+1,w
  4499  00CF  00BE               	movwf	cw_init@ret+1
  4500  00D0  0830               	movf	?_cw_read,w
  4501  00D1  00BD               	movwf	cw_init@ret
  4502                           
  4503                           ;CW201x.c: 225: if (ret)
  4504  00D2  083D               	movf	cw_init@ret,w
  4505  00D3  043E               	iorwf	cw_init@ret+1,w
  4506  00D4  1903               	btfsc	3,2
  4507  00D5  28D8               	goto	l2137
  4508                           
  4509                           ;CW201x.c: 226: return 1;
  4510  00D6  3001               	movlw	1
  4511  00D7  0008               	return
  4512  00D8                     l2137:	
  4513                           
  4514                           ;CW201x.c: 227: else if (reg_val <= 100)
  4515  00D8  3065               	movlw	101
  4516  00D9  023F               	subwf	cw_init@reg_val,w
  4517  00DA  1C03               	btfss	3,0
  4518  00DB  28E4               	goto	l2145
  4519                           
  4520                           ;CW201x.c: 228: break;
  4521  00DC  3001               	movlw	1
  4522  00DD  00BA               	movwf	??_cw_init
  4523  00DE  083A               	movf	??_cw_init,w
  4524  00DF  07BC               	addwf	cw_init@i,f
  4525  00E0  301E               	movlw	30
  4526  00E1  023C               	subwf	cw_init@i,w
  4527  00E2  1C03               	skipc
  4528  00E3  28C1               	goto	l2125
  4529  00E4                     l2145:	
  4530                           
  4531                           ;CW201x.c: 229: }
  4532                           ;CW201x.c: 231: if (i >=30){
  4533  00E4  301E               	movlw	30
  4534  00E5  023C               	subwf	cw_init@i,w
  4535  00E6  1C03               	skipc
  4536  00E7  28F9               	goto	l2155
  4537                           
  4538                           ;CW201x.c: 232: reg_val = (0x3<<6);
  4539  00E8  30C0               	movlw	192
  4540  00E9  00BA               	movwf	??_cw_init
  4541  00EA  083A               	movf	??_cw_init,w
  4542  00EB  00BF               	movwf	cw_init@reg_val
  4543                           
  4544                           ;CW201x.c: 233: ret = cw_write(0xA, &reg_val);
  4545  00EC  303F               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4546  00ED  00BA               	movwf	??_cw_init
  4547  00EE  083A               	movf	??_cw_init,w
  4548  00EF  00B0               	movwf	cw_write@w_pdata
  4549  00F0  300A               	movlw	10
  4550  00F1  252C               	fcall	_cw_write
  4551  00F2  0140               	movlb	0	; select bank0
  4552  00F3  0831               	movf	?_cw_write+1,w
  4553  00F4  00BE               	movwf	cw_init@ret+1
  4554  00F5  0830               	movf	?_cw_write,w
  4555  00F6  00BD               	movwf	cw_init@ret
  4556                           
  4557                           ;CW201x.c: 235: return 4;
  4558  00F7  3004               	movlw	4
  4559  00F8  0008               	return
  4560  00F9                     l2155:	
  4561                           
  4562                           ;CW201x.c: 236: }
  4563                           ;CW201x.c: 237: return 0;
  4564  00F9  3000               	movlw	0
  4565  00FA  0008               	return
  4566  00FB                     __end_of_cw_init:	
  4567                           
  4568                           	psect	text14
  4569  01CC                     __ptext14:	
  4570 ;; *************** function _cw_update_config_info *****************
  4571 ;; Defined at:
  4572 ;;		line 53 in file "CW201x.c"
  4573 ;; Parameters:    Size  Location     Type
  4574 ;;		None
  4575 ;; Auto vars:     Size  Location     Type
  4576 ;;  ret             2   22[BANK0 ] int 
  4577 ;;  reg_val         1   25[BANK0 ] unsigned char 
  4578 ;;  i               1   24[BANK0 ] unsigned char 
  4579 ;;  reset_val       1   21[BANK0 ] unsigned char 
  4580 ;; Return value:  Size  Location     Type
  4581 ;;                  1    wreg      unsigned char 
  4582 ;; Registers used:
  4583 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4584 ;; Tracked objects:
  4585 ;;		On entry : 0/0
  4586 ;;		On exit  : 0/0
  4587 ;;		Unchanged: 0/0
  4588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4589 ;;      Params:         0       0       0       0
  4590 ;;      Locals:         0       5       0       0
  4591 ;;      Temps:          0       1       0       0
  4592 ;;      Totals:         0       6       0       0
  4593 ;;Total ram usage:        6 bytes
  4594 ;; Hardware stack levels used:    1
  4595 ;; Hardware stack levels required when called:    7
  4596 ;; This function calls:
  4597 ;;		_CW_Delay100us
  4598 ;;		_cw_read
  4599 ;;		_cw_write
  4600 ;; This function is called by:
  4601 ;;		_cw_init
  4602 ;; This function uses a non-reentrant model
  4603 ;;
  4604                           
  4605                           
  4606                           ;psect for function _cw_update_config_info
  4607  01CC                     _cw_update_config_info:	
  4608                           
  4609                           ;CW201x.c: 55: int ret = 0;
  4610                           
  4611                           ;incstack = 0
  4612                           ; Regs used in _cw_update_config_info: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4613  01CC  0140               	movlb	0	; select bank0
  4614  01CD  01B6               	clrf	cw_update_config_info@ret
  4615  01CE  01B7               	clrf	cw_update_config_info@ret+1
  4616                           
  4617                           ;CW201x.c: 56: unsigned char i;
  4618                           ;CW201x.c: 57: unsigned char reset_val;
  4619                           ;CW201x.c: 58: unsigned char reg_val;
  4620                           ;CW201x.c: 59: const unsigned char cw_bat_config_info[64] = {
  4621                           ;CW201x.c: 60: 0x14,0xA6,0x70,0x6C,0x6C,0x67,0x64,
  4622                           ;CW201x.c: 61: 0x62,0x60,0x5C,0x59,0x4E,0x50,0x42,
  4623                           ;CW201x.c: 62: 0x2E,0x26,0x25,0x24,0x27,0x2E,0x41,
  4624                           ;CW201x.c: 63: 0x5A,0x6D,0x4C,0x39,0xD7,0x06,0x66,
  4625                           ;CW201x.c: 64: 0x00,0x01,0x05,0x34,0x61,0x76,0x79,
  4626                           ;CW201x.c: 65: 0x7D,0x42,0x1E,0xA4,0x00,0x27,0x5A,
  4627                           ;CW201x.c: 66: 0x52,0x87,0x8F,0x91,0x94,0x52,0x82,
  4628  01CF  3039               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4629  01D0  00B4               	movwf	??_cw_update_config_info
  4630  01D1  0834               	movf	??_cw_update_config_info,w
  4631  01D2  00B0               	movwf	cw_read@r_pdata
  4632  01D3  300A               	movlw	10
  4633  01D4  24F3               	fcall	_cw_read
  4634  01D5  0140               	movlb	0	; select bank0
  4635  01D6  0831               	movf	?_cw_read+1,w
  4636  01D7  00B7               	movwf	cw_update_config_info@ret+1
  4637  01D8  0830               	movf	?_cw_read,w
  4638  01D9  00B6               	movwf	cw_update_config_info@ret
  4639                           
  4640                           ;CW201x.c: 74: if(ret)
  4641  01DA  0836               	movf	cw_update_config_info@ret,w
  4642  01DB  0437               	iorwf	cw_update_config_info@ret+1,w
  4643  01DC  1903               	btfsc	3,2
  4644  01DD  29E0               	goto	l1947
  4645                           
  4646                           ;CW201x.c: 75: {
  4647                           ;CW201x.c: 76: return 1;
  4648  01DE  3001               	movlw	1
  4649  01DF  0008               	return
  4650  01E0                     l1947:	
  4651                           
  4652                           ;CW201x.c: 77: }
  4653                           ;CW201x.c: 78: if((reg_val & (0x3<<6)) == (0x3<<6))
  4654  01E0  30C0               	movlw	192
  4655  01E1  0539               	andwf	cw_update_config_info@reg_val,w
  4656  01E2  00B4               	movwf	??_cw_update_config_info
  4657  01E3  30C0               	movlw	192
  4658  01E4  0634               	xorwf	??_cw_update_config_info,w
  4659  01E5  1D03               	btfss	3,2
  4660  01E6  29E9               	goto	l1953
  4661                           
  4662                           ;CW201x.c: 79: {
  4663                           ;CW201x.c: 80: return 2;
  4664  01E7  3002               	movlw	2
  4665  01E8  0008               	return
  4666  01E9                     l1953:	
  4667                           
  4668                           ;CW201x.c: 81: }
  4669                           ;CW201x.c: 83: for(i = 0; i < 64; i++)
  4670  01E9  01B8               	clrf	cw_update_config_info@i
  4671  01EA  3040               	movlw	64
  4672  01EB  0238               	subwf	cw_update_config_info@i,w
  4673  01EC  1803               	btfsc	3,0
  4674  01ED  2A13               	goto	l1973
  4675  01EE                     l1959:	
  4676                           
  4677                           ;CW201x.c: 84: {
  4678                           ;CW201x.c: 85: reg_val = cw_bat_config_info[i];
  4679  01EE  0838               	movf	cw_update_config_info@i,w
  4680  01EF  3EB3               	addlw	low (cw_update_config_info@cw_bat_config_info| (0+32768))
  4681  01F0  0084               	movwf	4
  4682  01F1  3084               	movlw	high (cw_update_config_info@cw_bat_config_info| (0+32768))
  4683  01F2  1803               	skipnc
  4684  01F3  3E01               	addlw	1
  4685  01F4  0085               	movwf	5
  4686  01F5  0800               	movf	0,w	;code access
  4687  01F6  00B4               	movwf	??_cw_update_config_info
  4688  01F7  0834               	movf	??_cw_update_config_info,w
  4689  01F8  00B9               	movwf	cw_update_config_info@reg_val
  4690                           
  4691                           ;CW201x.c: 86: ret = cw_write(0x10+i, &reg_val);
  4692  01F9  3039               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4693  01FA  00B4               	movwf	??_cw_update_config_info
  4694  01FB  0834               	movf	??_cw_update_config_info,w
  4695  01FC  00B0               	movwf	cw_write@w_pdata
  4696  01FD  0838               	movf	cw_update_config_info@i,w
  4697  01FE  3E10               	addlw	16
  4698  01FF  252C               	fcall	_cw_write
  4699  0200  0140               	movlb	0	; select bank0
  4700  0201  0831               	movf	?_cw_write+1,w
  4701  0202  00B7               	movwf	cw_update_config_info@ret+1
  4702  0203  0830               	movf	?_cw_write,w
  4703  0204  00B6               	movwf	cw_update_config_info@ret
  4704                           
  4705                           ;CW201x.c: 87: if(ret)
  4706  0205  0836               	movf	cw_update_config_info@ret,w
  4707  0206  0437               	iorwf	cw_update_config_info@ret+1,w
  4708  0207  1903               	btfsc	3,2
  4709  0208  2A0B               	goto	l1969
  4710                           
  4711                           ;CW201x.c: 88: {
  4712                           ;CW201x.c: 89: return 1;
  4713  0209  3001               	movlw	1
  4714  020A  0008               	return
  4715  020B                     l1969:	
  4716  020B  3001               	movlw	1
  4717  020C  00B4               	movwf	??_cw_update_config_info
  4718  020D  0834               	movf	??_cw_update_config_info,w
  4719  020E  07B8               	addwf	cw_update_config_info@i,f
  4720  020F  3040               	movlw	64
  4721  0210  0238               	subwf	cw_update_config_info@i,w
  4722  0211  1C03               	skipc
  4723  0212  29EE               	goto	l1959
  4724  0213                     l1973:	
  4725                           
  4726                           ;CW201x.c: 90: }
  4727                           ;CW201x.c: 91: }
  4728                           ;CW201x.c: 94: for(i = 0; i < 64; i++)
  4729  0213  01B8               	clrf	cw_update_config_info@i
  4730  0214  3040               	movlw	64
  4731  0215  0238               	subwf	cw_update_config_info@i,w
  4732  0216  1803               	btfsc	3,0
  4733  0217  2A3F               	goto	l1997
  4734  0218                     l1979:	
  4735                           
  4736                           ;CW201x.c: 95: {
  4737                           ;CW201x.c: 96: ret = cw_read(0x10+i, &reg_val);
  4738  0218  3039               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4739  0219  00B4               	movwf	??_cw_update_config_info
  4740  021A  0834               	movf	??_cw_update_config_info,w
  4741  021B  00B0               	movwf	cw_read@r_pdata
  4742  021C  0838               	movf	cw_update_config_info@i,w
  4743  021D  3E10               	addlw	16
  4744  021E  24F3               	fcall	_cw_read
  4745  021F  0140               	movlb	0	; select bank0
  4746  0220  0831               	movf	?_cw_read+1,w
  4747  0221  00B7               	movwf	cw_update_config_info@ret+1
  4748  0222  0830               	movf	?_cw_read,w
  4749  0223  00B6               	movwf	cw_update_config_info@ret
  4750                           
  4751                           ;CW201x.c: 97: if(ret)
  4752  0224  0836               	movf	cw_update_config_info@ret,w
  4753  0225  0437               	iorwf	cw_update_config_info@ret+1,w
  4754  0226  1903               	btfsc	3,2
  4755  0227  2A2A               	goto	l1987
  4756                           
  4757                           ;CW201x.c: 98: {
  4758                           ;CW201x.c: 99: return 1;
  4759  0228  3001               	movlw	1
  4760  0229  0008               	return
  4761  022A                     l1987:	
  4762                           
  4763                           ;CW201x.c: 100: }
  4764                           ;CW201x.c: 101: if(reg_val != cw_bat_config_info[i])
  4765  022A  0838               	movf	cw_update_config_info@i,w
  4766  022B  3EB3               	addlw	low (cw_update_config_info@cw_bat_config_info| (0+32768))
  4767  022C  0084               	movwf	4
  4768  022D  3084               	movlw	high (cw_update_config_info@cw_bat_config_info| (0+32768))
  4769  022E  1803               	skipnc
  4770  022F  3E01               	addlw	1
  4771  0230  0085               	movwf	5
  4772  0231  0800               	movf	0,w	;code access
  4773  0232  0639               	xorwf	cw_update_config_info@reg_val,w
  4774  0233  1903               	skipnz
  4775  0234  2A37               	goto	l1993
  4776                           
  4777                           ;CW201x.c: 102: {
  4778                           ;CW201x.c: 103: return 3;
  4779  0235  3003               	movlw	3
  4780  0236  0008               	return
  4781  0237                     l1993:	
  4782  0237  3001               	movlw	1
  4783  0238  00B4               	movwf	??_cw_update_config_info
  4784  0239  0834               	movf	??_cw_update_config_info,w
  4785  023A  07B8               	addwf	cw_update_config_info@i,f
  4786  023B  3040               	movlw	64
  4787  023C  0238               	subwf	cw_update_config_info@i,w
  4788  023D  1C03               	skipc
  4789  023E  2A18               	goto	l1979
  4790  023F                     l1997:	
  4791                           
  4792                           ;CW201x.c: 104: }
  4793                           ;CW201x.c: 105: }
  4794                           ;CW201x.c: 107: ret = cw_read(0x8, &reg_val);
  4795  023F  3039               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4796  0240  00B4               	movwf	??_cw_update_config_info
  4797  0241  0834               	movf	??_cw_update_config_info,w
  4798  0242  00B0               	movwf	cw_read@r_pdata
  4799  0243  3008               	movlw	8
  4800  0244  24F3               	fcall	_cw_read
  4801  0245  0140               	movlb	0	; select bank0
  4802  0246  0831               	movf	?_cw_read+1,w
  4803  0247  00B7               	movwf	cw_update_config_info@ret+1
  4804  0248  0830               	movf	?_cw_read,w
  4805  0249  00B6               	movwf	cw_update_config_info@ret
  4806                           
  4807                           ;CW201x.c: 108: if(ret)
  4808  024A  0836               	movf	cw_update_config_info@ret,w
  4809  024B  0437               	iorwf	cw_update_config_info@ret+1,w
  4810  024C  1903               	btfsc	3,2
  4811  024D  2A50               	goto	l264
  4812                           
  4813                           ;CW201x.c: 109: {
  4814                           ;CW201x.c: 110: return 1;
  4815  024E  3001               	movlw	1
  4816  024F  0008               	return
  4817  0250                     l264:	
  4818                           
  4819                           ;CW201x.c: 111: }
  4820                           ;CW201x.c: 112: reg_val |= (0x1<<1);
  4821  0250  14B9               	bsf	cw_update_config_info@reg_val,1
  4822                           
  4823                           ;CW201x.c: 114: reg_val |= (0x0<<3);
  4824  0251  3007               	movlw	7
  4825  0252  00B4               	movwf	??_cw_update_config_info
  4826  0253  0834               	movf	??_cw_update_config_info,w
  4827  0254  05B9               	andwf	cw_update_config_info@reg_val,f
  4828                           
  4829                           ;CW201x.c: 115: ret = cw_write(0x8, &reg_val);
  4830  0255  3039               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4831  0256  00B4               	movwf	??_cw_update_config_info
  4832  0257  0834               	movf	??_cw_update_config_info,w
  4833  0258  00B0               	movwf	cw_write@w_pdata
  4834  0259  3008               	movlw	8
  4835  025A  252C               	fcall	_cw_write
  4836  025B  0140               	movlb	0	; select bank0
  4837  025C  0831               	movf	?_cw_write+1,w
  4838  025D  00B7               	movwf	cw_update_config_info@ret+1
  4839  025E  0830               	movf	?_cw_write,w
  4840  025F  00B6               	movwf	cw_update_config_info@ret
  4841                           
  4842                           ;CW201x.c: 116: if(ret)
  4843  0260  0836               	movf	cw_update_config_info@ret,w
  4844  0261  0437               	iorwf	cw_update_config_info@ret+1,w
  4845  0262  1903               	btfsc	3,2
  4846  0263  2A66               	goto	l2015
  4847                           
  4848                           ;CW201x.c: 117: {
  4849                           ;CW201x.c: 118: return 1;
  4850  0264  3001               	movlw	1
  4851  0265  0008               	return
  4852  0266                     l2015:	
  4853                           
  4854                           ;CW201x.c: 119: }
  4855                           ;CW201x.c: 121: reset_val = (0x0<<6);
  4856  0266  01B5               	clrf	cw_update_config_info@reset_val
  4857                           
  4858                           ;CW201x.c: 122: reg_val = (0xf<<0);
  4859  0267  300F               	movlw	15
  4860  0268  00B4               	movwf	??_cw_update_config_info
  4861  0269  0834               	movf	??_cw_update_config_info,w
  4862  026A  00B9               	movwf	cw_update_config_info@reg_val
  4863                           
  4864                           ;CW201x.c: 123: ret = cw_write(0xA, &reg_val);
  4865  026B  3039               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4866  026C  00B4               	movwf	??_cw_update_config_info
  4867  026D  0834               	movf	??_cw_update_config_info,w
  4868  026E  00B0               	movwf	cw_write@w_pdata
  4869  026F  300A               	movlw	10
  4870  0270  252C               	fcall	_cw_write
  4871  0271  0140               	movlb	0	; select bank0
  4872  0272  0831               	movf	?_cw_write+1,w
  4873  0273  00B7               	movwf	cw_update_config_info@ret+1
  4874  0274  0830               	movf	?_cw_write,w
  4875  0275  00B6               	movwf	cw_update_config_info@ret
  4876                           
  4877                           ;CW201x.c: 124: if(ret)
  4878  0276  0836               	movf	cw_update_config_info@ret,w
  4879  0277  0437               	iorwf	cw_update_config_info@ret+1,w
  4880  0278  1903               	btfsc	3,2
  4881  0279  2A7C               	goto	l2027
  4882                           
  4883                           ;CW201x.c: 125: {
  4884                           ;CW201x.c: 126: return 1;
  4885  027A  3001               	movlw	1
  4886  027B  0008               	return
  4887  027C                     l2027:	
  4888                           
  4889                           ;CW201x.c: 127: }
  4890                           ;CW201x.c: 128: CW_Delay100us();
  4891  027C  2678               	fcall	_CW_Delay100us
  4892                           
  4893                           ;CW201x.c: 129: ret = cw_write(0xA, &reset_val);
  4894  027D  3035               	movlw	(low (cw_update_config_info@reset_val| 0))& (0+255)
  4895  027E  0140               	movlb	0	; select bank0
  4896  027F  00B4               	movwf	??_cw_update_config_info
  4897  0280  0834               	movf	??_cw_update_config_info,w
  4898  0281  00B0               	movwf	cw_write@w_pdata
  4899  0282  300A               	movlw	10
  4900  0283  252C               	fcall	_cw_write
  4901  0284  0140               	movlb	0	; select bank0
  4902  0285  0831               	movf	?_cw_write+1,w
  4903  0286  00B7               	movwf	cw_update_config_info@ret+1
  4904  0287  0830               	movf	?_cw_write,w
  4905  0288  00B6               	movwf	cw_update_config_info@ret
  4906                           
  4907                           ;CW201x.c: 130: if(ret)
  4908  0289  0836               	movf	cw_update_config_info@ret,w
  4909  028A  0437               	iorwf	cw_update_config_info@ret+1,w
  4910  028B  1903               	btfsc	3,2
  4911  028C  2A8F               	goto	l2037
  4912                           
  4913                           ;CW201x.c: 131: {
  4914                           ;CW201x.c: 132: return 1;
  4915  028D  3001               	movlw	1
  4916  028E  0008               	return
  4917  028F                     l2037:	
  4918                           
  4919                           ;CW201x.c: 133: }
  4920                           ;CW201x.c: 134: return 0;
  4921  028F  3000               	movlw	0
  4922  0290  0008               	return
  4923  0291                     __end_of_cw_update_config_info:	
  4924                           
  4925                           	psect	text15
  4926  052C                     __ptext15:	
  4927 ;; *************** function _cw_write *****************
  4928 ;; Defined at:
  4929 ;;		line 222 in file "iic.c"
  4930 ;; Parameters:    Size  Location     Type
  4931 ;;  point_reg       1    wreg     unsigned char 
  4932 ;;  w_pdata         1   16[BANK0 ] PTR unsigned char 
  4933 ;;		 -> cw_por@reset_val(1), cw_init@reg_val(1), cw_update_config_info@reset_val(1), cw_update_config_info@reg_val(1), 
  4934 ;; Auto vars:     Size  Location     Type
  4935 ;;  point_reg       1   19[BANK0 ] unsigned char 
  4936 ;; Return value:  Size  Location     Type
  4937 ;;                  2   16[BANK0 ] int 
  4938 ;; Registers used:
  4939 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4940 ;; Tracked objects:
  4941 ;;		On entry : 0/0
  4942 ;;		On exit  : 0/0
  4943 ;;		Unchanged: 0/0
  4944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4945 ;;      Params:         0       3       0       0
  4946 ;;      Locals:         0       1       0       0
  4947 ;;      Temps:          0       0       0       0
  4948 ;;      Totals:         0       4       0       0
  4949 ;;Total ram usage:        4 bytes
  4950 ;; Hardware stack levels used:    1
  4951 ;; Hardware stack levels required when called:    6
  4952 ;; This function calls:
  4953 ;;		_start
  4954 ;;		_stop
  4955 ;;		_wait_r_ack
  4956 ;;		_write_byte
  4957 ;; This function is called by:
  4958 ;;		_cw_update_config_info
  4959 ;;		_cw_init
  4960 ;;		_cw_por
  4961 ;; This function uses a non-reentrant model
  4962 ;;
  4963                           
  4964                           
  4965                           ;psect for function _cw_write
  4966  052C                     _cw_write:	
  4967                           
  4968                           ;incstack = 0
  4969                           ; Regs used in _cw_write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4970                           ;cw_write@point_reg stored from wreg
  4971  052C  0140               	movlb	0	; select bank0
  4972  052D  00B3               	movwf	cw_write@point_reg
  4973                           
  4974                           ;iic.c: 224: start();
  4975  052E  2758               	fcall	_start
  4976                           
  4977                           ;iic.c: 225: write_byte(0xc4);
  4978  052F  30C4               	movlw	196
  4979  0530  26BA               	fcall	_write_byte
  4980                           
  4981                           ;iic.c: 226: if(wait_r_ack())
  4982  0531  255E               	fcall	_wait_r_ack
  4983  0532  0140               	movlb	0	; select bank0
  4984  0533  082A               	movf	?_wait_r_ack,w
  4985  0534  042B               	iorwf	?_wait_r_ack+1,w
  4986  0535  1903               	btfsc	3,2
  4987  0536  2D3C               	goto	l1893
  4988                           
  4989                           ;iic.c: 227: {
  4990                           ;iic.c: 228: return 1;
  4991  0537  3001               	movlw	1
  4992  0538  00B0               	movwf	?_cw_write
  4993  0539  3000               	movlw	0
  4994  053A  00B1               	movwf	?_cw_write+1
  4995  053B  0008               	return
  4996  053C                     l1893:	
  4997                           
  4998                           ;iic.c: 229: }
  4999                           ;iic.c: 230: write_byte(point_reg);
  5000  053C  0833               	movf	cw_write@point_reg,w
  5001  053D  26BA               	fcall	_write_byte
  5002                           
  5003                           ;iic.c: 231: if(wait_r_ack())
  5004  053E  255E               	fcall	_wait_r_ack
  5005  053F  0140               	movlb	0	; select bank0
  5006  0540  082A               	movf	?_wait_r_ack,w
  5007  0541  042B               	iorwf	?_wait_r_ack+1,w
  5008  0542  1903               	btfsc	3,2
  5009  0543  2D49               	goto	l1899
  5010                           
  5011                           ;iic.c: 232: {
  5012                           ;iic.c: 233: return 1;
  5013  0544  3001               	movlw	1
  5014  0545  00B0               	movwf	?_cw_write
  5015  0546  3000               	movlw	0
  5016  0547  00B1               	movwf	?_cw_write+1
  5017  0548  0008               	return
  5018  0549                     l1899:	
  5019                           
  5020                           ;iic.c: 234: }
  5021                           ;iic.c: 235: write_byte(*w_pdata);
  5022  0549  0830               	movf	cw_write@w_pdata,w
  5023  054A  0086               	movwf	6
  5024  054B  0187               	clrf	7
  5025  054C  0801               	movf	1,w
  5026  054D  26BA               	fcall	_write_byte
  5027                           
  5028                           ;iic.c: 236: if(wait_r_ack())
  5029  054E  255E               	fcall	_wait_r_ack
  5030  054F  0140               	movlb	0	; select bank0
  5031  0550  082A               	movf	?_wait_r_ack,w
  5032  0551  042B               	iorwf	?_wait_r_ack+1,w
  5033  0552  1903               	btfsc	3,2
  5034  0553  2D59               	goto	l1907
  5035                           
  5036                           ;iic.c: 237: {
  5037                           ;iic.c: 238: return 1;
  5038  0554  3001               	movlw	1
  5039  0555  00B0               	movwf	?_cw_write
  5040  0556  3000               	movlw	0
  5041  0557  00B1               	movwf	?_cw_write+1
  5042  0558  0008               	return
  5043  0559                     l1907:	
  5044                           
  5045                           ;iic.c: 239: }
  5046                           ;iic.c: 240: stop();
  5047  0559  2740               	fcall	_stop
  5048                           
  5049                           ;iic.c: 241: return 0;
  5050  055A  0140               	movlb	0	; select bank0
  5051  055B  01B0               	clrf	?_cw_write
  5052  055C  01B1               	clrf	?_cw_write+1
  5053  055D  0008               	return
  5054  055E                     __end_of_cw_write:	
  5055                           
  5056                           	psect	text16
  5057  04F3                     __ptext16:	
  5058 ;; *************** function _cw_read *****************
  5059 ;; Defined at:
  5060 ;;		line 164 in file "iic.c"
  5061 ;; Parameters:    Size  Location     Type
  5062 ;;  point_reg       1    wreg     unsigned char 
  5063 ;;  r_pdata         1   16[BANK0 ] PTR unsigned char 
  5064 ;;		 -> cw_get_capacity@reg_val(1), cw_init@reg_val(1), cw_update_config_info@reg_val(1), 
  5065 ;; Auto vars:     Size  Location     Type
  5066 ;;  point_reg       1   19[BANK0 ] unsigned char 
  5067 ;; Return value:  Size  Location     Type
  5068 ;;                  2   16[BANK0 ] int 
  5069 ;; Registers used:
  5070 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5071 ;; Tracked objects:
  5072 ;;		On entry : 0/0
  5073 ;;		On exit  : 0/0
  5074 ;;		Unchanged: 0/0
  5075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5076 ;;      Params:         0       2       0       0
  5077 ;;      Locals:         0       1       0       0
  5078 ;;      Temps:          0       1       0       0
  5079 ;;      Totals:         0       4       0       0
  5080 ;;Total ram usage:        4 bytes
  5081 ;; Hardware stack levels used:    1
  5082 ;; Hardware stack levels required when called:    6
  5083 ;; This function calls:
  5084 ;;		_read_byte
  5085 ;;		_s_ack
  5086 ;;		_start
  5087 ;;		_stop
  5088 ;;		_wait_r_ack
  5089 ;;		_write_byte
  5090 ;; This function is called by:
  5091 ;;		_cw_update_config_info
  5092 ;;		_cw_init
  5093 ;;		_cw_get_capacity
  5094 ;; This function uses a non-reentrant model
  5095 ;;
  5096                           
  5097                           
  5098                           ;psect for function _cw_read
  5099  04F3                     _cw_read:	
  5100                           
  5101                           ;incstack = 0
  5102                           ; Regs used in _cw_read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5103                           ;cw_read@point_reg stored from wreg
  5104  04F3  0140               	movlb	0	; select bank0
  5105  04F4  00B3               	movwf	cw_read@point_reg
  5106                           
  5107                           ;iic.c: 166: start();
  5108  04F5  2758               	fcall	_start
  5109                           
  5110                           ;iic.c: 167: write_byte(0xc4);
  5111  04F6  30C4               	movlw	196
  5112  04F7  26BA               	fcall	_write_byte
  5113                           
  5114                           ;iic.c: 168: if(wait_r_ack())
  5115  04F8  255E               	fcall	_wait_r_ack
  5116  04F9  0140               	movlb	0	; select bank0
  5117  04FA  082A               	movf	?_wait_r_ack,w
  5118  04FB  042B               	iorwf	?_wait_r_ack+1,w
  5119  04FC  1903               	btfsc	3,2
  5120  04FD  2D03               	goto	l1865
  5121                           
  5122                           ;iic.c: 169: {
  5123                           ;iic.c: 170: return 1;
  5124  04FE  3001               	movlw	1
  5125  04FF  00B0               	movwf	?_cw_read
  5126  0500  3000               	movlw	0
  5127  0501  00B1               	movwf	?_cw_read+1
  5128  0502  0008               	return
  5129  0503                     l1865:	
  5130                           
  5131                           ;iic.c: 171: }
  5132                           ;iic.c: 172: write_byte(point_reg);
  5133  0503  0833               	movf	cw_read@point_reg,w
  5134  0504  26BA               	fcall	_write_byte
  5135                           
  5136                           ;iic.c: 173: if(wait_r_ack())
  5137  0505  255E               	fcall	_wait_r_ack
  5138  0506  0140               	movlb	0	; select bank0
  5139  0507  082A               	movf	?_wait_r_ack,w
  5140  0508  042B               	iorwf	?_wait_r_ack+1,w
  5141  0509  1903               	btfsc	3,2
  5142  050A  2D10               	goto	l1871
  5143                           
  5144                           ;iic.c: 174: {
  5145                           ;iic.c: 175: return 1;
  5146  050B  3001               	movlw	1
  5147  050C  00B0               	movwf	?_cw_read
  5148  050D  3000               	movlw	0
  5149  050E  00B1               	movwf	?_cw_read+1
  5150  050F  0008               	return
  5151  0510                     l1871:	
  5152                           
  5153                           ;iic.c: 176: }
  5154                           ;iic.c: 177: start();
  5155  0510  2758               	fcall	_start
  5156                           
  5157                           ;iic.c: 178: write_byte(0xc5);
  5158  0511  30C5               	movlw	197
  5159  0512  26BA               	fcall	_write_byte
  5160                           
  5161                           ;iic.c: 179: if(wait_r_ack())
  5162  0513  255E               	fcall	_wait_r_ack
  5163  0514  0140               	movlb	0	; select bank0
  5164  0515  082A               	movf	?_wait_r_ack,w
  5165  0516  042B               	iorwf	?_wait_r_ack+1,w
  5166  0517  1903               	btfsc	3,2
  5167  0518  2D1E               	goto	l1877
  5168                           
  5169                           ;iic.c: 180: {
  5170                           ;iic.c: 181: return 1;
  5171  0519  3001               	movlw	1
  5172  051A  00B0               	movwf	?_cw_read
  5173  051B  3000               	movlw	0
  5174  051C  00B1               	movwf	?_cw_read+1
  5175  051D  0008               	return
  5176  051E                     l1877:	
  5177                           
  5178                           ;iic.c: 182: }
  5179                           ;iic.c: 183: *r_pdata = read_byte();
  5180  051E  25F0               	fcall	_read_byte
  5181  051F  0140               	movlb	0	; select bank0
  5182  0520  00B2               	movwf	??_cw_read
  5183  0521  0830               	movf	cw_read@r_pdata,w
  5184  0522  0086               	movwf	6
  5185  0523  0187               	clrf	7
  5186  0524  0832               	movf	??_cw_read,w
  5187  0525  0081               	movwf	1
  5188                           
  5189                           ;iic.c: 184: s_ack();
  5190  0526  2763               	fcall	_s_ack
  5191                           
  5192                           ;iic.c: 185: stop();
  5193  0527  2740               	fcall	_stop
  5194                           
  5195                           ;iic.c: 186: return 0;
  5196  0528  0140               	movlb	0	; select bank0
  5197  0529  01B0               	clrf	?_cw_read
  5198  052A  01B1               	clrf	?_cw_read+1
  5199  052B  0008               	return
  5200  052C                     __end_of_cw_read:	
  5201                           
  5202                           	psect	text17
  5203  06BA                     __ptext17:	
  5204 ;; *************** function _write_byte *****************
  5205 ;; Defined at:
  5206 ;;		line 126 in file "iic.c"
  5207 ;; Parameters:    Size  Location     Type
  5208 ;;  w_data          1    wreg     unsigned char 
  5209 ;; Auto vars:     Size  Location     Type
  5210 ;;  w_data          1    5[BANK0 ] unsigned char 
  5211 ;;  i               1    6[BANK0 ] unsigned char 
  5212 ;; Return value:  Size  Location     Type
  5213 ;;                  1    wreg      void 
  5214 ;; Registers used:
  5215 ;;		wreg, status,2, status,0, pclath, cstack
  5216 ;; Tracked objects:
  5217 ;;		On entry : 0/0
  5218 ;;		On exit  : 0/0
  5219 ;;		Unchanged: 0/0
  5220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5221 ;;      Params:         0       0       0       0
  5222 ;;      Locals:         0       2       0       0
  5223 ;;      Temps:          0       1       0       0
  5224 ;;      Totals:         0       3       0       0
  5225 ;;Total ram usage:        3 bytes
  5226 ;; Hardware stack levels used:    1
  5227 ;; Hardware stack levels required when called:    4
  5228 ;; This function calls:
  5229 ;;		_Delay10us
  5230 ;; This function is called by:
  5231 ;;		_cw_read
  5232 ;;		_cw_read_word
  5233 ;;		_cw_write
  5234 ;; This function uses a non-reentrant model
  5235 ;;
  5236                           
  5237                           
  5238                           ;psect for function _write_byte
  5239  06BA                     _write_byte:	
  5240                           
  5241                           ;incstack = 0
  5242                           ; Regs used in _write_byte: [wreg+status,2+status,0+pclath+cstack]
  5243                           ;write_byte@w_data stored from wreg
  5244  06BA  0140               	movlb	0	; select bank0
  5245  06BB  00A5               	movwf	write_byte@w_data
  5246                           
  5247                           ;iic.c: 128: unsigned char i;
  5248                           ;iic.c: 129: do { TRISCbits.TRISC1 = 0; } while(0);
  5249  06BC  1094               	bcf	20,1	;volatile
  5250                           
  5251                           ;iic.c: 130: for(i = 0; i < 8; i++)
  5252  06BD  01A6               	clrf	write_byte@i
  5253  06BE                     L4:	
  5254  06BE  3008               	movlw	8
  5255  06BF  0226               	subwf	write_byte@i,w
  5256  06C0  1803               	btfsc	3,0
  5257  06C1  0008               	return
  5258                           
  5259                           ;iic.c: 131: {
  5260                           ;iic.c: 132: LATCbits.LATC1 = (w_data & 0x80)?1:0;
  5261  06C2  1FA5               	btfss	write_byte@w_data,7
  5262  06C3  2EC7               	goto	u1410
  5263  06C4  0140               	movlb	0	; select bank0
  5264  06C5  149A               	bsf	26,1	;volatile
  5265  06C6  2EC9               	goto	l1795
  5266  06C7                     u1410:	
  5267  06C7  0140               	movlb	0	; select bank0
  5268  06C8  109A               	bcf	26,1	;volatile
  5269  06C9                     l1795:	
  5270                           
  5271                           ;iic.c: 133: Delay10us();
  5272  06C9  2657               	fcall	_Delay10us
  5273                           
  5274                           ;iic.c: 134: do { LATCbits.LATC0 = 1; } while(0);
  5275  06CA  0140               	movlb	0	; select bank0
  5276  06CB  141A               	bsf	26,0	;volatile
  5277                           
  5278                           ;iic.c: 135: Delay10us();
  5279  06CC  2657               	fcall	_Delay10us
  5280                           
  5281                           ;iic.c: 136: do { LATCbits.LATC0 = 0; } while(0);
  5282  06CD  0140               	movlb	0	; select bank0
  5283  06CE  101A               	bcf	26,0	;volatile
  5284                           
  5285                           ;iic.c: 137: Delay10us();
  5286  06CF  2657               	fcall	_Delay10us
  5287                           
  5288                           ;iic.c: 138: w_data = w_data << 1;
  5289  06D0  0140               	movlb	0	; select bank0
  5290  06D1  3525               	lslf	write_byte@w_data,w
  5291  06D2  00A4               	movwf	??_write_byte
  5292  06D3  0824               	movf	??_write_byte,w
  5293  06D4  00A5               	movwf	write_byte@w_data
  5294  06D5  3001               	movlw	1
  5295  06D6  00A4               	movwf	??_write_byte
  5296  06D7  0824               	movf	??_write_byte,w
  5297  06D8  07A6               	addwf	write_byte@i,f
  5298  06D9  2EBE               	goto	L4
  5299  06DA                     __end_of_write_byte:	
  5300                           
  5301                           	psect	text18
  5302  055E                     __ptext18:	
  5303 ;; *************** function _wait_r_ack *****************
  5304 ;; Defined at:
  5305 ;;		line 80 in file "iic.c"
  5306 ;; Parameters:    Size  Location     Type
  5307 ;;		None
  5308 ;; Auto vars:     Size  Location     Type
  5309 ;;  i               2   14[BANK0 ] unsigned int 
  5310 ;;  ack             2   12[BANK0 ] int 
  5311 ;; Return value:  Size  Location     Type
  5312 ;;                  2   10[BANK0 ] int 
  5313 ;; Registers used:
  5314 ;;		wreg, status,2, status,0, pclath, cstack
  5315 ;; Tracked objects:
  5316 ;;		On entry : 0/0
  5317 ;;		On exit  : 0/0
  5318 ;;		Unchanged: 0/0
  5319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5320 ;;      Params:         0       2       0       0
  5321 ;;      Locals:         0       4       0       0
  5322 ;;      Temps:          0       0       0       0
  5323 ;;      Totals:         0       6       0       0
  5324 ;;Total ram usage:        6 bytes
  5325 ;; Hardware stack levels used:    1
  5326 ;; Hardware stack levels required when called:    5
  5327 ;; This function calls:
  5328 ;;		_r_ack
  5329 ;;		_stop
  5330 ;; This function is called by:
  5331 ;;		_cw_read
  5332 ;;		_cw_read_word
  5333 ;;		_cw_write
  5334 ;; This function uses a non-reentrant model
  5335 ;;
  5336                           
  5337                           
  5338                           ;psect for function _wait_r_ack
  5339  055E                     _wait_r_ack:	
  5340                           
  5341                           ;iic.c: 82: int ack;
  5342                           ;iic.c: 83: unsigned int i;
  5343                           ;iic.c: 84: ack = 1;
  5344                           
  5345                           ;incstack = 0
  5346                           ; Regs used in _wait_r_ack: [wreg+status,2+status,0+pclath+cstack]
  5347  055E  3001               	movlw	1
  5348  055F  0140               	movlb	0	; select bank0
  5349  0560  00AC               	movwf	wait_r_ack@ack
  5350  0561  3000               	movlw	0
  5351  0562  00AD               	movwf	wait_r_ack@ack+1
  5352                           
  5353                           ;iic.c: 85: for(i = 0; i < 100; i++)
  5354  0563  01AE               	clrf	wait_r_ack@i
  5355  0564  01AF               	clrf	wait_r_ack@i+1
  5356  0565  3000               	movlw	0
  5357  0566  022F               	subwf	wait_r_ack@i+1,w
  5358  0567  3064               	movlw	100
  5359  0568  1903               	skipnz
  5360  0569  022E               	subwf	wait_r_ack@i,w
  5361  056A  1803               	btfsc	3,0
  5362  056B  2D8D               	goto	l1779
  5363  056C                     l1763:	
  5364                           
  5365                           ;iic.c: 86: {
  5366                           ;iic.c: 87: ack = r_ack();
  5367  056C  270C               	fcall	_r_ack
  5368  056D  0140               	movlb	0	; select bank0
  5369  056E  0825               	movf	?_r_ack+1,w
  5370  056F  00AD               	movwf	wait_r_ack@ack+1
  5371  0570  0824               	movf	?_r_ack,w
  5372  0571  00AC               	movwf	wait_r_ack@ack
  5373                           
  5374                           ;iic.c: 88: if(!ack)
  5375  0572  082C               	movf	wait_r_ack@ack,w
  5376  0573  042D               	iorwf	wait_r_ack@ack+1,w
  5377  0574  1903               	btfsc	3,2
  5378  0575  2D8D               	goto	l1779
  5379                           
  5380                           ;iic.c: 91: }
  5381                           ;iic.c: 92: if(i == 99)
  5382                           
  5383                           ;iic.c: 89: {
  5384                           ;iic.c: 90: break;
  5385  0576  3063               	movlw	99
  5386  0577  062E               	xorwf	wait_r_ack@i,w
  5387  0578  042F               	iorwf	wait_r_ack@i+1,w
  5388  0579  1D03               	btfss	3,2
  5389  057A  2D82               	goto	l1777
  5390                           
  5391                           ;iic.c: 93: {
  5392                           ;iic.c: 94: stop();
  5393  057B  2740               	fcall	_stop
  5394                           
  5395                           ;iic.c: 95: return 1;
  5396  057C  3001               	movlw	1
  5397  057D  0140               	movlb	0	; select bank0
  5398  057E  00AA               	movwf	?_wait_r_ack
  5399  057F  3000               	movlw	0
  5400  0580  00AB               	movwf	?_wait_r_ack+1
  5401  0581  0008               	return
  5402  0582                     l1777:	
  5403  0582  3001               	movlw	1
  5404  0583  07AE               	addwf	wait_r_ack@i,f
  5405  0584  3000               	movlw	0
  5406  0585  3DAF               	addwfc	wait_r_ack@i+1,f
  5407  0586  3000               	movlw	0
  5408  0587  022F               	subwf	wait_r_ack@i+1,w
  5409  0588  3064               	movlw	100
  5410  0589  1903               	skipnz
  5411  058A  022E               	subwf	wait_r_ack@i,w
  5412  058B  1C03               	skipc
  5413  058C  2D6C               	goto	l1763
  5414  058D                     l1779:	
  5415                           
  5416                           ;iic.c: 96: }
  5417                           ;iic.c: 97: }
  5418                           ;iic.c: 98: return 0;
  5419  058D  01AA               	clrf	?_wait_r_ack
  5420  058E  01AB               	clrf	?_wait_r_ack+1
  5421  058F  0008               	return
  5422  0590                     __end_of_wait_r_ack:	
  5423                           
  5424                           	psect	text19
  5425  0740                     __ptext19:	
  5426 ;; *************** function _stop *****************
  5427 ;; Defined at:
  5428 ;;		line 54 in file "iic.c"
  5429 ;; Parameters:    Size  Location     Type
  5430 ;;		None
  5431 ;; Auto vars:     Size  Location     Type
  5432 ;;		None
  5433 ;; Return value:  Size  Location     Type
  5434 ;;                  1    wreg      void 
  5435 ;; Registers used:
  5436 ;;		wreg, status,2, status,0, pclath, cstack
  5437 ;; Tracked objects:
  5438 ;;		On entry : 0/0
  5439 ;;		On exit  : 0/0
  5440 ;;		Unchanged: 0/0
  5441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5442 ;;      Params:         0       0       0       0
  5443 ;;      Locals:         0       0       0       0
  5444 ;;      Temps:          0       0       0       0
  5445 ;;      Totals:         0       0       0       0
  5446 ;;Total ram usage:        0 bytes
  5447 ;; Hardware stack levels used:    1
  5448 ;; Hardware stack levels required when called:    4
  5449 ;; This function calls:
  5450 ;;		_Delay10us
  5451 ;; This function is called by:
  5452 ;;		_wait_r_ack
  5453 ;;		_cw_read
  5454 ;;		_cw_read_word
  5455 ;;		_cw_write
  5456 ;; This function uses a non-reentrant model
  5457 ;;
  5458                           
  5459                           
  5460                           ;psect for function _stop
  5461  0740                     _stop:	
  5462                           
  5463                           ;incstack = 0
  5464                           ; Regs used in _stop: [wreg+status,2+status,0+pclath+cstack]
  5465                           ;iic.c: 56: do { TRISCbits.TRISC1 = 0; } while(0);
  5466  0740  0140               	movlb	0	; select bank0
  5467  0741  1094               	bcf	20,1	;volatile
  5468                           
  5469                           ;iic.c: 57: do { LATCbits.LATC1 = 0; } while(0);
  5470  0742  109A               	bcf	26,1	;volatile
  5471                           
  5472                           ;iic.c: 58: Delay10us();
  5473  0743  2657               	fcall	_Delay10us
  5474                           
  5475                           ;iic.c: 59: do { LATCbits.LATC0 = 1; } while(0);
  5476  0744  0140               	movlb	0	; select bank0
  5477  0745  141A               	bsf	26,0	;volatile
  5478                           
  5479                           ;iic.c: 60: Delay10us();
  5480  0746  2657               	fcall	_Delay10us
  5481                           
  5482                           ;iic.c: 61: do { LATCbits.LATC1 = 1; } while(0);
  5483  0747  0140               	movlb	0	; select bank0
  5484  0748  149A               	bsf	26,1	;volatile
  5485                           
  5486                           ;iic.c: 62: Delay10us();
  5487  0749  2657               	fcall	_Delay10us
  5488                           
  5489                           ;iic.c: 64: Delay10us();
  5490  074A  2657               	fcall	_Delay10us
  5491  074B  0008               	return
  5492  074C                     __end_of_stop:	
  5493                           
  5494                           	psect	text20
  5495  070C                     __ptext20:	
  5496 ;; *************** function _r_ack *****************
  5497 ;; Defined at:
  5498 ;;		line 67 in file "iic.c"
  5499 ;; Parameters:    Size  Location     Type
  5500 ;;		None
  5501 ;; Auto vars:     Size  Location     Type
  5502 ;;  ack             2    8[BANK0 ] int 
  5503 ;; Return value:  Size  Location     Type
  5504 ;;                  2    4[BANK0 ] int 
  5505 ;; Registers used:
  5506 ;;		wreg, status,2, status,0, pclath, cstack
  5507 ;; Tracked objects:
  5508 ;;		On entry : 0/0
  5509 ;;		On exit  : 0/0
  5510 ;;		Unchanged: 0/0
  5511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5512 ;;      Params:         0       2       0       0
  5513 ;;      Locals:         0       2       0       0
  5514 ;;      Temps:          0       2       0       0
  5515 ;;      Totals:         0       6       0       0
  5516 ;;Total ram usage:        6 bytes
  5517 ;; Hardware stack levels used:    1
  5518 ;; Hardware stack levels required when called:    4
  5519 ;; This function calls:
  5520 ;;		_Delay10us
  5521 ;; This function is called by:
  5522 ;;		_wait_r_ack
  5523 ;; This function uses a non-reentrant model
  5524 ;;
  5525                           
  5526                           
  5527                           ;psect for function _r_ack
  5528  070C                     _r_ack:	
  5529                           
  5530                           ;incstack = 0
  5531                           ; Regs used in _r_ack: [wreg+status,2+status,0+pclath+cstack]
  5532                           ;iic.c: 69: int ack;
  5533                           ;iic.c: 70: do { TRISCbits.TRISC1 = 1; } while(0);
  5534  070C  0140               	movlb	0	; select bank0
  5535  070D  1494               	bsf	20,1	;volatile
  5536                           
  5537                           ;iic.c: 71: do { LATCbits.LATC0 = 1; } while(0);
  5538  070E  141A               	bsf	26,0	;volatile
  5539                           
  5540                           ;iic.c: 72: Delay10us();
  5541  070F  2657               	fcall	_Delay10us
  5542                           
  5543                           ;iic.c: 73: ack = PORTCbits.RC1;
  5544  0710  0140               	movlb	0	; select bank0
  5545  0711  0C0E               	rrf	14,w	;volatile
  5546  0712  3901               	andlw	1
  5547  0713  00A6               	movwf	??_r_ack
  5548  0714  01A7               	clrf	??_r_ack+1
  5549  0715  0826               	movf	??_r_ack,w
  5550  0716  00A8               	movwf	r_ack@ack
  5551  0717  0827               	movf	??_r_ack+1,w
  5552  0718  00A9               	movwf	r_ack@ack+1
  5553                           
  5554                           ;iic.c: 74: Delay10us();
  5555  0719  2657               	fcall	_Delay10us
  5556                           
  5557                           ;iic.c: 75: do { LATCbits.LATC0 = 0; } while(0);
  5558  071A  0140               	movlb	0	; select bank0
  5559  071B  101A               	bcf	26,0	;volatile
  5560                           
  5561                           ;iic.c: 76: Delay10us();
  5562  071C  2657               	fcall	_Delay10us
  5563                           
  5564                           ;iic.c: 77: return ack;
  5565  071D  0140               	movlb	0	; select bank0
  5566  071E  0829               	movf	r_ack@ack+1,w
  5567  071F  00A5               	movwf	?_r_ack+1
  5568  0720  0828               	movf	r_ack@ack,w
  5569  0721  00A4               	movwf	?_r_ack
  5570  0722  0008               	return
  5571  0723                     __end_of_r_ack:	
  5572                           
  5573                           	psect	text21
  5574  0758                     __ptext21:	
  5575 ;; *************** function _start *****************
  5576 ;; Defined at:
  5577 ;;		line 43 in file "iic.c"
  5578 ;; Parameters:    Size  Location     Type
  5579 ;;		None
  5580 ;; Auto vars:     Size  Location     Type
  5581 ;;		None
  5582 ;; Return value:  Size  Location     Type
  5583 ;;                  1    wreg      void 
  5584 ;; Registers used:
  5585 ;;		wreg, status,2, status,0, pclath, cstack
  5586 ;; Tracked objects:
  5587 ;;		On entry : 0/0
  5588 ;;		On exit  : 0/0
  5589 ;;		Unchanged: 0/0
  5590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5591 ;;      Params:         0       0       0       0
  5592 ;;      Locals:         0       0       0       0
  5593 ;;      Temps:          0       0       0       0
  5594 ;;      Totals:         0       0       0       0
  5595 ;;Total ram usage:        0 bytes
  5596 ;; Hardware stack levels used:    1
  5597 ;; Hardware stack levels required when called:    4
  5598 ;; This function calls:
  5599 ;;		_Delay10us
  5600 ;; This function is called by:
  5601 ;;		_cw_read
  5602 ;;		_cw_read_word
  5603 ;;		_cw_write
  5604 ;; This function uses a non-reentrant model
  5605 ;;
  5606                           
  5607                           
  5608                           ;psect for function _start
  5609  0758                     _start:	
  5610                           
  5611                           ;incstack = 0
  5612                           ; Regs used in _start: [wreg+status,2+status,0+pclath+cstack]
  5613                           ;iic.c: 45: do { TRISCbits.TRISC1 = 0; } while(0);
  5614  0758  0140               	movlb	0	; select bank0
  5615  0759  1094               	bcf	20,1	;volatile
  5616                           
  5617                           ;iic.c: 46: do { LATCbits.LATC1 = 1; } while(0);
  5618  075A  149A               	bsf	26,1	;volatile
  5619                           
  5620                           ;iic.c: 47: do { LATCbits.LATC0 = 1; } while(0);
  5621  075B  141A               	bsf	26,0	;volatile
  5622                           
  5623                           ;iic.c: 48: Delay10us();
  5624  075C  2657               	fcall	_Delay10us
  5625                           
  5626                           ;iic.c: 49: do { LATCbits.LATC1 = 0; } while(0);
  5627  075D  0140               	movlb	0	; select bank0
  5628  075E  109A               	bcf	26,1	;volatile
  5629                           
  5630                           ;iic.c: 50: Delay10us();
  5631  075F  2657               	fcall	_Delay10us
  5632                           
  5633                           ;iic.c: 51: do { LATCbits.LATC0 = 0; } while(0);
  5634  0760  0140               	movlb	0	; select bank0
  5635  0761  101A               	bcf	26,0	;volatile
  5636  0762  0008               	return
  5637  0763                     __end_of_start:	
  5638                           
  5639                           	psect	text22
  5640  0763                     __ptext22:	
  5641 ;; *************** function _s_ack *****************
  5642 ;; Defined at:
  5643 ;;		line 101 in file "iic.c"
  5644 ;; Parameters:    Size  Location     Type
  5645 ;;		None
  5646 ;; Auto vars:     Size  Location     Type
  5647 ;;		None
  5648 ;; Return value:  Size  Location     Type
  5649 ;;                  1    wreg      void 
  5650 ;; Registers used:
  5651 ;;		wreg, status,2, status,0, pclath, cstack
  5652 ;; Tracked objects:
  5653 ;;		On entry : 0/0
  5654 ;;		On exit  : 0/0
  5655 ;;		Unchanged: 0/0
  5656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5657 ;;      Params:         0       0       0       0
  5658 ;;      Locals:         0       0       0       0
  5659 ;;      Temps:          0       0       0       0
  5660 ;;      Totals:         0       0       0       0
  5661 ;;Total ram usage:        0 bytes
  5662 ;; Hardware stack levels used:    1
  5663 ;; Hardware stack levels required when called:    4
  5664 ;; This function calls:
  5665 ;;		_Delay10us
  5666 ;; This function is called by:
  5667 ;;		_cw_read
  5668 ;;		_cw_read_word
  5669 ;; This function uses a non-reentrant model
  5670 ;;
  5671                           
  5672                           
  5673                           ;psect for function _s_ack
  5674  0763                     _s_ack:	
  5675                           
  5676                           ;incstack = 0
  5677                           ; Regs used in _s_ack: [wreg+status,2+status,0+pclath+cstack]
  5678                           ;iic.c: 103: do { TRISCbits.TRISC1 = 0; } while(0);
  5679  0763  0140               	movlb	0	; select bank0
  5680  0764  1094               	bcf	20,1	;volatile
  5681                           
  5682                           ;iic.c: 104: do { LATCbits.LATC1 = 1; } while(0);
  5683  0765  149A               	bsf	26,1	;volatile
  5684                           
  5685                           ;iic.c: 105: Delay10us();
  5686  0766  2657               	fcall	_Delay10us
  5687                           
  5688                           ;iic.c: 106: do { LATCbits.LATC0 = 1; } while(0);
  5689  0767  0140               	movlb	0	; select bank0
  5690  0768  141A               	bsf	26,0	;volatile
  5691                           
  5692                           ;iic.c: 107: Delay10us();
  5693  0769  2657               	fcall	_Delay10us
  5694                           
  5695                           ;iic.c: 108: do { LATCbits.LATC0 = 0; } while(0);
  5696  076A  0140               	movlb	0	; select bank0
  5697  076B  101A               	bcf	26,0	;volatile
  5698                           
  5699                           ;iic.c: 109: Delay10us();
  5700  076C  2657               	fcall	_Delay10us
  5701  076D  0008               	return
  5702  076E                     __end_of_s_ack:	
  5703                           
  5704                           	psect	text23
  5705  05F0                     __ptext23:	
  5706 ;; *************** function _read_byte *****************
  5707 ;; Defined at:
  5708 ;;		line 142 in file "iic.c"
  5709 ;; Parameters:    Size  Location     Type
  5710 ;;		None
  5711 ;; Auto vars:     Size  Location     Type
  5712 ;;  r_data          1    6[BANK0 ] unsigned char 
  5713 ;;  i               1    5[BANK0 ] unsigned char 
  5714 ;; Return value:  Size  Location     Type
  5715 ;;                  1    wreg      unsigned char 
  5716 ;; Registers used:
  5717 ;;		wreg, status,2, status,0, pclath, cstack
  5718 ;; Tracked objects:
  5719 ;;		On entry : 0/0
  5720 ;;		On exit  : 0/0
  5721 ;;		Unchanged: 0/0
  5722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5723 ;;      Params:         0       0       0       0
  5724 ;;      Locals:         0       2       0       0
  5725 ;;      Temps:          0       1       0       0
  5726 ;;      Totals:         0       3       0       0
  5727 ;;Total ram usage:        3 bytes
  5728 ;; Hardware stack levels used:    1
  5729 ;; Hardware stack levels required when called:    4
  5730 ;; This function calls:
  5731 ;;		_Delay10us
  5732 ;; This function is called by:
  5733 ;;		_cw_read
  5734 ;;		_cw_read_word
  5735 ;; This function uses a non-reentrant model
  5736 ;;
  5737                           
  5738                           
  5739                           ;psect for function _read_byte
  5740  05F0                     _read_byte:	
  5741                           
  5742                           ;incstack = 0
  5743                           ; Regs used in _read_byte: [wreg+status,2+status,0+pclath+cstack]
  5744                           ;iic.c: 144: unsigned char i;
  5745                           ;iic.c: 145: unsigned char r_data;
  5746                           ;iic.c: 146: do { TRISCbits.TRISC1 = 1; } while(0);
  5747  05F0  0140               	movlb	0	; select bank0
  5748  05F1  1494               	bsf	20,1	;volatile
  5749                           
  5750                           ;iic.c: 147: for(i = 0; i < 8; i++)
  5751  05F2  01A5               	clrf	read_byte@i
  5752  05F3  3008               	movlw	8
  5753  05F4  0225               	subwf	read_byte@i,w
  5754  05F5  1803               	btfsc	3,0
  5755  05F6  2E12               	goto	l1831
  5756  05F7                     l440:	
  5757                           ;iic.c: 148: {
  5758                           ;iic.c: 149: do { LATCbits.LATC0 = 1; } while(0);
  5759                           
  5760  05F7  141A               	bsf	26,0	;volatile
  5761                           
  5762                           ;iic.c: 150: Delay10us();
  5763  05F8  2657               	fcall	_Delay10us
  5764                           
  5765                           ;iic.c: 151: r_data = r_data << 1;
  5766  05F9  0140               	movlb	0	; select bank0
  5767  05FA  3526               	lslf	read_byte@r_data,w
  5768  05FB  00A4               	movwf	??_read_byte
  5769  05FC  0824               	movf	??_read_byte,w
  5770  05FD  00A6               	movwf	read_byte@r_data
  5771                           
  5772                           ;iic.c: 152: Delay10us();
  5773  05FE  2657               	fcall	_Delay10us
  5774                           
  5775                           ;iic.c: 153: if(PORTCbits.RC1)
  5776  05FF  0140               	movlb	0	; select bank0
  5777  0600  1C8E               	btfss	14,1	;volatile
  5778  0601  2E07               	goto	l1823
  5779                           
  5780                           ;iic.c: 154: {
  5781                           ;iic.c: 155: r_data = r_data | 0x1;
  5782  0602  0826               	movf	read_byte@r_data,w
  5783  0603  3801               	iorlw	1
  5784  0604  00A4               	movwf	??_read_byte
  5785  0605  0824               	movf	??_read_byte,w
  5786  0606  00A6               	movwf	read_byte@r_data
  5787  0607                     l1823:	
  5788                           ;iic.c: 156: }
  5789                           ;iic.c: 157: do { LATCbits.LATC0 = 0; } while(0);
  5790                           
  5791  0607  101A               	bcf	26,0	;volatile
  5792                           
  5793                           ;iic.c: 158: Delay10us();
  5794  0608  2657               	fcall	_Delay10us
  5795  0609  3001               	movlw	1
  5796  060A  0140               	movlb	0	; select bank0
  5797  060B  00A4               	movwf	??_read_byte
  5798  060C  0824               	movf	??_read_byte,w
  5799  060D  07A5               	addwf	read_byte@i,f
  5800  060E  3008               	movlw	8
  5801  060F  0225               	subwf	read_byte@i,w
  5802  0610  1C03               	skipc
  5803  0611  2DF7               	goto	l440
  5804  0612                     l1831:	
  5805                           
  5806                           ;iic.c: 159: }
  5807                           ;iic.c: 160: return r_data;
  5808  0612  0826               	movf	read_byte@r_data,w
  5809  0613  0008               	return
  5810  0614                     __end_of_read_byte:	
  5811                           
  5812                           	psect	text24
  5813  0657                     __ptext24:	
  5814 ;; *************** function _Delay10us *****************
  5815 ;; Defined at:
  5816 ;;		line 22 in file "iic.c"
  5817 ;; Parameters:    Size  Location     Type
  5818 ;;		None
  5819 ;; Auto vars:     Size  Location     Type
  5820 ;;  i               1    3[BANK0 ] unsigned char 
  5821 ;;  b               1    2[BANK0 ] unsigned char 
  5822 ;;  a               1    1[BANK0 ] unsigned char 
  5823 ;; Return value:  Size  Location     Type
  5824 ;;                  1    wreg      void 
  5825 ;; Registers used:
  5826 ;;		wreg, status,2, status,0
  5827 ;; Tracked objects:
  5828 ;;		On entry : 0/0
  5829 ;;		On exit  : 0/0
  5830 ;;		Unchanged: 0/0
  5831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5832 ;;      Params:         0       0       0       0
  5833 ;;      Locals:         0       3       0       0
  5834 ;;      Temps:          0       1       0       0
  5835 ;;      Totals:         0       4       0       0
  5836 ;;Total ram usage:        4 bytes
  5837 ;; Hardware stack levels used:    1
  5838 ;; Hardware stack levels required when called:    3
  5839 ;; This function calls:
  5840 ;;		Nothing
  5841 ;; This function is called by:
  5842 ;;		_start
  5843 ;;		_stop
  5844 ;;		_r_ack
  5845 ;;		_s_ack
  5846 ;;		_sn_ack
  5847 ;;		_write_byte
  5848 ;;		_read_byte
  5849 ;; This function uses a non-reentrant model
  5850 ;;
  5851                           
  5852                           
  5853                           ;psect for function _Delay10us
  5854  0657                     _Delay10us:	
  5855                           
  5856                           ;iic.c: 24: unsigned char a, b;
  5857                           ;iic.c: 25: unsigned char i;
  5858                           ;iic.c: 26: for(i = 0; i < 2; i++)
  5859                           
  5860                           ;incstack = 0
  5861                           ; Regs used in _Delay10us: [wreg+status,2+status,0]
  5862  0657  0140               	movlb	0	; select bank0
  5863  0658  01A3               	clrf	Delay10us@i
  5864  0659                     L5:	
  5865  0659  3002               	movlw	2
  5866  065A  0223               	subwf	Delay10us@i,w
  5867  065B  1803               	btfsc	3,0
  5868  065C  0008               	return
  5869                           
  5870                           ;iic.c: 27: {
  5871                           ;iic.c: 28: for(b = 1;b > 0;b --)
  5872  065D  01A2               	clrf	Delay10us@b
  5873  065E  0AA2               	incf	Delay10us@b,f
  5874  065F  0822               	movf	Delay10us@b,w
  5875  0660  1903               	btfsc	3,2
  5876  0661  2E73               	goto	l1725
  5877  0662                     l1715:	
  5878                           
  5879                           ;iic.c: 29: {
  5880                           ;iic.c: 30: for(a = 7;a > 0;a --) ;
  5881  0662  3007               	movlw	7
  5882  0663  00A0               	movwf	??_Delay10us
  5883  0664  0820               	movf	??_Delay10us,w
  5884  0665  00A1               	movwf	Delay10us@a
  5885  0666  0821               	movf	Delay10us@a,w
  5886  0667  1903               	btfsc	3,2
  5887  0668  2E6E               	goto	l1723
  5888  0669                     l1721:	
  5889  0669  3001               	movlw	1
  5890  066A  02A1               	subwf	Delay10us@a,f
  5891  066B  0821               	movf	Delay10us@a,w
  5892  066C  1D03               	btfss	3,2
  5893  066D  2E69               	goto	l1721
  5894  066E                     l1723:	
  5895  066E  3001               	movlw	1
  5896  066F  02A2               	subwf	Delay10us@b,f
  5897  0670  0822               	movf	Delay10us@b,w
  5898  0671  1D03               	btfss	3,2
  5899  0672  2E62               	goto	l1715
  5900  0673                     l1725:	
  5901  0673  3001               	movlw	1
  5902  0674  00A0               	movwf	??_Delay10us
  5903  0675  0820               	movf	??_Delay10us,w
  5904  0676  07A3               	addwf	Delay10us@i,f
  5905  0677  2E59               	goto	L5
  5906  0678                     __end_of_Delay10us:	
  5907                           
  5908                           	psect	text25
  5909  0678                     __ptext25:	
  5910 ;; *************** function _CW_Delay100us *****************
  5911 ;; Defined at:
  5912 ;;		line 38 in file "CW201x.c"
  5913 ;; Parameters:    Size  Location     Type
  5914 ;;		None
  5915 ;; Auto vars:     Size  Location     Type
  5916 ;;  i               1    3[BANK0 ] unsigned char 
  5917 ;;  b               1    2[BANK0 ] unsigned char 
  5918 ;;  a               1    1[BANK0 ] unsigned char 
  5919 ;; Return value:  Size  Location     Type
  5920 ;;                  1    wreg      void 
  5921 ;; Registers used:
  5922 ;;		wreg, status,2, status,0
  5923 ;; Tracked objects:
  5924 ;;		On entry : 0/0
  5925 ;;		On exit  : 0/0
  5926 ;;		Unchanged: 0/0
  5927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5928 ;;      Params:         0       0       0       0
  5929 ;;      Locals:         0       3       0       0
  5930 ;;      Temps:          0       1       0       0
  5931 ;;      Totals:         0       4       0       0
  5932 ;;Total ram usage:        4 bytes
  5933 ;; Hardware stack levels used:    1
  5934 ;; Hardware stack levels required when called:    3
  5935 ;; This function calls:
  5936 ;;		Nothing
  5937 ;; This function is called by:
  5938 ;;		_cw_update_config_info
  5939 ;;		_cw_por
  5940 ;; This function uses a non-reentrant model
  5941 ;;
  5942                           
  5943                           
  5944                           ;psect for function _CW_Delay100us
  5945  0678                     _CW_Delay100us:	
  5946                           
  5947                           ;CW201x.c: 40: unsigned char a, b;
  5948                           ;CW201x.c: 41: unsigned char i;
  5949                           ;CW201x.c: 42: for(i = 0; i < 10; i++)
  5950                           
  5951                           ;incstack = 0
  5952                           ; Regs used in _CW_Delay100us: [wreg+status,2+status,0]
  5953  0678  0140               	movlb	0	; select bank0
  5954  0679  01A3               	clrf	CW_Delay100us@i
  5955  067A                     L6:	
  5956  067A  300A               	movlw	10
  5957  067B  0223               	subwf	CW_Delay100us@i,w
  5958  067C  1803               	btfsc	3,0
  5959  067D  0008               	return
  5960                           
  5961                           ;CW201x.c: 43: {
  5962                           ;CW201x.c: 44: for(b = 1;b > 0;b --)
  5963  067E  01A2               	clrf	CW_Delay100us@b
  5964  067F  0AA2               	incf	CW_Delay100us@b,f
  5965  0680  0822               	movf	CW_Delay100us@b,w
  5966  0681  1903               	btfsc	3,2
  5967  0682  2E94               	goto	l1855
  5968  0683                     l1845:	
  5969                           
  5970                           ;CW201x.c: 45: {
  5971                           ;CW201x.c: 46: for(a = 7;a > 0;a --);
  5972  0683  3007               	movlw	7
  5973  0684  00A0               	movwf	??_CW_Delay100us
  5974  0685  0820               	movf	??_CW_Delay100us,w
  5975  0686  00A1               	movwf	CW_Delay100us@a
  5976  0687  0821               	movf	CW_Delay100us@a,w
  5977  0688  1903               	btfsc	3,2
  5978  0689  2E8F               	goto	l1853
  5979  068A                     l1851:	
  5980  068A  3001               	movlw	1
  5981  068B  02A1               	subwf	CW_Delay100us@a,f
  5982  068C  0821               	movf	CW_Delay100us@a,w
  5983  068D  1D03               	btfss	3,2
  5984  068E  2E8A               	goto	l1851
  5985  068F                     l1853:	
  5986  068F  3001               	movlw	1
  5987  0690  02A2               	subwf	CW_Delay100us@b,f
  5988  0691  0822               	movf	CW_Delay100us@b,w
  5989  0692  1D03               	btfss	3,2
  5990  0693  2E83               	goto	l1845
  5991  0694                     l1855:	
  5992  0694  3001               	movlw	1
  5993  0695  00A0               	movwf	??_CW_Delay100us
  5994  0696  0820               	movf	??_CW_Delay100us,w
  5995  0697  07A3               	addwf	CW_Delay100us@i,f
  5996  0698  2E7A               	goto	L6
  5997  0699                     __end_of_CW_Delay100us:	
  5998                           
  5999                           	psect	text26
  6000  0614                     __ptext26:	
  6001 ;; *************** function _CW_Delay10ms *****************
  6002 ;; Defined at:
  6003 ;;		line 26 in file "CW201x.c"
  6004 ;; Parameters:    Size  Location     Type
  6005 ;;  c               2    0[BANK0 ] unsigned int 
  6006 ;; Auto vars:     Size  Location     Type
  6007 ;;  b               1    4[BANK0 ] unsigned char 
  6008 ;;  a               1    3[BANK0 ] unsigned char 
  6009 ;;  d               1    0        unsigned char 
  6010 ;; Return value:  Size  Location     Type
  6011 ;;                  1    wreg      void 
  6012 ;; Registers used:
  6013 ;;		wreg, status,2, status,0
  6014 ;; Tracked objects:
  6015 ;;		On entry : 0/0
  6016 ;;		On exit  : 0/0
  6017 ;;		Unchanged: 0/0
  6018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6019 ;;      Params:         0       2       0       0
  6020 ;;      Locals:         0       2       0       0
  6021 ;;      Temps:          0       1       0       0
  6022 ;;      Totals:         0       5       0       0
  6023 ;;Total ram usage:        5 bytes
  6024 ;; Hardware stack levels used:    1
  6025 ;; Hardware stack levels required when called:    3
  6026 ;; This function calls:
  6027 ;;		Nothing
  6028 ;; This function is called by:
  6029 ;;		_main
  6030 ;;		_cw_init
  6031 ;; This function uses a non-reentrant model
  6032 ;;
  6033                           
  6034                           
  6035                           ;psect for function _CW_Delay10ms
  6036  0614                     _CW_Delay10ms:	
  6037                           
  6038                           ;CW201x.c: 28: unsigned char a, b, d;
  6039                           ;CW201x.c: 29: for (;c>0;c--)
  6040                           
  6041                           ;incstack = 0
  6042                           ; Regs used in _CW_Delay10ms: [wreg+status,2+status,0]
  6043  0614  0140               	movlb	0	; select bank0
  6044  0615                     L7:	
  6045  0615  0820               	movf	CW_Delay10ms@c,w
  6046  0616  0421               	iorwf	CW_Delay10ms@c+1,w
  6047  0617  1903               	btfsc	3,2
  6048  0618  0008               	return
  6049                           
  6050                           ;CW201x.c: 30: {
  6051                           ;CW201x.c: 31: for(b=95;b>0;b--)
  6052  0619  305F               	movlw	95
  6053  061A  00A2               	movwf	??_CW_Delay10ms
  6054  061B  0822               	movf	??_CW_Delay10ms,w
  6055  061C  00A4               	movwf	CW_Delay10ms@b
  6056  061D  0824               	movf	CW_Delay10ms@b,w
  6057  061E  1903               	btfsc	3,2
  6058  061F  2E31               	goto	l1933
  6059  0620                     l1923:	
  6060                           
  6061                           ;CW201x.c: 32: {
  6062                           ;CW201x.c: 33: for(a=209;a>0;a--) ;
  6063  0620  30D1               	movlw	209
  6064  0621  00A2               	movwf	??_CW_Delay10ms
  6065  0622  0822               	movf	??_CW_Delay10ms,w
  6066  0623  00A3               	movwf	CW_Delay10ms@a
  6067  0624  0823               	movf	CW_Delay10ms@a,w
  6068  0625  1903               	btfsc	3,2
  6069  0626  2E2C               	goto	l1931
  6070  0627                     l1929:	
  6071  0627  3001               	movlw	1
  6072  0628  02A3               	subwf	CW_Delay10ms@a,f
  6073  0629  0823               	movf	CW_Delay10ms@a,w
  6074  062A  1D03               	btfss	3,2
  6075  062B  2E27               	goto	l1929
  6076  062C                     l1931:	
  6077  062C  3001               	movlw	1
  6078  062D  02A4               	subwf	CW_Delay10ms@b,f
  6079  062E  0824               	movf	CW_Delay10ms@b,w
  6080  062F  1D03               	btfss	3,2
  6081  0630  2E20               	goto	l1923
  6082  0631                     l1933:	
  6083  0631  3001               	movlw	1
  6084  0632  02A0               	subwf	CW_Delay10ms@c,f
  6085  0633  3000               	movlw	0
  6086  0634  3BA1               	subwfb	CW_Delay10ms@c+1,f
  6087  0635  2E15               	goto	L7
  6088  0636                     __end_of_CW_Delay10ms:	
  6089                           
  6090                           	psect	text27
  6091  078A                     __ptext27:	
  6092 ;; *************** function _SYSTEM_Initialize *****************
  6093 ;; Defined at:
  6094 ;;		line 86 in file "mcc_generated_files/mcc.c"
  6095 ;; Parameters:    Size  Location     Type
  6096 ;;		None
  6097 ;; Auto vars:     Size  Location     Type
  6098 ;;		None
  6099 ;; Return value:  Size  Location     Type
  6100 ;;                  1    wreg      void 
  6101 ;; Registers used:
  6102 ;;		wreg, status,2, status,0, pclath, cstack
  6103 ;; Tracked objects:
  6104 ;;		On entry : 0/0
  6105 ;;		On exit  : 0/0
  6106 ;;		Unchanged: 0/0
  6107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6108 ;;      Params:         0       0       0       0
  6109 ;;      Locals:         0       0       0       0
  6110 ;;      Temps:          0       0       0       0
  6111 ;;      Totals:         0       0       0       0
  6112 ;;Total ram usage:        0 bytes
  6113 ;; Hardware stack levels used:    1
  6114 ;; Hardware stack levels required when called:    4
  6115 ;; This function calls:
  6116 ;;		_EUSART1_Initialize
  6117 ;;		_OSCILLATOR_Initialize
  6118 ;;		_PIN_MANAGER_Initialize
  6119 ;; This function is called by:
  6120 ;;		_main
  6121 ;; This function uses a non-reentrant model
  6122 ;;
  6123                           
  6124                           
  6125                           ;psect for function _SYSTEM_Initialize
  6126  078A                     _SYSTEM_Initialize:	
  6127                           
  6128                           ;mcc.c: 89: PIN_MANAGER_Initialize();
  6129                           
  6130                           ;incstack = 0
  6131                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6132  078A  25C0               	fcall	_PIN_MANAGER_Initialize
  6133                           
  6134                           ;mcc.c: 90: OSCILLATOR_Initialize();
  6135  078B  274C               	fcall	_OSCILLATOR_Initialize
  6136                           
  6137                           ;mcc.c: 91: EUSART1_Initialize();
  6138  078C  2723               	fcall	_EUSART1_Initialize
  6139  078D  0008               	return
  6140  078E                     __end_of_SYSTEM_Initialize:	
  6141                           
  6142                           	psect	text28
  6143  05C0                     __ptext28:	
  6144 ;; *************** function _PIN_MANAGER_Initialize *****************
  6145 ;; Defined at:
  6146 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  6147 ;; Parameters:    Size  Location     Type
  6148 ;;		None
  6149 ;; Auto vars:     Size  Location     Type
  6150 ;;  state           1    0[BANK0 ] unsigned char 
  6151 ;; Return value:  Size  Location     Type
  6152 ;;                  1    wreg      void 
  6153 ;; Registers used:
  6154 ;;		wreg, status,2, status,0
  6155 ;; Tracked objects:
  6156 ;;		On entry : 0/0
  6157 ;;		On exit  : 0/0
  6158 ;;		Unchanged: 0/0
  6159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6160 ;;      Params:         0       0       0       0
  6161 ;;      Locals:         0       1       0       0
  6162 ;;      Temps:          0       0       0       0
  6163 ;;      Totals:         0       1       0       0
  6164 ;;Total ram usage:        1 bytes
  6165 ;; Hardware stack levels used:    1
  6166 ;; Hardware stack levels required when called:    3
  6167 ;; This function calls:
  6168 ;;		Nothing
  6169 ;; This function is called by:
  6170 ;;		_SYSTEM_Initialize
  6171 ;; This function uses a non-reentrant model
  6172 ;;
  6173                           
  6174                           
  6175                           ;psect for function _PIN_MANAGER_Initialize
  6176  05C0                     _PIN_MANAGER_Initialize:	
  6177                           
  6178                           ;pin_manager.c: 56: LATA = 0x00;
  6179                           
  6180                           ;incstack = 0
  6181                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  6182  05C0  0140               	movlb	0	; select bank0
  6183  05C1  0198               	clrf	24	;volatile
  6184                           
  6185                           ;pin_manager.c: 57: LATC = 0x00;
  6186  05C2  019A               	clrf	26	;volatile
  6187                           
  6188                           ;pin_manager.c: 62: TRISA = 0x03;
  6189  05C3  3003               	movlw	3
  6190  05C4  0092               	movwf	18	;volatile
  6191                           
  6192                           ;pin_manager.c: 63: TRISC = 0x22;
  6193  05C5  3022               	movlw	34
  6194  05C6  0094               	movwf	20	;volatile
  6195                           
  6196                           ;pin_manager.c: 68: ANSELC = 0x1D;
  6197  05C7  301D               	movlw	29
  6198  05C8  017E               	movlb	62	; select bank62
  6199  05C9  00CE               	movwf	78	;volatile
  6200                           
  6201                           ;pin_manager.c: 69: ANSELA = 0x37;
  6202  05CA  3037               	movlw	55
  6203  05CB  00B8               	movwf	56	;volatile
  6204                           
  6205                           ;pin_manager.c: 74: WPUA = 0x00;
  6206  05CC  01B9               	clrf	57	;volatile
  6207                           
  6208                           ;pin_manager.c: 75: WPUC = 0x00;
  6209  05CD  01CF               	clrf	79	;volatile
  6210                           
  6211                           ;pin_manager.c: 80: ODCONA = 0x00;
  6212  05CE  01BA               	clrf	58	;volatile
  6213                           
  6214                           ;pin_manager.c: 81: ODCONC = 0x00;
  6215  05CF  01D0               	clrf	80	;volatile
  6216                           
  6217                           ;pin_manager.c: 88: bool state = GIE;
  6218  05D0  3000               	movlw	0
  6219  05D1  1B8B               	btfsc	11,7	;volatile
  6220  05D2  3001               	movlw	1
  6221  05D3  0140               	movlb	0	; select bank0
  6222  05D4  00A0               	movwf	PIN_MANAGER_Initialize@state
  6223                           
  6224                           ;pin_manager.c: 89: GIE = 0;
  6225  05D5  138B               	bcf	11,7	;volatile
  6226                           
  6227                           ;pin_manager.c: 90: PPSLOCK = 0x55;
  6228  05D6  3055               	movlw	85
  6229  05D7  017D               	movlb	61	; select bank61
  6230  05D8  008F               	movwf	15	;volatile
  6231                           
  6232                           ;pin_manager.c: 91: PPSLOCK = 0xAA;
  6233  05D9  30AA               	movlw	170
  6234  05DA  008F               	movwf	15	;volatile
  6235                           
  6236                           ;pin_manager.c: 92: PPSLOCKbits.PPSLOCKED = 0x00;
  6237  05DB  100F               	bcf	15,0	;volatile
  6238                           
  6239                           ;pin_manager.c: 94: RX1DTPPSbits.RX1DTPPS = 0x15;
  6240  05DC  084B               	movf	75,w	;volatile
  6241  05DD  39C0               	andlw	-64
  6242  05DE  3815               	iorlw	21
  6243  05DF  00CB               	movwf	75	;volatile
  6244                           
  6245                           ;pin_manager.c: 95: RC4PPS = 0x0F;
  6246  05E0  300F               	movlw	15
  6247  05E1  017E               	movlb	62	; select bank62
  6248  05E2  00A4               	movwf	36	;volatile
  6249                           
  6250                           ;pin_manager.c: 97: PPSLOCK = 0x55;
  6251  05E3  3055               	movlw	85
  6252  05E4  017D               	movlb	61	; select bank61
  6253  05E5  008F               	movwf	15	;volatile
  6254                           
  6255                           ;pin_manager.c: 98: PPSLOCK = 0xAA;
  6256  05E6  30AA               	movlw	170
  6257  05E7  008F               	movwf	15	;volatile
  6258                           
  6259                           ;pin_manager.c: 99: PPSLOCKbits.PPSLOCKED = 0x01;
  6260  05E8  140F               	bsf	15,0	;volatile
  6261                           
  6262                           ;pin_manager.c: 101: GIE = state;
  6263  05E9  0140               	movlb	0	; select bank0
  6264  05EA  1C20               	btfss	PIN_MANAGER_Initialize@state,0
  6265  05EB  2DEE               	goto	u2260
  6266  05EC  178B               	bsf	11,7	;volatile
  6267  05ED  0008               	return
  6268  05EE                     u2260:	
  6269  05EE  138B               	bcf	11,7	;volatile
  6270  05EF  0008               	return
  6271  05F0                     __end_of_PIN_MANAGER_Initialize:	
  6272                           
  6273                           	psect	text29
  6274  074C                     __ptext29:	
  6275 ;; *************** function _OSCILLATOR_Initialize *****************
  6276 ;; Defined at:
  6277 ;;		line 94 in file "mcc_generated_files/mcc.c"
  6278 ;; Parameters:    Size  Location     Type
  6279 ;;		None
  6280 ;; Auto vars:     Size  Location     Type
  6281 ;;		None
  6282 ;; Return value:  Size  Location     Type
  6283 ;;                  1    wreg      void 
  6284 ;; Registers used:
  6285 ;;		wreg, status,2
  6286 ;; Tracked objects:
  6287 ;;		On entry : 0/0
  6288 ;;		On exit  : 0/0
  6289 ;;		Unchanged: 0/0
  6290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6291 ;;      Params:         0       0       0       0
  6292 ;;      Locals:         0       0       0       0
  6293 ;;      Temps:          0       0       0       0
  6294 ;;      Totals:         0       0       0       0
  6295 ;;Total ram usage:        0 bytes
  6296 ;; Hardware stack levels used:    1
  6297 ;; Hardware stack levels required when called:    3
  6298 ;; This function calls:
  6299 ;;		Nothing
  6300 ;; This function is called by:
  6301 ;;		_SYSTEM_Initialize
  6302 ;; This function uses a non-reentrant model
  6303 ;;
  6304                           
  6305                           
  6306                           ;psect for function _OSCILLATOR_Initialize
  6307  074C                     _OSCILLATOR_Initialize:	
  6308                           
  6309                           ;mcc.c: 97: OSCCON1 = 0x10;
  6310                           
  6311                           ;incstack = 0
  6312                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6313  074C  3010               	movlw	16
  6314  074D  0151               	movlb	17	; select bank17
  6315  074E  008D               	movwf	13	;volatile
  6316                           
  6317                           ;mcc.c: 99: OSCCON3 = 0x00;
  6318  074F  018F               	clrf	15	;volatile
  6319                           
  6320                           ;mcc.c: 101: OSCEN = 0x00;
  6321  0750  0191               	clrf	17	;volatile
  6322                           
  6323                           ;mcc.c: 103: OSCFRQ = 0x05;
  6324  0751  3005               	movlw	5
  6325  0752  0093               	movwf	19	;volatile
  6326                           
  6327                           ;mcc.c: 105: OSCSTAT = 0x00;
  6328  0753  0190               	clrf	16	;volatile
  6329                           
  6330                           ;mcc.c: 107: OSCTUNE = 0x00;
  6331  0754  0192               	clrf	18	;volatile
  6332  0755                     l83:	
  6333                           ;mcc.c: 110: {
  6334                           
  6335                           ;mcc.c: 109: while(PLLR == 0)
  6336                           
  6337  0755  1810               	btfsc	16,0	;volatile
  6338  0756  0008               	return
  6339  0757  2F55               	goto	l83
  6340  0758                     __end_of_OSCILLATOR_Initialize:	
  6341                           
  6342                           	psect	text30
  6343  0723                     __ptext30:	
  6344 ;; *************** function _EUSART1_Initialize *****************
  6345 ;; Defined at:
  6346 ;;		line 64 in file "mcc_generated_files/eusart1.c"
  6347 ;; Parameters:    Size  Location     Type
  6348 ;;		None
  6349 ;; Auto vars:     Size  Location     Type
  6350 ;;		None
  6351 ;; Return value:  Size  Location     Type
  6352 ;;                  1    wreg      void 
  6353 ;; Registers used:
  6354 ;;		wreg
  6355 ;; Tracked objects:
  6356 ;;		On entry : 0/0
  6357 ;;		On exit  : 0/0
  6358 ;;		Unchanged: 0/0
  6359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6360 ;;      Params:         0       0       0       0
  6361 ;;      Locals:         0       0       0       0
  6362 ;;      Temps:          0       0       0       0
  6363 ;;      Totals:         0       0       0       0
  6364 ;;Total ram usage:        0 bytes
  6365 ;; Hardware stack levels used:    1
  6366 ;; Hardware stack levels required when called:    3
  6367 ;; This function calls:
  6368 ;;		Nothing
  6369 ;; This function is called by:
  6370 ;;		_SYSTEM_Initialize
  6371 ;; This function uses a non-reentrant model
  6372 ;;
  6373                           
  6374                           
  6375                           ;psect for function _EUSART1_Initialize
  6376  0723                     _EUSART1_Initialize:	
  6377                           
  6378                           ;eusart1.c: 67: PIE3bits.RC1IE = 0;
  6379                           
  6380                           ;incstack = 0
  6381                           ; Regs used in _EUSART1_Initialize: [wreg]
  6382  0723  014E               	movlb	14	; select bank14
  6383  0724  1299               	bcf	25,5	;volatile
  6384                           
  6385                           ;eusart1.c: 68: PIE3bits.TX1IE = 0;
  6386  0725  1219               	bcf	25,4	;volatile
  6387                           
  6388                           ;eusart1.c: 73: BAUD1CON = 0x08;
  6389  0726  3008               	movlw	8
  6390  0727  0142               	movlb	2	; select bank2
  6391  0728  009F               	movwf	31	;volatile
  6392                           
  6393                           ;eusart1.c: 76: RC1STA = 0x90;
  6394  0729  3090               	movlw	144
  6395  072A  009D               	movwf	29	;volatile
  6396                           
  6397                           ;eusart1.c: 79: TX1STA = 0x24;
  6398  072B  3024               	movlw	36
  6399  072C  009E               	movwf	30	;volatile
  6400                           
  6401                           ;eusart1.c: 82: SP1BRGL = 0x40;
  6402  072D  3040               	movlw	64
  6403  072E  009B               	movwf	27	;volatile
  6404                           
  6405                           ;eusart1.c: 85: SP1BRGH = 0x03;
  6406  072F  3003               	movlw	3
  6407  0730  009C               	movwf	28	;volatile
  6408                           
  6409                           ;eusart1.c: 91: PIE3bits.RC1IE = 1;
  6410  0731  014E               	movlb	14	; select bank14
  6411  0732  1699               	bsf	25,5	;volatile
  6412  0733  0008               	return
  6413  0734                     __end_of_EUSART1_Initialize:	
  6414                           
  6415                           	psect	intentry
  6416  0004                     __pintentry:	
  6417 ;; *************** function _INTERRUPT_InterruptManager *****************
  6418 ;; Defined at:
  6419 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  6420 ;; Parameters:    Size  Location     Type
  6421 ;;		None
  6422 ;; Auto vars:     Size  Location     Type
  6423 ;;		None
  6424 ;; Return value:  Size  Location     Type
  6425 ;;                  1    wreg      void 
  6426 ;; Registers used:
  6427 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6428 ;; Tracked objects:
  6429 ;;		On entry : 0/0
  6430 ;;		On exit  : 0/0
  6431 ;;		Unchanged: 0/0
  6432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6433 ;;      Params:         0       0       0       0
  6434 ;;      Locals:         0       0       0       0
  6435 ;;      Temps:          1       0       0       0
  6436 ;;      Totals:         1       0       0       0
  6437 ;;Total ram usage:        1 bytes
  6438 ;; Hardware stack levels used:    1
  6439 ;; Hardware stack levels required when called:    2
  6440 ;; This function calls:
  6441 ;;		_EUSART1_Receive_ISR
  6442 ;; This function is called by:
  6443 ;;		Interrupt level 1
  6444 ;; This function uses a non-reentrant model
  6445 ;;
  6446                           
  6447  0004                     _INTERRUPT_InterruptManager:	
  6448                           
  6449                           ;incstack = 0
  6450  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  6451                           
  6452                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6453  0005  3180               	pagesel	$
  6454  0006  0140               	movlb	0	; select bank0
  6455  0007  087F               	movf	127,w
  6456  0008  00F7               	movwf	??_INTERRUPT_InterruptManager
  6457                           
  6458                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE3bits.RC1IE == 1 && PIR3bits.RC1
      +                          IF == 1)
  6459  0009  1F0B               	btfss	11,6	;volatile
  6460  000A  2810               	goto	i1l137
  6461  000B  014E               	movlb	14	; select bank14
  6462  000C  1A99               	btfsc	25,5	;volatile
  6463  000D  1E8F               	btfss	15,5	;volatile
  6464  000E  2810               	goto	i1l137
  6465                           
  6466                           ;interrupt_manager.c: 55: {
  6467                           ;interrupt_manager.c: 56: EUSART1_Receive_ISR();
  6468  000F  22F0               	fcall	_EUSART1_Receive_ISR
  6469  0010                     i1l137:	
  6470                           ;interrupt_manager.c: 58: else
  6471                           ;interrupt_manager.c: 59: {
  6472                           
  6473                           ;interrupt_manager.c: 57: }
  6474                           
  6475  0010  0877               	movf	??_INTERRUPT_InterruptManager,w
  6476  0011  0140               	movlb	0	; select bank0
  6477  0012  00FF               	movwf	127
  6478  0013  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6479  0014  0009               	retfie
  6480  0015                     __end_of_INTERRUPT_InterruptManager:	
  6481                           
  6482                           	psect	text32
  6483  02F0                     __ptext32:	
  6484 ;; *************** function _EUSART1_Receive_ISR *****************
  6485 ;; Defined at:
  6486 ;;		line 103 in file "mcc_generated_files/eusart1.c"
  6487 ;; Parameters:    Size  Location     Type
  6488 ;;		None
  6489 ;; Auto vars:     Size  Location     Type
  6490 ;;  dat             1    6[COMMON] unsigned char 
  6491 ;; Return value:  Size  Location     Type
  6492 ;;                  1    wreg      void 
  6493 ;; Registers used:
  6494 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6495 ;; Tracked objects:
  6496 ;;		On entry : 0/0
  6497 ;;		On exit  : 0/0
  6498 ;;		Unchanged: 0/0
  6499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6500 ;;      Params:         0       0       0       0
  6501 ;;      Locals:         1       0       0       0
  6502 ;;      Temps:          1       0       0       0
  6503 ;;      Totals:         2       0       0       0
  6504 ;;Total ram usage:        2 bytes
  6505 ;; Hardware stack levels used:    1
  6506 ;; Hardware stack levels required when called:    1
  6507 ;; This function calls:
  6508 ;;		_EUSART1_Write
  6509 ;;		i1_CW_Delay10ms
  6510 ;; This function is called by:
  6511 ;;		_INTERRUPT_InterruptManager
  6512 ;; This function uses a non-reentrant model
  6513 ;;
  6514                           
  6515                           
  6516                           ;psect for function _EUSART1_Receive_ISR
  6517  02F0                     _EUSART1_Receive_ISR:	
  6518                           
  6519                           ;eusart1.c: 105: unsigned char dat;
  6520                           ;eusart1.c: 106: if(1 == RC1STAbits.OERR)
  6521                           
  6522                           ;incstack = 0
  6523                           ; Regs used in _EUSART1_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6524  02F0  0142               	movlb	2	; select bank2
  6525  02F1  1C9D               	btfss	29,1	;volatile
  6526  02F2  2AF5               	goto	i1l2459
  6527                           
  6528                           ;eusart1.c: 107: {
  6529                           ;eusart1.c: 110: RC1STAbits.CREN = 0;
  6530  02F3  121D               	bcf	29,4	;volatile
  6531                           
  6532                           ;eusart1.c: 111: RC1STAbits.CREN = 1;
  6533  02F4  161D               	bsf	29,4	;volatile
  6534  02F5                     i1l2459:	
  6535                           
  6536                           ;eusart1.c: 112: }
  6537                           ;eusart1.c: 115: dat = RC1REG;
  6538  02F5  0819               	movf	25,w	;volatile
  6539  02F6  00F5               	movwf	??_EUSART1_Receive_ISR
  6540  02F7  0875               	movf	??_EUSART1_Receive_ISR,w
  6541  02F8  00F6               	movwf	EUSART1_Receive_ISR@dat
  6542                           
  6543                           ;eusart1.c: 117: if((dat == 'S') && (count == 0))
  6544  02F9  3053               	movlw	83
  6545  02FA  0676               	xorwf	EUSART1_Receive_ISR@dat,w
  6546  02FB  1D03               	btfss	3,2
  6547  02FC  2B03               	goto	i1l2467
  6548  02FD  087A               	movf	_count,w
  6549  02FE  1D03               	btfss	3,2
  6550  02FF  2B03               	goto	i1l2467
  6551                           
  6552                           ;eusart1.c: 118: {
  6553                           ;eusart1.c: 119: count = 1;
  6554  0300  01FA               	clrf	_count
  6555  0301  0AFA               	incf	_count,f
  6556                           
  6557                           ;eusart1.c: 120: }
  6558  0302  0008               	return
  6559  0303                     i1l2467:	
  6560                           
  6561                           ;eusart1.c: 121: else if(dat == 'E')
  6562  0303  3045               	movlw	69
  6563  0304  0676               	xorwf	EUSART1_Receive_ISR@dat,w
  6564  0305  1D03               	btfss	3,2
  6565  0306  2B35               	goto	i1l2481
  6566                           
  6567                           ;eusart1.c: 122: {
  6568                           ;eusart1.c: 123: count ++;
  6569  0307  3001               	movlw	1
  6570  0308  00F5               	movwf	??_EUSART1_Receive_ISR
  6571  0309  0875               	movf	??_EUSART1_Receive_ISR,w
  6572  030A  07FA               	addwf	_count,f
  6573                           
  6574                           ;eusart1.c: 124: if((count == 4) && (rxbuf[0] == 0xAA) && (rxbuf[1] == 0xAA))
  6575  030B  3004               	movlw	4
  6576  030C  067A               	xorwf	_count,w
  6577  030D  1D03               	btfss	3,2
  6578  030E  2B33               	goto	i1l2479
  6579  030F  30AA               	movlw	170
  6580  0310  0140               	movlb	0	; select bank0
  6581  0311  0654               	xorwf	_rxbuf,w
  6582  0312  1D03               	btfss	3,2
  6583  0313  2B33               	goto	i1l2479
  6584  0314  30AA               	movlw	170
  6585  0315  0655               	xorwf	_rxbuf+1,w
  6586  0316  1D03               	btfss	3,2
  6587  0317  2B33               	goto	i1l2479
  6588                           
  6589                           ;eusart1.c: 125: {
  6590                           ;eusart1.c: 126: do { LATCbits.LATC3 = 1; } while(0);
  6591  0318  159A               	bsf	26,3	;volatile
  6592                           
  6593                           ;eusart1.c: 127: CW_Delay10ms(1);
  6594  0319  3001               	movlw	1
  6595  031A  00F0               	movwf	i1CW_Delay10ms@c
  6596  031B  3000               	movlw	0
  6597  031C  00F1               	movwf	i1CW_Delay10ms@c+1
  6598  031D  2699               	fcall	i1_CW_Delay10ms
  6599                           
  6600                           ;eusart1.c: 128: EUSART1_Write('S');
  6601  031E  3053               	movlw	83
  6602  031F  2778               	fcall	_EUSART1_Write
  6603                           
  6604                           ;eusart1.c: 129: EUSART1_Write(0xAA);
  6605  0320  30AA               	movlw	170
  6606  0321  2778               	fcall	_EUSART1_Write
  6607                           
  6608                           ;eusart1.c: 130: EUSART1_Write(0xAA);
  6609  0322  30AA               	movlw	170
  6610  0323  2778               	fcall	_EUSART1_Write
  6611                           
  6612                           ;eusart1.c: 131: EUSART1_Write(cw_bat.voltage);
  6613  0324  0140               	movlb	0	; select bank0
  6614  0325  0866               	movf	_cw_bat+3,w
  6615  0326  2778               	fcall	_EUSART1_Write
  6616                           
  6617                           ;eusart1.c: 132: EUSART1_Write(cw_bat.capacity);
  6618  0327  0140               	movlb	0	; select bank0
  6619  0328  0864               	movf	_cw_bat+1,w
  6620  0329  2778               	fcall	_EUSART1_Write
  6621                           
  6622                           ;eusart1.c: 133: EUSART1_Write('E');
  6623  032A  3045               	movlw	69
  6624  032B  2778               	fcall	_EUSART1_Write
  6625                           
  6626                           ;eusart1.c: 134: CW_Delay10ms(1);
  6627  032C  3001               	movlw	1
  6628  032D  00F0               	movwf	i1CW_Delay10ms@c
  6629  032E  3000               	movlw	0
  6630  032F  00F1               	movwf	i1CW_Delay10ms@c+1
  6631  0330  2699               	fcall	i1_CW_Delay10ms
  6632                           
  6633                           ;eusart1.c: 135: do { LATCbits.LATC3 = 0; } while(0);
  6634  0331  0140               	movlb	0	; select bank0
  6635  0332  119A               	bcf	26,3	;volatile
  6636  0333                     i1l2479:	
  6637                           
  6638                           ;eusart1.c: 136: }
  6639                           ;eusart1.c: 137: count = 0;
  6640  0333  01FA               	clrf	_count
  6641                           
  6642                           ;eusart1.c: 138: }
  6643  0334  0008               	return
  6644  0335                     i1l2481:	
  6645                           
  6646                           ;eusart1.c: 139: else if(count > 0)
  6647  0335  087A               	movf	_count,w
  6648  0336  1903               	btfsc	3,2
  6649  0337  0008               	return
  6650                           
  6651                           ;eusart1.c: 140: {
  6652                           ;eusart1.c: 141: rxbuf[count - 1] = dat;
  6653  0338  0876               	movf	EUSART1_Receive_ISR@dat,w
  6654  0339  00F5               	movwf	??_EUSART1_Receive_ISR
  6655  033A  087A               	movf	_count,w
  6656  033B  3EFF               	addlw	255
  6657  033C  3E54               	addlw	(low (_rxbuf| 0))& (0+255)
  6658  033D  0086               	movwf	6
  6659  033E  0187               	clrf	7
  6660  033F  0875               	movf	??_EUSART1_Receive_ISR,w
  6661  0340  0081               	movwf	1
  6662                           
  6663                           ;eusart1.c: 142: count ++;
  6664  0341  3001               	movlw	1
  6665  0342  00F5               	movwf	??_EUSART1_Receive_ISR
  6666  0343  0875               	movf	??_EUSART1_Receive_ISR,w
  6667  0344  07FA               	addwf	_count,f
  6668                           
  6669                           ;eusart1.c: 143: if(count > 15) count = 15;
  6670  0345  3010               	movlw	16
  6671  0346  027A               	subwf	_count,w
  6672  0347  1C03               	skipc
  6673  0348  0008               	return
  6674  0349  300F               	movlw	15
  6675  034A  00F5               	movwf	??_EUSART1_Receive_ISR
  6676  034B  0875               	movf	??_EUSART1_Receive_ISR,w
  6677  034C  00FA               	movwf	_count
  6678                           
  6679                           ;eusart1.c: 145: else ;
  6680                           
  6681                           ;eusart1.c: 144: }
  6682  034D  0008               	return
  6683  034E                     __end_of_EUSART1_Receive_ISR:	
  6684                           
  6685                           	psect	text33
  6686  0699                     __ptext33:	
  6687 ;; *************** function i1_CW_Delay10ms *****************
  6688 ;; Defined at:
  6689 ;;		line 26 in file "CW201x.c"
  6690 ;; Parameters:    Size  Location     Type
  6691 ;;  c               2    0[COMMON] unsigned int 
  6692 ;; Auto vars:     Size  Location     Type
  6693 ;;  CW_Delay10ms    1    4[COMMON] unsigned char 
  6694 ;;  CW_Delay10ms    1    3[COMMON] unsigned char 
  6695 ;;  CW_Delay10ms    1    0        unsigned char 
  6696 ;; Return value:  Size  Location     Type
  6697 ;;                  1    wreg      void 
  6698 ;; Registers used:
  6699 ;;		wreg, status,2, status,0
  6700 ;; Tracked objects:
  6701 ;;		On entry : 0/0
  6702 ;;		On exit  : 0/0
  6703 ;;		Unchanged: 0/0
  6704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6705 ;;      Params:         2       0       0       0
  6706 ;;      Locals:         2       0       0       0
  6707 ;;      Temps:          1       0       0       0
  6708 ;;      Totals:         5       0       0       0
  6709 ;;Total ram usage:        5 bytes
  6710 ;; Hardware stack levels used:    1
  6711 ;; This function calls:
  6712 ;;		Nothing
  6713 ;; This function is called by:
  6714 ;;		_EUSART1_Receive_ISR
  6715 ;; This function uses a non-reentrant model
  6716 ;;
  6717                           
  6718                           
  6719                           ;psect for function i1_CW_Delay10ms
  6720  0699                     i1_CW_Delay10ms:	
  6721                           
  6722                           ;CW201x.c: 28: unsigned char a, b, d;
  6723                           ;CW201x.c: 29: for (;c>0;c--)
  6724                           
  6725                           ;incstack = 0
  6726                           ; Regs used in i1_CW_Delay10ms: [wreg+status,2+status,0]
  6727  0699  0870               	movf	i1CW_Delay10ms@c,w
  6728  069A  0471               	iorwf	i1CW_Delay10ms@c+1,w
  6729  069B  1903               	btfsc	3,2
  6730  069C  0008               	return
  6731                           
  6732                           ;CW201x.c: 30: {
  6733                           ;CW201x.c: 31: for(b=95;b>0;b--)
  6734  069D  305F               	movlw	95
  6735  069E  00F2               	movwf	??i1_CW_Delay10ms
  6736  069F  0872               	movf	??i1_CW_Delay10ms,w
  6737  06A0  00F4               	movwf	i1CW_Delay10ms@b
  6738  06A1  0874               	movf	i1CW_Delay10ms@b,w
  6739  06A2  1903               	btfsc	3,2
  6740  06A3  2EB5               	goto	i1l2451
  6741  06A4                     i1l2441:	
  6742                           
  6743                           ;CW201x.c: 32: {
  6744                           ;CW201x.c: 33: for(a=209;a>0;a--) ;
  6745  06A4  30D1               	movlw	209
  6746  06A5  00F2               	movwf	??i1_CW_Delay10ms
  6747  06A6  0872               	movf	??i1_CW_Delay10ms,w
  6748  06A7  00F3               	movwf	i1CW_Delay10ms@a
  6749  06A8  0873               	movf	i1CW_Delay10ms@a,w
  6750  06A9  1903               	btfsc	3,2
  6751  06AA  2EB0               	goto	i1l2449
  6752  06AB                     i1l2447:	
  6753  06AB  3001               	movlw	1
  6754  06AC  02F3               	subwf	i1CW_Delay10ms@a,f
  6755  06AD  0873               	movf	i1CW_Delay10ms@a,w
  6756  06AE  1D03               	btfss	3,2
  6757  06AF  2EAB               	goto	i1l2447
  6758  06B0                     i1l2449:	
  6759  06B0  3001               	movlw	1
  6760  06B1  02F4               	subwf	i1CW_Delay10ms@b,f
  6761  06B2  0874               	movf	i1CW_Delay10ms@b,w
  6762  06B3  1D03               	btfss	3,2
  6763  06B4  2EA4               	goto	i1l2441
  6764  06B5                     i1l2451:	
  6765  06B5  3001               	movlw	1
  6766  06B6  02F0               	subwf	i1CW_Delay10ms@c,f
  6767  06B7  3000               	movlw	0
  6768  06B8  3BF1               	subwfb	i1CW_Delay10ms@c+1,f
  6769  06B9  2E99               	goto	i1_CW_Delay10ms
  6770  06BA                     __end_ofi1_CW_Delay10ms:	
  6771                           
  6772                           	psect	text34
  6773  0778                     __ptext34:	
  6774 ;; *************** function _EUSART1_Write *****************
  6775 ;; Defined at:
  6776 ;;		line 94 in file "mcc_generated_files/eusart1.c"
  6777 ;; Parameters:    Size  Location     Type
  6778 ;;  txData          1    wreg     unsigned char 
  6779 ;; Auto vars:     Size  Location     Type
  6780 ;;  txData          1    0[COMMON] unsigned char 
  6781 ;; Return value:  Size  Location     Type
  6782 ;;                  1    wreg      void 
  6783 ;; Registers used:
  6784 ;;		wreg
  6785 ;; Tracked objects:
  6786 ;;		On entry : 0/0
  6787 ;;		On exit  : 0/0
  6788 ;;		Unchanged: 0/0
  6789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6790 ;;      Params:         0       0       0       0
  6791 ;;      Locals:         1       0       0       0
  6792 ;;      Temps:          0       0       0       0
  6793 ;;      Totals:         1       0       0       0
  6794 ;;Total ram usage:        1 bytes
  6795 ;; Hardware stack levels used:    1
  6796 ;; This function calls:
  6797 ;;		Nothing
  6798 ;; This function is called by:
  6799 ;;		_EUSART1_Receive_ISR
  6800 ;; This function uses a non-reentrant model
  6801 ;;
  6802                           
  6803                           
  6804                           ;psect for function _EUSART1_Write
  6805  0778                     _EUSART1_Write:	
  6806                           
  6807                           ;incstack = 0
  6808                           ; Regs used in _EUSART1_Write: [wreg]
  6809                           ;EUSART1_Write@txData stored from wreg
  6810  0778  00F0               	movwf	EUSART1_Write@txData
  6811  0779                     i1l38:	
  6812                           ;eusart1.c: 97: {
  6813                           
  6814                           ;eusart1.c: 96: while(0 == PIR3bits.TX1IF)
  6815                           
  6816  0779  014E               	movlb	14	; select bank14
  6817  077A  1E0F               	btfss	15,4	;volatile
  6818  077B  2F79               	goto	i1l38
  6819                           
  6820                           ;eusart1.c: 98: }
  6821                           ;eusart1.c: 100: TX1REG = txData;
  6822  077C  0870               	movf	EUSART1_Write@txData,w
  6823  077D  0142               	movlb	2	; select bank2
  6824  077E  009A               	movwf	26	;volatile
  6825  077F  0008               	return
  6826  0780                     __end_of_EUSART1_Write:	
  6827  007E                     btemp	set	126	;btemp
  6828  007E                     int$flags	set	126
  6829  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    128
    Data        0
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     52      76
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    cw_write@w_pdata	PTR unsigned char  size(1) Largest target is 1
		 -> cw_por@reset_val(BANK0[1]), cw_init@reg_val(BANK0[1]), cw_update_config_info@reset_val(BANK0[1]), cw_update_config_info@reg_val(BANK0[1]), 

    cw_read_word@r_pdata	PTR unsigned char  size(1) Largest target is 2
		 -> cw_get_vol@reg_val(BANK0[2]), 

    cw_read@r_pdata	PTR unsigned char  size(1) Largest target is 1
		 -> cw_get_capacity@reg_val(BANK0[1]), cw_init@reg_val(BANK0[1]), cw_update_config_info@reg_val(BANK0[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Receive_ISR->i1_CW_Delay10ms

Critical Paths under _main in BANK0

    _cw_bat_work->_update_capacity
    _cw_bat_work->_update_vol
    _update_vol->_cw_get_vol
    _cw_get_vol->___lldiv
    _cw_read_word->_wait_r_ack
    _sn_ack->_Delay10us
    ___lldiv->___lmul
    _update_capacity->_cw_get_capacity
    _cw_get_capacity->_cw_por
    _cw_por->_cw_init
    _cw_bat_init->_cw_init
    _cw_init->_cw_update_config_info
    _cw_update_config_info->_cw_read
    _cw_update_config_info->_cw_write
    _cw_write->_wait_r_ack
    _cw_read->_wait_r_ack
    _write_byte->_Delay10us
    _wait_r_ack->_r_ack
    _stop->_Delay10us
    _r_ack->_Delay10us
    _start->_Delay10us
    _s_ack->_Delay10us
    _read_byte->_Delay10us
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   23826
                                             50 BANK0      2     2      0
                       _CW_Delay10ms
                  _SYSTEM_Initialize
                        _cw_bat_init
                        _cw_bat_work
 ---------------------------------------------------------------------------------
 (1) _cw_bat_work                                          0     0      0   14990
                    _update_capacity
                  _update_usb_online
                         _update_vol
 ---------------------------------------------------------------------------------
 (2) _update_vol                                           2     2      0    2726
                                             48 BANK0      2     2      0
                         _cw_get_vol
 ---------------------------------------------------------------------------------
 (3) _cw_get_vol                                          22    20      2    2659
                                             26 BANK0     22    20      2
                            ___lldiv
                             ___lmul
                       _cw_read_word
 ---------------------------------------------------------------------------------
 (4) _cw_read_word                                         7     4      3    1687
                                             16 BANK0      7     4      3
                          _read_byte
                              _s_ack
                             _sn_ack
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (5) _sn_ack                                               0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     220
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     290
                                             12 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _update_usb_online                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _update_capacity                                      3     3      0   12264
                                             47 BANK0      3     3      0
                    _cw_get_capacity
 ---------------------------------------------------------------------------------
 (3) _cw_get_capacity                                      9     7      2   12175
                                             39 BANK0      8     6      2
                             _cw_por
                            _cw_read
 ---------------------------------------------------------------------------------
 (4) _cw_por                                               7     5      2   10195
                                             32 BANK0      7     5      2
                      _CW_Delay100us
                            _cw_init
                           _cw_write
 ---------------------------------------------------------------------------------
 (1) _cw_bat_init                                          3     3      0    8470
                                             32 BANK0      3     3      0
                            _cw_init
 ---------------------------------------------------------------------------------
 (5) _cw_init                                              6     6      0    8401
                                             26 BANK0      6     6      0
                       _CW_Delay10ms
                            _cw_read
              _cw_update_config_info
                           _cw_write
 ---------------------------------------------------------------------------------
 (6) _cw_update_config_info                                6     6      0    4045
                                             20 BANK0      6     6      0
                      _CW_Delay100us
                            _cw_read
                           _cw_write
 ---------------------------------------------------------------------------------
 (5) _cw_write                                             4     1      3    1516
                                             16 BANK0      4     1      3
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (4) _cw_read                                              4     2      2    1842
                                             16 BANK0      4     2      2
                          _read_byte
                              _s_ack
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (5) _write_byte                                           3     3      0     229
                                              4 BANK0      3     3      0
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _wait_r_ack                                           6     4      2     391
                                             10 BANK0      6     4      2
                              _r_ack
                               _stop
 ---------------------------------------------------------------------------------
 (6) _stop                                                 0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (6) _r_ack                                                6     4      2     161
                                              4 BANK0      6     4      2
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _start                                                0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _s_ack                                                0     0      0     138
                          _Delay10us
 ---------------------------------------------------------------------------------
 (5) _read_byte                                            3     3      0     252
                                              4 BANK0      3     3      0
                          _Delay10us
 ---------------------------------------------------------------------------------
 (6) _Delay10us                                            4     4      0     138
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (7) _CW_Delay100us                                        4     4      0     138
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (6) _CW_Delay10ms                                         6     4      2     341
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      23
                 _EUSART1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          1     1      0     278
                                              7 COMMON     1     1      0
                _EUSART1_Receive_ISR
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Receive_ISR                                 2     2      0     278
                                              5 COMMON     2     2      0
                      _EUSART1_Write
                     i1_CW_Delay10ms
 ---------------------------------------------------------------------------------
 (13) i1_CW_Delay10ms                                      6     4      2     189
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (13) _EUSART1_Write                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CW_Delay10ms
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _cw_bat_init
     _cw_init
       _CW_Delay10ms
       _cw_read
         _read_byte
           _Delay10us
         _s_ack
           _Delay10us
         _start
           _Delay10us
         _stop
           _Delay10us
         _wait_r_ack
           _r_ack
             _Delay10us
           _stop
             _Delay10us
         _write_byte
           _Delay10us
       _cw_update_config_info
         _CW_Delay100us
         _cw_read
           _read_byte
             _Delay10us
           _s_ack
             _Delay10us
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us
         _cw_write
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us
       _cw_write
         _start
           _Delay10us
         _stop
           _Delay10us
         _wait_r_ack
           _r_ack
             _Delay10us
           _stop
             _Delay10us
         _write_byte
           _Delay10us
   _cw_bat_work
     _update_capacity
       _cw_get_capacity
         _cw_por
           _CW_Delay100us
           _cw_init
             _CW_Delay10ms
             _cw_read
               _read_byte
                 _Delay10us
               _s_ack
                 _Delay10us
               _start
                 _Delay10us
               _stop
                 _Delay10us
               _wait_r_ack
                 _r_ack
                   _Delay10us
                 _stop
                   _Delay10us
               _write_byte
                 _Delay10us
             _cw_update_config_info
               _CW_Delay100us
               _cw_read
                 _read_byte
                   _Delay10us
                 _s_ack
                   _Delay10us
                 _start
                   _Delay10us
                 _stop
                   _Delay10us
                 _wait_r_ack
                   _r_ack
                     _Delay10us
                   _stop
                     _Delay10us
                 _write_byte
                   _Delay10us
               _cw_write
                 _start
                   _Delay10us
                 _stop
                   _Delay10us
                 _wait_r_ack
                   _r_ack
                     _Delay10us
                   _stop
                     _Delay10us
                 _write_byte
                   _Delay10us
             _cw_write
               _start
                 _Delay10us
               _stop
                 _Delay10us
               _wait_r_ack
                 _r_ack
                   _Delay10us
                 _stop
                   _Delay10us
               _write_byte
                 _Delay10us
           _cw_write
             _start
               _Delay10us
             _stop
               _Delay10us
             _wait_r_ack
               _r_ack
                 _Delay10us
               _stop
                 _Delay10us
             _write_byte
               _Delay10us
         _cw_read
           _read_byte
             _Delay10us
           _s_ack
             _Delay10us
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us
     _update_usb_online
     _update_vol
       _cw_get_vol
         ___lldiv
           ___lmul (ARG)
         ___lmul
         _cw_read_word
           _read_byte
             _Delay10us
           _s_ack
             _Delay10us
           _sn_ack
             _Delay10us
           _start
             _Delay10us
           _stop
             _Delay10us
           _wait_r_ack
             _r_ack
               _Delay10us
             _stop
               _Delay10us
           _write_byte
             _Delay10us

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     _EUSART1_Write
     i1_CW_Delay10ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     34      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
ABS                  0      0      57      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      57      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Tue Aug 29 16:13:34 2017

                                    __CFG_CP$OFF 0000                                               l83 0755  
                                _update_capacity 0636                                      __CFG_LVP$ON 0000  
                                            l206 0422                                              l209 0424  
                                            l315 0148                                              l316 0154  
                                            l317 0160                                              l440 05F7  
                                            l264 0250                                              l277 0070  
                                            _GIE 005F                                     __CFG_BORV$LO 0000  
                                            wreg 0009                                    __CFG_BBEN$OFF 0000  
                                   __CFG_ZCD$OFF 0000                                    ?_cw_read_word 0030  
                                  CW_Delay10ms@a 0023                                             l2101 0097  
                                  CW_Delay10ms@b 0024                                    CW_Delay10ms@c 0020  
                                           l2015 0266                                             l2201 03E6  
                                           l2027 027C                                             l2051 0035  
                                           l2211 02A1                                             l2037 028F  
                                           l2125 00C1                                             l2109 00AA  
                                           l2119 00BC                                             l2071 005F  
                                           l2223 02BC                                             l2137 00D8  
                                           l2145 00E4                                             l2305 0464  
                                           l2313 046A                                             l2233 02E4  
                                           l2217 02AE                                             l2155 00F9  
                                           l2059 0046                                             l2307 0465  
                                           l2235 02BD                                             l2093 0085  
                                           l2245 0599                                             l2237 02EA  
                                           l2087 0080                                             l2503 06EB  
                                           l2191 03D4                                             l2263 035F  
                                           l1721 0669                                             l2273 038D  
                                           l2265 036D                                             l2249 05A3  
                                           l2337 012E                                             l2329 0116  
                                           l1723 066E                                             l1715 0662  
                                           l2179 03BD                                             l2291 0445  
                                           l1725 0673                                             l2429 0775  
                                           l2277 0398                                             l2349 016F  
                                           l1823 0607                                             l1831 0612  
                                           l2551 0403                                             l2553 040D  
                                           l1931 062C                                             l1923 0620  
                                           l1851 068A                                             l1763 056C  
                                           l1907 0559                                             l2555 0418  
                                           l2547 03F8                                             l1933 0631  
                                           l1853 068F                                             l1845 0683  
                                           l2557 0428                                             l1855 0694  
                                           l1871 0510                                             l1929 0627  
                                           l1777 0582                                             l1865 0503  
                                           l1953 01E9                                             l2497 06DC  
                                           l1779 058D                                             l1795 06C9  
                                           l1947 01E0                                             l1877 051E  
                                           l1893 053C                                             l1973 0213  
                                           l1959 01EE                                             l1993 0237  
                                           l1969 020B                                             l1899 0549  
                                           l1987 022A                                             l1979 0218  
                                           l1997 023F                                             u2025 02DD  
                                           u1410 06C7                                             u2115 036E  
                                           u2035 02C6                                             u2125 0382  
                                           _LATA 0018                                             u2135 038E  
                                           u2055 05A4                                             _LATC 001A  
                                           u2305 0647                                             u2065 05AB  
                                           u2225 014E                                             u2315 0650  
                                           u2235 015A                                             u2260 05EE  
                                           u2095 0362                                             u2335 0705  
                                           i1l38 0779                                             _PLLR 4480  
                                           _WPUA 1F39                                             _WPUC 1F4F  
                                  _EUSART1_Write 0778                                    __CFG_FCMEN$ON 0000  
                                           _main 03E9                                             fsr0h 0005  
                                           fsr1h 0007                                             indf0 0000  
                                           fsr0l 0004                                             indf1 0001  
                                           fsr1l 0006                                             btemp 007E  
                                           _stop 0740                                    __CFG_BOREN$ON 0000  
                                           start 0015                                    __CFG_CSWEN$ON 0000  
                                 CW_Delay100us@a 0021                                   CW_Delay100us@b 0022  
                                 CW_Delay100us@i 0023                                 ?_cw_get_capacity 0047  
                     update_capacity@cw_capacity 0050                   __size_of_OSCILLATOR_Initialize 000C  
                  __end_of_OSCILLATOR_Initialize 0758                            _cw_update_config_info 01CC  
                                          ?_main 0070                                    __CFG_WDTE$OFF 0000  
                                __end_of___lldiv 03A1                                            ?_stop 0070  
                                          i1l137 0010                                            _OSCEN 0891  
                                          _TRISA 0012                                            _TRISC 0014  
                            ___lmul@multiplicand 0024                                    __CFG_WRTB$OFF 0000  
                                  __CFG_WRTC$OFF 0000                                  __end_of_cw_init 00FB  
                                __end_of_cw_read 052C                                   ??_cw_read_word 0033  
                                          _count 007A                                            _r_ack 070C  
                                          _s_ack 0763                                            _state 0079  
                                          _start 0758                                            _rxbuf 0054  
                                 ?_EUSART1_Write 0070                        cw_init@cw_bat_config_info 0473  
                                          status 0003                                            wtemp0 007E  
                                 __CFG_MCLRE$OFF 0000                          __end_of_update_capacity 0657  
                                __initialization 0016                       __end_of_EUSART1_Initialize 0734  
                                   __end_of_main 042E                               __size_of_Delay10us 0021  
                                   __end_of_stop 074C                                   __CFG_SAFEN$OFF 0000  
                               ??i1_CW_Delay10ms 0072                      ?_INTERRUPT_InterruptManager 0070  
                                 cw_bat_init@ret 0042                                           ??_main 0052  
                                         ??_stop 0024                                           ?_r_ack 0024  
                                         ?_s_ack 0070                                 cw_read@point_reg 0033  
                                         _CHARGE 0078                                           _ANSELA 1F38  
                                         _ANSELC 1F4E                                           ?_start 0070  
                                         _RC1REG 0119                                           _RC1STA 011D  
                                         _RC4PPS 1F24                                           _ODCONA 1F3A  
                                         _ODCONC 1F50                                           i1l2441 06A4  
                                         i1l2451 06B5                                           i1l2447 06AB  
                                         i1l2449 06B0                                           i1l2481 0335  
                                         i1l2467 0303                                           i1l2459 02F5  
                                         i1l2479 0333                                   __CFG_WDTCCS$SC 0000  
                                         _OSCFRQ 0893                                           _TX1REG 011A  
                                         _TX1STA 011E                                  i1CW_Delay10ms@a 0073  
                                i1CW_Delay10ms@b 0074                                  i1CW_Delay10ms@c 0070  
                                cw_write@w_pdata 0030                                   __CFG_PWRTE$OFF 0000  
                                  cw_get_vol@F80 0069                             __size_of_cw_bat_init 001B  
                           __size_of_cw_bat_work 0004                                           ___lmul 0590  
                                  cw_get_vol@ret 0041                                   __CFG_STVREN$ON 0000  
                                      ??___lldiv 0034                                 __end_of_cw_write 055E  
                                         _cw_bat 0063                                           _cw_por 03A1  
                         ?_cw_update_config_info 0070                                           _sn_ack 0734  
                                      ??_cw_init 003A                                        ??_cw_read 0032  
                                  ?_CW_Delay10ms 0020                                  ??_EUSART1_Write 0070  
                              __end_of_Delay10us 0678                                _SYSTEM_Initialize 078A  
                        __end_of__initialization 001F                               ?_SYSTEM_Initialize 0070  
                              _update_usb_online 076E                                 ?_update_capacity 0070  
                              cw_get_vol@ad_buff 004E                                   __pcstackCOMMON 0070  
                             ?_update_usb_online 0070                              ??_SYSTEM_Initialize 0021  
                           __end_of_cw_read_word 02F0                                    __end_of_r_ack 0723  
                                  __end_of_s_ack 076E                                    __end_of_start 0763  
                         __size_of_CW_Delay100us 0021                                   ??_CW_Delay10ms 0022  
                            ??_update_usb_online 0020                                cw_get_vol@reg_val 0043  
                    __end_of_EUSART1_Receive_ISR 034E                                  cw_bat_init@loop 0041  
                                        ??_r_ack 0026                                          ??_s_ack 0024  
                      __end_of_SYSTEM_Initialize 078E                                          ??_start 0024  
                                     __pbssBANK0 0054                        __end_of_update_usb_online 0778  
                             __size_of_read_byte 0024                                       __pmaintext 03E9  
                                        ?___lmul 0020                                  __CFG_PPS1WAY$ON 0000  
                                     __pintentry 0004                                          ?_cw_por 0040  
                                 ___lmul@product 0028                                          ?_sn_ack 0070  
                                        _SP1BRGH 011C                                          _SP1BRGL 011B  
                                        _OSCCON1 088D                                          _OSCCON3 088F  
                                        _OSCSTAT 0890                                          _OSCTUNE 0892  
                                        _PPSLOCK 1E8F                                       _cw_get_vol 00FB  
                                      ?_cw_write 0030                                    _CW_Delay100us 0678  
                           update_vol@cw_voltage 0050                                  __size_of___lmul 0030  
              __end_ofcw_init@cw_bat_config_info 04B3                                          ___lldiv 034E  
                                __size_of_cw_por 0048                                  __size_of_sn_ack 000C  
                                        __ptext1 0786                                          __ptext2 06F5  
                                        __ptext3 00FB                                          __ptext4 0291  
                                        __ptext5 0734                                          __ptext6 0590  
                                        __ptext7 034E                                          __ptext8 076E  
                                        __ptext9 0636                                          _cw_init 0022  
                                        _cw_read 04F3                                  __CFG_WRTAPP$OFF 0000  
                         EUSART1_Receive_ISR@dat 0076                            _OSCILLATOR_Initialize 074C  
                              __end_of_read_byte 0614                               _EUSART1_Initialize 0723  
                       __size_of_cw_get_capacity 0045                         ??_PIN_MANAGER_Initialize 0020  
                                __CFG_WRTSAF$OFF 0000                       __size_of_SYSTEM_Initialize 0004  
                                        clrloop0 0781                                          main@ret 0053  
                           end_of_initialization 001F                                 write_byte@w_data 0025  
                                 ?_CW_Delay100us 0070                              ?_EUSART1_Initialize 0070  
                                     ??_cw_write 0033                       __size_of_update_usb_online 000A  
                           __end_of_CW_Delay10ms 0636                            __size_of_cw_read_word 005F  
                                ___lldiv@divisor 002C                                  cw_por@reset_val 0044  
                                ___lldiv@counter 0039                                       _reset_loop 006B  
                   cw_update_config_info@reg_val 0039                          ??_cw_update_config_info 0034  
                                    wait_r_ack@i 002E                                       _wait_r_ack 055E  
                           ??_EUSART1_Initialize 0020                            __CFG_WDTCPS$WDTCPS_31 0000  
                                      _PORTCbits 000E                         cw_update_config_info@ret 0036  
                                      _TRISCbits 0014                                       _update_vol 06F5  
                                    ?_cw_get_vol 003A                              EUSART1_Write@txData 0070  
                               __CFG_FEXTOSC$OFF 0000                                     _cw_read_word 0291  
                                      _Delay10us 0657                                   cw_init@reg_val 003F  
                                  ??_cw_bat_init 0040                                    ??_cw_bat_work 0052  
                                     cw_init@ret 003D                                   cw_read@r_pdata 0030  
                             cw_get_vol@ad_value 0049                                   __end_of___lmul 05C0  
                                     _write_byte 06BA                                   __end_of_cw_por 03E9  
                         ?_OSCILLATOR_Initialize 0070                                   __end_of_sn_ack 0740  
                            start_initialization 0016                  __size_of_PIN_MANAGER_Initialize 0030  
                        __size_ofi1_CW_Delay10ms 0021                                  ??_CW_Delay100us 0020  
                          __end_of_EUSART1_Write 0780                       cw_get_capacity@cw_capacity 004B  
                              ??_cw_get_capacity 0049                                       ?_Delay10us 0070  
                               __CFG_LPBOREN$OFF 0000                                         ??___lmul 0028  
                            __end_of_cw_bat_init 06F5                              __size_of_cw_get_vol 00D1  
                                    ?_wait_r_ack 002A                              __end_of_cw_bat_work 078A  
                                       ??_cw_por 0042                                         ??_sn_ack 0024  
                                     read_byte@i 0025                         __size_of_update_capacity 0021  
                         cw_update_config_info@i 0038                           cw_get_capacity@reg_val 004E  
                                    __pbssCOMMON 0078                                        ___latbits 0000  
                                  __pcstackBANK0 0020                                      ?_update_vol 0070  
                          __size_of_CW_Delay10ms 0022                     __size_of_EUSART1_Receive_ISR 005E  
                              __size_of_cw_write 0032                           cw_get_vol@ad_value_max 0047  
                         cw_get_vol@ad_value_min 0045                              cw_read_word@r_pdata 0030  
                         _PIN_MANAGER_Initialize 05C0                                         ?___lldiv 002C  
                                    ?_write_byte 0070                     ??_INTERRUPT_InterruptManager 0077  
                          cw_read_word@point_reg 0035                                         ?_cw_init 0070  
                                       ?_cw_read 0030                                         _BAUD1CON 011F  
                                   _CW_Delay10ms 0614                             __CFG_RSTOSC$HFINTPLL 0000  
                                 __size_of_r_ack 0017                                   __size_of_s_ack 000B  
                                      _read_byte 05F0                                   __size_of_start 000B  
                            __size_of_wait_r_ack 0032                                      ??_Delay10us 0020  
                                       _LATAbits 0018                                         _LATCbits 001A  
                                      clear_ram0 0780                                         _PIE3bits 0719  
                                    _cw_bat_init 06DA                                      _cw_bat_work 0786  
            __size_of_INTERRUPT_InterruptManager 0011                                         _PIR3bits 070F  
                              __CFG_BBSIZE$BB512 0000                              __size_of_update_vol 0017  
                 __size_of_cw_update_config_info 00C5                    __end_of_cw_update_config_info 0291  
                                   _RX1DTPPSbits 1ECB                                      write_byte@i 0026  
                                 i1_CW_Delay10ms 0699                                     ??_cw_get_vol 003C  
                              ??_update_capacity 004F                                        cw_por@ret 0045  
                              ___lmul@multiplier 0020                                       ?_read_byte 0070  
                              cw_write@point_reg 0033                              __size_of_write_byte 0020  
                                read_byte@r_data 0026                          ??_OSCILLATOR_Initialize 0020  
                             __end_of_cw_get_vol 01CC                                 __size_of___lldiv 0053  
                    __size_of_EUSART1_Initialize 0011                                  _cw_get_capacity 042E  
                         __end_ofi1_CW_Delay10ms 06BA                                 __size_of_cw_init 00D9  
                               __size_of_cw_read 0039                               cw_read_word@length 0031  
                                       __ptext10 042E                                         __ptext11 03A1  
                                       __ptext20 070C                                         __ptext12 06DA  
                                       __ptext21 0758                                         __ptext13 0022  
                                       __ptext30 0723                                         __ptext22 0763  
                                       __ptext14 01CC                                         __ptext23 05F0  
                                       __ptext15 052C                                         __ptext32 02F0  
                                       __ptext24 0657                                         __ptext16 04F3  
                                       __ptext33 0699                                         __ptext25 0678  
                                       __ptext17 06BA                                         __ptext34 0778  
                                       __ptext26 0614                                         __ptext18 055E  
                                       __ptext27 078A                                         __ptext19 0740  
                                       __ptext28 05C0                                         __ptext29 074C  
                                       _cw_write 052C                               cw_get_capacity@ret 004C  
                                  __size_of_main 0045                                    __size_of_stop 000C  
                           __CFG_WDTCWS$WDTCWS_7 0000                                       Delay10us@a 0021  
                                     Delay10us@b 0022                                       Delay10us@i 0023  
                                     _RC1STAbits 011D                                         int$flags 007E  
                                   ??_wait_r_ack 002C               __end_of_INTERRUPT_InterruptManager 0015  
                     _INTERRUPT_InterruptManager 0004                                         cw_init@i 003C  
                            _EUSART1_Receive_ISR 02F0                   cw_update_config_info@reset_val 0035  
                    PIN_MANAGER_Initialize@state 0020                                         r_ack@ack 0028  
                                ?i1_CW_Delay10ms 0070                                    wait_r_ack@ack 002C  
                                     _INTCONbits 000B  __end_ofcw_update_config_info@cw_bat_config_info 04F3  
        cw_update_config_info@cw_bat_config_info 04B3                                     ??_update_vol 0050  
                                    ??_read_byte 0024                                         intlevel1 0000  
                          __end_of_CW_Delay100us 0699                                cw_read_word@count 0036  
                           ?_EUSART1_Receive_ISR 0070                               __end_of_wait_r_ack 0590  
                               ___lldiv@dividend 0030                          ?_PIN_MANAGER_Initialize 0070  
                              __CFG_CLKOUTEN$OFF 0000                                      _PPSLOCKbits 1E8F  
                        __end_of_cw_get_capacity 0473                               __end_of_update_vol 070C  
                         cw_get_vol@get_ad_times 004D                                     ??_write_byte 0024  
                         __size_of_EUSART1_Write 0008                                    __pstringtext1 0473  
                                  __pstringtext2 04B3                                 ___lldiv@quotient 0035  
                          ??_EUSART1_Receive_ISR 0075                   __end_of_PIN_MANAGER_Initialize 05F0  
                             __end_of_write_byte 06DA                                     ?_cw_bat_init 0070  
                                   ?_cw_bat_work 0070  
