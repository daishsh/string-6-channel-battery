

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Mon Aug 28 14:28:15 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F15323
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	dabs	1,0x7E,2
    48  0000                     
    49                           ; Version 1.43
    50                           ; Generated 25/07/2017 GMT
    51                           ; 
    52                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC16F15323 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     	;# 
    84  0001                     	;# 
    85  0002                     	;# 
    86  0003                     	;# 
    87  0004                     	;# 
    88  0005                     	;# 
    89  0006                     	;# 
    90  0007                     	;# 
    91  0008                     	;# 
    92  0009                     	;# 
    93  000A                     	;# 
    94  000B                     	;# 
    95  000C                     	;# 
    96  000E                     	;# 
    97  0012                     	;# 
    98  0014                     	;# 
    99  0018                     	;# 
   100  001A                     	;# 
   101  009B                     	;# 
   102  009B                     	;# 
   103  009C                     	;# 
   104  009D                     	;# 
   105  009E                     	;# 
   106  009F                     	;# 
   107  0119                     	;# 
   108  0119                     	;# 
   109  0119                     	;# 
   110  011A                     	;# 
   111  011A                     	;# 
   112  011A                     	;# 
   113  011B                     	;# 
   114  011B                     	;# 
   115  011B                     	;# 
   116  011B                     	;# 
   117  011B                     	;# 
   118  011C                     	;# 
   119  011C                     	;# 
   120  011C                     	;# 
   121  011D                     	;# 
   122  011D                     	;# 
   123  011D                     	;# 
   124  011E                     	;# 
   125  011E                     	;# 
   126  011E                     	;# 
   127  011F                     	;# 
   128  011F                     	;# 
   129  011F                     	;# 
   130  011F                     	;# 
   131  011F                     	;# 
   132  018C                     	;# 
   133  018D                     	;# 
   134  018E                     	;# 
   135  018F                     	;# 
   136  0190                     	;# 
   137  0191                     	;# 
   138  0192                     	;# 
   139  020C                     	;# 
   140  020C                     	;# 
   141  020D                     	;# 
   142  020E                     	;# 
   143  020F                     	;# 
   144  020F                     	;# 
   145  0210                     	;# 
   146  0210                     	;# 
   147  0211                     	;# 
   148  0211                     	;# 
   149  028C                     	;# 
   150  028C                     	;# 
   151  028D                     	;# 
   152  028D                     	;# 
   153  028E                     	;# 
   154  028F                     	;# 
   155  0290                     	;# 
   156  0291                     	;# 
   157  030C                     	;# 
   158  030C                     	;# 
   159  030D                     	;# 
   160  030E                     	;# 
   161  030F                     	;# 
   162  0310                     	;# 
   163  0310                     	;# 
   164  0311                     	;# 
   165  0312                     	;# 
   166  0313                     	;# 
   167  0314                     	;# 
   168  0315                     	;# 
   169  0316                     	;# 
   170  0318                     	;# 
   171  0319                     	;# 
   172  031A                     	;# 
   173  031C                     	;# 
   174  031D                     	;# 
   175  031E                     	;# 
   176  038C                     	;# 
   177  038D                     	;# 
   178  038E                     	;# 
   179  058C                     	;# 
   180  058C                     	;# 
   181  058D                     	;# 
   182  058E                     	;# 
   183  058F                     	;# 
   184  058F                     	;# 
   185  0590                     	;# 
   186  0591                     	;# 
   187  0592                     	;# 
   188  0593                     	;# 
   189  059C                     	;# 
   190  059C                     	;# 
   191  059D                     	;# 
   192  059D                     	;# 
   193  059E                     	;# 
   194  059F                     	;# 
   195  060C                     	;# 
   196  060D                     	;# 
   197  060E                     	;# 
   198  060F                     	;# 
   199  0610                     	;# 
   200  0611                     	;# 
   201  0612                     	;# 
   202  0613                     	;# 
   203  0614                     	;# 
   204  070C                     	;# 
   205  070D                     	;# 
   206  070E                     	;# 
   207  070F                     	;# 
   208  0710                     	;# 
   209  0711                     	;# 
   210  0712                     	;# 
   211  0713                     	;# 
   212  0716                     	;# 
   213  0717                     	;# 
   214  0718                     	;# 
   215  0719                     	;# 
   216  071A                     	;# 
   217  071B                     	;# 
   218  071C                     	;# 
   219  071D                     	;# 
   220  0796                     	;# 
   221  0797                     	;# 
   222  0798                     	;# 
   223  0799                     	;# 
   224  079A                     	;# 
   225  079B                     	;# 
   226  080C                     	;# 
   227  080D                     	;# 
   228  080E                     	;# 
   229  080F                     	;# 
   230  0810                     	;# 
   231  0811                     	;# 
   232  0812                     	;# 
   233  0813                     	;# 
   234  0814                     	;# 
   235  081A                     	;# 
   236  081A                     	;# 
   237  081B                     	;# 
   238  081C                     	;# 
   239  081C                     	;# 
   240  081D                     	;# 
   241  081E                     	;# 
   242  081F                     	;# 
   243  088C                     	;# 
   244  088D                     	;# 
   245  088E                     	;# 
   246  088F                     	;# 
   247  0890                     	;# 
   248  0891                     	;# 
   249  0892                     	;# 
   250  0893                     	;# 
   251  0895                     	;# 
   252  0896                     	;# 
   253  090C                     	;# 
   254  090E                     	;# 
   255  090F                     	;# 
   256  091F                     	;# 
   257  098F                     	;# 
   258  098F                     	;# 
   259  0990                     	;# 
   260  0991                     	;# 
   261  0992                     	;# 
   262  0993                     	;# 
   263  0994                     	;# 
   264  0995                     	;# 
   265  0996                     	;# 
   266  0997                     	;# 
   267  1E0F                     	;# 
   268  1E10                     	;# 
   269  1E11                     	;# 
   270  1E12                     	;# 
   271  1E13                     	;# 
   272  1E14                     	;# 
   273  1E15                     	;# 
   274  1E16                     	;# 
   275  1E17                     	;# 
   276  1E18                     	;# 
   277  1E19                     	;# 
   278  1E1A                     	;# 
   279  1E1B                     	;# 
   280  1E1C                     	;# 
   281  1E1D                     	;# 
   282  1E1E                     	;# 
   283  1E1F                     	;# 
   284  1E20                     	;# 
   285  1E21                     	;# 
   286  1E22                     	;# 
   287  1E23                     	;# 
   288  1E24                     	;# 
   289  1E25                     	;# 
   290  1E26                     	;# 
   291  1E27                     	;# 
   292  1E28                     	;# 
   293  1E29                     	;# 
   294  1E2A                     	;# 
   295  1E2B                     	;# 
   296  1E2C                     	;# 
   297  1E2D                     	;# 
   298  1E2E                     	;# 
   299  1E2F                     	;# 
   300  1E30                     	;# 
   301  1E31                     	;# 
   302  1E32                     	;# 
   303  1E33                     	;# 
   304  1E34                     	;# 
   305  1E35                     	;# 
   306  1E36                     	;# 
   307  1E37                     	;# 
   308  1E8F                     	;# 
   309  1E90                     	;# 
   310  1E91                     	;# 
   311  1E92                     	;# 
   312  1E93                     	;# 
   313  1E9C                     	;# 
   314  1EA1                     	;# 
   315  1EA2                     	;# 
   316  1EB1                     	;# 
   317  1EBB                     	;# 
   318  1EBC                     	;# 
   319  1EBD                     	;# 
   320  1EBE                     	;# 
   321  1EC3                     	;# 
   322  1EC5                     	;# 
   323  1EC6                     	;# 
   324  1EC7                     	;# 
   325  1ECB                     	;# 
   326  1ECC                     	;# 
   327  1F10                     	;# 
   328  1F11                     	;# 
   329  1F12                     	;# 
   330  1F13                     	;# 
   331  1F14                     	;# 
   332  1F15                     	;# 
   333  1F20                     	;# 
   334  1F21                     	;# 
   335  1F22                     	;# 
   336  1F23                     	;# 
   337  1F24                     	;# 
   338  1F25                     	;# 
   339  1F38                     	;# 
   340  1F39                     	;# 
   341  1F3A                     	;# 
   342  1F3B                     	;# 
   343  1F3C                     	;# 
   344  1F3D                     	;# 
   345  1F3E                     	;# 
   346  1F3F                     	;# 
   347  1F4E                     	;# 
   348  1F4F                     	;# 
   349  1F50                     	;# 
   350  1F51                     	;# 
   351  1F52                     	;# 
   352  1F53                     	;# 
   353  1F54                     	;# 
   354  1F55                     	;# 
   355  1FE4                     	;# 
   356  1FE5                     	;# 
   357  1FE6                     	;# 
   358  1FE7                     	;# 
   359  1FE8                     	;# 
   360  1FE8                     	;# 
   361  1FE9                     	;# 
   362  1FEA                     	;# 
   363  1FEA                     	;# 
   364  1FEB                     	;# 
   365  1FED                     	;# 
   366  1FEE                     	;# 
   367  1FEF                     	;# 
   368  0000                     	;# 
   369  0001                     	;# 
   370  0002                     	;# 
   371  0003                     	;# 
   372  0004                     	;# 
   373  0005                     	;# 
   374  0006                     	;# 
   375  0007                     	;# 
   376  0008                     	;# 
   377  0009                     	;# 
   378  000A                     	;# 
   379  000B                     	;# 
   380  000C                     	;# 
   381  000E                     	;# 
   382  0012                     	;# 
   383  0014                     	;# 
   384  0018                     	;# 
   385  001A                     	;# 
   386  009B                     	;# 
   387  009B                     	;# 
   388  009C                     	;# 
   389  009D                     	;# 
   390  009E                     	;# 
   391  009F                     	;# 
   392  0119                     	;# 
   393  0119                     	;# 
   394  0119                     	;# 
   395  011A                     	;# 
   396  011A                     	;# 
   397  011A                     	;# 
   398  011B                     	;# 
   399  011B                     	;# 
   400  011B                     	;# 
   401  011B                     	;# 
   402  011B                     	;# 
   403  011C                     	;# 
   404  011C                     	;# 
   405  011C                     	;# 
   406  011D                     	;# 
   407  011D                     	;# 
   408  011D                     	;# 
   409  011E                     	;# 
   410  011E                     	;# 
   411  011E                     	;# 
   412  011F                     	;# 
   413  011F                     	;# 
   414  011F                     	;# 
   415  011F                     	;# 
   416  011F                     	;# 
   417  018C                     	;# 
   418  018D                     	;# 
   419  018E                     	;# 
   420  018F                     	;# 
   421  0190                     	;# 
   422  0191                     	;# 
   423  0192                     	;# 
   424  020C                     	;# 
   425  020C                     	;# 
   426  020D                     	;# 
   427  020E                     	;# 
   428  020F                     	;# 
   429  020F                     	;# 
   430  0210                     	;# 
   431  0210                     	;# 
   432  0211                     	;# 
   433  0211                     	;# 
   434  028C                     	;# 
   435  028C                     	;# 
   436  028D                     	;# 
   437  028D                     	;# 
   438  028E                     	;# 
   439  028F                     	;# 
   440  0290                     	;# 
   441  0291                     	;# 
   442  030C                     	;# 
   443  030C                     	;# 
   444  030D                     	;# 
   445  030E                     	;# 
   446  030F                     	;# 
   447  0310                     	;# 
   448  0310                     	;# 
   449  0311                     	;# 
   450  0312                     	;# 
   451  0313                     	;# 
   452  0314                     	;# 
   453  0315                     	;# 
   454  0316                     	;# 
   455  0318                     	;# 
   456  0319                     	;# 
   457  031A                     	;# 
   458  031C                     	;# 
   459  031D                     	;# 
   460  031E                     	;# 
   461  038C                     	;# 
   462  038D                     	;# 
   463  038E                     	;# 
   464  058C                     	;# 
   465  058C                     	;# 
   466  058D                     	;# 
   467  058E                     	;# 
   468  058F                     	;# 
   469  058F                     	;# 
   470  0590                     	;# 
   471  0591                     	;# 
   472  0592                     	;# 
   473  0593                     	;# 
   474  059C                     	;# 
   475  059C                     	;# 
   476  059D                     	;# 
   477  059D                     	;# 
   478  059E                     	;# 
   479  059F                     	;# 
   480  060C                     	;# 
   481  060D                     	;# 
   482  060E                     	;# 
   483  060F                     	;# 
   484  0610                     	;# 
   485  0611                     	;# 
   486  0612                     	;# 
   487  0613                     	;# 
   488  0614                     	;# 
   489  070C                     	;# 
   490  070D                     	;# 
   491  070E                     	;# 
   492  070F                     	;# 
   493  0710                     	;# 
   494  0711                     	;# 
   495  0712                     	;# 
   496  0713                     	;# 
   497  0716                     	;# 
   498  0717                     	;# 
   499  0718                     	;# 
   500  0719                     	;# 
   501  071A                     	;# 
   502  071B                     	;# 
   503  071C                     	;# 
   504  071D                     	;# 
   505  0796                     	;# 
   506  0797                     	;# 
   507  0798                     	;# 
   508  0799                     	;# 
   509  079A                     	;# 
   510  079B                     	;# 
   511  080C                     	;# 
   512  080D                     	;# 
   513  080E                     	;# 
   514  080F                     	;# 
   515  0810                     	;# 
   516  0811                     	;# 
   517  0812                     	;# 
   518  0813                     	;# 
   519  0814                     	;# 
   520  081A                     	;# 
   521  081A                     	;# 
   522  081B                     	;# 
   523  081C                     	;# 
   524  081C                     	;# 
   525  081D                     	;# 
   526  081E                     	;# 
   527  081F                     	;# 
   528  088C                     	;# 
   529  088D                     	;# 
   530  088E                     	;# 
   531  088F                     	;# 
   532  0890                     	;# 
   533  0891                     	;# 
   534  0892                     	;# 
   535  0893                     	;# 
   536  0895                     	;# 
   537  0896                     	;# 
   538  090C                     	;# 
   539  090E                     	;# 
   540  090F                     	;# 
   541  091F                     	;# 
   542  098F                     	;# 
   543  098F                     	;# 
   544  0990                     	;# 
   545  0991                     	;# 
   546  0992                     	;# 
   547  0993                     	;# 
   548  0994                     	;# 
   549  0995                     	;# 
   550  0996                     	;# 
   551  0997                     	;# 
   552  1E0F                     	;# 
   553  1E10                     	;# 
   554  1E11                     	;# 
   555  1E12                     	;# 
   556  1E13                     	;# 
   557  1E14                     	;# 
   558  1E15                     	;# 
   559  1E16                     	;# 
   560  1E17                     	;# 
   561  1E18                     	;# 
   562  1E19                     	;# 
   563  1E1A                     	;# 
   564  1E1B                     	;# 
   565  1E1C                     	;# 
   566  1E1D                     	;# 
   567  1E1E                     	;# 
   568  1E1F                     	;# 
   569  1E20                     	;# 
   570  1E21                     	;# 
   571  1E22                     	;# 
   572  1E23                     	;# 
   573  1E24                     	;# 
   574  1E25                     	;# 
   575  1E26                     	;# 
   576  1E27                     	;# 
   577  1E28                     	;# 
   578  1E29                     	;# 
   579  1E2A                     	;# 
   580  1E2B                     	;# 
   581  1E2C                     	;# 
   582  1E2D                     	;# 
   583  1E2E                     	;# 
   584  1E2F                     	;# 
   585  1E30                     	;# 
   586  1E31                     	;# 
   587  1E32                     	;# 
   588  1E33                     	;# 
   589  1E34                     	;# 
   590  1E35                     	;# 
   591  1E36                     	;# 
   592  1E37                     	;# 
   593  1E8F                     	;# 
   594  1E90                     	;# 
   595  1E91                     	;# 
   596  1E92                     	;# 
   597  1E93                     	;# 
   598  1E9C                     	;# 
   599  1EA1                     	;# 
   600  1EA2                     	;# 
   601  1EB1                     	;# 
   602  1EBB                     	;# 
   603  1EBC                     	;# 
   604  1EBD                     	;# 
   605  1EBE                     	;# 
   606  1EC3                     	;# 
   607  1EC5                     	;# 
   608  1EC6                     	;# 
   609  1EC7                     	;# 
   610  1ECB                     	;# 
   611  1ECC                     	;# 
   612  1F10                     	;# 
   613  1F11                     	;# 
   614  1F12                     	;# 
   615  1F13                     	;# 
   616  1F14                     	;# 
   617  1F15                     	;# 
   618  1F20                     	;# 
   619  1F21                     	;# 
   620  1F22                     	;# 
   621  1F23                     	;# 
   622  1F24                     	;# 
   623  1F25                     	;# 
   624  1F38                     	;# 
   625  1F39                     	;# 
   626  1F3A                     	;# 
   627  1F3B                     	;# 
   628  1F3C                     	;# 
   629  1F3D                     	;# 
   630  1F3E                     	;# 
   631  1F3F                     	;# 
   632  1F4E                     	;# 
   633  1F4F                     	;# 
   634  1F50                     	;# 
   635  1F51                     	;# 
   636  1F52                     	;# 
   637  1F53                     	;# 
   638  1F54                     	;# 
   639  1F55                     	;# 
   640  1FE4                     	;# 
   641  1FE5                     	;# 
   642  1FE6                     	;# 
   643  1FE7                     	;# 
   644  1FE8                     	;# 
   645  1FE8                     	;# 
   646  1FE9                     	;# 
   647  1FEA                     	;# 
   648  1FEA                     	;# 
   649  1FEB                     	;# 
   650  1FED                     	;# 
   651  1FEE                     	;# 
   652  1FEF                     	;# 
   653  0000                     	;# 
   654  0001                     	;# 
   655  0002                     	;# 
   656  0003                     	;# 
   657  0004                     	;# 
   658  0005                     	;# 
   659  0006                     	;# 
   660  0007                     	;# 
   661  0008                     	;# 
   662  0009                     	;# 
   663  000A                     	;# 
   664  000B                     	;# 
   665  000C                     	;# 
   666  000E                     	;# 
   667  0012                     	;# 
   668  0014                     	;# 
   669  0018                     	;# 
   670  001A                     	;# 
   671  009B                     	;# 
   672  009B                     	;# 
   673  009C                     	;# 
   674  009D                     	;# 
   675  009E                     	;# 
   676  009F                     	;# 
   677  0119                     	;# 
   678  0119                     	;# 
   679  0119                     	;# 
   680  011A                     	;# 
   681  011A                     	;# 
   682  011A                     	;# 
   683  011B                     	;# 
   684  011B                     	;# 
   685  011B                     	;# 
   686  011B                     	;# 
   687  011B                     	;# 
   688  011C                     	;# 
   689  011C                     	;# 
   690  011C                     	;# 
   691  011D                     	;# 
   692  011D                     	;# 
   693  011D                     	;# 
   694  011E                     	;# 
   695  011E                     	;# 
   696  011E                     	;# 
   697  011F                     	;# 
   698  011F                     	;# 
   699  011F                     	;# 
   700  011F                     	;# 
   701  011F                     	;# 
   702  018C                     	;# 
   703  018D                     	;# 
   704  018E                     	;# 
   705  018F                     	;# 
   706  0190                     	;# 
   707  0191                     	;# 
   708  0192                     	;# 
   709  020C                     	;# 
   710  020C                     	;# 
   711  020D                     	;# 
   712  020E                     	;# 
   713  020F                     	;# 
   714  020F                     	;# 
   715  0210                     	;# 
   716  0210                     	;# 
   717  0211                     	;# 
   718  0211                     	;# 
   719  028C                     	;# 
   720  028C                     	;# 
   721  028D                     	;# 
   722  028D                     	;# 
   723  028E                     	;# 
   724  028F                     	;# 
   725  0290                     	;# 
   726  0291                     	;# 
   727  030C                     	;# 
   728  030C                     	;# 
   729  030D                     	;# 
   730  030E                     	;# 
   731  030F                     	;# 
   732  0310                     	;# 
   733  0310                     	;# 
   734  0311                     	;# 
   735  0312                     	;# 
   736  0313                     	;# 
   737  0314                     	;# 
   738  0315                     	;# 
   739  0316                     	;# 
   740  0318                     	;# 
   741  0319                     	;# 
   742  031A                     	;# 
   743  031C                     	;# 
   744  031D                     	;# 
   745  031E                     	;# 
   746  038C                     	;# 
   747  038D                     	;# 
   748  038E                     	;# 
   749  058C                     	;# 
   750  058C                     	;# 
   751  058D                     	;# 
   752  058E                     	;# 
   753  058F                     	;# 
   754  058F                     	;# 
   755  0590                     	;# 
   756  0591                     	;# 
   757  0592                     	;# 
   758  0593                     	;# 
   759  059C                     	;# 
   760  059C                     	;# 
   761  059D                     	;# 
   762  059D                     	;# 
   763  059E                     	;# 
   764  059F                     	;# 
   765  060C                     	;# 
   766  060D                     	;# 
   767  060E                     	;# 
   768  060F                     	;# 
   769  0610                     	;# 
   770  0611                     	;# 
   771  0612                     	;# 
   772  0613                     	;# 
   773  0614                     	;# 
   774  070C                     	;# 
   775  070D                     	;# 
   776  070E                     	;# 
   777  070F                     	;# 
   778  0710                     	;# 
   779  0711                     	;# 
   780  0712                     	;# 
   781  0713                     	;# 
   782  0716                     	;# 
   783  0717                     	;# 
   784  0718                     	;# 
   785  0719                     	;# 
   786  071A                     	;# 
   787  071B                     	;# 
   788  071C                     	;# 
   789  071D                     	;# 
   790  0796                     	;# 
   791  0797                     	;# 
   792  0798                     	;# 
   793  0799                     	;# 
   794  079A                     	;# 
   795  079B                     	;# 
   796  080C                     	;# 
   797  080D                     	;# 
   798  080E                     	;# 
   799  080F                     	;# 
   800  0810                     	;# 
   801  0811                     	;# 
   802  0812                     	;# 
   803  0813                     	;# 
   804  0814                     	;# 
   805  081A                     	;# 
   806  081A                     	;# 
   807  081B                     	;# 
   808  081C                     	;# 
   809  081C                     	;# 
   810  081D                     	;# 
   811  081E                     	;# 
   812  081F                     	;# 
   813  088C                     	;# 
   814  088D                     	;# 
   815  088E                     	;# 
   816  088F                     	;# 
   817  0890                     	;# 
   818  0891                     	;# 
   819  0892                     	;# 
   820  0893                     	;# 
   821  0895                     	;# 
   822  0896                     	;# 
   823  090C                     	;# 
   824  090E                     	;# 
   825  090F                     	;# 
   826  091F                     	;# 
   827  098F                     	;# 
   828  098F                     	;# 
   829  0990                     	;# 
   830  0991                     	;# 
   831  0992                     	;# 
   832  0993                     	;# 
   833  0994                     	;# 
   834  0995                     	;# 
   835  0996                     	;# 
   836  0997                     	;# 
   837  1E0F                     	;# 
   838  1E10                     	;# 
   839  1E11                     	;# 
   840  1E12                     	;# 
   841  1E13                     	;# 
   842  1E14                     	;# 
   843  1E15                     	;# 
   844  1E16                     	;# 
   845  1E17                     	;# 
   846  1E18                     	;# 
   847  1E19                     	;# 
   848  1E1A                     	;# 
   849  1E1B                     	;# 
   850  1E1C                     	;# 
   851  1E1D                     	;# 
   852  1E1E                     	;# 
   853  1E1F                     	;# 
   854  1E20                     	;# 
   855  1E21                     	;# 
   856  1E22                     	;# 
   857  1E23                     	;# 
   858  1E24                     	;# 
   859  1E25                     	;# 
   860  1E26                     	;# 
   861  1E27                     	;# 
   862  1E28                     	;# 
   863  1E29                     	;# 
   864  1E2A                     	;# 
   865  1E2B                     	;# 
   866  1E2C                     	;# 
   867  1E2D                     	;# 
   868  1E2E                     	;# 
   869  1E2F                     	;# 
   870  1E30                     	;# 
   871  1E31                     	;# 
   872  1E32                     	;# 
   873  1E33                     	;# 
   874  1E34                     	;# 
   875  1E35                     	;# 
   876  1E36                     	;# 
   877  1E37                     	;# 
   878  1E8F                     	;# 
   879  1E90                     	;# 
   880  1E91                     	;# 
   881  1E92                     	;# 
   882  1E93                     	;# 
   883  1E9C                     	;# 
   884  1EA1                     	;# 
   885  1EA2                     	;# 
   886  1EB1                     	;# 
   887  1EBB                     	;# 
   888  1EBC                     	;# 
   889  1EBD                     	;# 
   890  1EBE                     	;# 
   891  1EC3                     	;# 
   892  1EC5                     	;# 
   893  1EC6                     	;# 
   894  1EC7                     	;# 
   895  1ECB                     	;# 
   896  1ECC                     	;# 
   897  1F10                     	;# 
   898  1F11                     	;# 
   899  1F12                     	;# 
   900  1F13                     	;# 
   901  1F14                     	;# 
   902  1F15                     	;# 
   903  1F20                     	;# 
   904  1F21                     	;# 
   905  1F22                     	;# 
   906  1F23                     	;# 
   907  1F24                     	;# 
   908  1F25                     	;# 
   909  1F38                     	;# 
   910  1F39                     	;# 
   911  1F3A                     	;# 
   912  1F3B                     	;# 
   913  1F3C                     	;# 
   914  1F3D                     	;# 
   915  1F3E                     	;# 
   916  1F3F                     	;# 
   917  1F4E                     	;# 
   918  1F4F                     	;# 
   919  1F50                     	;# 
   920  1F51                     	;# 
   921  1F52                     	;# 
   922  1F53                     	;# 
   923  1F54                     	;# 
   924  1F55                     	;# 
   925  1FE4                     	;# 
   926  1FE5                     	;# 
   927  1FE6                     	;# 
   928  1FE7                     	;# 
   929  1FE8                     	;# 
   930  1FE8                     	;# 
   931  1FE9                     	;# 
   932  1FEA                     	;# 
   933  1FEA                     	;# 
   934  1FEB                     	;# 
   935  1FED                     	;# 
   936  1FEE                     	;# 
   937  1FEF                     	;# 
   938  0000                     	;# 
   939  0001                     	;# 
   940  0002                     	;# 
   941  0003                     	;# 
   942  0004                     	;# 
   943  0005                     	;# 
   944  0006                     	;# 
   945  0007                     	;# 
   946  0008                     	;# 
   947  0009                     	;# 
   948  000A                     	;# 
   949  000B                     	;# 
   950  000C                     	;# 
   951  000E                     	;# 
   952  0012                     	;# 
   953  0014                     	;# 
   954  0018                     	;# 
   955  001A                     	;# 
   956  009B                     	;# 
   957  009B                     	;# 
   958  009C                     	;# 
   959  009D                     	;# 
   960  009E                     	;# 
   961  009F                     	;# 
   962  0119                     	;# 
   963  0119                     	;# 
   964  0119                     	;# 
   965  011A                     	;# 
   966  011A                     	;# 
   967  011A                     	;# 
   968  011B                     	;# 
   969  011B                     	;# 
   970  011B                     	;# 
   971  011B                     	;# 
   972  011B                     	;# 
   973  011C                     	;# 
   974  011C                     	;# 
   975  011C                     	;# 
   976  011D                     	;# 
   977  011D                     	;# 
   978  011D                     	;# 
   979  011E                     	;# 
   980  011E                     	;# 
   981  011E                     	;# 
   982  011F                     	;# 
   983  011F                     	;# 
   984  011F                     	;# 
   985  011F                     	;# 
   986  011F                     	;# 
   987  018C                     	;# 
   988  018D                     	;# 
   989  018E                     	;# 
   990  018F                     	;# 
   991  0190                     	;# 
   992  0191                     	;# 
   993  0192                     	;# 
   994  020C                     	;# 
   995  020C                     	;# 
   996  020D                     	;# 
   997  020E                     	;# 
   998  020F                     	;# 
   999  020F                     	;# 
  1000  0210                     	;# 
  1001  0210                     	;# 
  1002  0211                     	;# 
  1003  0211                     	;# 
  1004  028C                     	;# 
  1005  028C                     	;# 
  1006  028D                     	;# 
  1007  028D                     	;# 
  1008  028E                     	;# 
  1009  028F                     	;# 
  1010  0290                     	;# 
  1011  0291                     	;# 
  1012  030C                     	;# 
  1013  030C                     	;# 
  1014  030D                     	;# 
  1015  030E                     	;# 
  1016  030F                     	;# 
  1017  0310                     	;# 
  1018  0310                     	;# 
  1019  0311                     	;# 
  1020  0312                     	;# 
  1021  0313                     	;# 
  1022  0314                     	;# 
  1023  0315                     	;# 
  1024  0316                     	;# 
  1025  0318                     	;# 
  1026  0319                     	;# 
  1027  031A                     	;# 
  1028  031C                     	;# 
  1029  031D                     	;# 
  1030  031E                     	;# 
  1031  038C                     	;# 
  1032  038D                     	;# 
  1033  038E                     	;# 
  1034  058C                     	;# 
  1035  058C                     	;# 
  1036  058D                     	;# 
  1037  058E                     	;# 
  1038  058F                     	;# 
  1039  058F                     	;# 
  1040  0590                     	;# 
  1041  0591                     	;# 
  1042  0592                     	;# 
  1043  0593                     	;# 
  1044  059C                     	;# 
  1045  059C                     	;# 
  1046  059D                     	;# 
  1047  059D                     	;# 
  1048  059E                     	;# 
  1049  059F                     	;# 
  1050  060C                     	;# 
  1051  060D                     	;# 
  1052  060E                     	;# 
  1053  060F                     	;# 
  1054  0610                     	;# 
  1055  0611                     	;# 
  1056  0612                     	;# 
  1057  0613                     	;# 
  1058  0614                     	;# 
  1059  070C                     	;# 
  1060  070D                     	;# 
  1061  070E                     	;# 
  1062  070F                     	;# 
  1063  0710                     	;# 
  1064  0711                     	;# 
  1065  0712                     	;# 
  1066  0713                     	;# 
  1067  0716                     	;# 
  1068  0717                     	;# 
  1069  0718                     	;# 
  1070  0719                     	;# 
  1071  071A                     	;# 
  1072  071B                     	;# 
  1073  071C                     	;# 
  1074  071D                     	;# 
  1075  0796                     	;# 
  1076  0797                     	;# 
  1077  0798                     	;# 
  1078  0799                     	;# 
  1079  079A                     	;# 
  1080  079B                     	;# 
  1081  080C                     	;# 
  1082  080D                     	;# 
  1083  080E                     	;# 
  1084  080F                     	;# 
  1085  0810                     	;# 
  1086  0811                     	;# 
  1087  0812                     	;# 
  1088  0813                     	;# 
  1089  0814                     	;# 
  1090  081A                     	;# 
  1091  081A                     	;# 
  1092  081B                     	;# 
  1093  081C                     	;# 
  1094  081C                     	;# 
  1095  081D                     	;# 
  1096  081E                     	;# 
  1097  081F                     	;# 
  1098  088C                     	;# 
  1099  088D                     	;# 
  1100  088E                     	;# 
  1101  088F                     	;# 
  1102  0890                     	;# 
  1103  0891                     	;# 
  1104  0892                     	;# 
  1105  0893                     	;# 
  1106  0895                     	;# 
  1107  0896                     	;# 
  1108  090C                     	;# 
  1109  090E                     	;# 
  1110  090F                     	;# 
  1111  091F                     	;# 
  1112  098F                     	;# 
  1113  098F                     	;# 
  1114  0990                     	;# 
  1115  0991                     	;# 
  1116  0992                     	;# 
  1117  0993                     	;# 
  1118  0994                     	;# 
  1119  0995                     	;# 
  1120  0996                     	;# 
  1121  0997                     	;# 
  1122  1E0F                     	;# 
  1123  1E10                     	;# 
  1124  1E11                     	;# 
  1125  1E12                     	;# 
  1126  1E13                     	;# 
  1127  1E14                     	;# 
  1128  1E15                     	;# 
  1129  1E16                     	;# 
  1130  1E17                     	;# 
  1131  1E18                     	;# 
  1132  1E19                     	;# 
  1133  1E1A                     	;# 
  1134  1E1B                     	;# 
  1135  1E1C                     	;# 
  1136  1E1D                     	;# 
  1137  1E1E                     	;# 
  1138  1E1F                     	;# 
  1139  1E20                     	;# 
  1140  1E21                     	;# 
  1141  1E22                     	;# 
  1142  1E23                     	;# 
  1143  1E24                     	;# 
  1144  1E25                     	;# 
  1145  1E26                     	;# 
  1146  1E27                     	;# 
  1147  1E28                     	;# 
  1148  1E29                     	;# 
  1149  1E2A                     	;# 
  1150  1E2B                     	;# 
  1151  1E2C                     	;# 
  1152  1E2D                     	;# 
  1153  1E2E                     	;# 
  1154  1E2F                     	;# 
  1155  1E30                     	;# 
  1156  1E31                     	;# 
  1157  1E32                     	;# 
  1158  1E33                     	;# 
  1159  1E34                     	;# 
  1160  1E35                     	;# 
  1161  1E36                     	;# 
  1162  1E37                     	;# 
  1163  1E8F                     	;# 
  1164  1E90                     	;# 
  1165  1E91                     	;# 
  1166  1E92                     	;# 
  1167  1E93                     	;# 
  1168  1E9C                     	;# 
  1169  1EA1                     	;# 
  1170  1EA2                     	;# 
  1171  1EB1                     	;# 
  1172  1EBB                     	;# 
  1173  1EBC                     	;# 
  1174  1EBD                     	;# 
  1175  1EBE                     	;# 
  1176  1EC3                     	;# 
  1177  1EC5                     	;# 
  1178  1EC6                     	;# 
  1179  1EC7                     	;# 
  1180  1ECB                     	;# 
  1181  1ECC                     	;# 
  1182  1F10                     	;# 
  1183  1F11                     	;# 
  1184  1F12                     	;# 
  1185  1F13                     	;# 
  1186  1F14                     	;# 
  1187  1F15                     	;# 
  1188  1F20                     	;# 
  1189  1F21                     	;# 
  1190  1F22                     	;# 
  1191  1F23                     	;# 
  1192  1F24                     	;# 
  1193  1F25                     	;# 
  1194  1F38                     	;# 
  1195  1F39                     	;# 
  1196  1F3A                     	;# 
  1197  1F3B                     	;# 
  1198  1F3C                     	;# 
  1199  1F3D                     	;# 
  1200  1F3E                     	;# 
  1201  1F3F                     	;# 
  1202  1F4E                     	;# 
  1203  1F4F                     	;# 
  1204  1F50                     	;# 
  1205  1F51                     	;# 
  1206  1F52                     	;# 
  1207  1F53                     	;# 
  1208  1F54                     	;# 
  1209  1F55                     	;# 
  1210  1FE4                     	;# 
  1211  1FE5                     	;# 
  1212  1FE6                     	;# 
  1213  1FE7                     	;# 
  1214  1FE8                     	;# 
  1215  1FE8                     	;# 
  1216  1FE9                     	;# 
  1217  1FEA                     	;# 
  1218  1FEA                     	;# 
  1219  1FEB                     	;# 
  1220  1FED                     	;# 
  1221  1FEE                     	;# 
  1222  1FEF                     	;# 
  1223  0000                     	;# 
  1224  0001                     	;# 
  1225  0002                     	;# 
  1226  0003                     	;# 
  1227  0004                     	;# 
  1228  0005                     	;# 
  1229  0006                     	;# 
  1230  0007                     	;# 
  1231  0008                     	;# 
  1232  0009                     	;# 
  1233  000A                     	;# 
  1234  000B                     	;# 
  1235  000C                     	;# 
  1236  000E                     	;# 
  1237  0012                     	;# 
  1238  0014                     	;# 
  1239  0018                     	;# 
  1240  001A                     	;# 
  1241  009B                     	;# 
  1242  009B                     	;# 
  1243  009C                     	;# 
  1244  009D                     	;# 
  1245  009E                     	;# 
  1246  009F                     	;# 
  1247  0119                     	;# 
  1248  0119                     	;# 
  1249  0119                     	;# 
  1250  011A                     	;# 
  1251  011A                     	;# 
  1252  011A                     	;# 
  1253  011B                     	;# 
  1254  011B                     	;# 
  1255  011B                     	;# 
  1256  011B                     	;# 
  1257  011B                     	;# 
  1258  011C                     	;# 
  1259  011C                     	;# 
  1260  011C                     	;# 
  1261  011D                     	;# 
  1262  011D                     	;# 
  1263  011D                     	;# 
  1264  011E                     	;# 
  1265  011E                     	;# 
  1266  011E                     	;# 
  1267  011F                     	;# 
  1268  011F                     	;# 
  1269  011F                     	;# 
  1270  011F                     	;# 
  1271  011F                     	;# 
  1272  018C                     	;# 
  1273  018D                     	;# 
  1274  018E                     	;# 
  1275  018F                     	;# 
  1276  0190                     	;# 
  1277  0191                     	;# 
  1278  0192                     	;# 
  1279  020C                     	;# 
  1280  020C                     	;# 
  1281  020D                     	;# 
  1282  020E                     	;# 
  1283  020F                     	;# 
  1284  020F                     	;# 
  1285  0210                     	;# 
  1286  0210                     	;# 
  1287  0211                     	;# 
  1288  0211                     	;# 
  1289  028C                     	;# 
  1290  028C                     	;# 
  1291  028D                     	;# 
  1292  028D                     	;# 
  1293  028E                     	;# 
  1294  028F                     	;# 
  1295  0290                     	;# 
  1296  0291                     	;# 
  1297  030C                     	;# 
  1298  030C                     	;# 
  1299  030D                     	;# 
  1300  030E                     	;# 
  1301  030F                     	;# 
  1302  0310                     	;# 
  1303  0310                     	;# 
  1304  0311                     	;# 
  1305  0312                     	;# 
  1306  0313                     	;# 
  1307  0314                     	;# 
  1308  0315                     	;# 
  1309  0316                     	;# 
  1310  0318                     	;# 
  1311  0319                     	;# 
  1312  031A                     	;# 
  1313  031C                     	;# 
  1314  031D                     	;# 
  1315  031E                     	;# 
  1316  038C                     	;# 
  1317  038D                     	;# 
  1318  038E                     	;# 
  1319  058C                     	;# 
  1320  058C                     	;# 
  1321  058D                     	;# 
  1322  058E                     	;# 
  1323  058F                     	;# 
  1324  058F                     	;# 
  1325  0590                     	;# 
  1326  0591                     	;# 
  1327  0592                     	;# 
  1328  0593                     	;# 
  1329  059C                     	;# 
  1330  059C                     	;# 
  1331  059D                     	;# 
  1332  059D                     	;# 
  1333  059E                     	;# 
  1334  059F                     	;# 
  1335  060C                     	;# 
  1336  060D                     	;# 
  1337  060E                     	;# 
  1338  060F                     	;# 
  1339  0610                     	;# 
  1340  0611                     	;# 
  1341  0612                     	;# 
  1342  0613                     	;# 
  1343  0614                     	;# 
  1344  070C                     	;# 
  1345  070D                     	;# 
  1346  070E                     	;# 
  1347  070F                     	;# 
  1348  0710                     	;# 
  1349  0711                     	;# 
  1350  0712                     	;# 
  1351  0713                     	;# 
  1352  0716                     	;# 
  1353  0717                     	;# 
  1354  0718                     	;# 
  1355  0719                     	;# 
  1356  071A                     	;# 
  1357  071B                     	;# 
  1358  071C                     	;# 
  1359  071D                     	;# 
  1360  0796                     	;# 
  1361  0797                     	;# 
  1362  0798                     	;# 
  1363  0799                     	;# 
  1364  079A                     	;# 
  1365  079B                     	;# 
  1366  080C                     	;# 
  1367  080D                     	;# 
  1368  080E                     	;# 
  1369  080F                     	;# 
  1370  0810                     	;# 
  1371  0811                     	;# 
  1372  0812                     	;# 
  1373  0813                     	;# 
  1374  0814                     	;# 
  1375  081A                     	;# 
  1376  081A                     	;# 
  1377  081B                     	;# 
  1378  081C                     	;# 
  1379  081C                     	;# 
  1380  081D                     	;# 
  1381  081E                     	;# 
  1382  081F                     	;# 
  1383  088C                     	;# 
  1384  088D                     	;# 
  1385  088E                     	;# 
  1386  088F                     	;# 
  1387  0890                     	;# 
  1388  0891                     	;# 
  1389  0892                     	;# 
  1390  0893                     	;# 
  1391  0895                     	;# 
  1392  0896                     	;# 
  1393  090C                     	;# 
  1394  090E                     	;# 
  1395  090F                     	;# 
  1396  091F                     	;# 
  1397  098F                     	;# 
  1398  098F                     	;# 
  1399  0990                     	;# 
  1400  0991                     	;# 
  1401  0992                     	;# 
  1402  0993                     	;# 
  1403  0994                     	;# 
  1404  0995                     	;# 
  1405  0996                     	;# 
  1406  0997                     	;# 
  1407  1E0F                     	;# 
  1408  1E10                     	;# 
  1409  1E11                     	;# 
  1410  1E12                     	;# 
  1411  1E13                     	;# 
  1412  1E14                     	;# 
  1413  1E15                     	;# 
  1414  1E16                     	;# 
  1415  1E17                     	;# 
  1416  1E18                     	;# 
  1417  1E19                     	;# 
  1418  1E1A                     	;# 
  1419  1E1B                     	;# 
  1420  1E1C                     	;# 
  1421  1E1D                     	;# 
  1422  1E1E                     	;# 
  1423  1E1F                     	;# 
  1424  1E20                     	;# 
  1425  1E21                     	;# 
  1426  1E22                     	;# 
  1427  1E23                     	;# 
  1428  1E24                     	;# 
  1429  1E25                     	;# 
  1430  1E26                     	;# 
  1431  1E27                     	;# 
  1432  1E28                     	;# 
  1433  1E29                     	;# 
  1434  1E2A                     	;# 
  1435  1E2B                     	;# 
  1436  1E2C                     	;# 
  1437  1E2D                     	;# 
  1438  1E2E                     	;# 
  1439  1E2F                     	;# 
  1440  1E30                     	;# 
  1441  1E31                     	;# 
  1442  1E32                     	;# 
  1443  1E33                     	;# 
  1444  1E34                     	;# 
  1445  1E35                     	;# 
  1446  1E36                     	;# 
  1447  1E37                     	;# 
  1448  1E8F                     	;# 
  1449  1E90                     	;# 
  1450  1E91                     	;# 
  1451  1E92                     	;# 
  1452  1E93                     	;# 
  1453  1E9C                     	;# 
  1454  1EA1                     	;# 
  1455  1EA2                     	;# 
  1456  1EB1                     	;# 
  1457  1EBB                     	;# 
  1458  1EBC                     	;# 
  1459  1EBD                     	;# 
  1460  1EBE                     	;# 
  1461  1EC3                     	;# 
  1462  1EC5                     	;# 
  1463  1EC6                     	;# 
  1464  1EC7                     	;# 
  1465  1ECB                     	;# 
  1466  1ECC                     	;# 
  1467  1F10                     	;# 
  1468  1F11                     	;# 
  1469  1F12                     	;# 
  1470  1F13                     	;# 
  1471  1F14                     	;# 
  1472  1F15                     	;# 
  1473  1F20                     	;# 
  1474  1F21                     	;# 
  1475  1F22                     	;# 
  1476  1F23                     	;# 
  1477  1F24                     	;# 
  1478  1F25                     	;# 
  1479  1F38                     	;# 
  1480  1F39                     	;# 
  1481  1F3A                     	;# 
  1482  1F3B                     	;# 
  1483  1F3C                     	;# 
  1484  1F3D                     	;# 
  1485  1F3E                     	;# 
  1486  1F3F                     	;# 
  1487  1F4E                     	;# 
  1488  1F4F                     	;# 
  1489  1F50                     	;# 
  1490  1F51                     	;# 
  1491  1F52                     	;# 
  1492  1F53                     	;# 
  1493  1F54                     	;# 
  1494  1F55                     	;# 
  1495  1FE4                     	;# 
  1496  1FE5                     	;# 
  1497  1FE6                     	;# 
  1498  1FE7                     	;# 
  1499  1FE8                     	;# 
  1500  1FE8                     	;# 
  1501  1FE9                     	;# 
  1502  1FEA                     	;# 
  1503  1FEA                     	;# 
  1504  1FEB                     	;# 
  1505  1FED                     	;# 
  1506  1FEE                     	;# 
  1507  1FEF                     	;# 
  1508                           
  1509                           	psect	idataBANK1
  1510  031B                     __pidataBANK1:	
  1511                           
  1512                           ;initializer for CW201x@cw_bat_config_info
  1513  031B  3414               	retlw	20
  1514  031C  34A6               	retlw	166
  1515  031D  3470               	retlw	112
  1516  031E  346C               	retlw	108
  1517  031F  346C               	retlw	108
  1518  0320  3467               	retlw	103
  1519  0321  3464               	retlw	100
  1520  0322  3462               	retlw	98
  1521  0323  3460               	retlw	96
  1522  0324  345C               	retlw	92
  1523  0325  3459               	retlw	89
  1524  0326  344E               	retlw	78
  1525  0327  3450               	retlw	80
  1526  0328  3442               	retlw	66
  1527  0329  342E               	retlw	46
  1528  032A  3426               	retlw	38
  1529  032B  3425               	retlw	37
  1530  032C  3424               	retlw	36
  1531  032D  3427               	retlw	39
  1532  032E  342E               	retlw	46
  1533  032F  3441               	retlw	65
  1534  0330  345A               	retlw	90
  1535  0331  346D               	retlw	109
  1536  0332  344C               	retlw	76
  1537  0333  3439               	retlw	57
  1538  0334  34D7               	retlw	215
  1539  0335  3406               	retlw	6
  1540  0336  3466               	retlw	102
  1541  0337  3400               	retlw	0
  1542  0338  3401               	retlw	1
  1543  0339  3405               	retlw	5
  1544  033A  3434               	retlw	52
  1545  033B  3461               	retlw	97
  1546  033C  3476               	retlw	118
  1547  033D  3479               	retlw	121
  1548  033E  347D               	retlw	125
  1549  033F  3442               	retlw	66
  1550  0340  341E               	retlw	30
  1551  0341  34A4               	retlw	164
  1552  0342  3400               	retlw	0
  1553  0343  3427               	retlw	39
  1554  0344  345A               	retlw	90
  1555  0345  3452               	retlw	82
  1556  0346  3487               	retlw	135
  1557  0347  348F               	retlw	143
  1558  0348  3491               	retlw	145
  1559  0349  3494               	retlw	148
  1560  034A  3452               	retlw	82
  1561  034B  3482               	retlw	130
  1562  034C  348C               	retlw	140
  1563  034D  3492               	retlw	146
  1564  034E  3496               	retlw	150
  1565  034F  342B               	retlw	43
  1566  0350  3459               	retlw	89
  1567  0351  346E               	retlw	110
  1568  0352  34CB               	retlw	203
  1569  0353  342F               	retlw	47
  1570  0354  347D               	retlw	125
  1571  0355  3472               	retlw	114
  1572  0356  34A5               	retlw	165
  1573  0357  34B5               	retlw	181
  1574  0358  34C1               	retlw	193
  1575  0359  3494               	retlw	148
  1576  035A  3499               	retlw	153
  1577                           
  1578                           	psect	idataBANK2
  1579  02DB                     __pidataBANK2:	
  1580                           ;initializer for _cw_bat_config_info
  1581                           
  1582  02DB  3414               	retlw	20
  1583  02DC  34A6               	retlw	166
  1584  02DD  3470               	retlw	112
  1585  02DE  346C               	retlw	108
  1586  02DF  346C               	retlw	108
  1587  02E0  3467               	retlw	103
  1588  02E1  3464               	retlw	100
  1589  02E2  3462               	retlw	98
  1590  02E3  3460               	retlw	96
  1591  02E4  345C               	retlw	92
  1592  02E5  3459               	retlw	89
  1593  02E6  344E               	retlw	78
  1594  02E7  3450               	retlw	80
  1595  02E8  3442               	retlw	66
  1596  02E9  342E               	retlw	46
  1597  02EA  3426               	retlw	38
  1598  02EB  3425               	retlw	37
  1599  02EC  3424               	retlw	36
  1600  02ED  3427               	retlw	39
  1601  02EE  342E               	retlw	46
  1602  02EF  3441               	retlw	65
  1603  02F0  345A               	retlw	90
  1604  02F1  346D               	retlw	109
  1605  02F2  344C               	retlw	76
  1606  02F3  3439               	retlw	57
  1607  02F4  34D7               	retlw	215
  1608  02F5  3406               	retlw	6
  1609  02F6  3466               	retlw	102
  1610  02F7  3400               	retlw	0
  1611  02F8  3401               	retlw	1
  1612  02F9  3405               	retlw	5
  1613  02FA  3434               	retlw	52
  1614  02FB  3461               	retlw	97
  1615  02FC  3476               	retlw	118
  1616  02FD  3479               	retlw	121
  1617  02FE  347D               	retlw	125
  1618  02FF  3442               	retlw	66
  1619  0300  341E               	retlw	30
  1620  0301  34A4               	retlw	164
  1621  0302  3400               	retlw	0
  1622  0303  3427               	retlw	39
  1623  0304  345A               	retlw	90
  1624  0305  3452               	retlw	82
  1625  0306  3487               	retlw	135
  1626  0307  348F               	retlw	143
  1627  0308  3491               	retlw	145
  1628  0309  3494               	retlw	148
  1629  030A  3452               	retlw	82
  1630  030B  3482               	retlw	130
  1631  030C  348C               	retlw	140
  1632  030D  3492               	retlw	146
  1633  030E  3496               	retlw	150
  1634  030F  342B               	retlw	43
  1635  0310  3459               	retlw	89
  1636  0311  346E               	retlw	110
  1637  0312  34CB               	retlw	203
  1638  0313  342F               	retlw	47
  1639  0314  347D               	retlw	125
  1640  0315  3472               	retlw	114
  1641  0316  34A5               	retlw	165
  1642  0317  34B5               	retlw	181
  1643  0318  34C1               	retlw	193
  1644  0319  3494               	retlw	148
  1645  031A  3499               	retlw	153
  1646  000E                     _PORTCbits	set	14
  1647  0014                     _TRISCbits	set	20
  1648  001A                     _LATCbits	set	26
  1649  0014                     _TRISC	set	20
  1650  0012                     _TRISA	set	18
  1651  001A                     _LATC	set	26
  1652  0018                     _LATA	set	24
  1653  005F                     _GIE	set	95
  1654  011A                     _TX1REG	set	282
  1655  0119                     _RC1REG	set	281
  1656  011D                     _RC1STAbits	set	285
  1657  011C                     _SP1BRGH	set	284
  1658  011B                     _SP1BRGL	set	283
  1659  011E                     _TX1STA	set	286
  1660  011D                     _RC1STA	set	285
  1661  011F                     _BAUD1CON	set	287
  1662  070F                     _PIR3bits	set	1807
  1663  0892                     _OSCTUNE	set	2194
  1664  0890                     _OSCSTAT	set	2192
  1665  0893                     _OSCFRQ	set	2195
  1666  0891                     _OSCEN	set	2193
  1667  088F                     _OSCCON3	set	2191
  1668  088D                     _OSCCON1	set	2189
  1669  4480                     _PLLR	set	17536
  1670  1ECB                     _RX1DTPPSbits	set	7883
  1671  1E8F                     _PPSLOCKbits	set	7823
  1672  1E8F                     _PPSLOCK	set	7823
  1673  1F24                     _RC4PPS	set	7972
  1674  1F50                     _ODCONC	set	8016
  1675  1F3A                     _ODCONA	set	7994
  1676  1F4F                     _WPUC	set	8015
  1677  1F39                     _WPUA	set	7993
  1678  1F38                     _ANSELA	set	7992
  1679  1F4E                     _ANSELC	set	8014
  1680                           
  1681                           ; #config settings
  1682  0000                     
  1683                           	psect	cinit
  1684  07E4                     start_initialization:	
  1685  07E4                     __initialization:	
  1686                           
  1687                           ; Initialize objects allocated to BANK1
  1688  07E4  301B               	movlw	low __pidataBANK1
  1689  07E5  0084               	movwf	4
  1690  07E6  3083               	movlw	(high __pidataBANK1)| (0+128)
  1691  07E7  0085               	movwf	5
  1692  07E8  30A0               	movlw	low __pdataBANK1
  1693  07E9  0086               	movwf	6
  1694  07EA  3000               	movlw	high __pdataBANK1
  1695  07EB  0087               	movwf	7
  1696  07EC  3040               	movlw	64
  1697  07ED  201B               	fcall	init_ram
  1698                           
  1699                           ; Initialize objects allocated to BANK2
  1700  07EE  30DB               	movlw	low __pidataBANK2
  1701  07EF  0084               	movwf	4
  1702  07F0  3082               	movlw	(high __pidataBANK2)| (0+128)
  1703  07F1  0085               	movwf	5
  1704  07F2  3020               	movlw	low __pdataBANK2
  1705  07F3  0086               	movwf	6
  1706  07F4  3001               	movlw	high __pdataBANK2
  1707  07F5  0087               	movwf	7
  1708  07F6  3040               	movlw	64
  1709  07F7  201B               	fcall	init_ram
  1710                           
  1711                           ; Clear objects allocated to BANK0
  1712  07F8  304C               	movlw	low __pbssBANK0
  1713  07F9  0084               	movwf	4
  1714  07FA  3000               	movlw	high __pbssBANK0
  1715  07FB  0085               	movwf	5
  1716  07FC  3012               	movlw	18
  1717  07FD  2015               	fcall	clear_ram0
  1718  07FE                     end_of_initialization:	
  1719                           ;End of C runtime variable initialization code
  1720                           
  1721  07FE                     __end_of__initialization:	
  1722  07FE  0140               	movlb	0
  1723  07FF  2885               	ljmp	_main	;jump to C main() function
  1724                           
  1725                           	psect	bssBANK0
  1726  004C                     __pbssBANK0:	
  1727  004C                     _cw_bat:	
  1728  004C                     	ds	6
  1729  0052                     cw_get_vol@F83:	
  1730  0052                     	ds	2
  1731  0054                     _allow_charger_always_zero:	
  1732  0054                     	ds	2
  1733  0056                     _allow_no_charger_full:	
  1734  0056                     	ds	2
  1735  0058                     _no_charger_full_jump:	
  1736  0058                     	ds	2
  1737  005A                     _CHARGE:	
  1738  005A                     	ds	2
  1739  005C                     _reset_loop:	
  1740  005C                     	ds	1
  1741  005D                     _if_quickstart:	
  1742  005D                     	ds	1
  1743                           
  1744                           	psect	dataBANK1
  1745  00A0                     __pdataBANK1:	
  1746  00A0                     CW201x@cw_bat_config_info:	
  1747  00A0                     	ds	64
  1748                           
  1749                           	psect	dataBANK2
  1750  0120                     __pdataBANK2:	
  1751  0120                     _cw_bat_config_info:	
  1752  0120                     	ds	64
  1753                           
  1754                           	psect	inittext
  1755  001B                     init_ram:	
  1756  001B  00FE               	movwf	126
  1757  001C                     initloop:	
  1758  001C  0012               	moviw fsr0++
  1759  001D  001E               	movwi fsr1++
  1760  001E  0BFE               	decfsz	126,f
  1761  001F  281C               	goto	initloop
  1762  0020  3400               	retlw	0
  1763                           
  1764                           	psect	clrtext
  1765  0015                     clear_ram0:	
  1766                           ;	Called with FSR0 containing the base address, and
  1767                           ;	WREG with the size to clear
  1768                           
  1769  0015  0064               	clrwdt	;clear the watchdog before getting into this loop
  1770  0016                     clrloop0:	
  1771  0016  0180               	clrf	0	;clear RAM location pointed to by FSR
  1772  0017  3101               	addfsr 0,1
  1773  0018  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1774  0019  2816               	goto	clrloop0	;have we reached the end yet?
  1775  001A  3400               	retlw	0	;all done for this memory range, return
  1776                           
  1777                           	psect	cstackCOMMON
  1778  0070                     __pcstackCOMMON:	
  1779  0070                     ?_PIN_MANAGER_Initialize:	
  1780  0070                     ??_PIN_MANAGER_Initialize:	
  1781                           ; 1 bytes @ 0x0
  1782                           
  1783  0070                     ?_OSCILLATOR_Initialize:	
  1784                           ; 1 bytes @ 0x0
  1785                           
  1786  0070                     ??_OSCILLATOR_Initialize:	
  1787                           ; 1 bytes @ 0x0
  1788                           
  1789  0070                     ?_cw_bat_init:	
  1790                           ; 1 bytes @ 0x0
  1791                           
  1792  0070                     ?_cw_bat_work:	
  1793                           ; 1 bytes @ 0x0
  1794                           
  1795  0070                     ?_EUSART1_Initialize:	
  1796                           ; 1 bytes @ 0x0
  1797                           
  1798  0070                     ??_EUSART1_Initialize:	
  1799                           ; 1 bytes @ 0x0
  1800                           
  1801  0070                     ?_EUSART1_Write:	
  1802                           ; 1 bytes @ 0x0
  1803                           
  1804  0070                     ??_EUSART1_Write:	
  1805                           ; 1 bytes @ 0x0
  1806                           
  1807  0070                     ?_SYSTEM_Initialize:	
  1808                           ; 1 bytes @ 0x0
  1809                           
  1810  0070                     ?_delay:	
  1811                           ; 1 bytes @ 0x0
  1812                           
  1813  0070                     ??_delay:	
  1814                           ; 1 bytes @ 0x0
  1815                           
  1816  0070                     ?_main:	
  1817                           ; 1 bytes @ 0x0
  1818                           
  1819  0070                     ?_CW_Delay10ms:	
  1820                           ; 1 bytes @ 0x0
  1821                           
  1822  0070                     ?_CW_Delay10us:	
  1823                           ; 1 bytes @ 0x0
  1824                           
  1825  0070                     ??_CW_Delay10us:	
  1826                           ; 1 bytes @ 0x0
  1827                           
  1828  0070                     ?_cw_update_config_info:	
  1829                           ; 1 bytes @ 0x0
  1830                           
  1831  0070                     ?_cw_init:	
  1832                           ; 1 bytes @ 0x0
  1833                           
  1834  0070                     ?_update_capacity:	
  1835                           ; 1 bytes @ 0x0
  1836                           
  1837  0070                     ?_update_vol:	
  1838                           ; 1 bytes @ 0x0
  1839                           
  1840  0070                     ?_update_usb_online:	
  1841                           ; 1 bytes @ 0x0
  1842                           
  1843  0070                     ??_update_usb_online:	
  1844                           ; 1 bytes @ 0x0
  1845                           
  1846  0070                     ?_I2C_Delay10us:	
  1847                           ; 1 bytes @ 0x0
  1848                           
  1849  0070                     ??_I2C_Delay10us:	
  1850                           ; 1 bytes @ 0x0
  1851                           
  1852  0070                     ?_start:	
  1853                           ; 1 bytes @ 0x0
  1854                           
  1855  0070                     ?_stop:	
  1856                           ; 1 bytes @ 0x0
  1857                           
  1858  0070                     ?_s_ack:	
  1859                           ; 1 bytes @ 0x0
  1860                           
  1861  0070                     ?_sn_ack:	
  1862                           ; 1 bytes @ 0x0
  1863                           
  1864  0070                     ?_write_byte:	
  1865                           ; 1 bytes @ 0x0
  1866                           
  1867  0070                     ?_read_byte:	
  1868                           ; 1 bytes @ 0x0
  1869                           
  1870  0070                     ?___lmul:	
  1871                           ; 1 bytes @ 0x0
  1872                           
  1873  0070                     EUSART1_Write@txData:	
  1874                           ; 4 bytes @ 0x0
  1875                           
  1876  0070                     PIN_MANAGER_Initialize@state:	
  1877                           ; 1 bytes @ 0x0
  1878                           
  1879  0070                     CW_Delay10ms@c:	
  1880                           ; 1 bytes @ 0x0
  1881                           
  1882  0070                     ___lmul@multiplier:	
  1883                           ; 2 bytes @ 0x0
  1884                           
  1885                           
  1886                           ; 4 bytes @ 0x0
  1887  0070                     	ds	1
  1888  0071                     ??_SYSTEM_Initialize:	
  1889  0071                     CW_Delay10us@us:	
  1890                           ; 1 bytes @ 0x1
  1891                           
  1892  0071                     I2C_Delay10us@us:	
  1893                           ; 1 bytes @ 0x1
  1894                           
  1895  0071                     delay@c:	
  1896                           ; 1 bytes @ 0x1
  1897                           
  1898                           
  1899                           ; 2 bytes @ 0x1
  1900  0071                     	ds	1
  1901  0072                     ??_CW_Delay10ms:	
  1902  0072                     CW_Delay10us@i:	
  1903                           ; 1 bytes @ 0x2
  1904                           
  1905  0072                     I2C_Delay10us@i:	
  1906                           ; 1 bytes @ 0x2
  1907                           
  1908                           
  1909                           ; 1 bytes @ 0x2
  1910  0072                     	ds	1
  1911  0073                     delay@a:	
  1912  0073                     CW_Delay10ms@a:	
  1913                           ; 1 bytes @ 0x3
  1914                           
  1915  0073                     CW_Delay10us@a:	
  1916                           ; 1 bytes @ 0x3
  1917                           
  1918  0073                     I2C_Delay10us@a:	
  1919                           ; 1 bytes @ 0x3
  1920                           
  1921                           
  1922                           ; 1 bytes @ 0x3
  1923  0073                     	ds	1
  1924  0074                     delay@b:	
  1925  0074                     CW_Delay10ms@b:	
  1926                           ; 1 bytes @ 0x4
  1927                           
  1928  0074                     CW_Delay10us@b:	
  1929                           ; 1 bytes @ 0x4
  1930                           
  1931  0074                     I2C_Delay10us@b:	
  1932                           ; 1 bytes @ 0x4
  1933                           
  1934  0074                     ___lmul@multiplicand:	
  1935                           ; 1 bytes @ 0x4
  1936                           
  1937                           
  1938                           ; 4 bytes @ 0x4
  1939  0074                     	ds	1
  1940  0075                     ??_start:	
  1941  0075                     ??_stop:	
  1942                           ; 1 bytes @ 0x5
  1943                           
  1944  0075                     ??_s_ack:	
  1945                           ; 1 bytes @ 0x5
  1946                           
  1947  0075                     ??_sn_ack:	
  1948                           ; 1 bytes @ 0x5
  1949                           
  1950  0075                     ??_write_byte:	
  1951                           ; 1 bytes @ 0x5
  1952                           
  1953  0075                     ??_read_byte:	
  1954                           ; 1 bytes @ 0x5
  1955                           
  1956  0075                     ?_r_ack:	
  1957                           ; 1 bytes @ 0x5
  1958                           
  1959                           
  1960                           ; 2 bytes @ 0x5
  1961  0075                     	ds	1
  1962  0076                     write_byte@w_data:	
  1963  0076                     read_byte@i:	
  1964                           ; 1 bytes @ 0x6
  1965                           
  1966                           
  1967                           ; 1 bytes @ 0x6
  1968  0076                     	ds	1
  1969  0077                     ??_r_ack:	
  1970  0077                     write_byte@i:	
  1971                           ; 1 bytes @ 0x7
  1972                           
  1973  0077                     read_byte@r_data:	
  1974                           ; 1 bytes @ 0x7
  1975                           
  1976                           
  1977                           ; 1 bytes @ 0x7
  1978  0077                     	ds	1
  1979  0078                     ??___lmul:	
  1980  0078                     ___lmul@product:	
  1981                           ; 1 bytes @ 0x8
  1982                           
  1983                           
  1984                           ; 4 bytes @ 0x8
  1985  0078                     	ds	1
  1986  0079                     r_ack@ack:	
  1987                           
  1988                           ; 2 bytes @ 0x9
  1989  0079                     	ds	2
  1990  007B                     ?_wait_r_ack:	
  1991                           
  1992                           ; 2 bytes @ 0xB
  1993  007B                     	ds	1
  1994  007C                     ??___lldiv:	
  1995                           
  1996                           ; 1 bytes @ 0xC
  1997  007C                     	ds	1
  1998  007D                     ??_cw_read:	
  1999  007D                     ??_cw_write:	
  2000                           ; 1 bytes @ 0xD
  2001                           
  2002  007D                     ??_update_vol:	
  2003                           ; 1 bytes @ 0xD
  2004                           
  2005  007D                     ??_wait_r_ack:	
  2006                           ; 1 bytes @ 0xD
  2007                           
  2008  007D                     cw_write@point_reg:	
  2009                           ; 1 bytes @ 0xD
  2010                           
  2011                           
  2012                           ; 1 bytes @ 0xD
  2013  007D                     	ds	1
  2014  007E                     ??_cw_bat_work:	
  2015                           
  2016                           	psect	cstackBANK0
  2017  0020                     __pcstackBANK0:	
  2018                           ; 1 bytes @ 0xE
  2019                           
  2020  0020                     ?___lldiv:	
  2021  0020                     wait_r_ack@ack:	
  2022                           ; 4 bytes @ 0x0
  2023                           
  2024  0020                     ___lldiv@divisor:	
  2025                           ; 2 bytes @ 0x0
  2026                           
  2027                           
  2028                           ; 4 bytes @ 0x0
  2029  0020                     	ds	2
  2030  0022                     wait_r_ack@i:	
  2031                           
  2032                           ; 2 bytes @ 0x2
  2033  0022                     	ds	2
  2034  0024                     ?_cw_read:	
  2035  0024                     ?_cw_write:	
  2036                           ; 2 bytes @ 0x4
  2037                           
  2038  0024                     ?_cw_read_word:	
  2039                           ; 2 bytes @ 0x4
  2040                           
  2041  0024                     cw_read@r_pdata:	
  2042                           ; 2 bytes @ 0x4
  2043                           
  2044  0024                     cw_read_word@r_pdata:	
  2045                           ; 1 bytes @ 0x4
  2046                           
  2047  0024                     cw_write@w_pdata:	
  2048                           ; 1 bytes @ 0x4
  2049                           
  2050  0024                     ___lldiv@dividend:	
  2051                           ; 1 bytes @ 0x4
  2052                           
  2053                           
  2054                           ; 4 bytes @ 0x4
  2055  0024                     	ds	1
  2056  0025                     cw_read_word@length:	
  2057                           
  2058                           ; 2 bytes @ 0x5
  2059  0025                     	ds	1
  2060  0026                     cw_read@point_reg:	
  2061                           
  2062                           ; 1 bytes @ 0x6
  2063  0026                     	ds	1
  2064  0027                     ??_cw_read_word:	
  2065  0027                     ??_cw_update_config_info:	
  2066                           ; 1 bytes @ 0x7
  2067                           
  2068                           
  2069                           ; 1 bytes @ 0x7
  2070  0027                     	ds	1
  2071  0028                     cw_update_config_info@reset_val:	
  2072  0028                     ___lldiv@quotient:	
  2073                           ; 1 bytes @ 0x8
  2074                           
  2075                           
  2076                           ; 4 bytes @ 0x8
  2077  0028                     	ds	1
  2078  0029                     cw_read_word@point_reg:	
  2079  0029                     cw_update_config_info@ret:	
  2080                           ; 1 bytes @ 0x9
  2081                           
  2082                           
  2083                           ; 2 bytes @ 0x9
  2084  0029                     	ds	1
  2085  002A                     cw_read_word@count:	
  2086                           
  2087                           ; 1 bytes @ 0xA
  2088  002A                     	ds	1
  2089  002B                     cw_update_config_info@i:	
  2090                           
  2091                           ; 1 bytes @ 0xB
  2092  002B                     	ds	1
  2093  002C                     cw_update_config_info@reg_val:	
  2094  002C                     ___lldiv@counter:	
  2095                           ; 1 bytes @ 0xC
  2096                           
  2097                           
  2098                           ; 1 bytes @ 0xC
  2099  002C                     	ds	1
  2100  002D                     ??_cw_init:	
  2101  002D                     ?_cw_get_vol:	
  2102                           ; 1 bytes @ 0xD
  2103                           
  2104                           
  2105                           ; 2 bytes @ 0xD
  2106  002D                     	ds	2
  2107  002F                     ??_cw_get_vol:	
  2108  002F                     cw_init@i:	
  2109                           ; 1 bytes @ 0xF
  2110                           
  2111                           
  2112                           ; 1 bytes @ 0xF
  2113  002F                     	ds	1
  2114  0030                     cw_init@ret:	
  2115                           
  2116                           ; 2 bytes @ 0x10
  2117  0030                     	ds	2
  2118  0032                     cw_init@reg_val:	
  2119                           
  2120                           ; 1 bytes @ 0x12
  2121  0032                     	ds	1
  2122  0033                     ??_cw_bat_init:	
  2123  0033                     ?_cw_por:	
  2124                           ; 1 bytes @ 0x13
  2125                           
  2126                           
  2127                           ; 2 bytes @ 0x13
  2128  0033                     	ds	1
  2129  0034                     cw_bat_init@loop:	
  2130  0034                     cw_get_vol@ret:	
  2131                           ; 1 bytes @ 0x14
  2132                           
  2133                           
  2134                           ; 2 bytes @ 0x14
  2135  0034                     	ds	1
  2136  0035                     ??_cw_por:	
  2137  0035                     cw_bat_init@ret:	
  2138                           ; 1 bytes @ 0x15
  2139                           
  2140                           
  2141                           ; 1 bytes @ 0x15
  2142  0035                     	ds	1
  2143  0036                     cw_get_vol@reg_val:	
  2144                           
  2145                           ; 2 bytes @ 0x16
  2146  0036                     	ds	1
  2147  0037                     cw_por@reset_val:	
  2148                           
  2149                           ; 1 bytes @ 0x17
  2150  0037                     	ds	1
  2151  0038                     cw_por@ret:	
  2152  0038                     cw_get_vol@ad_value_min:	
  2153                           ; 2 bytes @ 0x18
  2154                           
  2155                           
  2156                           ; 2 bytes @ 0x18
  2157  0038                     	ds	2
  2158  003A                     ?_cw_get_capacity:	
  2159  003A                     cw_get_vol@ad_value_max:	
  2160                           ; 2 bytes @ 0x1A
  2161                           
  2162                           
  2163                           ; 2 bytes @ 0x1A
  2164  003A                     	ds	2
  2165  003C                     ??_cw_get_capacity:	
  2166  003C                     cw_get_vol@ad_value:	
  2167                           ; 1 bytes @ 0x1C
  2168                           
  2169                           
  2170                           ; 4 bytes @ 0x1C
  2171  003C                     	ds	2
  2172  003E                     _cw_get_capacity$262:	
  2173                           
  2174                           ; 2 bytes @ 0x1E
  2175  003E                     	ds	2
  2176  0040                     cw_get_vol@get_ad_times:	
  2177  0040                     _cw_get_capacity$263:	
  2178                           ; 1 bytes @ 0x20
  2179                           
  2180                           
  2181                           ; 2 bytes @ 0x20
  2182  0040                     	ds	1
  2183  0041                     cw_get_vol@ad_buff:	
  2184                           
  2185                           ; 2 bytes @ 0x21
  2186  0041                     	ds	1
  2187  0042                     cw_get_capacity@reg_val:	
  2188                           
  2189                           ; 1 bytes @ 0x22
  2190  0042                     	ds	1
  2191  0043                     cw_get_capacity@ret:	
  2192  0043                     update_vol@cw_voltage:	
  2193                           ; 2 bytes @ 0x23
  2194                           
  2195                           
  2196                           ; 2 bytes @ 0x23
  2197  0043                     	ds	2
  2198  0045                     cw_get_capacity@allow_capacity:	
  2199                           
  2200                           ; 1 bytes @ 0x25
  2201  0045                     	ds	1
  2202  0046                     cw_get_capacity@cw_capacity:	
  2203                           
  2204                           ; 1 bytes @ 0x26
  2205  0046                     	ds	1
  2206  0047                     ??_update_capacity:	
  2207                           
  2208                           ; 1 bytes @ 0x27
  2209  0047                     	ds	1
  2210  0048                     update_capacity@cw_capacity:	
  2211                           
  2212                           ; 2 bytes @ 0x28
  2213  0048                     	ds	2
  2214  004A                     ??_main:	
  2215                           
  2216                           ; 1 bytes @ 0x2A
  2217  004A                     	ds	1
  2218  004B                     main@ret:	
  2219                           
  2220                           ; 1 bytes @ 0x2B
  2221  004B                     	ds	1
  2222                           
  2223                           	psect	maintext
  2224  0085                     __pmaintext:	
  2225 ;;
  2226 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2227 ;;
  2228 ;; *************** function _main *****************
  2229 ;; Defined at:
  2230 ;;		line 65 in file "main.c"
  2231 ;; Parameters:    Size  Location     Type
  2232 ;;		None
  2233 ;; Auto vars:     Size  Location     Type
  2234 ;;  ret             1   43[BANK0 ] unsigned char 
  2235 ;;  send_char       1    0        unsigned char 
  2236 ;; Return value:  Size  Location     Type
  2237 ;;                  1    wreg      void 
  2238 ;; Registers used:
  2239 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2240 ;; Tracked objects:
  2241 ;;		On entry : B3F/0
  2242 ;;		On exit  : 0/0
  2243 ;;		Unchanged: 0/0
  2244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2245 ;;      Params:         0       0       0       0
  2246 ;;      Locals:         0       1       0       0
  2247 ;;      Temps:          0       1       0       0
  2248 ;;      Totals:         0       2       0       0
  2249 ;;Total ram usage:        2 bytes
  2250 ;; Hardware stack levels required when called:   10
  2251 ;; This function calls:
  2252 ;;		_EUSART1_Write
  2253 ;;		_SYSTEM_Initialize
  2254 ;;		_cw_bat_init
  2255 ;;		_cw_bat_work
  2256 ;;		_delay
  2257 ;; This function is called by:
  2258 ;;		Startup code after reset
  2259 ;; This function uses a non-reentrant model
  2260 ;;
  2261                           
  2262                           
  2263                           ;psect for function _main
  2264  0085                     _main:	
  2265                           
  2266                           ;main.c: 68: unsigned char ret = 0;
  2267                           
  2268                           ;incstack = 0
  2269                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2270  0085  0140               	movlb	0	; select bank0
  2271  0086  01CB               	clrf	main@ret
  2272                           
  2273                           ;main.c: 69: uint8_t send_char;
  2274                           ;main.c: 70: SYSTEM_Initialize();
  2275  0087  200D               	fcall	_SYSTEM_Initialize
  2276                           
  2277                           ;main.c: 71: ret = cw_bat_init();
  2278  0088  20CA               	fcall	_cw_bat_init
  2279  0089  0140               	movlb	0	; select bank0
  2280  008A  00CA               	movwf	??_main
  2281  008B  084A               	movf	??_main,w
  2282  008C  00CB               	movwf	main@ret
  2283  008D                     L1:	
  2284                           
  2285                           ;main.c: 72: EUSART1_Write(ret);
  2286  008D  084B               	movf	main@ret,w
  2287  008E  2021               	fcall	_EUSART1_Write
  2288                           
  2289                           ;main.c: 89: {
  2290                           ;main.c: 91: do { LATCbits.LATC2 = 0; } while(0);
  2291                           
  2292                           ;main.c: 88: while (1)
  2293  008F  0140               	movlb	0	; select bank0
  2294  0090  111A               	bcf	26,2	;volatile
  2295                           
  2296                           ;main.c: 92: delay();
  2297  0091  21B4               	fcall	_delay
  2298                           
  2299                           ;main.c: 93: do { LATCbits.LATC2 = 1; } while(0);
  2300  0092  0140               	movlb	0	; select bank0
  2301  0093  151A               	bsf	26,2	;volatile
  2302                           
  2303                           ;main.c: 94: delay();
  2304  0094  21B4               	fcall	_delay
  2305                           
  2306                           ;main.c: 95: do { LATCbits.LATC3 = 1; } while(0);
  2307  0095  0140               	movlb	0	; select bank0
  2308  0096  159A               	bsf	26,3	;volatile
  2309                           
  2310                           ;main.c: 96: cw_bat_work();
  2311  0097  2011               	fcall	_cw_bat_work
  2312                           
  2313                           ;main.c: 101: EUSART1_Write(ret);
  2314  0098  0140               	movlb	0	; select bank0
  2315  0099  288D               	goto	L1
  2316  009A                     __end_of_main:	
  2317                           
  2318                           	psect	text1
  2319  01B4                     __ptext1:	
  2320 ;; *************** function _delay *****************
  2321 ;; Defined at:
  2322 ;;		line 52 in file "main.c"
  2323 ;; Parameters:    Size  Location     Type
  2324 ;;		None
  2325 ;; Auto vars:     Size  Location     Type
  2326 ;;  c               2    1[COMMON] int 
  2327 ;;  b               1    4[COMMON] unsigned char 
  2328 ;;  a               1    3[COMMON] unsigned char 
  2329 ;;  d               1    0        unsigned char 
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  1    wreg      void 
  2332 ;; Registers used:
  2333 ;;		wreg, status,2, status,0
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2339 ;;      Params:         0       0       0       0
  2340 ;;      Locals:         4       0       0       0
  2341 ;;      Temps:          1       0       0       0
  2342 ;;      Totals:         5       0       0       0
  2343 ;;Total ram usage:        5 bytes
  2344 ;; Hardware stack levels used:    1
  2345 ;; This function calls:
  2346 ;;		Nothing
  2347 ;; This function is called by:
  2348 ;;		_main
  2349 ;; This function uses a non-reentrant model
  2350 ;;
  2351                           
  2352                           
  2353                           ;psect for function _delay
  2354  01B4                     _delay:	
  2355                           
  2356                           ;main.c: 54: unsigned char a, b, d;
  2357                           ;main.c: 55: int c = 100;
  2358                           
  2359                           ;incstack = 0
  2360                           ; Regs used in _delay: [wreg+status,2+status,0]
  2361  01B4  3064               	movlw	100
  2362  01B5  00F1               	movwf	delay@c
  2363  01B6  3000               	movlw	0
  2364  01B7  00F2               	movwf	delay@c+1
  2365  01B8                     L2:	
  2366                           
  2367                           ;main.c: 56: for (;c>0;c--)
  2368  01B8  0872               	movf	delay@c+1,w
  2369  01B9  3A80               	xorlw	128
  2370  01BA  00F0               	movwf	??_delay
  2371  01BB  3080               	movlw	128
  2372  01BC  0270               	subwf	??_delay,w
  2373  01BD  1D03               	skipz
  2374  01BE  29C1               	goto	u2735
  2375  01BF  3001               	movlw	1
  2376  01C0  0271               	subwf	delay@c,w
  2377  01C1                     u2735:	
  2378  01C1  1C03               	btfss	3,0
  2379  01C2  0008               	return
  2380                           
  2381                           ;main.c: 57: {
  2382                           ;main.c: 58: for(b=95;b>0;b--)
  2383  01C3  305F               	movlw	95
  2384  01C4  00F0               	movwf	??_delay
  2385  01C5  0870               	movf	??_delay,w
  2386  01C6  00F4               	movwf	delay@b
  2387  01C7  0874               	movf	delay@b,w
  2388  01C8  1903               	btfsc	3,2
  2389  01C9  29DB               	goto	l2546
  2390  01CA                     l2536:	
  2391                           
  2392                           ;main.c: 59: {
  2393                           ;main.c: 60: for(a=209;a>0;a--) ;
  2394  01CA  30D1               	movlw	209
  2395  01CB  00F0               	movwf	??_delay
  2396  01CC  0870               	movf	??_delay,w
  2397  01CD  00F3               	movwf	delay@a
  2398  01CE  0873               	movf	delay@a,w
  2399  01CF  1903               	btfsc	3,2
  2400  01D0  29D6               	goto	l2544
  2401  01D1                     l2542:	
  2402  01D1  3001               	movlw	1
  2403  01D2  02F3               	subwf	delay@a,f
  2404  01D3  0873               	movf	delay@a,w
  2405  01D4  1D03               	btfss	3,2
  2406  01D5  29D1               	goto	l2542
  2407  01D6                     l2544:	
  2408  01D6  3001               	movlw	1
  2409  01D7  02F4               	subwf	delay@b,f
  2410  01D8  0874               	movf	delay@b,w
  2411  01D9  1D03               	btfss	3,2
  2412  01DA  29CA               	goto	l2536
  2413  01DB                     l2546:	
  2414  01DB  30FF               	movlw	255
  2415  01DC  07F1               	addwf	delay@c,f
  2416  01DD  30FF               	movlw	255
  2417  01DE  3DF2               	addwfc	delay@c+1,f
  2418  01DF  29B8               	goto	L2
  2419  01E0                     __end_of_delay:	
  2420                           
  2421                           	psect	text2
  2422  0011                     __ptext2:	
  2423 ;; *************** function _cw_bat_work *****************
  2424 ;; Defined at:
  2425 ;;		line 538 in file "CW201x.c"
  2426 ;; Parameters:    Size  Location     Type
  2427 ;;		None
  2428 ;; Auto vars:     Size  Location     Type
  2429 ;;		None
  2430 ;; Return value:  Size  Location     Type
  2431 ;;                  1    wreg      void 
  2432 ;; Registers used:
  2433 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2434 ;; Tracked objects:
  2435 ;;		On entry : 0/0
  2436 ;;		On exit  : 0/0
  2437 ;;		Unchanged: 0/0
  2438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2439 ;;      Params:         0       0       0       0
  2440 ;;      Locals:         0       0       0       0
  2441 ;;      Temps:          0       0       0       0
  2442 ;;      Totals:         0       0       0       0
  2443 ;;Total ram usage:        0 bytes
  2444 ;; Hardware stack levels used:    1
  2445 ;; Hardware stack levels required when called:    9
  2446 ;; This function calls:
  2447 ;;		_update_capacity
  2448 ;;		_update_usb_online
  2449 ;;		_update_vol
  2450 ;; This function is called by:
  2451 ;;		_main
  2452 ;; This function uses a non-reentrant model
  2453 ;;
  2454                           
  2455                           
  2456                           ;psect for function _cw_bat_work
  2457  0011                     _cw_bat_work:	
  2458                           
  2459                           ;CW201x.c: 540: update_usb_online();
  2460                           
  2461                           ;incstack = 0
  2462                           ; Regs used in _cw_bat_work: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2463  0011  2029               	fcall	_update_usb_online
  2464                           
  2465                           ;CW201x.c: 541: update_capacity();
  2466  0012  2148               	fcall	_update_capacity
  2467                           
  2468                           ;CW201x.c: 542: update_vol();
  2469  0013  209A               	fcall	_update_vol
  2470  0014  0008               	return
  2471  0015                     __end_of_cw_bat_work:	
  2472                           
  2473                           	psect	text3
  2474  009A                     __ptext3:	
  2475 ;; *************** function _update_vol *****************
  2476 ;; Defined at:
  2477 ;;		line 491 in file "CW201x.c"
  2478 ;; Parameters:    Size  Location     Type
  2479 ;;		None
  2480 ;; Auto vars:     Size  Location     Type
  2481 ;;  cw_voltage      2   35[BANK0 ] unsigned int 
  2482 ;; Return value:  Size  Location     Type
  2483 ;;                  1    wreg      void 
  2484 ;; Registers used:
  2485 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2486 ;; Tracked objects:
  2487 ;;		On entry : 0/0
  2488 ;;		On exit  : 0/0
  2489 ;;		Unchanged: 0/0
  2490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2491 ;;      Params:         0       0       0       0
  2492 ;;      Locals:         0       2       0       0
  2493 ;;      Temps:          0       0       0       0
  2494 ;;      Totals:         0       2       0       0
  2495 ;;Total ram usage:        2 bytes
  2496 ;; Hardware stack levels used:    1
  2497 ;; Hardware stack levels required when called:    5
  2498 ;; This function calls:
  2499 ;;		_cw_get_vol
  2500 ;; This function is called by:
  2501 ;;		_cw_bat_work
  2502 ;; This function uses a non-reentrant model
  2503 ;;
  2504                           
  2505                           
  2506                           ;psect for function _update_vol
  2507  009A                     _update_vol:	
  2508                           
  2509                           ;CW201x.c: 493: unsigned int cw_voltage;
  2510                           ;CW201x.c: 494: cw_voltage = cw_get_vol();
  2511                           
  2512                           ;incstack = 0
  2513                           ; Regs used in _update_vol: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2514  009A  2519               	fcall	_cw_get_vol
  2515  009B  0140               	movlb	0	; select bank0
  2516  009C  082E               	movf	?_cw_get_vol+1,w
  2517  009D  00C4               	movwf	update_vol@cw_voltage+1
  2518  009E  082D               	movf	?_cw_get_vol,w
  2519  009F  00C3               	movwf	update_vol@cw_voltage
  2520                           
  2521                           ;CW201x.c: 495: if(cw_voltage == 1){
  2522  00A0  0343               	decf	update_vol@cw_voltage,w
  2523  00A1  0444               	iorwf	update_vol@cw_voltage+1,w
  2524  00A2  1903               	btfsc	3,2
  2525  00A3  0008               	return
  2526                           
  2527                           ;CW201x.c: 498: }else if(cw_bat.voltage != cw_voltage)
  2528  00A4  0844               	movf	update_vol@cw_voltage+1,w
  2529  00A5  0650               	xorwf	_cw_bat+4,w
  2530  00A6  1D03               	skipz
  2531  00A7  28AA               	goto	u2705
  2532  00A8  0843               	movf	update_vol@cw_voltage,w
  2533  00A9  064F               	xorwf	_cw_bat+3,w
  2534  00AA                     u2705:	
  2535  00AA  1903               	skipnz
  2536  00AB  0008               	return
  2537                           
  2538                           ;CW201x.c: 499: {
  2539                           ;CW201x.c: 500: cw_bat.voltage = cw_voltage;
  2540  00AC  0844               	movf	update_vol@cw_voltage+1,w
  2541  00AD  00D0               	movwf	_cw_bat+4
  2542  00AE  0843               	movf	update_vol@cw_voltage,w
  2543  00AF  00CF               	movwf	_cw_bat+3
  2544  00B0  0008               	return
  2545  00B1                     __end_of_update_vol:	
  2546                           
  2547                           	psect	text4
  2548  0519                     __ptext4:	
  2549 ;; *************** function _cw_get_vol *****************
  2550 ;; Defined at:
  2551 ;;		line 417 in file "CW201x.c"
  2552 ;; Parameters:    Size  Location     Type
  2553 ;;		None
  2554 ;; Auto vars:     Size  Location     Type
  2555 ;;  ad_value        4   28[BANK0 ] unsigned long 
  2556 ;;  ad_buff         2   33[BANK0 ] unsigned int 
  2557 ;;  reg_val         2   22[BANK0 ] unsigned char [2]
  2558 ;;  ad_value_max    2   26[BANK0 ] unsigned int 
  2559 ;;  ad_value_min    2   24[BANK0 ] unsigned int 
  2560 ;;  ret             2   20[BANK0 ] int 
  2561 ;;  get_ad_times    1   32[BANK0 ] unsigned char 
  2562 ;; Return value:  Size  Location     Type
  2563 ;;                  2   13[BANK0 ] unsigned int 
  2564 ;; Registers used:
  2565 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2566 ;; Tracked objects:
  2567 ;;		On entry : 0/0
  2568 ;;		On exit  : 0/0
  2569 ;;		Unchanged: 0/0
  2570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2571 ;;      Params:         0       2       0       0
  2572 ;;      Locals:         0      15       0       0
  2573 ;;      Temps:          0       5       0       0
  2574 ;;      Totals:         0      22       0       0
  2575 ;;Total ram usage:       22 bytes
  2576 ;; Hardware stack levels used:    1
  2577 ;; Hardware stack levels required when called:    4
  2578 ;; This function calls:
  2579 ;;		___lldiv
  2580 ;;		___lmul
  2581 ;;		_cw_read_word
  2582 ;; This function is called by:
  2583 ;;		_update_vol
  2584 ;; This function uses a non-reentrant model
  2585 ;;
  2586                           
  2587                           
  2588                           ;psect for function _cw_get_vol
  2589  0519                     _cw_get_vol:	
  2590                           
  2591                           ;CW201x.c: 419: int ret = 0;
  2592                           
  2593                           ;incstack = 0
  2594                           ; Regs used in _cw_get_vol: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2595  0519  0140               	movlb	0	; select bank0
  2596  051A  01B4               	clrf	cw_get_vol@ret
  2597  051B  01B5               	clrf	cw_get_vol@ret+1
  2598                           
  2599                           ;CW201x.c: 420: unsigned char get_ad_times = 0;
  2600  051C  01C0               	clrf	cw_get_vol@get_ad_times
  2601                           
  2602                           ;CW201x.c: 421: unsigned char reg_val[2] = {0 , 0};
  2603  051D  0853               	movf	cw_get_vol@F83+1,w
  2604  051E  00B7               	movwf	cw_get_vol@reg_val+1
  2605  051F  0852               	movf	cw_get_vol@F83,w
  2606  0520  00B6               	movwf	cw_get_vol@reg_val
  2607                           
  2608                           ;CW201x.c: 422: unsigned long ad_value = 0;
  2609  0521  3000               	movlw	0
  2610  0522  00BF               	movwf	cw_get_vol@ad_value+3
  2611  0523  3000               	movlw	0
  2612  0524  00BE               	movwf	cw_get_vol@ad_value+2
  2613  0525  3000               	movlw	0
  2614  0526  00BD               	movwf	cw_get_vol@ad_value+1
  2615  0527  3000               	movlw	0
  2616  0528  00BC               	movwf	cw_get_vol@ad_value
  2617                           
  2618                           ;CW201x.c: 423: unsigned int ad_buff = 0;
  2619  0529  01C1               	clrf	cw_get_vol@ad_buff
  2620  052A  01C2               	clrf	cw_get_vol@ad_buff+1
  2621                           
  2622                           ;CW201x.c: 424: unsigned int ad_value_min = 0;
  2623  052B  01B8               	clrf	cw_get_vol@ad_value_min
  2624  052C  01B9               	clrf	cw_get_vol@ad_value_min+1
  2625                           
  2626                           ;CW201x.c: 425: unsigned int ad_value_max = 0;
  2627  052D  01BA               	clrf	cw_get_vol@ad_value_max
  2628  052E  01BB               	clrf	cw_get_vol@ad_value_max+1
  2629                           
  2630                           ;CW201x.c: 427: for(get_ad_times = 0; get_ad_times < 3; get_ad_times++)
  2631  052F  01C0               	clrf	cw_get_vol@get_ad_times
  2632  0530  3003               	movlw	3
  2633  0531  0240               	subwf	cw_get_vol@get_ad_times,w
  2634  0532  1803               	btfsc	3,0
  2635  0533  2D8D               	goto	l2446
  2636  0534                     l2426:	
  2637                           
  2638                           ;CW201x.c: 428: {
  2639                           ;CW201x.c: 429: ret = cw_read_word(0x2, &reg_val[0],2);
  2640  0534  3036               	movlw	(low (cw_get_vol@reg_val| 0))& (0+255)
  2641  0535  00AF               	movwf	??_cw_get_vol
  2642  0536  082F               	movf	??_cw_get_vol,w
  2643  0537  00A4               	movwf	cw_read_word@r_pdata
  2644  0538  3002               	movlw	2
  2645  0539  00A5               	movwf	cw_read_word@length
  2646  053A  3000               	movlw	0
  2647  053B  00A6               	movwf	cw_read_word@length+1
  2648  053C  3002               	movlw	2
  2649  053D  23F8               	fcall	_cw_read_word
  2650  053E  0140               	movlb	0	; select bank0
  2651  053F  0825               	movf	?_cw_read_word+1,w
  2652  0540  00B5               	movwf	cw_get_vol@ret+1
  2653  0541  0824               	movf	?_cw_read_word,w
  2654  0542  00B4               	movwf	cw_get_vol@ret
  2655                           
  2656                           ;CW201x.c: 430: if(ret)
  2657  0543  0834               	movf	cw_get_vol@ret,w
  2658  0544  0435               	iorwf	cw_get_vol@ret+1,w
  2659  0545  1903               	btfsc	3,2
  2660  0546  2D4C               	goto	l2434
  2661                           
  2662                           ;CW201x.c: 431: {
  2663                           ;CW201x.c: 432: return 1;
  2664  0547  3001               	movlw	1
  2665  0548  00AD               	movwf	?_cw_get_vol
  2666  0549  3000               	movlw	0
  2667  054A  00AE               	movwf	?_cw_get_vol+1
  2668  054B  0008               	return
  2669  054C                     l2434:	
  2670                           
  2671                           ;CW201x.c: 433: }
  2672                           ;CW201x.c: 434: ad_buff = (reg_val[0] << 8) + reg_val[1];
  2673  054C  0837               	movf	cw_get_vol@reg_val+1,w
  2674  054D  00AF               	movwf	??_cw_get_vol
  2675  054E  01B0               	clrf	??_cw_get_vol+1
  2676  054F  0836               	movf	cw_get_vol@reg_val,w
  2677  0550  00B1               	movwf	??_cw_get_vol+2
  2678  0551  01B2               	clrf	??_cw_get_vol+3
  2679  0552  0831               	movf	??_cw_get_vol+2,w
  2680  0553  00B2               	movwf	??_cw_get_vol+3
  2681  0554  01B1               	clrf	??_cw_get_vol+2
  2682  0555  082F               	movf	??_cw_get_vol,w
  2683  0556  0731               	addwf	??_cw_get_vol+2,w
  2684  0557  00C1               	movwf	cw_get_vol@ad_buff
  2685  0558  0830               	movf	??_cw_get_vol+1,w
  2686  0559  3D32               	addwfc	??_cw_get_vol+3,w
  2687  055A  00C2               	movwf	cw_get_vol@ad_buff+1
  2688                           
  2689                           ;CW201x.c: 436: if(get_ad_times == 0)
  2690  055B  0840               	movf	cw_get_vol@get_ad_times,w
  2691  055C  1D03               	btfss	3,2
  2692  055D  2D66               	goto	l273
  2693                           
  2694                           ;CW201x.c: 437: {
  2695                           ;CW201x.c: 438: ad_value_min = ad_buff;
  2696  055E  0842               	movf	cw_get_vol@ad_buff+1,w
  2697  055F  00B9               	movwf	cw_get_vol@ad_value_min+1
  2698  0560  0841               	movf	cw_get_vol@ad_buff,w
  2699  0561  00B8               	movwf	cw_get_vol@ad_value_min
  2700                           
  2701                           ;CW201x.c: 439: ad_value_max = ad_buff;
  2702  0562  0842               	movf	cw_get_vol@ad_buff+1,w
  2703  0563  00BB               	movwf	cw_get_vol@ad_value_max+1
  2704  0564  0841               	movf	cw_get_vol@ad_buff,w
  2705  0565  00BA               	movwf	cw_get_vol@ad_value_max
  2706  0566                     l273:	
  2707                           
  2708                           ;CW201x.c: 440: }
  2709                           ;CW201x.c: 441: if(ad_buff < ad_value_min)
  2710  0566  0839               	movf	cw_get_vol@ad_value_min+1,w
  2711  0567  0242               	subwf	cw_get_vol@ad_buff+1,w
  2712  0568  1D03               	skipz
  2713  0569  2D6C               	goto	u2605
  2714  056A  0838               	movf	cw_get_vol@ad_value_min,w
  2715  056B  0241               	subwf	cw_get_vol@ad_buff,w
  2716  056C                     u2605:	
  2717  056C  1803               	skipnc
  2718  056D  2D72               	goto	l274
  2719                           
  2720                           ;CW201x.c: 442: {
  2721                           ;CW201x.c: 443: ad_value_min = ad_buff;
  2722  056E  0842               	movf	cw_get_vol@ad_buff+1,w
  2723  056F  00B9               	movwf	cw_get_vol@ad_value_min+1
  2724  0570  0841               	movf	cw_get_vol@ad_buff,w
  2725  0571  00B8               	movwf	cw_get_vol@ad_value_min
  2726  0572                     l274:	
  2727                           
  2728                           ;CW201x.c: 444: }
  2729                           ;CW201x.c: 445: if(ad_buff > ad_value_max)
  2730  0572  0842               	movf	cw_get_vol@ad_buff+1,w
  2731  0573  023B               	subwf	cw_get_vol@ad_value_max+1,w
  2732  0574  1D03               	skipz
  2733  0575  2D78               	goto	u2615
  2734  0576  0841               	movf	cw_get_vol@ad_buff,w
  2735  0577  023A               	subwf	cw_get_vol@ad_value_max,w
  2736  0578                     u2615:	
  2737  0578  1803               	skipnc
  2738  0579  2D7E               	goto	l275
  2739                           
  2740                           ;CW201x.c: 446: {
  2741                           ;CW201x.c: 447: ad_value_max = ad_buff;
  2742  057A  0842               	movf	cw_get_vol@ad_buff+1,w
  2743  057B  00BB               	movwf	cw_get_vol@ad_value_max+1
  2744  057C  0841               	movf	cw_get_vol@ad_buff,w
  2745  057D  00BA               	movwf	cw_get_vol@ad_value_max
  2746  057E                     l275:	
  2747                           
  2748                           ;CW201x.c: 448: }
  2749                           ;CW201x.c: 449: ad_value += ad_buff;
  2750  057E  0841               	movf	cw_get_vol@ad_buff,w
  2751  057F  07BC               	addwf	cw_get_vol@ad_value,f
  2752  0580  0842               	movf	cw_get_vol@ad_buff+1,w
  2753  0581  3DBD               	addwfc	cw_get_vol@ad_value+1,f
  2754  0582  3000               	movlw	0
  2755  0583  3DBE               	addwfc	cw_get_vol@ad_value+2,f
  2756  0584  3DBF               	addwfc	cw_get_vol@ad_value+3,f
  2757  0585  3001               	movlw	1
  2758  0586  00AF               	movwf	??_cw_get_vol
  2759  0587  082F               	movf	??_cw_get_vol,w
  2760  0588  07C0               	addwf	cw_get_vol@get_ad_times,f
  2761  0589  3003               	movlw	3
  2762  058A  0240               	subwf	cw_get_vol@get_ad_times,w
  2763  058B  1C03               	skipc
  2764  058C  2D34               	goto	l2426
  2765  058D                     l2446:	
  2766                           
  2767                           ;CW201x.c: 450: }
  2768                           ;CW201x.c: 451: ad_value -= ad_value_min;
  2769  058D  0838               	movf	cw_get_vol@ad_value_min,w
  2770  058E  00AF               	movwf	??_cw_get_vol
  2771  058F  0839               	movf	cw_get_vol@ad_value_min+1,w
  2772  0590  00B0               	movwf	??_cw_get_vol+1
  2773  0591  01B1               	clrf	??_cw_get_vol+2
  2774  0592  01B2               	clrf	??_cw_get_vol+3
  2775  0593  082F               	movf	??_cw_get_vol,w
  2776  0594  02BC               	subwf	cw_get_vol@ad_value,f
  2777  0595  0830               	movf	??_cw_get_vol+1,w
  2778  0596  3BBD               	subwfb	cw_get_vol@ad_value+1,f
  2779  0597  0831               	movf	??_cw_get_vol+2,w
  2780  0598  3BBE               	subwfb	cw_get_vol@ad_value+2,f
  2781  0599  0832               	movf	??_cw_get_vol+3,w
  2782  059A  3BBF               	subwfb	cw_get_vol@ad_value+3,f
  2783                           
  2784                           ;CW201x.c: 452: ad_value -= ad_value_max;
  2785  059B  083A               	movf	cw_get_vol@ad_value_max,w
  2786  059C  00AF               	movwf	??_cw_get_vol
  2787  059D  083B               	movf	cw_get_vol@ad_value_max+1,w
  2788  059E  00B0               	movwf	??_cw_get_vol+1
  2789  059F  01B1               	clrf	??_cw_get_vol+2
  2790  05A0  01B2               	clrf	??_cw_get_vol+3
  2791  05A1  082F               	movf	??_cw_get_vol,w
  2792  05A2  02BC               	subwf	cw_get_vol@ad_value,f
  2793  05A3  0830               	movf	??_cw_get_vol+1,w
  2794  05A4  3BBD               	subwfb	cw_get_vol@ad_value+1,f
  2795  05A5  0831               	movf	??_cw_get_vol+2,w
  2796  05A6  3BBE               	subwfb	cw_get_vol@ad_value+2,f
  2797  05A7  0832               	movf	??_cw_get_vol+3,w
  2798  05A8  3BBF               	subwfb	cw_get_vol@ad_value+3,f
  2799                           
  2800                           ;CW201x.c: 453: ad_value = ad_value * 305 / 1000;
  2801  05A9  3000               	movlw	0
  2802  05AA  00A3               	movwf	___lldiv@divisor+3
  2803  05AB  3000               	movlw	0
  2804  05AC  00A2               	movwf	___lldiv@divisor+2
  2805  05AD  3003               	movlw	3
  2806  05AE  00A1               	movwf	___lldiv@divisor+1
  2807  05AF  30E8               	movlw	232
  2808  05B0  00A0               	movwf	___lldiv@divisor
  2809  05B1  083F               	movf	cw_get_vol@ad_value+3,w
  2810  05B2  00F3               	movwf	___lmul@multiplier+3
  2811  05B3  083E               	movf	cw_get_vol@ad_value+2,w
  2812  05B4  00F2               	movwf	___lmul@multiplier+2
  2813  05B5  083D               	movf	cw_get_vol@ad_value+1,w
  2814  05B6  00F1               	movwf	___lmul@multiplier+1
  2815  05B7  083C               	movf	cw_get_vol@ad_value,w
  2816  05B8  00F0               	movwf	___lmul@multiplier
  2817  05B9  3000               	movlw	0
  2818  05BA  00F7               	movwf	___lmul@multiplicand+3
  2819  05BB  3000               	movlw	0
  2820  05BC  00F6               	movwf	___lmul@multiplicand+2
  2821  05BD  3001               	movlw	1
  2822  05BE  00F5               	movwf	___lmul@multiplicand+1
  2823  05BF  3031               	movlw	49
  2824  05C0  00F4               	movwf	___lmul@multiplicand
  2825  05C1  220E               	fcall	___lmul
  2826  05C2  0873               	movf	?___lmul+3,w
  2827  05C3  0140               	movlb	0	; select bank0
  2828  05C4  00A7               	movwf	___lldiv@dividend+3
  2829  05C5  0872               	movf	?___lmul+2,w
  2830  05C6  00A6               	movwf	___lldiv@dividend+2
  2831  05C7  0871               	movf	?___lmul+1,w
  2832  05C8  00A5               	movwf	___lldiv@dividend+1
  2833  05C9  0870               	movf	?___lmul,w
  2834  05CA  00A4               	movwf	___lldiv@dividend
  2835  05CB  23A5               	fcall	___lldiv
  2836  05CC  0140               	movlb	0	; select bank0
  2837  05CD  0823               	movf	?___lldiv+3,w
  2838  05CE  00BF               	movwf	cw_get_vol@ad_value+3
  2839  05CF  0822               	movf	?___lldiv+2,w
  2840  05D0  00BE               	movwf	cw_get_vol@ad_value+2
  2841  05D1  0821               	movf	?___lldiv+1,w
  2842  05D2  00BD               	movwf	cw_get_vol@ad_value+1
  2843  05D3  0820               	movf	?___lldiv,w
  2844  05D4  00BC               	movwf	cw_get_vol@ad_value
  2845                           
  2846                           ;CW201x.c: 454: return(ad_value);
  2847  05D5  083D               	movf	cw_get_vol@ad_value+1,w
  2848  05D6  00AE               	movwf	?_cw_get_vol+1
  2849  05D7  083C               	movf	cw_get_vol@ad_value,w
  2850  05D8  00AD               	movwf	?_cw_get_vol
  2851  05D9  0008               	return
  2852  05DA                     __end_of_cw_get_vol:	
  2853                           
  2854                           	psect	text5
  2855  03F8                     __ptext5:	
  2856 ;; *************** function _cw_read_word *****************
  2857 ;; Defined at:
  2858 ;;		line 191 in file "iic.c"
  2859 ;; Parameters:    Size  Location     Type
  2860 ;;  point_reg       1    wreg     unsigned char 
  2861 ;;  r_pdata         1    4[BANK0 ] PTR unsigned char 
  2862 ;;		 -> cw_get_vol@reg_val(2), 
  2863 ;;  length          2    5[BANK0 ] unsigned int 
  2864 ;; Auto vars:     Size  Location     Type
  2865 ;;  point_reg       1    9[BANK0 ] unsigned char 
  2866 ;;  count           1   10[BANK0 ] unsigned char 
  2867 ;; Return value:  Size  Location     Type
  2868 ;;                  2    4[BANK0 ] int 
  2869 ;; Registers used:
  2870 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2871 ;; Tracked objects:
  2872 ;;		On entry : 0/0
  2873 ;;		On exit  : 0/0
  2874 ;;		Unchanged: 0/0
  2875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2876 ;;      Params:         0       3       0       0
  2877 ;;      Locals:         0       2       0       0
  2878 ;;      Temps:          0       2       0       0
  2879 ;;      Totals:         0       7       0       0
  2880 ;;Total ram usage:        7 bytes
  2881 ;; Hardware stack levels used:    1
  2882 ;; Hardware stack levels required when called:    3
  2883 ;; This function calls:
  2884 ;;		_read_byte
  2885 ;;		_s_ack
  2886 ;;		_sn_ack
  2887 ;;		_start
  2888 ;;		_stop
  2889 ;;		_wait_r_ack
  2890 ;;		_write_byte
  2891 ;; This function is called by:
  2892 ;;		_cw_get_vol
  2893 ;; This function uses a non-reentrant model
  2894 ;;
  2895                           
  2896                           
  2897                           ;psect for function _cw_read_word
  2898  03F8                     _cw_read_word:	
  2899                           
  2900                           ;incstack = 0
  2901                           ; Regs used in _cw_read_word: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2902                           ;cw_read_word@point_reg stored from wreg
  2903  03F8  0140               	movlb	0	; select bank0
  2904  03F9  00A9               	movwf	cw_read_word@point_reg
  2905                           
  2906                           ;iic.c: 193: unsigned char count;
  2907                           ;iic.c: 195: start();
  2908  03FA  204B               	fcall	_start
  2909                           
  2910                           ;iic.c: 196: write_byte(0xc4);
  2911  03FB  30C4               	movlw	196
  2912  03FC  2169               	fcall	_write_byte
  2913                           
  2914                           ;iic.c: 197: if(wait_r_ack())
  2915  03FD  223D               	fcall	_wait_r_ack
  2916  03FE  087B               	movf	?_wait_r_ack,w
  2917  03FF  047C               	iorwf	?_wait_r_ack+1,w
  2918  0400  1903               	btfsc	3,2
  2919  0401  2C08               	goto	l2212
  2920                           
  2921                           ;iic.c: 198: {
  2922                           ;iic.c: 199: return 1;
  2923  0402  3001               	movlw	1
  2924  0403  0140               	movlb	0	; select bank0
  2925  0404  00A4               	movwf	?_cw_read_word
  2926  0405  3000               	movlw	0
  2927  0406  00A5               	movwf	?_cw_read_word+1
  2928  0407  0008               	return
  2929  0408                     l2212:	
  2930                           
  2931                           ;iic.c: 200: }
  2932                           ;iic.c: 201: write_byte(point_reg);
  2933  0408  0140               	movlb	0	; select bank0
  2934  0409  0829               	movf	cw_read_word@point_reg,w
  2935  040A  2169               	fcall	_write_byte
  2936                           
  2937                           ;iic.c: 202: if(wait_r_ack())
  2938  040B  223D               	fcall	_wait_r_ack
  2939  040C  087B               	movf	?_wait_r_ack,w
  2940  040D  047C               	iorwf	?_wait_r_ack+1,w
  2941  040E  1903               	btfsc	3,2
  2942  040F  2C16               	goto	l2218
  2943                           
  2944                           ;iic.c: 203: {
  2945                           ;iic.c: 204: return 1;
  2946  0410  3001               	movlw	1
  2947  0411  0140               	movlb	0	; select bank0
  2948  0412  00A4               	movwf	?_cw_read_word
  2949  0413  3000               	movlw	0
  2950  0414  00A5               	movwf	?_cw_read_word+1
  2951  0415  0008               	return
  2952  0416                     l2218:	
  2953                           
  2954                           ;iic.c: 205: }
  2955                           ;iic.c: 206: start();
  2956  0416  204B               	fcall	_start
  2957                           
  2958                           ;iic.c: 207: write_byte(0xc5);
  2959  0417  30C5               	movlw	197
  2960  0418  2169               	fcall	_write_byte
  2961                           
  2962                           ;iic.c: 208: if(wait_r_ack())
  2963  0419  223D               	fcall	_wait_r_ack
  2964  041A  087B               	movf	?_wait_r_ack,w
  2965  041B  047C               	iorwf	?_wait_r_ack+1,w
  2966  041C  1903               	btfsc	3,2
  2967  041D  2C24               	goto	l2224
  2968                           
  2969                           ;iic.c: 209: {
  2970                           ;iic.c: 210: return 1;
  2971  041E  3001               	movlw	1
  2972  041F  0140               	movlb	0	; select bank0
  2973  0420  00A4               	movwf	?_cw_read_word
  2974  0421  3000               	movlw	0
  2975  0422  00A5               	movwf	?_cw_read_word+1
  2976  0423  0008               	return
  2977  0424                     l2224:	
  2978                           
  2979                           ;iic.c: 211: }
  2980                           ;iic.c: 212: for(count = 0; count < length; count++ ){
  2981  0424  0140               	movlb	0	; select bank0
  2982  0425  01AA               	clrf	cw_read_word@count
  2983  0426                     l2236:	
  2984  0426  082A               	movf	cw_read_word@count,w
  2985  0427  00A7               	movwf	??_cw_read_word
  2986  0428  01A8               	clrf	??_cw_read_word+1
  2987  0429  0826               	movf	cw_read_word@length+1,w
  2988  042A  0228               	subwf	??_cw_read_word+1,w
  2989  042B  1D03               	skipz
  2990  042C  2C2F               	goto	u2115
  2991  042D  0825               	movf	cw_read_word@length,w
  2992  042E  0227               	subwf	??_cw_read_word,w
  2993  042F                     u2115:	
  2994  042F  1803               	btfsc	3,0
  2995  0430  2C53               	goto	l2238
  2996                           
  2997                           ;iic.c: 213: *r_pdata = read_byte();
  2998  0431  218E               	fcall	_read_byte
  2999  0432  0140               	movlb	0	; select bank0
  3000  0433  00A7               	movwf	??_cw_read_word
  3001  0434  0824               	movf	cw_read_word@r_pdata,w
  3002  0435  0086               	movwf	6
  3003  0436  0187               	clrf	7
  3004  0437  0827               	movf	??_cw_read_word,w
  3005  0438  0081               	movwf	1
  3006                           
  3007                           ;iic.c: 214: if(count + 1 < length){
  3008  0439  082A               	movf	cw_read_word@count,w
  3009  043A  3E01               	addlw	1
  3010  043B  00A7               	movwf	??_cw_read_word
  3011  043C  3000               	movlw	0
  3012  043D  1803               	skipnc
  3013  043E  3001               	movlw	1
  3014  043F  00A8               	movwf	??_cw_read_word+1
  3015  0440  0826               	movf	cw_read_word@length+1,w
  3016  0441  0228               	subwf	??_cw_read_word+1,w
  3017  0442  1D03               	skipz
  3018  0443  2C46               	goto	u2105
  3019  0444  0825               	movf	cw_read_word@length,w
  3020  0445  0227               	subwf	??_cw_read_word,w
  3021  0446                     u2105:	
  3022  0446  1803               	skipnc
  3023  0447  2C4D               	goto	l2234
  3024                           
  3025                           ;iic.c: 215: r_pdata++;
  3026  0448  3001               	movlw	1
  3027  0449  00A7               	movwf	??_cw_read_word
  3028  044A  0827               	movf	??_cw_read_word,w
  3029  044B  07A4               	addwf	cw_read_word@r_pdata,f
  3030                           
  3031                           ;iic.c: 216: sn_ack();
  3032  044C  2066               	fcall	_sn_ack
  3033  044D                     l2234:	
  3034  044D  3001               	movlw	1
  3035  044E  0140               	movlb	0	; select bank0
  3036  044F  00A7               	movwf	??_cw_read_word
  3037  0450  0827               	movf	??_cw_read_word,w
  3038  0451  07AA               	addwf	cw_read_word@count,f
  3039  0452  2C26               	goto	l2236
  3040  0453                     l2238:	
  3041                           
  3042                           ;iic.c: 217: }
  3043                           ;iic.c: 218: }
  3044                           ;iic.c: 219: s_ack();
  3045  0453  2058               	fcall	_s_ack
  3046                           
  3047                           ;iic.c: 220: stop();
  3048  0454  2075               	fcall	_stop
  3049                           
  3050                           ;iic.c: 221: return 0;
  3051  0455  0140               	movlb	0	; select bank0
  3052  0456  01A4               	clrf	?_cw_read_word
  3053  0457  01A5               	clrf	?_cw_read_word+1
  3054  0458  0008               	return
  3055  0459                     __end_of_cw_read_word:	
  3056                           
  3057                           	psect	text6
  3058  0066                     __ptext6:	
  3059 ;; *************** function _sn_ack *****************
  3060 ;; Defined at:
  3061 ;;		line 115 in file "iic.c"
  3062 ;; Parameters:    Size  Location     Type
  3063 ;;		None
  3064 ;; Auto vars:     Size  Location     Type
  3065 ;;		None
  3066 ;; Return value:  Size  Location     Type
  3067 ;;                  1    wreg      void 
  3068 ;; Registers used:
  3069 ;;		wreg, status,2, status,0, pclath, cstack
  3070 ;; Tracked objects:
  3071 ;;		On entry : 0/0
  3072 ;;		On exit  : 0/0
  3073 ;;		Unchanged: 0/0
  3074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3075 ;;      Params:         0       0       0       0
  3076 ;;      Locals:         0       0       0       0
  3077 ;;      Temps:          0       0       0       0
  3078 ;;      Totals:         0       0       0       0
  3079 ;;Total ram usage:        0 bytes
  3080 ;; Hardware stack levels used:    1
  3081 ;; Hardware stack levels required when called:    1
  3082 ;; This function calls:
  3083 ;;		_I2C_Delay10us
  3084 ;; This function is called by:
  3085 ;;		_cw_read_word
  3086 ;; This function uses a non-reentrant model
  3087 ;;
  3088                           
  3089                           
  3090                           ;psect for function _sn_ack
  3091  0066                     _sn_ack:	
  3092                           
  3093                           ;incstack = 0
  3094                           ; Regs used in _sn_ack: [wreg+status,2+status,0+pclath+cstack]
  3095                           ;iic.c: 117: do { TRISCbits.TRISC1 = 0; } while(0);
  3096  0066  0140               	movlb	0	; select bank0
  3097  0067  1094               	bcf	20,1	;volatile
  3098                           
  3099                           ;iic.c: 118: do { LATCbits.LATC1 = 0; } while(0);
  3100  0068  109A               	bcf	26,1	;volatile
  3101                           
  3102                           ;iic.c: 119: I2C_Delay10us(1);
  3103  0069  3001               	movlw	1
  3104  006A  2127               	fcall	_I2C_Delay10us
  3105                           
  3106                           ;iic.c: 120: do { LATCbits.LATC0 = 1; } while(0);
  3107  006B  0140               	movlb	0	; select bank0
  3108  006C  141A               	bsf	26,0	;volatile
  3109                           
  3110                           ;iic.c: 121: I2C_Delay10us(1);
  3111  006D  3001               	movlw	1
  3112  006E  2127               	fcall	_I2C_Delay10us
  3113                           
  3114                           ;iic.c: 122: do { LATCbits.LATC0 = 0; } while(0);
  3115  006F  0140               	movlb	0	; select bank0
  3116  0070  101A               	bcf	26,0	;volatile
  3117                           
  3118                           ;iic.c: 123: do { LATCbits.LATC1 = 1; } while(0);
  3119  0071  149A               	bsf	26,1	;volatile
  3120                           
  3121                           ;iic.c: 124: I2C_Delay10us(1);
  3122  0072  3001               	movlw	1
  3123  0073  2127               	fcall	_I2C_Delay10us
  3124  0074  0008               	return
  3125  0075                     __end_of_sn_ack:	
  3126                           
  3127                           	psect	text7
  3128  020E                     __ptext7:	
  3129 ;; *************** function ___lmul *****************
  3130 ;; Defined at:
  3131 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul32.c"
  3132 ;; Parameters:    Size  Location     Type
  3133 ;;  multiplier      4    0[COMMON] unsigned long 
  3134 ;;  multiplicand    4    4[COMMON] unsigned long 
  3135 ;; Auto vars:     Size  Location     Type
  3136 ;;  product         4    8[COMMON] unsigned long 
  3137 ;; Return value:  Size  Location     Type
  3138 ;;                  4    0[COMMON] unsigned long 
  3139 ;; Registers used:
  3140 ;;		wreg, status,2, status,0
  3141 ;; Tracked objects:
  3142 ;;		On entry : 0/0
  3143 ;;		On exit  : 0/0
  3144 ;;		Unchanged: 0/0
  3145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3146 ;;      Params:         8       0       0       0
  3147 ;;      Locals:         4       0       0       0
  3148 ;;      Temps:          0       0       0       0
  3149 ;;      Totals:        12       0       0       0
  3150 ;;Total ram usage:       12 bytes
  3151 ;; Hardware stack levels used:    1
  3152 ;; This function calls:
  3153 ;;		Nothing
  3154 ;; This function is called by:
  3155 ;;		_cw_get_vol
  3156 ;; This function uses a non-reentrant model
  3157 ;;
  3158                           
  3159                           
  3160                           ;psect for function ___lmul
  3161  020E                     ___lmul:	
  3162                           
  3163                           ;incstack = 0
  3164                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3165  020E  3000               	movlw	0
  3166  020F  00FB               	movwf	___lmul@product+3
  3167  0210  3000               	movlw	0
  3168  0211  00FA               	movwf	___lmul@product+2
  3169  0212  3000               	movlw	0
  3170  0213  00F9               	movwf	___lmul@product+1
  3171  0214  3000               	movlw	0
  3172  0215  00F8               	movwf	___lmul@product
  3173  0216                     l2246:	
  3174  0216  1C70               	btfss	___lmul@multiplier,0
  3175  0217  2A20               	goto	l2250
  3176  0218  0874               	movf	___lmul@multiplicand,w
  3177  0219  07F8               	addwf	___lmul@product,f
  3178  021A  0875               	movf	___lmul@multiplicand+1,w
  3179  021B  3DF9               	addwfc	___lmul@product+1,f
  3180  021C  0876               	movf	___lmul@multiplicand+2,w
  3181  021D  3DFA               	addwfc	___lmul@product+2,f
  3182  021E  0877               	movf	___lmul@multiplicand+3,w
  3183  021F  3DFB               	addwfc	___lmul@product+3,f
  3184  0220                     l2250:	
  3185  0220  3001               	movlw	1
  3186  0221                     u2135:	
  3187  0221  35F4               	lslf	___lmul@multiplicand,f
  3188  0222  0DF5               	rlf	___lmul@multiplicand+1,f
  3189  0223  0DF6               	rlf	___lmul@multiplicand+2,f
  3190  0224  0DF7               	rlf	___lmul@multiplicand+3,f
  3191  0225  0B89               	decfsz	9,f
  3192  0226  2A21               	goto	u2135
  3193  0227  3001               	movlw	1
  3194  0228                     u2145:	
  3195  0228  36F3               	lsrf	___lmul@multiplier+3,f
  3196  0229  0CF2               	rrf	___lmul@multiplier+2,f
  3197  022A  0CF1               	rrf	___lmul@multiplier+1,f
  3198  022B  0CF0               	rrf	___lmul@multiplier,f
  3199  022C  0B89               	decfsz	9,f
  3200  022D  2A28               	goto	u2145
  3201  022E  0873               	movf	___lmul@multiplier+3,w
  3202  022F  0472               	iorwf	___lmul@multiplier+2,w
  3203  0230  0471               	iorwf	___lmul@multiplier+1,w
  3204  0231  0470               	iorwf	___lmul@multiplier,w
  3205  0232  1D03               	skipz
  3206  0233  2A16               	goto	l2246
  3207  0234  087B               	movf	___lmul@product+3,w
  3208  0235  00F3               	movwf	?___lmul+3
  3209  0236  087A               	movf	___lmul@product+2,w
  3210  0237  00F2               	movwf	?___lmul+2
  3211  0238  0879               	movf	___lmul@product+1,w
  3212  0239  00F1               	movwf	?___lmul+1
  3213  023A  0878               	movf	___lmul@product,w
  3214  023B  00F0               	movwf	?___lmul
  3215  023C  0008               	return
  3216  023D                     __end_of___lmul:	
  3217                           
  3218                           	psect	text8
  3219  03A5                     __ptext8:	
  3220 ;; *************** function ___lldiv *****************
  3221 ;; Defined at:
  3222 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
  3223 ;; Parameters:    Size  Location     Type
  3224 ;;  divisor         4    0[BANK0 ] unsigned long 
  3225 ;;  dividend        4    4[BANK0 ] unsigned long 
  3226 ;; Auto vars:     Size  Location     Type
  3227 ;;  quotient        4    8[BANK0 ] unsigned long 
  3228 ;;  counter         1   12[BANK0 ] unsigned char 
  3229 ;; Return value:  Size  Location     Type
  3230 ;;                  4    0[BANK0 ] unsigned long 
  3231 ;; Registers used:
  3232 ;;		wreg, status,2, status,0
  3233 ;; Tracked objects:
  3234 ;;		On entry : 0/0
  3235 ;;		On exit  : 0/0
  3236 ;;		Unchanged: 0/0
  3237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3238 ;;      Params:         0       8       0       0
  3239 ;;      Locals:         0       5       0       0
  3240 ;;      Temps:          1       0       0       0
  3241 ;;      Totals:         1      13       0       0
  3242 ;;Total ram usage:       14 bytes
  3243 ;; Hardware stack levels used:    1
  3244 ;; This function calls:
  3245 ;;		Nothing
  3246 ;; This function is called by:
  3247 ;;		_cw_get_vol
  3248 ;; This function uses a non-reentrant model
  3249 ;;
  3250                           
  3251                           
  3252                           ;psect for function ___lldiv
  3253  03A5                     ___lldiv:	
  3254                           
  3255                           ;incstack = 0
  3256                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3257  03A5  3000               	movlw	0
  3258  03A6  0140               	movlb	0	; select bank0
  3259  03A7  00AB               	movwf	___lldiv@quotient+3
  3260  03A8  3000               	movlw	0
  3261  03A9  00AA               	movwf	___lldiv@quotient+2
  3262  03AA  3000               	movlw	0
  3263  03AB  00A9               	movwf	___lldiv@quotient+1
  3264  03AC  3000               	movlw	0
  3265  03AD  00A8               	movwf	___lldiv@quotient
  3266  03AE  0823               	movf	___lldiv@divisor+3,w
  3267  03AF  0422               	iorwf	___lldiv@divisor+2,w
  3268  03B0  0421               	iorwf	___lldiv@divisor+1,w
  3269  03B1  0420               	iorwf	___lldiv@divisor,w
  3270  03B2  1903               	skipnz
  3271  03B3  2BEF               	goto	l2278
  3272  03B4  01AC               	clrf	___lldiv@counter
  3273  03B5  0AAC               	incf	___lldiv@counter,f
  3274  03B6                     l2264:	
  3275  03B6  1BA3               	btfsc	___lldiv@divisor+3,7
  3276  03B7  2BC4               	goto	l2266
  3277  03B8  3001               	movlw	1
  3278  03B9                     u2175:	
  3279  03B9  35A0               	lslf	___lldiv@divisor,f
  3280  03BA  0DA1               	rlf	___lldiv@divisor+1,f
  3281  03BB  0DA2               	rlf	___lldiv@divisor+2,f
  3282  03BC  0DA3               	rlf	___lldiv@divisor+3,f
  3283  03BD  0B89               	decfsz	9,f
  3284  03BE  2BB9               	goto	u2175
  3285  03BF  3001               	movlw	1
  3286  03C0  00FC               	movwf	??___lldiv
  3287  03C1  087C               	movf	??___lldiv,w
  3288  03C2  07AC               	addwf	___lldiv@counter,f
  3289  03C3  2BB6               	goto	l2264
  3290  03C4                     l2266:	
  3291  03C4  3001               	movlw	1
  3292  03C5                     u2195:	
  3293  03C5  35A8               	lslf	___lldiv@quotient,f
  3294  03C6  0DA9               	rlf	___lldiv@quotient+1,f
  3295  03C7  0DAA               	rlf	___lldiv@quotient+2,f
  3296  03C8  0DAB               	rlf	___lldiv@quotient+3,f
  3297  03C9  0B89               	decfsz	9,f
  3298  03CA  2BC5               	goto	u2195
  3299  03CB  0823               	movf	___lldiv@divisor+3,w
  3300  03CC  0227               	subwf	___lldiv@dividend+3,w
  3301  03CD  1D03               	skipz
  3302  03CE  2BD9               	goto	u2205
  3303  03CF  0822               	movf	___lldiv@divisor+2,w
  3304  03D0  0226               	subwf	___lldiv@dividend+2,w
  3305  03D1  1D03               	skipz
  3306  03D2  2BD9               	goto	u2205
  3307  03D3  0821               	movf	___lldiv@divisor+1,w
  3308  03D4  0225               	subwf	___lldiv@dividend+1,w
  3309  03D5  1D03               	skipz
  3310  03D6  2BD9               	goto	u2205
  3311  03D7  0820               	movf	___lldiv@divisor,w
  3312  03D8  0224               	subwf	___lldiv@dividend,w
  3313  03D9                     u2205:	
  3314  03D9  1C03               	skipc
  3315  03DA  2BE4               	goto	l2274
  3316  03DB  0820               	movf	___lldiv@divisor,w
  3317  03DC  02A4               	subwf	___lldiv@dividend,f
  3318  03DD  0821               	movf	___lldiv@divisor+1,w
  3319  03DE  3BA5               	subwfb	___lldiv@dividend+1,f
  3320  03DF  0822               	movf	___lldiv@divisor+2,w
  3321  03E0  3BA6               	subwfb	___lldiv@dividend+2,f
  3322  03E1  0823               	movf	___lldiv@divisor+3,w
  3323  03E2  3BA7               	subwfb	___lldiv@dividend+3,f
  3324  03E3  1428               	bsf	___lldiv@quotient,0
  3325  03E4                     l2274:	
  3326  03E4  3001               	movlw	1
  3327  03E5                     u2215:	
  3328  03E5  36A3               	lsrf	___lldiv@divisor+3,f
  3329  03E6  0CA2               	rrf	___lldiv@divisor+2,f
  3330  03E7  0CA1               	rrf	___lldiv@divisor+1,f
  3331  03E8  0CA0               	rrf	___lldiv@divisor,f
  3332  03E9  0B89               	decfsz	9,f
  3333  03EA  2BE5               	goto	u2215
  3334  03EB  3001               	movlw	1
  3335  03EC  02AC               	subwf	___lldiv@counter,f
  3336  03ED  1D03               	btfss	3,2
  3337  03EE  2BC4               	goto	l2266
  3338  03EF                     l2278:	
  3339  03EF  082B               	movf	___lldiv@quotient+3,w
  3340  03F0  00A3               	movwf	?___lldiv+3
  3341  03F1  082A               	movf	___lldiv@quotient+2,w
  3342  03F2  00A2               	movwf	?___lldiv+2
  3343  03F3  0829               	movf	___lldiv@quotient+1,w
  3344  03F4  00A1               	movwf	?___lldiv+1
  3345  03F5  0828               	movf	___lldiv@quotient,w
  3346  03F6  00A0               	movwf	?___lldiv
  3347  03F7  0008               	return
  3348  03F8                     __end_of___lldiv:	
  3349                           
  3350                           	psect	text9
  3351  0029                     __ptext9:	
  3352 ;; *************** function _update_usb_online *****************
  3353 ;; Defined at:
  3354 ;;		line 527 in file "CW201x.c"
  3355 ;; Parameters:    Size  Location     Type
  3356 ;;		None
  3357 ;; Auto vars:     Size  Location     Type
  3358 ;;		None
  3359 ;; Return value:  Size  Location     Type
  3360 ;;                  1    wreg      void 
  3361 ;; Registers used:
  3362 ;;		wreg, status,2, status,0
  3363 ;; Tracked objects:
  3364 ;;		On entry : 0/0
  3365 ;;		On exit  : 0/0
  3366 ;;		Unchanged: 0/0
  3367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3368 ;;      Params:         0       0       0       0
  3369 ;;      Locals:         0       0       0       0
  3370 ;;      Temps:          0       0       0       0
  3371 ;;      Totals:         0       0       0       0
  3372 ;;Total ram usage:        0 bytes
  3373 ;; Hardware stack levels used:    1
  3374 ;; This function calls:
  3375 ;;		Nothing
  3376 ;; This function is called by:
  3377 ;;		_cw_bat_work
  3378 ;; This function uses a non-reentrant model
  3379 ;;
  3380                           
  3381                           
  3382                           ;psect for function _update_usb_online
  3383  0029                     _update_usb_online:	
  3384                           
  3385                           ;CW201x.c: 529: if(CHARGE == 1)
  3386                           
  3387                           ;incstack = 0
  3388                           ; Regs used in _update_usb_online: [wreg+status,2+status,0]
  3389  0029  0140               	movlb	0	; select bank0
  3390  002A  035A               	decf	_CHARGE,w
  3391  002B  045B               	iorwf	_CHARGE+1,w
  3392  002C  1D03               	btfss	3,2
  3393  002D  2831               	goto	l2518
  3394                           
  3395                           ;CW201x.c: 530: {
  3396                           ;CW201x.c: 531: cw_bat.usb_online = 1;
  3397  002E  01CC               	clrf	_cw_bat
  3398  002F  0ACC               	incf	_cw_bat,f
  3399                           
  3400                           ;CW201x.c: 532: }else{
  3401  0030  0008               	return
  3402  0031                     l2518:	
  3403                           
  3404                           ;CW201x.c: 533: cw_bat.usb_online = 0;
  3405  0031  01CC               	clrf	_cw_bat
  3406  0032  0008               	return
  3407  0033                     __end_of_update_usb_online:	
  3408                           
  3409                           	psect	text10
  3410  0148                     __ptext10:	
  3411 ;; *************** function _update_capacity *****************
  3412 ;; Defined at:
  3413 ;;		line 480 in file "CW201x.c"
  3414 ;; Parameters:    Size  Location     Type
  3415 ;;		None
  3416 ;; Auto vars:     Size  Location     Type
  3417 ;;  cw_capacity     2   40[BANK0 ] int 
  3418 ;; Return value:  Size  Location     Type
  3419 ;;                  1    wreg      void 
  3420 ;; Registers used:
  3421 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3422 ;; Tracked objects:
  3423 ;;		On entry : 0/0
  3424 ;;		On exit  : 0/0
  3425 ;;		Unchanged: 0/0
  3426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3427 ;;      Params:         0       0       0       0
  3428 ;;      Locals:         0       2       0       0
  3429 ;;      Temps:          0       1       0       0
  3430 ;;      Totals:         0       3       0       0
  3431 ;;Total ram usage:        3 bytes
  3432 ;; Hardware stack levels used:    1
  3433 ;; Hardware stack levels required when called:    8
  3434 ;; This function calls:
  3435 ;;		_cw_get_capacity
  3436 ;; This function is called by:
  3437 ;;		_cw_bat_work
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440                           
  3441                           
  3442                           ;psect for function _update_capacity
  3443  0148                     _update_capacity:	
  3444                           
  3445                           ;CW201x.c: 482: int cw_capacity;
  3446                           ;CW201x.c: 483: cw_capacity = cw_get_capacity();
  3447                           
  3448                           ;incstack = 0
  3449                           ; Regs used in _update_capacity: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3450  0148  26B0               	fcall	_cw_get_capacity
  3451  0149  0140               	movlb	0	; select bank0
  3452  014A  083B               	movf	?_cw_get_capacity+1,w
  3453  014B  00C9               	movwf	update_capacity@cw_capacity+1
  3454  014C  083A               	movf	?_cw_get_capacity,w
  3455  014D  00C8               	movwf	update_capacity@cw_capacity
  3456                           
  3457                           ;CW201x.c: 484: if((cw_capacity >= 0) && (cw_capacity <= 100) && (cw_bat.capacity != cw_
      +                          capacity))
  3458  014E  1BC9               	btfsc	update_capacity@cw_capacity+1,7
  3459  014F  0008               	return
  3460  0150  0849               	movf	update_capacity@cw_capacity+1,w
  3461  0151  3A80               	xorlw	128
  3462  0152  00C7               	movwf	??_update_capacity
  3463  0153  3080               	movlw	128
  3464  0154  0247               	subwf	??_update_capacity,w
  3465  0155  1D03               	skipz
  3466  0156  2959               	goto	u2675
  3467  0157  3065               	movlw	101
  3468  0158  0248               	subwf	update_capacity@cw_capacity,w
  3469  0159                     u2675:	
  3470  0159  1803               	skipnc
  3471  015A  0008               	return
  3472  015B  0140               	movlb	0	; select bank0
  3473  015C  0849               	movf	update_capacity@cw_capacity+1,w
  3474  015D  064E               	xorwf	_cw_bat+2,w
  3475  015E  1D03               	skipz
  3476  015F  2962               	goto	u2685
  3477  0160  0848               	movf	update_capacity@cw_capacity,w
  3478  0161  064D               	xorwf	_cw_bat+1,w
  3479  0162                     u2685:	
  3480  0162  1903               	skipnz
  3481  0163  0008               	return
  3482                           
  3483                           ;CW201x.c: 485: {
  3484                           ;CW201x.c: 486: cw_bat.capacity = cw_capacity;
  3485  0164  0849               	movf	update_capacity@cw_capacity+1,w
  3486  0165  00CE               	movwf	_cw_bat+2
  3487  0166  0848               	movf	update_capacity@cw_capacity,w
  3488  0167  00CD               	movwf	_cw_bat+1
  3489  0168  0008               	return
  3490  0169                     __end_of_update_capacity:	
  3491                           
  3492                           	psect	text11
  3493  06B0                     __ptext11:	
  3494 ;; *************** function _cw_get_capacity *****************
  3495 ;; Defined at:
  3496 ;;		line 300 in file "CW201x.c"
  3497 ;; Parameters:    Size  Location     Type
  3498 ;;		None
  3499 ;; Auto vars:     Size  Location     Type
  3500 ;;  ret             2   35[BANK0 ] int 
  3501 ;;  cw_capacity     1   38[BANK0 ] unsigned char 
  3502 ;;  allow_capaci    1   37[BANK0 ] unsigned char 
  3503 ;;  reg_val         1   34[BANK0 ] unsigned char 
  3504 ;; Return value:  Size  Location     Type
  3505 ;;                  2   26[BANK0 ] int 
  3506 ;; Registers used:
  3507 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3508 ;; Tracked objects:
  3509 ;;		On entry : 0/0
  3510 ;;		On exit  : 0/0
  3511 ;;		Unchanged: 0/0
  3512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3513 ;;      Params:         0       2       0       0
  3514 ;;      Locals:         0       9       0       0
  3515 ;;      Temps:          0       2       0       0
  3516 ;;      Totals:         0      13       0       0
  3517 ;;Total ram usage:       13 bytes
  3518 ;; Hardware stack levels used:    1
  3519 ;; Hardware stack levels required when called:    7
  3520 ;; This function calls:
  3521 ;;		_cw_por
  3522 ;;		_cw_read
  3523 ;; This function is called by:
  3524 ;;		_update_capacity
  3525 ;; This function uses a non-reentrant model
  3526 ;;
  3527                           
  3528                           
  3529                           ;psect for function _cw_get_capacity
  3530  06B0                     _cw_get_capacity:	
  3531                           
  3532                           ;CW201x.c: 302: int ret = 0;
  3533                           
  3534                           ;incstack = 0
  3535                           ; Regs used in _cw_get_capacity: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3536  06B0  0140               	movlb	0	; select bank0
  3537  06B1  01C3               	clrf	cw_get_capacity@ret
  3538  06B2  01C4               	clrf	cw_get_capacity@ret+1
  3539                           
  3540                           ;CW201x.c: 303: unsigned char allow_capacity;
  3541                           ;CW201x.c: 304: unsigned char reg_val;
  3542                           ;CW201x.c: 306: unsigned char cw_capacity;
  3543                           ;CW201x.c: 309: ret = cw_read(0x4, &reg_val);
  3544  06B3  3042               	movlw	(low (cw_get_capacity@reg_val| 0))& (0+255)
  3545  06B4  00BC               	movwf	??_cw_get_capacity
  3546  06B5  083C               	movf	??_cw_get_capacity,w
  3547  06B6  00A4               	movwf	cw_read@r_pdata
  3548  06B7  3004               	movlw	4
  3549  06B8  22A1               	fcall	_cw_read
  3550  06B9  0140               	movlb	0	; select bank0
  3551  06BA  0825               	movf	?_cw_read+1,w
  3552  06BB  00C4               	movwf	cw_get_capacity@ret+1
  3553  06BC  0824               	movf	?_cw_read,w
  3554  06BD  00C3               	movwf	cw_get_capacity@ret
  3555                           
  3556                           ;CW201x.c: 310: if(ret)
  3557  06BE  0843               	movf	cw_get_capacity@ret,w
  3558  06BF  0444               	iorwf	cw_get_capacity@ret+1,w
  3559  06C0  1903               	btfsc	3,2
  3560  06C1  2EC7               	goto	l2292
  3561                           
  3562                           ;CW201x.c: 311: {
  3563                           ;CW201x.c: 312: return -1;
  3564  06C2  30FF               	movlw	255
  3565  06C3  00BA               	movwf	?_cw_get_capacity
  3566  06C4  30FF               	movlw	255
  3567  06C5  00BB               	movwf	?_cw_get_capacity+1
  3568  06C6  0008               	return
  3569  06C7                     l2292:	
  3570                           
  3571                           ;CW201x.c: 313: }
  3572                           ;CW201x.c: 315: cw_capacity = reg_val;
  3573  06C7  0842               	movf	cw_get_capacity@reg_val,w
  3574  06C8  00BC               	movwf	??_cw_get_capacity
  3575  06C9  083C               	movf	??_cw_get_capacity,w
  3576  06CA  00C6               	movwf	cw_get_capacity@cw_capacity
  3577                           
  3578                           ;CW201x.c: 317: if ((cw_capacity < 0) || (cw_capacity > 100)) {
  3579  06CB  3065               	movlw	101
  3580  06CC  0246               	subwf	cw_get_capacity@cw_capacity,w
  3581  06CD  1C03               	skipc
  3582  06CE  2EEC               	goto	l2314
  3583                           
  3584                           ;CW201x.c: 319: reset_loop++;
  3585  06CF  3001               	movlw	1
  3586  06D0  00BC               	movwf	??_cw_get_capacity
  3587  06D1  083C               	movf	??_cw_get_capacity,w
  3588  06D2  07DC               	addwf	_reset_loop,f
  3589                           
  3590                           ;CW201x.c: 320: if (reset_loop >5) {
  3591  06D3  3006               	movlw	6
  3592  06D4  025C               	subwf	_reset_loop,w
  3593  06D5  1C03               	skipc
  3594  06D6  2EE7               	goto	l2308
  3595                           
  3596                           ;CW201x.c: 321: ret = cw_por();
  3597  06D7  235B               	fcall	_cw_por
  3598  06D8  0140               	movlb	0	; select bank0
  3599  06D9  0834               	movf	?_cw_por+1,w
  3600  06DA  00C4               	movwf	cw_get_capacity@ret+1
  3601  06DB  0833               	movf	?_cw_por,w
  3602  06DC  00C3               	movwf	cw_get_capacity@ret
  3603                           
  3604                           ;CW201x.c: 322: if(ret)
  3605  06DD  0843               	movf	cw_get_capacity@ret,w
  3606  06DE  0444               	iorwf	cw_get_capacity@ret+1,w
  3607  06DF  1903               	btfsc	3,2
  3608  06E0  2EE6               	goto	l2306
  3609                           
  3610                           ;CW201x.c: 323: return -1;
  3611  06E1  30FF               	movlw	255
  3612  06E2  00BA               	movwf	?_cw_get_capacity
  3613  06E3  30FF               	movlw	255
  3614  06E4  00BB               	movwf	?_cw_get_capacity+1
  3615  06E5  0008               	return
  3616  06E6                     l2306:	
  3617                           
  3618                           ;CW201x.c: 324: reset_loop =0;
  3619  06E6  01DC               	clrf	_reset_loop
  3620  06E7                     l2308:	
  3621                           
  3622                           ;CW201x.c: 325: }
  3623                           ;CW201x.c: 326: return cw_bat.capacity;
  3624  06E7  084E               	movf	_cw_bat+2,w
  3625  06E8  00BB               	movwf	?_cw_get_capacity+1
  3626  06E9  084D               	movf	_cw_bat+1,w
  3627  06EA  00BA               	movwf	?_cw_get_capacity
  3628  06EB  0008               	return
  3629  06EC                     l2314:	
  3630                           ;CW201x.c: 327: }else {
  3631                           
  3632                           
  3633                           ;CW201x.c: 328: reset_loop =0;
  3634  06EC  01DC               	clrf	_reset_loop
  3635                           
  3636                           ;CW201x.c: 329: }
  3637                           ;CW201x.c: 335: if(((cw_bat.usb_online == 1) && (cw_capacity == (cw_bat.capacity - 1)))
  3638                           ;CW201x.c: 336: || ((cw_bat.usb_online == 0) && (cw_capacity == (cw_bat.capacity + 1))))
  3639  06ED  034C               	decf	_cw_bat,w
  3640  06EE  1D03               	btfss	3,2
  3641  06EF  2EFB               	goto	l2320
  3642  06F0  084D               	movf	_cw_bat+1,w
  3643  06F1  3EFF               	addlw	255
  3644  06F2  00BC               	movwf	??_cw_get_capacity
  3645  06F3  30FF               	movlw	255
  3646  06F4  3D4E               	addwfc	_cw_bat+2,w
  3647  06F5  00BD               	movwf	??_cw_get_capacity+1
  3648  06F6  0846               	movf	cw_get_capacity@cw_capacity,w
  3649  06F7  063C               	xorwf	??_cw_get_capacity,w
  3650  06F8  043D               	iorwf	??_cw_get_capacity+1,w
  3651  06F9  1903               	skipnz
  3652  06FA  2F09               	goto	l2324
  3653  06FB                     l2320:	
  3654  06FB  084C               	movf	_cw_bat,w
  3655  06FC  1D03               	btfss	3,2
  3656  06FD  2F20               	goto	l2334
  3657  06FE  084D               	movf	_cw_bat+1,w
  3658  06FF  3E01               	addlw	1
  3659  0700  00BC               	movwf	??_cw_get_capacity
  3660  0701  3000               	movlw	0
  3661  0702  3D4E               	addwfc	_cw_bat+2,w
  3662  0703  00BD               	movwf	??_cw_get_capacity+1
  3663  0704  0846               	movf	cw_get_capacity@cw_capacity,w
  3664  0705  063C               	xorwf	??_cw_get_capacity,w
  3665  0706  043D               	iorwf	??_cw_get_capacity+1,w
  3666  0707  1D03               	skipz
  3667  0708  2F20               	goto	l2334
  3668  0709                     l2324:	
  3669                           
  3670                           ;CW201x.c: 337: {
  3671                           ;CW201x.c: 339: if(!((cw_capacity == 0 && cw_bat.capacity <= 2)||(cw_capacity == 100 && 
      +                          cw_bat.capacity == 99)))
  3672  0709  0846               	movf	cw_get_capacity@cw_capacity,w
  3673  070A  1D03               	btfss	3,2
  3674  070B  2F13               	goto	l2328
  3675  070C  3000               	movlw	0
  3676  070D  024E               	subwf	_cw_bat+2,w
  3677  070E  3003               	movlw	3
  3678  070F  1903               	skipnz
  3679  0710  024D               	subwf	_cw_bat+1,w
  3680  0711  1C03               	skipc
  3681  0712  2F20               	goto	l2334
  3682  0713                     l2328:	
  3683  0713  3064               	movlw	100
  3684  0714  0646               	xorwf	cw_get_capacity@cw_capacity,w
  3685  0715  1D03               	btfss	3,2
  3686  0716  2F1C               	goto	l2332
  3687  0717  3063               	movlw	99
  3688  0718  064D               	xorwf	_cw_bat+1,w
  3689  0719  044E               	iorwf	_cw_bat+2,w
  3690  071A  1903               	btfsc	3,2
  3691  071B  2F20               	goto	l2334
  3692  071C                     l2332:	
  3693                           
  3694                           ;CW201x.c: 340: {
  3695                           ;CW201x.c: 341: cw_capacity = cw_bat.capacity;
  3696  071C  084D               	movf	_cw_bat+1,w
  3697  071D  00BC               	movwf	??_cw_get_capacity
  3698  071E  083C               	movf	??_cw_get_capacity,w
  3699  071F  00C6               	movwf	cw_get_capacity@cw_capacity
  3700  0720                     l2334:	
  3701                           
  3702                           ;CW201x.c: 342: }
  3703                           ;CW201x.c: 343: }
  3704                           ;CW201x.c: 350: if((cw_bat.usb_online == 1) && (cw_capacity >= 95) && (cw_capacity <= cw
      +                          _bat.capacity) )
  3705  0720  034C               	decf	_cw_bat,w
  3706  0721  1D03               	btfss	3,2
  3707  0722  2F5A               	goto	l2356
  3708  0723  305F               	movlw	95
  3709  0724  0246               	subwf	cw_get_capacity@cw_capacity,w
  3710  0725  1C03               	skipc
  3711  0726  2F5A               	goto	l2356
  3712  0727  0846               	movf	cw_get_capacity@cw_capacity,w
  3713  0728  00BC               	movwf	??_cw_get_capacity
  3714  0729  01BD               	clrf	??_cw_get_capacity+1
  3715  072A  083D               	movf	??_cw_get_capacity+1,w
  3716  072B  024E               	subwf	_cw_bat+2,w
  3717  072C  1D03               	skipz
  3718  072D  2F30               	goto	u2375
  3719  072E  083C               	movf	??_cw_get_capacity,w
  3720  072F  024D               	subwf	_cw_bat+1,w
  3721  0730                     u2375:	
  3722  0730  1C03               	skipc
  3723  0731  2F5A               	goto	l2356
  3724                           
  3725                           ;CW201x.c: 351: {
  3726                           ;CW201x.c: 353: allow_no_charger_full++;
  3727  0732  3001               	movlw	1
  3728  0733  07D6               	addwf	_allow_no_charger_full,f
  3729  0734  3000               	movlw	0
  3730  0735  3DD7               	addwfc	_allow_no_charger_full+1,f
  3731                           
  3732                           ;CW201x.c: 354: if(allow_no_charger_full >= 720)
  3733  0736  3002               	movlw	2
  3734  0737  0257               	subwf	_allow_no_charger_full+1,w
  3735  0738  30D0               	movlw	208
  3736  0739  1903               	skipnz
  3737  073A  0256               	subwf	_allow_no_charger_full,w
  3738  073B  1C03               	skipc
  3739  073C  2F9B               	goto	l2382
  3740                           
  3741                           ;CW201x.c: 355: {
  3742                           ;CW201x.c: 356: allow_capacity = cw_bat.capacity + 1;
  3743  073D  084D               	movf	_cw_bat+1,w
  3744  073E  3E01               	addlw	1
  3745  073F  00BC               	movwf	??_cw_get_capacity
  3746  0740  083C               	movf	??_cw_get_capacity,w
  3747  0741  00C5               	movwf	cw_get_capacity@allow_capacity
  3748                           
  3749                           ;CW201x.c: 357: cw_capacity = (allow_capacity <= 100) ? allow_capacity : 100;
  3750  0742  3065               	movlw	101
  3751  0743  0245               	subwf	cw_get_capacity@allow_capacity,w
  3752  0744  1C03               	skipc
  3753  0745  2F4A               	goto	l2348
  3754  0746  3064               	movlw	100
  3755  0747  00BE               	movwf	_cw_get_capacity$262
  3756  0748  3000               	movlw	0
  3757  0749  2F50               	goto	L3
  3758  074A                     l2348:	
  3759  074A  0845               	movf	cw_get_capacity@allow_capacity,w
  3760  074B  00BC               	movwf	??_cw_get_capacity
  3761  074C  01BD               	clrf	??_cw_get_capacity+1
  3762  074D  083C               	movf	??_cw_get_capacity,w
  3763  074E  00BE               	movwf	_cw_get_capacity$262
  3764  074F  083D               	movf	??_cw_get_capacity+1,w
  3765  0750                     L3:	
  3766  0750  00BF               	movwf	_cw_get_capacity$262+1
  3767  0751  083E               	movf	_cw_get_capacity$262,w
  3768  0752  00BC               	movwf	??_cw_get_capacity
  3769  0753  083C               	movf	??_cw_get_capacity,w
  3770  0754  00C6               	movwf	cw_get_capacity@cw_capacity
  3771                           
  3772                           ;CW201x.c: 358: no_charger_full_jump =1;
  3773  0755  3001               	movlw	1
  3774  0756  00D8               	movwf	_no_charger_full_jump
  3775  0757  3000               	movlw	0
  3776  0758  00D9               	movwf	_no_charger_full_jump+1
  3777  0759  2FAB               	goto	l2386
  3778  075A                     l2356:	
  3779                           ;CW201x.c: 364: }
  3780                           ;CW201x.c: 365: }
  3781                           
  3782                           ;CW201x.c: 362: {
  3783                           ;CW201x.c: 363: cw_capacity = cw_bat.capacity;
  3784                           
  3785                           ;CW201x.c: 361: else if(cw_capacity <= cw_bat.capacity)
  3786                           
  3787                           ;CW201x.c: 360: }
  3788                           
  3789                           ;CW201x.c: 359: allow_no_charger_full =0;
  3790                           
  3791                           
  3792                           ;CW201x.c: 367: else if((cw_bat.usb_online == 0) && (cw_capacity <= cw_bat.capacity ) &&
      +                           (cw_capacity >= 90) && (no_charger_full_jump == 1))
  3793  075A  084C               	movf	_cw_bat,w
  3794  075B  1D03               	btfss	3,2
  3795  075C  2FAB               	goto	l2386
  3796  075D  0846               	movf	cw_get_capacity@cw_capacity,w
  3797  075E  00BC               	movwf	??_cw_get_capacity
  3798  075F  01BD               	clrf	??_cw_get_capacity+1
  3799  0760  083D               	movf	??_cw_get_capacity+1,w
  3800  0761  024E               	subwf	_cw_bat+2,w
  3801  0762  1D03               	skipz
  3802  0763  2F66               	goto	u2425
  3803  0764  083C               	movf	??_cw_get_capacity,w
  3804  0765  024D               	subwf	_cw_bat+1,w
  3805  0766                     u2425:	
  3806  0766  1C03               	skipc
  3807  0767  2FAB               	goto	l2386
  3808  0768  305A               	movlw	90
  3809  0769  0246               	subwf	cw_get_capacity@cw_capacity,w
  3810  076A  1C03               	skipc
  3811  076B  2FAB               	goto	l2386
  3812  076C  0358               	decf	_no_charger_full_jump,w
  3813  076D  0459               	iorwf	_no_charger_full_jump+1,w
  3814  076E  1D03               	btfss	3,2
  3815  076F  2FAB               	goto	l2386
  3816                           
  3817                           ;CW201x.c: 368: {
  3818                           ;CW201x.c: 370: if(cw_bat.usb_online == 0)
  3819  0770  084C               	movf	_cw_bat,w
  3820  0771  1D03               	btfss	3,2
  3821  0772  2F77               	goto	l249
  3822                           
  3823                           ;CW201x.c: 371: allow_no_charger_full++;
  3824  0773  3001               	movlw	1
  3825  0774  07D6               	addwf	_allow_no_charger_full,f
  3826  0775  3000               	movlw	0
  3827  0776  3DD7               	addwfc	_allow_no_charger_full+1,f
  3828  0777                     l249:	
  3829                           
  3830                           ;CW201x.c: 372: if(allow_no_charger_full >= 60)
  3831  0777  3000               	movlw	0
  3832  0778  0257               	subwf	_allow_no_charger_full+1,w
  3833  0779  303C               	movlw	60
  3834  077A  1903               	skipnz
  3835  077B  0256               	subwf	_allow_no_charger_full,w
  3836  077C  1C03               	skipc
  3837  077D  2F9B               	goto	l2382
  3838                           
  3839                           ;CW201x.c: 373: {
  3840                           ;CW201x.c: 374: allow_capacity = cw_bat.capacity - 1;
  3841  077E  084D               	movf	_cw_bat+1,w
  3842  077F  3EFF               	addlw	255
  3843  0780  00BC               	movwf	??_cw_get_capacity
  3844  0781  083C               	movf	??_cw_get_capacity,w
  3845  0782  00C5               	movwf	cw_get_capacity@allow_capacity
  3846                           
  3847                           ;CW201x.c: 375: allow_no_charger_full =0;
  3848  0783  01D6               	clrf	_allow_no_charger_full
  3849  0784  01D7               	clrf	_allow_no_charger_full+1
  3850                           
  3851                           ;CW201x.c: 376: if (cw_capacity >= allow_capacity)
  3852  0785  0845               	movf	cw_get_capacity@allow_capacity,w
  3853  0786  0246               	subwf	cw_get_capacity@cw_capacity,w
  3854  0787  1C03               	skipc
  3855  0788  2F8C               	goto	l2376
  3856                           
  3857                           ;CW201x.c: 377: {
  3858                           ;CW201x.c: 378: no_charger_full_jump =0;
  3859  0789  01D8               	clrf	_no_charger_full_jump
  3860  078A  01D9               	clrf	_no_charger_full_jump+1
  3861                           
  3862                           ;CW201x.c: 379: }
  3863  078B  2FAD               	goto	l2388
  3864  078C                     l2376:	
  3865                           
  3866                           ;CW201x.c: 380: else
  3867                           ;CW201x.c: 381: {
  3868                           ;CW201x.c: 382: cw_capacity = (allow_capacity > 0) ? allow_capacity : 0;
  3869  078C  0845               	movf	cw_get_capacity@allow_capacity,w
  3870  078D  1D03               	btfss	3,2
  3871  078E  2F92               	goto	l2380
  3872  078F  01C0               	clrf	_cw_get_capacity$263
  3873  0790  01C1               	clrf	_cw_get_capacity$263+1
  3874  0791  2F99               	goto	l256
  3875  0792                     l2380:	
  3876  0792  0845               	movf	cw_get_capacity@allow_capacity,w
  3877  0793  00BC               	movwf	??_cw_get_capacity
  3878  0794  01BD               	clrf	??_cw_get_capacity+1
  3879  0795  083C               	movf	??_cw_get_capacity,w
  3880  0796  00C0               	movwf	_cw_get_capacity$263
  3881  0797  083D               	movf	??_cw_get_capacity+1,w
  3882  0798  00C1               	movwf	_cw_get_capacity$263+1
  3883  0799                     l256:	
  3884  0799  0840               	movf	_cw_get_capacity$263,w
  3885  079A  2FA7               	goto	L5
  3886  079B                     l2382:	
  3887                           ;CW201x.c: 383: }
  3888                           ;CW201x.c: 384: }
  3889                           
  3890                           
  3891                           ;CW201x.c: 385: else if(cw_capacity <= cw_bat.capacity)
  3892  079B  0846               	movf	cw_get_capacity@cw_capacity,w
  3893  079C  00BC               	movwf	??_cw_get_capacity
  3894  079D  01BD               	clrf	??_cw_get_capacity+1
  3895  079E  083D               	movf	??_cw_get_capacity+1,w
  3896  079F  024E               	subwf	_cw_bat+2,w
  3897  07A0  1D03               	skipz
  3898  07A1  2FA4               	goto	u2495
  3899  07A2  083C               	movf	??_cw_get_capacity,w
  3900  07A3  024D               	subwf	_cw_bat+1,w
  3901  07A4                     u2495:	
  3902  07A4  1C03               	skipc
  3903  07A5  2FAD               	goto	l2388
  3904                           
  3905                           ;CW201x.c: 386: {
  3906                           ;CW201x.c: 387: cw_capacity = cw_bat.capacity;
  3907  07A6  084D               	movf	_cw_bat+1,w
  3908  07A7                     L5:	
  3909  07A7  00BC               	movwf	??_cw_get_capacity
  3910  07A8  083C               	movf	??_cw_get_capacity,w
  3911  07A9  00C6               	movwf	cw_get_capacity@cw_capacity
  3912                           
  3913                           ;CW201x.c: 388: }
  3914                           ;CW201x.c: 389: }
  3915  07AA  2FAD               	goto	l2388
  3916  07AB                     l2386:	
  3917                           
  3918                           ;CW201x.c: 390: else
  3919                           ;CW201x.c: 391: {
  3920                           ;CW201x.c: 392: allow_no_charger_full =0;
  3921  07AB  01D6               	clrf	_allow_no_charger_full
  3922  07AC  01D7               	clrf	_allow_no_charger_full+1
  3923  07AD                     l2388:	
  3924                           
  3925                           ;CW201x.c: 393: }
  3926                           ;CW201x.c: 396: if((cw_bat.usb_online > 0) && (cw_capacity == 0))
  3927  07AD  084C               	movf	_cw_bat,w
  3928  07AE  1903               	btfsc	3,2
  3929  07AF  2FD5               	goto	l2406
  3930  07B0  0846               	movf	cw_get_capacity@cw_capacity,w
  3931  07B1  1D03               	btfss	3,2
  3932  07B2  2FD5               	goto	l2406
  3933                           
  3934                           ;CW201x.c: 397: {
  3935                           ;CW201x.c: 398: allow_charger_always_zero++;
  3936  07B3  3001               	movlw	1
  3937  07B4  07D4               	addwf	_allow_charger_always_zero,f
  3938  07B5  3000               	movlw	0
  3939  07B6  3DD5               	addwfc	_allow_charger_always_zero+1,f
  3940                           
  3941                           ;CW201x.c: 399: if((allow_charger_always_zero >= 1800) && (if_quickstart == 0))
  3942  07B7  3007               	movlw	7
  3943  07B8  0255               	subwf	_allow_charger_always_zero+1,w
  3944  07B9  3008               	movlw	8
  3945  07BA  1903               	skipnz
  3946  07BB  0254               	subwf	_allow_charger_always_zero,w
  3947  07BC  1C03               	skipc
  3948  07BD  2FDC               	goto	l2412
  3949  07BE  085D               	movf	_if_quickstart,w
  3950  07BF  1D03               	btfss	3,2
  3951  07C0  2FDC               	goto	l2412
  3952                           
  3953                           ;CW201x.c: 400: {
  3954                           ;CW201x.c: 401: ret = cw_por();
  3955  07C1  235B               	fcall	_cw_por
  3956  07C2  0140               	movlb	0	; select bank0
  3957  07C3  0834               	movf	?_cw_por+1,w
  3958  07C4  00C4               	movwf	cw_get_capacity@ret+1
  3959  07C5  0833               	movf	?_cw_por,w
  3960  07C6  00C3               	movwf	cw_get_capacity@ret
  3961                           
  3962                           ;CW201x.c: 402: if(ret){
  3963  07C7  0843               	movf	cw_get_capacity@ret,w
  3964  07C8  0444               	iorwf	cw_get_capacity@ret+1,w
  3965  07C9  1903               	btfsc	3,2
  3966  07CA  2FD0               	goto	l262
  3967                           
  3968                           ;CW201x.c: 403: return -1;
  3969  07CB  30FF               	movlw	255
  3970  07CC  00BA               	movwf	?_cw_get_capacity
  3971  07CD  30FF               	movlw	255
  3972  07CE  00BB               	movwf	?_cw_get_capacity+1
  3973  07CF  0008               	return
  3974  07D0                     l262:	
  3975                           
  3976                           ;CW201x.c: 404: }
  3977                           ;CW201x.c: 405: if_quickstart = 1;
  3978  07D0  01DD               	clrf	_if_quickstart
  3979  07D1  0ADD               	incf	_if_quickstart,f
  3980                           
  3981                           ;CW201x.c: 406: allow_charger_always_zero =0;
  3982  07D2  01D4               	clrf	_allow_charger_always_zero
  3983  07D3  01D5               	clrf	_allow_charger_always_zero+1
  3984                           
  3985                           ;CW201x.c: 407: }
  3986                           ;CW201x.c: 408: }
  3987  07D4  2FDC               	goto	l2412
  3988  07D5                     l2406:	
  3989                           
  3990                           ;CW201x.c: 409: else if((if_quickstart == 1)&&(cw_bat.usb_online == 0))
  3991  07D5  035D               	decf	_if_quickstart,w
  3992  07D6  1D03               	btfss	3,2
  3993  07D7  2FDC               	goto	l2412
  3994  07D8  084C               	movf	_cw_bat,w
  3995  07D9  1D03               	btfss	3,2
  3996  07DA  2FDC               	goto	l2412
  3997                           
  3998                           ;CW201x.c: 410: {
  3999                           ;CW201x.c: 411: if_quickstart = 0;
  4000  07DB  01DD               	clrf	_if_quickstart
  4001  07DC                     l2412:	
  4002                           
  4003                           ;CW201x.c: 412: }
  4004                           ;CW201x.c: 414: return(cw_capacity);
  4005  07DC  0846               	movf	cw_get_capacity@cw_capacity,w
  4006  07DD  00BC               	movwf	??_cw_get_capacity
  4007  07DE  01BD               	clrf	??_cw_get_capacity+1
  4008  07DF  083C               	movf	??_cw_get_capacity,w
  4009  07E0  00BA               	movwf	?_cw_get_capacity
  4010  07E1  083D               	movf	??_cw_get_capacity+1,w
  4011  07E2  00BB               	movwf	?_cw_get_capacity+1
  4012  07E3  0008               	return
  4013  07E4                     __end_of_cw_get_capacity:	
  4014                           
  4015                           	psect	text12
  4016  035B                     __ptext12:	
  4017 ;; *************** function _cw_por *****************
  4018 ;; Defined at:
  4019 ;;		line 278 in file "CW201x.c"
  4020 ;; Parameters:    Size  Location     Type
  4021 ;;		None
  4022 ;; Auto vars:     Size  Location     Type
  4023 ;;  ret             2   24[BANK0 ] int 
  4024 ;;  reset_val       1   23[BANK0 ] unsigned char 
  4025 ;; Return value:  Size  Location     Type
  4026 ;;                  2   19[BANK0 ] int 
  4027 ;; Registers used:
  4028 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4029 ;; Tracked objects:
  4030 ;;		On entry : 0/0
  4031 ;;		On exit  : 0/0
  4032 ;;		Unchanged: 0/0
  4033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4034 ;;      Params:         0       2       0       0
  4035 ;;      Locals:         0       3       0       0
  4036 ;;      Temps:          0       2       0       0
  4037 ;;      Totals:         0       7       0       0
  4038 ;;Total ram usage:        7 bytes
  4039 ;; Hardware stack levels used:    1
  4040 ;; Hardware stack levels required when called:    6
  4041 ;; This function calls:
  4042 ;;		_CW_Delay10us
  4043 ;;		_cw_init
  4044 ;;		_cw_write
  4045 ;; This function is called by:
  4046 ;;		_cw_get_capacity
  4047 ;; This function uses a non-reentrant model
  4048 ;;
  4049                           
  4050                           
  4051                           ;psect for function _cw_por
  4052  035B                     _cw_por:	
  4053                           
  4054                           ;CW201x.c: 280: int ret = 0;
  4055                           
  4056                           ;incstack = 0
  4057                           ; Regs used in _cw_por: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4058  035B  0140               	movlb	0	; select bank0
  4059  035C  01B8               	clrf	cw_por@ret
  4060  035D  01B9               	clrf	cw_por@ret+1
  4061                           
  4062                           ;CW201x.c: 281: unsigned char reset_val = 0;
  4063  035E  01B7               	clrf	cw_por@reset_val
  4064                           
  4065                           ;CW201x.c: 282: reset_val = (0x3<<6);
  4066  035F  30C0               	movlw	192
  4067  0360  00B5               	movwf	??_cw_por
  4068  0361  0835               	movf	??_cw_por,w
  4069  0362  00B7               	movwf	cw_por@reset_val
  4070                           
  4071                           ;CW201x.c: 283: ret = cw_write(0xA, &reset_val);
  4072  0363  3037               	movlw	(low (cw_por@reset_val| 0))& (0+255)
  4073  0364  00B5               	movwf	??_cw_por
  4074  0365  0835               	movf	??_cw_por,w
  4075  0366  00A4               	movwf	cw_write@w_pdata
  4076  0367  300A               	movlw	10
  4077  0368  226F               	fcall	_cw_write
  4078  0369  0140               	movlb	0	; select bank0
  4079  036A  0825               	movf	?_cw_write+1,w
  4080  036B  00B9               	movwf	cw_por@ret+1
  4081  036C  0824               	movf	?_cw_write,w
  4082  036D  00B8               	movwf	cw_por@ret
  4083                           
  4084                           ;CW201x.c: 284: if (ret)
  4085  036E  0838               	movf	cw_por@ret,w
  4086  036F  0439               	iorwf	cw_por@ret+1,w
  4087  0370  1903               	btfsc	3,2
  4088  0371  2B77               	goto	l2180
  4089                           
  4090                           ;CW201x.c: 285: return -1;
  4091  0372  30FF               	movlw	255
  4092  0373  00B3               	movwf	?_cw_por
  4093  0374  30FF               	movlw	255
  4094  0375  00B4               	movwf	?_cw_por+1
  4095  0376  0008               	return
  4096  0377                     l2180:	
  4097                           
  4098                           ;CW201x.c: 286: CW_Delay10us(10);
  4099  0377  300A               	movlw	10
  4100  0378  2106               	fcall	_CW_Delay10us
  4101                           
  4102                           ;CW201x.c: 288: reset_val = (0x0<<6);
  4103  0379  0140               	movlb	0	; select bank0
  4104  037A  01B7               	clrf	cw_por@reset_val
  4105                           
  4106                           ;CW201x.c: 289: ret = cw_write(0xA, &reset_val);
  4107  037B  3037               	movlw	(low (cw_por@reset_val| 0))& (0+255)
  4108  037C  00B5               	movwf	??_cw_por
  4109  037D  0835               	movf	??_cw_por,w
  4110  037E  00A4               	movwf	cw_write@w_pdata
  4111  037F  300A               	movlw	10
  4112  0380  226F               	fcall	_cw_write
  4113  0381  0140               	movlb	0	; select bank0
  4114  0382  0825               	movf	?_cw_write+1,w
  4115  0383  00B9               	movwf	cw_por@ret+1
  4116  0384  0824               	movf	?_cw_write,w
  4117  0385  00B8               	movwf	cw_por@ret
  4118                           
  4119                           ;CW201x.c: 290: if (ret)
  4120  0386  0838               	movf	cw_por@ret,w
  4121  0387  0439               	iorwf	cw_por@ret+1,w
  4122  0388  1903               	btfsc	3,2
  4123  0389  2B8F               	goto	l2192
  4124                           
  4125                           ;CW201x.c: 291: return -1;
  4126  038A  30FF               	movlw	255
  4127  038B  00B3               	movwf	?_cw_por
  4128  038C  30FF               	movlw	255
  4129  038D  00B4               	movwf	?_cw_por+1
  4130  038E  0008               	return
  4131  038F                     l2192:	
  4132                           
  4133                           ;CW201x.c: 292: CW_Delay10us(10);
  4134  038F  300A               	movlw	10
  4135  0390  2106               	fcall	_CW_Delay10us
  4136                           
  4137                           ;CW201x.c: 294: ret = cw_init();
  4138  0391  25DA               	fcall	_cw_init
  4139  0392  0140               	movlb	0	; select bank0
  4140  0393  00B5               	movwf	??_cw_por
  4141  0394  01B6               	clrf	??_cw_por+1
  4142  0395  0835               	movf	??_cw_por,w
  4143  0396  00B8               	movwf	cw_por@ret
  4144  0397  0836               	movf	??_cw_por+1,w
  4145  0398  00B9               	movwf	cw_por@ret+1
  4146                           
  4147                           ;CW201x.c: 295: if (ret)
  4148  0399  0838               	movf	cw_por@ret,w
  4149  039A  0439               	iorwf	cw_por@ret+1,w
  4150  039B  1903               	btfsc	3,2
  4151  039C  2BA2               	goto	l2202
  4152                           
  4153                           ;CW201x.c: 296: return ret;
  4154  039D  0839               	movf	cw_por@ret+1,w
  4155  039E  00B4               	movwf	?_cw_por+1
  4156  039F  0838               	movf	cw_por@ret,w
  4157  03A0  00B3               	movwf	?_cw_por
  4158  03A1  0008               	return
  4159  03A2                     l2202:	
  4160                           
  4161                           ;CW201x.c: 297: return 0;
  4162  03A2  01B3               	clrf	?_cw_por
  4163  03A3  01B4               	clrf	?_cw_por+1
  4164  03A4  0008               	return
  4165  03A5                     __end_of_cw_por:	
  4166                           
  4167                           	psect	text13
  4168  00CA                     __ptext13:	
  4169 ;; *************** function _cw_bat_init *****************
  4170 ;; Defined at:
  4171 ;;		line 560 in file "CW201x.c"
  4172 ;; Parameters:    Size  Location     Type
  4173 ;;		None
  4174 ;; Auto vars:     Size  Location     Type
  4175 ;;  ret             1   21[BANK0 ] unsigned char 
  4176 ;;  loop            1   20[BANK0 ] unsigned char 
  4177 ;; Return value:  Size  Location     Type
  4178 ;;                  1    wreg      unsigned char 
  4179 ;; Registers used:
  4180 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4181 ;; Tracked objects:
  4182 ;;		On entry : 0/0
  4183 ;;		On exit  : 0/0
  4184 ;;		Unchanged: 0/0
  4185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4186 ;;      Params:         0       0       0       0
  4187 ;;      Locals:         0       2       0       0
  4188 ;;      Temps:          0       1       0       0
  4189 ;;      Totals:         0       3       0       0
  4190 ;;Total ram usage:        3 bytes
  4191 ;; Hardware stack levels used:    1
  4192 ;; Hardware stack levels required when called:    6
  4193 ;; This function calls:
  4194 ;;		_cw_init
  4195 ;; This function is called by:
  4196 ;;		_main
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           
  4201                           ;psect for function _cw_bat_init
  4202  00CA                     _cw_bat_init:	
  4203                           
  4204                           ;CW201x.c: 562: unsigned char ret;
  4205                           ;CW201x.c: 563: unsigned char loop = 0;
  4206                           
  4207                           ;incstack = 0
  4208                           ; Regs used in _cw_bat_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4209  00CA  0140               	movlb	0	; select bank0
  4210  00CB  01B4               	clrf	cw_bat_init@loop
  4211  00CC                     l2552:	
  4212                           ;CW201x.c: 567: while((loop++ < 200) && (ret != 0))
  4213                           
  4214                           ;CW201x.c: 566: ret = cw_init();
  4215                           
  4216                           
  4217                           ;CW201x.c: 568: {
  4218                           ;CW201x.c: 569: ret = cw_init();
  4219  00CC  25DA               	fcall	_cw_init
  4220  00CD  0140               	movlb	0	; select bank0
  4221  00CE  00B3               	movwf	??_cw_bat_init
  4222  00CF  0833               	movf	??_cw_bat_init,w
  4223  00D0  00B5               	movwf	cw_bat_init@ret
  4224  00D1  0834               	movf	cw_bat_init@loop,w
  4225  00D2  0AB4               	incf	cw_bat_init@loop,f
  4226  00D3  00B3               	movwf	??_cw_bat_init
  4227  00D4  30C8               	movlw	200
  4228  00D5  0233               	subwf	??_cw_bat_init,w
  4229  00D6  1803               	skipnc
  4230  00D7  28DB               	goto	l2558
  4231  00D8  0835               	movf	cw_bat_init@ret,w
  4232  00D9  1D03               	btfss	3,2
  4233  00DA  28CC               	goto	l2552
  4234  00DB                     l2558:	
  4235                           
  4236                           ;CW201x.c: 570: }
  4237                           ;CW201x.c: 572: cw_bat.usb_online = 0;
  4238  00DB  01CC               	clrf	_cw_bat
  4239                           
  4240                           ;CW201x.c: 573: cw_bat.capacity = 2;
  4241  00DC  3002               	movlw	2
  4242  00DD  00CD               	movwf	_cw_bat+1
  4243  00DE  3000               	movlw	0
  4244  00DF  00CE               	movwf	_cw_bat+2
  4245                           
  4246                           ;CW201x.c: 574: cw_bat.voltage = 0;
  4247  00E0  01CF               	clrf	_cw_bat+3
  4248  00E1  01D0               	clrf	_cw_bat+4
  4249                           
  4250                           ;CW201x.c: 578: cw_bat.alt = 0;
  4251  00E2  01D1               	clrf	_cw_bat+5
  4252                           
  4253                           ;CW201x.c: 580: return ret;
  4254  00E3  0835               	movf	cw_bat_init@ret,w
  4255  00E4  0008               	return
  4256  00E5                     __end_of_cw_bat_init:	
  4257                           
  4258                           	psect	text14
  4259  05DA                     __ptext14:	
  4260 ;; *************** function _cw_init *****************
  4261 ;; Defined at:
  4262 ;;		line 126 in file "CW201x.c"
  4263 ;; Parameters:    Size  Location     Type
  4264 ;;		None
  4265 ;; Auto vars:     Size  Location     Type
  4266 ;;  ret             2   16[BANK0 ] unsigned int 
  4267 ;;  reg_val         1   18[BANK0 ] unsigned char 
  4268 ;;  i               1   15[BANK0 ] unsigned char 
  4269 ;; Return value:  Size  Location     Type
  4270 ;;                  1    wreg      unsigned char 
  4271 ;; Registers used:
  4272 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4273 ;; Tracked objects:
  4274 ;;		On entry : 0/0
  4275 ;;		On exit  : 0/0
  4276 ;;		Unchanged: 0/0
  4277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4278 ;;      Params:         0       0       0       0
  4279 ;;      Locals:         0       4       0       0
  4280 ;;      Temps:          0       2       0       0
  4281 ;;      Totals:         0       6       0       0
  4282 ;;Total ram usage:        6 bytes
  4283 ;; Hardware stack levels used:    1
  4284 ;; Hardware stack levels required when called:    5
  4285 ;; This function calls:
  4286 ;;		_CW_Delay10ms
  4287 ;;		_cw_read
  4288 ;;		_cw_update_config_info
  4289 ;;		_cw_write
  4290 ;; This function is called by:
  4291 ;;		_cw_por
  4292 ;;		_cw_bat_init
  4293 ;; This function uses a non-reentrant model
  4294 ;;
  4295                           
  4296                           
  4297                           ;psect for function _cw_init
  4298  05DA                     _cw_init:	
  4299                           
  4300                           ;CW201x.c: 128: unsigned ret;
  4301                           ;CW201x.c: 129: unsigned char i;
  4302                           ;CW201x.c: 130: unsigned char reg_val = (0x0<<6);
  4303                           
  4304                           ;incstack = 0
  4305                           ; Regs used in _cw_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4306  05DA  0140               	movlb	0	; select bank0
  4307  05DB  01B2               	clrf	cw_init@reg_val
  4308                           
  4309                           ;CW201x.c: 133: ret = cw_write(0xA, &reg_val);
  4310  05DC  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4311  05DD  00AD               	movwf	??_cw_init
  4312  05DE  082D               	movf	??_cw_init,w
  4313  05DF  00A4               	movwf	cw_write@w_pdata
  4314  05E0  300A               	movlw	10
  4315  05E1  226F               	fcall	_cw_write
  4316  05E2  0140               	movlb	0	; select bank0
  4317  05E3  0825               	movf	?_cw_write+1,w
  4318  05E4  00B1               	movwf	cw_init@ret+1
  4319  05E5  0824               	movf	?_cw_write,w
  4320  05E6  00B0               	movwf	cw_init@ret
  4321                           
  4322                           ;CW201x.c: 134: if(ret)
  4323  05E7  0830               	movf	cw_init@ret,w
  4324  05E8  0431               	iorwf	cw_init@ret+1,w
  4325  05E9  1903               	btfsc	3,2
  4326  05EA  2DED               	goto	l2052
  4327                           
  4328                           ;CW201x.c: 135: {
  4329                           ;CW201x.c: 136: return 1;
  4330  05EB  3001               	movlw	1
  4331  05EC  0008               	return
  4332  05ED                     l2052:	
  4333                           
  4334                           ;CW201x.c: 137: }
  4335                           ;CW201x.c: 140: ret = cw_read(0x8, &reg_val);
  4336  05ED  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4337  05EE  00AD               	movwf	??_cw_init
  4338  05EF  082D               	movf	??_cw_init,w
  4339  05F0  00A4               	movwf	cw_read@r_pdata
  4340  05F1  3008               	movlw	8
  4341  05F2  22A1               	fcall	_cw_read
  4342  05F3  0140               	movlb	0	; select bank0
  4343  05F4  0825               	movf	?_cw_read+1,w
  4344  05F5  00B1               	movwf	cw_init@ret+1
  4345  05F6  0824               	movf	?_cw_read,w
  4346  05F7  00B0               	movwf	cw_init@ret
  4347                           
  4348                           ;CW201x.c: 141: if(ret)
  4349  05F8  0830               	movf	cw_init@ret,w
  4350  05F9  0431               	iorwf	cw_init@ret+1,w
  4351  05FA  1903               	btfsc	3,2
  4352  05FB  2DFE               	goto	l2060
  4353                           
  4354                           ;CW201x.c: 142: {
  4355                           ;CW201x.c: 143: return 1;
  4356  05FC  3001               	movlw	1
  4357  05FD  0008               	return
  4358  05FE                     l2060:	
  4359                           
  4360                           ;CW201x.c: 144: }
  4361                           ;CW201x.c: 145: if((reg_val & 0xf8) != (0x0<<3))
  4362  05FE  0832               	movf	cw_init@reg_val,w
  4363  05FF  39F8               	andlw	248
  4364  0600  1903               	btfsc	3,2
  4365  0601  2E17               	goto	l2072
  4366                           
  4367                           ;CW201x.c: 149: reg_val |= (0x0<<3);
  4368  0602  3007               	movlw	7
  4369  0603  00AD               	movwf	??_cw_init
  4370  0604  082D               	movf	??_cw_init,w
  4371  0605  05B2               	andwf	cw_init@reg_val,f
  4372                           
  4373                           ;CW201x.c: 150: ret = cw_write(0x8, &reg_val);
  4374  0606  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4375  0607  00AD               	movwf	??_cw_init
  4376  0608  082D               	movf	??_cw_init,w
  4377  0609  00A4               	movwf	cw_write@w_pdata
  4378  060A  3008               	movlw	8
  4379  060B  226F               	fcall	_cw_write
  4380  060C  0140               	movlb	0	; select bank0
  4381  060D  0825               	movf	?_cw_write+1,w
  4382  060E  00B1               	movwf	cw_init@ret+1
  4383  060F  0824               	movf	?_cw_write,w
  4384  0610  00B0               	movwf	cw_init@ret
  4385                           
  4386                           ;CW201x.c: 151: if(ret)
  4387  0611  0830               	movf	cw_init@ret,w
  4388  0612  0431               	iorwf	cw_init@ret+1,w
  4389  0613  1903               	btfsc	3,2
  4390  0614  2E17               	goto	l2072
  4391                           
  4392                           ;CW201x.c: 152: {
  4393                           ;CW201x.c: 153: return 1;
  4394  0615  3001               	movlw	1
  4395  0616  0008               	return
  4396  0617                     l2072:	
  4397                           
  4398                           ;CW201x.c: 154: }
  4399                           ;CW201x.c: 155: }
  4400                           ;CW201x.c: 158: ret = cw_read(0x8, &reg_val);
  4401  0617  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4402  0618  00AD               	movwf	??_cw_init
  4403  0619  082D               	movf	??_cw_init,w
  4404  061A  00A4               	movwf	cw_read@r_pdata
  4405  061B  3008               	movlw	8
  4406  061C  22A1               	fcall	_cw_read
  4407  061D  0140               	movlb	0	; select bank0
  4408  061E  0825               	movf	?_cw_read+1,w
  4409  061F  00B1               	movwf	cw_init@ret+1
  4410  0620  0824               	movf	?_cw_read,w
  4411  0621  00B0               	movwf	cw_init@ret
  4412                           
  4413                           ;CW201x.c: 159: if(ret)
  4414  0622  0830               	movf	cw_init@ret,w
  4415  0623  0431               	iorwf	cw_init@ret+1,w
  4416  0624  1903               	btfsc	3,2
  4417  0625  2E28               	goto	l199
  4418                           
  4419                           ;CW201x.c: 160: {
  4420                           ;CW201x.c: 161: return 1;
  4421  0626  3001               	movlw	1
  4422  0627  0008               	return
  4423  0628                     l199:	
  4424                           
  4425                           ;CW201x.c: 162: }
  4426                           ;CW201x.c: 163: if(!(reg_val & (0x1<<1)))
  4427  0628  18B2               	btfsc	cw_init@reg_val,1
  4428  0629  2E38               	goto	l2088
  4429                           
  4430                           ;CW201x.c: 164: {
  4431                           ;CW201x.c: 166: ret = cw_update_config_info();
  4432  062A  2459               	fcall	_cw_update_config_info
  4433  062B  0140               	movlb	0	; select bank0
  4434  062C  00AD               	movwf	??_cw_init
  4435  062D  01AE               	clrf	??_cw_init+1
  4436  062E  082D               	movf	??_cw_init,w
  4437  062F  00B0               	movwf	cw_init@ret
  4438  0630  082E               	movf	??_cw_init+1,w
  4439  0631  00B1               	movwf	cw_init@ret+1
  4440                           
  4441                           ;CW201x.c: 167: if(ret)
  4442  0632  0830               	movf	cw_init@ret,w
  4443  0633  0431               	iorwf	cw_init@ret+1,w
  4444  0634  1903               	btfsc	3,2
  4445  0635  2E71               	goto	l2120
  4446                           
  4447                           ;CW201x.c: 168: {
  4448                           ;CW201x.c: 169: return ret;
  4449  0636  0830               	movf	cw_init@ret,w
  4450  0637  0008               	return
  4451  0638                     l2088:	
  4452                           ;CW201x.c: 170: }
  4453                           ;CW201x.c: 171: }
  4454                           
  4455                           
  4456                           ;CW201x.c: 172: else
  4457                           ;CW201x.c: 173: {
  4458                           ;CW201x.c: 174: for(i = 0; i < 64; i++)
  4459  0638  01AF               	clrf	cw_init@i
  4460  0639  3040               	movlw	64
  4461  063A  022F               	subwf	cw_init@i,w
  4462  063B  1803               	btfsc	3,0
  4463  063C  2E5F               	goto	l2110
  4464  063D                     l2094:	
  4465                           
  4466                           ;CW201x.c: 175: {
  4467                           ;CW201x.c: 176: ret = cw_read(0x10 +i, &reg_val);
  4468  063D  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4469  063E  00AD               	movwf	??_cw_init
  4470  063F  082D               	movf	??_cw_init,w
  4471  0640  00A4               	movwf	cw_read@r_pdata
  4472  0641  082F               	movf	cw_init@i,w
  4473  0642  3E10               	addlw	16
  4474  0643  22A1               	fcall	_cw_read
  4475  0644  0140               	movlb	0	; select bank0
  4476  0645  0825               	movf	?_cw_read+1,w
  4477  0646  00B1               	movwf	cw_init@ret+1
  4478  0647  0824               	movf	?_cw_read,w
  4479  0648  00B0               	movwf	cw_init@ret
  4480                           
  4481                           ;CW201x.c: 177: if(ret)
  4482  0649  0830               	movf	cw_init@ret,w
  4483  064A  0431               	iorwf	cw_init@ret+1,w
  4484  064B  1903               	btfsc	3,2
  4485  064C  2E4F               	goto	l2102
  4486                           
  4487                           ;CW201x.c: 178: {
  4488                           ;CW201x.c: 179: return 1;
  4489  064D  3001               	movlw	1
  4490  064E  0008               	return
  4491  064F                     l2102:	
  4492                           
  4493                           ;CW201x.c: 180: }
  4494                           ;CW201x.c: 181: if(cw_bat_config_info[i] != reg_val)
  4495  064F  082F               	movf	cw_init@i,w
  4496  0650  3EA0               	addlw	(low (CW201x@cw_bat_config_info| 0))& (0+255)
  4497  0651  0086               	movwf	6
  4498  0652  0187               	clrf	7
  4499  0653  0801               	movf	1,w
  4500  0654  0632               	xorwf	cw_init@reg_val,w
  4501  0655  1D03               	btfss	3,2
  4502  0656  2E5F               	goto	l2110
  4503                           
  4504                           ;CW201x.c: 182: {
  4505                           ;CW201x.c: 183: break;
  4506  0657  3001               	movlw	1
  4507  0658  00AD               	movwf	??_cw_init
  4508  0659  082D               	movf	??_cw_init,w
  4509  065A  07AF               	addwf	cw_init@i,f
  4510  065B  3040               	movlw	64
  4511  065C  022F               	subwf	cw_init@i,w
  4512  065D  1C03               	skipc
  4513  065E  2E3D               	goto	l2094
  4514  065F                     l2110:	
  4515                           
  4516                           ;CW201x.c: 184: }
  4517                           ;CW201x.c: 185: }
  4518                           ;CW201x.c: 186: if(i != 64)
  4519  065F  3040               	movlw	64
  4520  0660  062F               	xorwf	cw_init@i,w
  4521  0661  1903               	btfsc	3,2
  4522  0662  2E71               	goto	l2120
  4523                           
  4524                           ;CW201x.c: 187: {
  4525                           ;CW201x.c: 189: ret = cw_update_config_info();
  4526  0663  2459               	fcall	_cw_update_config_info
  4527  0664  0140               	movlb	0	; select bank0
  4528  0665  00AD               	movwf	??_cw_init
  4529  0666  01AE               	clrf	??_cw_init+1
  4530  0667  082D               	movf	??_cw_init,w
  4531  0668  00B0               	movwf	cw_init@ret
  4532  0669  082E               	movf	??_cw_init+1,w
  4533  066A  00B1               	movwf	cw_init@ret+1
  4534                           
  4535                           ;CW201x.c: 190: if(ret)
  4536  066B  0830               	movf	cw_init@ret,w
  4537  066C  0431               	iorwf	cw_init@ret+1,w
  4538  066D  1903               	btfsc	3,2
  4539  066E  2E71               	goto	l2120
  4540                           
  4541                           ;CW201x.c: 191: {
  4542                           ;CW201x.c: 192: return ret;
  4543  066F  0830               	movf	cw_init@ret,w
  4544  0670  0008               	return
  4545  0671                     l2120:	
  4546                           
  4547                           ;CW201x.c: 193: }
  4548                           ;CW201x.c: 194: }
  4549                           ;CW201x.c: 195: }
  4550                           ;CW201x.c: 197: for (i = 0; i < 30; i++) {
  4551  0671  01AF               	clrf	cw_init@i
  4552  0672  301E               	movlw	30
  4553  0673  022F               	subwf	cw_init@i,w
  4554  0674  1803               	btfsc	3,0
  4555  0675  2E99               	goto	l2146
  4556  0676                     l2126:	
  4557                           
  4558                           ;CW201x.c: 198: CW_Delay10ms(10);
  4559  0676  300A               	movlw	10
  4560  0677  00F0               	movwf	CW_Delay10ms@c
  4561  0678  3000               	movlw	0
  4562  0679  00F1               	movwf	CW_Delay10ms@c+1
  4563  067A  20E5               	fcall	_CW_Delay10ms
  4564                           
  4565                           ;CW201x.c: 199: ret = cw_read(0x4, &reg_val);
  4566  067B  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4567  067C  0140               	movlb	0	; select bank0
  4568  067D  00AD               	movwf	??_cw_init
  4569  067E  082D               	movf	??_cw_init,w
  4570  067F  00A4               	movwf	cw_read@r_pdata
  4571  0680  3004               	movlw	4
  4572  0681  22A1               	fcall	_cw_read
  4573  0682  0140               	movlb	0	; select bank0
  4574  0683  0825               	movf	?_cw_read+1,w
  4575  0684  00B1               	movwf	cw_init@ret+1
  4576  0685  0824               	movf	?_cw_read,w
  4577  0686  00B0               	movwf	cw_init@ret
  4578                           
  4579                           ;CW201x.c: 200: if (ret)
  4580  0687  0830               	movf	cw_init@ret,w
  4581  0688  0431               	iorwf	cw_init@ret+1,w
  4582  0689  1903               	btfsc	3,2
  4583  068A  2E8D               	goto	l2138
  4584                           
  4585                           ;CW201x.c: 201: return 1;
  4586  068B  3001               	movlw	1
  4587  068C  0008               	return
  4588  068D                     l2138:	
  4589                           
  4590                           ;CW201x.c: 202: else if (reg_val <= 100)
  4591  068D  3065               	movlw	101
  4592  068E  0232               	subwf	cw_init@reg_val,w
  4593  068F  1C03               	btfss	3,0
  4594  0690  2E99               	goto	l2146
  4595                           
  4596                           ;CW201x.c: 203: break;
  4597  0691  3001               	movlw	1
  4598  0692  00AD               	movwf	??_cw_init
  4599  0693  082D               	movf	??_cw_init,w
  4600  0694  07AF               	addwf	cw_init@i,f
  4601  0695  301E               	movlw	30
  4602  0696  022F               	subwf	cw_init@i,w
  4603  0697  1C03               	skipc
  4604  0698  2E76               	goto	l2126
  4605  0699                     l2146:	
  4606                           
  4607                           ;CW201x.c: 204: }
  4608                           ;CW201x.c: 206: if (i >=30){
  4609  0699  301E               	movlw	30
  4610  069A  022F               	subwf	cw_init@i,w
  4611  069B  1C03               	skipc
  4612  069C  2EAE               	goto	l2156
  4613                           
  4614                           ;CW201x.c: 207: reg_val = (0x3<<6);
  4615  069D  30C0               	movlw	192
  4616  069E  00AD               	movwf	??_cw_init
  4617  069F  082D               	movf	??_cw_init,w
  4618  06A0  00B2               	movwf	cw_init@reg_val
  4619                           
  4620                           ;CW201x.c: 208: ret = cw_write(0xA, &reg_val);
  4621  06A1  3032               	movlw	(low (cw_init@reg_val| 0))& (0+255)
  4622  06A2  00AD               	movwf	??_cw_init
  4623  06A3  082D               	movf	??_cw_init,w
  4624  06A4  00A4               	movwf	cw_write@w_pdata
  4625  06A5  300A               	movlw	10
  4626  06A6  226F               	fcall	_cw_write
  4627  06A7  0140               	movlb	0	; select bank0
  4628  06A8  0825               	movf	?_cw_write+1,w
  4629  06A9  00B1               	movwf	cw_init@ret+1
  4630  06AA  0824               	movf	?_cw_write,w
  4631  06AB  00B0               	movwf	cw_init@ret
  4632                           
  4633                           ;CW201x.c: 210: return 4;
  4634  06AC  3004               	movlw	4
  4635  06AD  0008               	return
  4636  06AE                     l2156:	
  4637                           
  4638                           ;CW201x.c: 211: }
  4639                           ;CW201x.c: 212: return 0;
  4640  06AE  3000               	movlw	0
  4641  06AF  0008               	return
  4642  06B0                     __end_of_cw_init:	
  4643                           
  4644                           	psect	text15
  4645  0459                     __ptext15:	
  4646 ;; *************** function _cw_update_config_info *****************
  4647 ;; Defined at:
  4648 ;;		line 53 in file "CW201x.c"
  4649 ;; Parameters:    Size  Location     Type
  4650 ;;		None
  4651 ;; Auto vars:     Size  Location     Type
  4652 ;;  ret             2    9[BANK0 ] int 
  4653 ;;  reg_val         1   12[BANK0 ] unsigned char 
  4654 ;;  i               1   11[BANK0 ] unsigned char 
  4655 ;;  reset_val       1    8[BANK0 ] unsigned char 
  4656 ;; Return value:  Size  Location     Type
  4657 ;;                  1    wreg      unsigned char 
  4658 ;; Registers used:
  4659 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4660 ;; Tracked objects:
  4661 ;;		On entry : 0/0
  4662 ;;		On exit  : 0/0
  4663 ;;		Unchanged: 0/0
  4664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4665 ;;      Params:         0       0       0       0
  4666 ;;      Locals:         0       5       0       0
  4667 ;;      Temps:          0       1       0       0
  4668 ;;      Totals:         0       6       0       0
  4669 ;;Total ram usage:        6 bytes
  4670 ;; Hardware stack levels used:    1
  4671 ;; Hardware stack levels required when called:    4
  4672 ;; This function calls:
  4673 ;;		_CW_Delay10us
  4674 ;;		_cw_read
  4675 ;;		_cw_write
  4676 ;; This function is called by:
  4677 ;;		_cw_init
  4678 ;; This function uses a non-reentrant model
  4679 ;;
  4680                           
  4681                           
  4682                           ;psect for function _cw_update_config_info
  4683  0459                     _cw_update_config_info:	
  4684                           
  4685                           ;CW201x.c: 55: int ret = 0;
  4686                           
  4687                           ;incstack = 0
  4688                           ; Regs used in _cw_update_config_info: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  4689  0459  0140               	movlb	0	; select bank0
  4690  045A  01A9               	clrf	cw_update_config_info@ret
  4691  045B  01AA               	clrf	cw_update_config_info@ret+1
  4692                           
  4693                           ;CW201x.c: 56: unsigned char i;
  4694                           ;CW201x.c: 57: unsigned char reset_val;
  4695                           ;CW201x.c: 58: unsigned char reg_val;
  4696                           ;CW201x.c: 60: ret = cw_read(0xA, &reg_val);
  4697  045C  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4698  045D  00A7               	movwf	??_cw_update_config_info
  4699  045E  0827               	movf	??_cw_update_config_info,w
  4700  045F  00A4               	movwf	cw_read@r_pdata
  4701  0460  300A               	movlw	10
  4702  0461  22A1               	fcall	_cw_read
  4703  0462  0140               	movlb	0	; select bank0
  4704  0463  0825               	movf	?_cw_read+1,w
  4705  0464  00AA               	movwf	cw_update_config_info@ret+1
  4706  0465  0824               	movf	?_cw_read,w
  4707  0466  00A9               	movwf	cw_update_config_info@ret
  4708                           
  4709                           ;CW201x.c: 61: if(ret)
  4710  0467  0829               	movf	cw_update_config_info@ret,w
  4711  0468  042A               	iorwf	cw_update_config_info@ret+1,w
  4712  0469  1903               	btfsc	3,2
  4713  046A  2C6D               	goto	l1948
  4714                           
  4715                           ;CW201x.c: 62: {
  4716                           ;CW201x.c: 63: return 1;
  4717  046B  3001               	movlw	1
  4718  046C  0008               	return
  4719  046D                     l1948:	
  4720                           
  4721                           ;CW201x.c: 64: }
  4722                           ;CW201x.c: 65: if((reg_val & (0x3<<6)) == (0x3<<6))
  4723  046D  30C0               	movlw	192
  4724  046E  052C               	andwf	cw_update_config_info@reg_val,w
  4725  046F  00A7               	movwf	??_cw_update_config_info
  4726  0470  30C0               	movlw	192
  4727  0471  0627               	xorwf	??_cw_update_config_info,w
  4728  0472  1D03               	btfss	3,2
  4729  0473  2C76               	goto	l1954
  4730                           
  4731                           ;CW201x.c: 66: {
  4732                           ;CW201x.c: 67: return 2;
  4733  0474  3002               	movlw	2
  4734  0475  0008               	return
  4735  0476                     l1954:	
  4736                           
  4737                           ;CW201x.c: 68: }
  4738                           ;CW201x.c: 70: for(i = 0; i < 64; i++)
  4739  0476  01AB               	clrf	cw_update_config_info@i
  4740  0477  3040               	movlw	64
  4741  0478  022B               	subwf	cw_update_config_info@i,w
  4742  0479  1803               	btfsc	3,0
  4743  047A  2C9D               	goto	l1974
  4744  047B                     l1960:	
  4745                           
  4746                           ;CW201x.c: 71: {
  4747                           ;CW201x.c: 72: reg_val = cw_bat_config_info[i];
  4748  047B  082B               	movf	cw_update_config_info@i,w
  4749  047C  3EA0               	addlw	(low (CW201x@cw_bat_config_info| 0))& (0+255)
  4750  047D  0086               	movwf	6
  4751  047E  0187               	clrf	7
  4752  047F  0801               	movf	1,w
  4753  0480  00A7               	movwf	??_cw_update_config_info
  4754  0481  0827               	movf	??_cw_update_config_info,w
  4755  0482  00AC               	movwf	cw_update_config_info@reg_val
  4756                           
  4757                           ;CW201x.c: 73: ret = cw_write(0x10+i, &reg_val);
  4758  0483  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4759  0484  00A7               	movwf	??_cw_update_config_info
  4760  0485  0827               	movf	??_cw_update_config_info,w
  4761  0486  00A4               	movwf	cw_write@w_pdata
  4762  0487  082B               	movf	cw_update_config_info@i,w
  4763  0488  3E10               	addlw	16
  4764  0489  226F               	fcall	_cw_write
  4765  048A  0140               	movlb	0	; select bank0
  4766  048B  0825               	movf	?_cw_write+1,w
  4767  048C  00AA               	movwf	cw_update_config_info@ret+1
  4768  048D  0824               	movf	?_cw_write,w
  4769  048E  00A9               	movwf	cw_update_config_info@ret
  4770                           
  4771                           ;CW201x.c: 74: if(ret)
  4772  048F  0829               	movf	cw_update_config_info@ret,w
  4773  0490  042A               	iorwf	cw_update_config_info@ret+1,w
  4774  0491  1903               	btfsc	3,2
  4775  0492  2C95               	goto	l1970
  4776                           
  4777                           ;CW201x.c: 75: {
  4778                           ;CW201x.c: 76: return 1;
  4779  0493  3001               	movlw	1
  4780  0494  0008               	return
  4781  0495                     l1970:	
  4782  0495  3001               	movlw	1
  4783  0496  00A7               	movwf	??_cw_update_config_info
  4784  0497  0827               	movf	??_cw_update_config_info,w
  4785  0498  07AB               	addwf	cw_update_config_info@i,f
  4786  0499  3040               	movlw	64
  4787  049A  022B               	subwf	cw_update_config_info@i,w
  4788  049B  1C03               	skipc
  4789  049C  2C7B               	goto	l1960
  4790  049D                     l1974:	
  4791                           
  4792                           ;CW201x.c: 77: }
  4793                           ;CW201x.c: 78: }
  4794                           ;CW201x.c: 81: for(i = 0; i < 64; i++)
  4795  049D  01AB               	clrf	cw_update_config_info@i
  4796  049E  3040               	movlw	64
  4797  049F  022B               	subwf	cw_update_config_info@i,w
  4798  04A0  1803               	btfsc	3,0
  4799  04A1  2CC6               	goto	l1998
  4800  04A2                     l1980:	
  4801                           
  4802                           ;CW201x.c: 82: {
  4803                           ;CW201x.c: 83: ret = cw_read(0x10+i, &reg_val);
  4804  04A2  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4805  04A3  00A7               	movwf	??_cw_update_config_info
  4806  04A4  0827               	movf	??_cw_update_config_info,w
  4807  04A5  00A4               	movwf	cw_read@r_pdata
  4808  04A6  082B               	movf	cw_update_config_info@i,w
  4809  04A7  3E10               	addlw	16
  4810  04A8  22A1               	fcall	_cw_read
  4811  04A9  0140               	movlb	0	; select bank0
  4812  04AA  0825               	movf	?_cw_read+1,w
  4813  04AB  00AA               	movwf	cw_update_config_info@ret+1
  4814  04AC  0824               	movf	?_cw_read,w
  4815  04AD  00A9               	movwf	cw_update_config_info@ret
  4816                           
  4817                           ;CW201x.c: 84: if(ret)
  4818  04AE  0829               	movf	cw_update_config_info@ret,w
  4819  04AF  042A               	iorwf	cw_update_config_info@ret+1,w
  4820  04B0  1903               	btfsc	3,2
  4821  04B1  2CB4               	goto	l1988
  4822                           
  4823                           ;CW201x.c: 85: {
  4824                           ;CW201x.c: 86: return 1;
  4825  04B2  3001               	movlw	1
  4826  04B3  0008               	return
  4827  04B4                     l1988:	
  4828                           
  4829                           ;CW201x.c: 87: }
  4830                           ;CW201x.c: 88: if(reg_val != cw_bat_config_info[i])
  4831  04B4  082B               	movf	cw_update_config_info@i,w
  4832  04B5  3EA0               	addlw	(low (CW201x@cw_bat_config_info| 0))& (0+255)
  4833  04B6  0086               	movwf	6
  4834  04B7  0187               	clrf	7
  4835  04B8  0801               	movf	1,w
  4836  04B9  062C               	xorwf	cw_update_config_info@reg_val,w
  4837  04BA  1903               	skipnz
  4838  04BB  2CBE               	goto	l1994
  4839                           
  4840                           ;CW201x.c: 89: {
  4841                           ;CW201x.c: 90: return 3;
  4842  04BC  3003               	movlw	3
  4843  04BD  0008               	return
  4844  04BE                     l1994:	
  4845  04BE  3001               	movlw	1
  4846  04BF  00A7               	movwf	??_cw_update_config_info
  4847  04C0  0827               	movf	??_cw_update_config_info,w
  4848  04C1  07AB               	addwf	cw_update_config_info@i,f
  4849  04C2  3040               	movlw	64
  4850  04C3  022B               	subwf	cw_update_config_info@i,w
  4851  04C4  1C03               	skipc
  4852  04C5  2CA2               	goto	l1980
  4853  04C6                     l1998:	
  4854                           
  4855                           ;CW201x.c: 91: }
  4856                           ;CW201x.c: 92: }
  4857                           ;CW201x.c: 94: ret = cw_read(0x8, &reg_val);
  4858  04C6  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4859  04C7  00A7               	movwf	??_cw_update_config_info
  4860  04C8  0827               	movf	??_cw_update_config_info,w
  4861  04C9  00A4               	movwf	cw_read@r_pdata
  4862  04CA  3008               	movlw	8
  4863  04CB  22A1               	fcall	_cw_read
  4864  04CC  0140               	movlb	0	; select bank0
  4865  04CD  0825               	movf	?_cw_read+1,w
  4866  04CE  00AA               	movwf	cw_update_config_info@ret+1
  4867  04CF  0824               	movf	?_cw_read,w
  4868  04D0  00A9               	movwf	cw_update_config_info@ret
  4869                           
  4870                           ;CW201x.c: 95: if(ret)
  4871  04D1  0829               	movf	cw_update_config_info@ret,w
  4872  04D2  042A               	iorwf	cw_update_config_info@ret+1,w
  4873  04D3  1903               	btfsc	3,2
  4874  04D4  2CD7               	goto	l188
  4875                           
  4876                           ;CW201x.c: 96: {
  4877                           ;CW201x.c: 97: return 1;
  4878  04D5  3001               	movlw	1
  4879  04D6  0008               	return
  4880  04D7                     l188:	
  4881                           
  4882                           ;CW201x.c: 98: }
  4883                           ;CW201x.c: 99: reg_val |= (0x1<<1);
  4884  04D7  14AC               	bsf	cw_update_config_info@reg_val,1
  4885                           
  4886                           ;CW201x.c: 101: reg_val |= (0x0<<3);
  4887  04D8  3007               	movlw	7
  4888  04D9  00A7               	movwf	??_cw_update_config_info
  4889  04DA  0827               	movf	??_cw_update_config_info,w
  4890  04DB  05AC               	andwf	cw_update_config_info@reg_val,f
  4891                           
  4892                           ;CW201x.c: 102: ret = cw_write(0x8, &reg_val);
  4893  04DC  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4894  04DD  00A7               	movwf	??_cw_update_config_info
  4895  04DE  0827               	movf	??_cw_update_config_info,w
  4896  04DF  00A4               	movwf	cw_write@w_pdata
  4897  04E0  3008               	movlw	8
  4898  04E1  226F               	fcall	_cw_write
  4899  04E2  0140               	movlb	0	; select bank0
  4900  04E3  0825               	movf	?_cw_write+1,w
  4901  04E4  00AA               	movwf	cw_update_config_info@ret+1
  4902  04E5  0824               	movf	?_cw_write,w
  4903  04E6  00A9               	movwf	cw_update_config_info@ret
  4904                           
  4905                           ;CW201x.c: 103: if(ret)
  4906  04E7  0829               	movf	cw_update_config_info@ret,w
  4907  04E8  042A               	iorwf	cw_update_config_info@ret+1,w
  4908  04E9  1903               	btfsc	3,2
  4909  04EA  2CED               	goto	l2016
  4910                           
  4911                           ;CW201x.c: 104: {
  4912                           ;CW201x.c: 105: return 1;
  4913  04EB  3001               	movlw	1
  4914  04EC  0008               	return
  4915  04ED                     l2016:	
  4916                           
  4917                           ;CW201x.c: 106: }
  4918                           ;CW201x.c: 108: reset_val = (0x0<<6);
  4919  04ED  01A8               	clrf	cw_update_config_info@reset_val
  4920                           
  4921                           ;CW201x.c: 109: reg_val = (0xf<<0);
  4922  04EE  300F               	movlw	15
  4923  04EF  00A7               	movwf	??_cw_update_config_info
  4924  04F0  0827               	movf	??_cw_update_config_info,w
  4925  04F1  00AC               	movwf	cw_update_config_info@reg_val
  4926                           
  4927                           ;CW201x.c: 110: ret = cw_write(0xA, &reg_val);
  4928  04F2  302C               	movlw	(low (cw_update_config_info@reg_val| 0))& (0+255)
  4929  04F3  00A7               	movwf	??_cw_update_config_info
  4930  04F4  0827               	movf	??_cw_update_config_info,w
  4931  04F5  00A4               	movwf	cw_write@w_pdata
  4932  04F6  300A               	movlw	10
  4933  04F7  226F               	fcall	_cw_write
  4934  04F8  0140               	movlb	0	; select bank0
  4935  04F9  0825               	movf	?_cw_write+1,w
  4936  04FA  00AA               	movwf	cw_update_config_info@ret+1
  4937  04FB  0824               	movf	?_cw_write,w
  4938  04FC  00A9               	movwf	cw_update_config_info@ret
  4939                           
  4940                           ;CW201x.c: 111: if(ret)
  4941  04FD  0829               	movf	cw_update_config_info@ret,w
  4942  04FE  042A               	iorwf	cw_update_config_info@ret+1,w
  4943  04FF  1903               	btfsc	3,2
  4944  0500  2D03               	goto	l2028
  4945                           
  4946                           ;CW201x.c: 112: {
  4947                           ;CW201x.c: 113: return 1;
  4948  0501  3001               	movlw	1
  4949  0502  0008               	return
  4950  0503                     l2028:	
  4951                           
  4952                           ;CW201x.c: 114: }
  4953                           ;CW201x.c: 115: CW_Delay10us(10);
  4954  0503  300A               	movlw	10
  4955  0504  2106               	fcall	_CW_Delay10us
  4956                           
  4957                           ;CW201x.c: 116: ret = cw_write(0xA, &reset_val);
  4958  0505  3028               	movlw	(low (cw_update_config_info@reset_val| 0))& (0+255)
  4959  0506  0140               	movlb	0	; select bank0
  4960  0507  00A7               	movwf	??_cw_update_config_info
  4961  0508  0827               	movf	??_cw_update_config_info,w
  4962  0509  00A4               	movwf	cw_write@w_pdata
  4963  050A  300A               	movlw	10
  4964  050B  226F               	fcall	_cw_write
  4965  050C  0140               	movlb	0	; select bank0
  4966  050D  0825               	movf	?_cw_write+1,w
  4967  050E  00AA               	movwf	cw_update_config_info@ret+1
  4968  050F  0824               	movf	?_cw_write,w
  4969  0510  00A9               	movwf	cw_update_config_info@ret
  4970                           
  4971                           ;CW201x.c: 117: if(ret)
  4972  0511  0829               	movf	cw_update_config_info@ret,w
  4973  0512  042A               	iorwf	cw_update_config_info@ret+1,w
  4974  0513  1903               	btfsc	3,2
  4975  0514  2D17               	goto	l2038
  4976                           
  4977                           ;CW201x.c: 118: {
  4978                           ;CW201x.c: 119: return 1;
  4979  0515  3001               	movlw	1
  4980  0516  0008               	return
  4981  0517                     l2038:	
  4982                           
  4983                           ;CW201x.c: 120: }
  4984                           ;CW201x.c: 121: return 0;
  4985  0517  3000               	movlw	0
  4986  0518  0008               	return
  4987  0519                     __end_of_cw_update_config_info:	
  4988                           
  4989                           	psect	text16
  4990  026F                     __ptext16:	
  4991 ;; *************** function _cw_write *****************
  4992 ;; Defined at:
  4993 ;;		line 224 in file "iic.c"
  4994 ;; Parameters:    Size  Location     Type
  4995 ;;  point_reg       1    wreg     unsigned char 
  4996 ;;  w_pdata         1    4[BANK0 ] PTR unsigned char 
  4997 ;;		 -> cw_por@reset_val(1), cw_init@reg_val(1), cw_update_config_info@reset_val(1), cw_update_config_info@reg_val(1), 
  4998 ;; Auto vars:     Size  Location     Type
  4999 ;;  point_reg       1   13[COMMON] unsigned char 
  5000 ;; Return value:  Size  Location     Type
  5001 ;;                  2    4[BANK0 ] int 
  5002 ;; Registers used:
  5003 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5004 ;; Tracked objects:
  5005 ;;		On entry : 0/0
  5006 ;;		On exit  : 0/0
  5007 ;;		Unchanged: 0/0
  5008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5009 ;;      Params:         0       3       0       0
  5010 ;;      Locals:         1       0       0       0
  5011 ;;      Temps:          0       0       0       0
  5012 ;;      Totals:         1       3       0       0
  5013 ;;Total ram usage:        4 bytes
  5014 ;; Hardware stack levels used:    1
  5015 ;; Hardware stack levels required when called:    3
  5016 ;; This function calls:
  5017 ;;		_start
  5018 ;;		_stop
  5019 ;;		_wait_r_ack
  5020 ;;		_write_byte
  5021 ;; This function is called by:
  5022 ;;		_cw_update_config_info
  5023 ;;		_cw_init
  5024 ;;		_cw_por
  5025 ;; This function uses a non-reentrant model
  5026 ;;
  5027                           
  5028                           
  5029                           ;psect for function _cw_write
  5030  026F                     _cw_write:	
  5031                           
  5032                           ;incstack = 0
  5033                           ; Regs used in _cw_write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5034                           ;cw_write@point_reg stored from wreg
  5035  026F  00FD               	movwf	cw_write@point_reg
  5036                           
  5037                           ;iic.c: 226: start();
  5038  0270  204B               	fcall	_start
  5039                           
  5040                           ;iic.c: 227: write_byte(0xc4);
  5041  0271  30C4               	movlw	196
  5042  0272  2169               	fcall	_write_byte
  5043                           
  5044                           ;iic.c: 228: if(wait_r_ack())
  5045  0273  223D               	fcall	_wait_r_ack
  5046  0274  087B               	movf	?_wait_r_ack,w
  5047  0275  047C               	iorwf	?_wait_r_ack+1,w
  5048  0276  1903               	btfsc	3,2
  5049  0277  2A7E               	goto	l1894
  5050                           
  5051                           ;iic.c: 229: {
  5052                           ;iic.c: 230: return 1;
  5053  0278  3001               	movlw	1
  5054  0279  0140               	movlb	0	; select bank0
  5055  027A  00A4               	movwf	?_cw_write
  5056  027B  3000               	movlw	0
  5057  027C  00A5               	movwf	?_cw_write+1
  5058  027D  0008               	return
  5059  027E                     l1894:	
  5060                           
  5061                           ;iic.c: 231: }
  5062                           ;iic.c: 232: write_byte(point_reg);
  5063  027E  087D               	movf	cw_write@point_reg,w
  5064  027F  2169               	fcall	_write_byte
  5065                           
  5066                           ;iic.c: 233: if(wait_r_ack())
  5067  0280  223D               	fcall	_wait_r_ack
  5068  0281  087B               	movf	?_wait_r_ack,w
  5069  0282  047C               	iorwf	?_wait_r_ack+1,w
  5070  0283  1903               	btfsc	3,2
  5071  0284  2A8B               	goto	l1900
  5072                           
  5073                           ;iic.c: 234: {
  5074                           ;iic.c: 235: return 1;
  5075  0285  3001               	movlw	1
  5076  0286  0140               	movlb	0	; select bank0
  5077  0287  00A4               	movwf	?_cw_write
  5078  0288  3000               	movlw	0
  5079  0289  00A5               	movwf	?_cw_write+1
  5080  028A  0008               	return
  5081  028B                     l1900:	
  5082                           
  5083                           ;iic.c: 236: }
  5084                           ;iic.c: 237: write_byte(*w_pdata);
  5085  028B  0140               	movlb	0	; select bank0
  5086  028C  0824               	movf	cw_write@w_pdata,w
  5087  028D  0086               	movwf	6
  5088  028E  0187               	clrf	7
  5089  028F  0801               	movf	1,w
  5090  0290  2169               	fcall	_write_byte
  5091                           
  5092                           ;iic.c: 238: if(wait_r_ack())
  5093  0291  223D               	fcall	_wait_r_ack
  5094  0292  087B               	movf	?_wait_r_ack,w
  5095  0293  047C               	iorwf	?_wait_r_ack+1,w
  5096  0294  1903               	btfsc	3,2
  5097  0295  2A9C               	goto	l1908
  5098                           
  5099                           ;iic.c: 239: {
  5100                           ;iic.c: 240: return 1;
  5101  0296  3001               	movlw	1
  5102  0297  0140               	movlb	0	; select bank0
  5103  0298  00A4               	movwf	?_cw_write
  5104  0299  3000               	movlw	0
  5105  029A  00A5               	movwf	?_cw_write+1
  5106  029B  0008               	return
  5107  029C                     l1908:	
  5108                           
  5109                           ;iic.c: 241: }
  5110                           ;iic.c: 242: stop();
  5111  029C  2075               	fcall	_stop
  5112                           
  5113                           ;iic.c: 243: return 0;
  5114  029D  0140               	movlb	0	; select bank0
  5115  029E  01A4               	clrf	?_cw_write
  5116  029F  01A5               	clrf	?_cw_write+1
  5117  02A0  0008               	return
  5118  02A1                     __end_of_cw_write:	
  5119                           
  5120                           	psect	text17
  5121  02A1                     __ptext17:	
  5122 ;; *************** function _cw_read *****************
  5123 ;; Defined at:
  5124 ;;		line 166 in file "iic.c"
  5125 ;; Parameters:    Size  Location     Type
  5126 ;;  point_reg       1    wreg     unsigned char 
  5127 ;;  r_pdata         1    4[BANK0 ] PTR unsigned char 
  5128 ;;		 -> cw_get_capacity@reg_val(1), cw_init@reg_val(1), cw_update_config_info@reg_val(1), 
  5129 ;; Auto vars:     Size  Location     Type
  5130 ;;  point_reg       1    6[BANK0 ] unsigned char 
  5131 ;; Return value:  Size  Location     Type
  5132 ;;                  2    4[BANK0 ] int 
  5133 ;; Registers used:
  5134 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5135 ;; Tracked objects:
  5136 ;;		On entry : 0/0
  5137 ;;		On exit  : 0/0
  5138 ;;		Unchanged: 0/0
  5139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5140 ;;      Params:         0       2       0       0
  5141 ;;      Locals:         0       1       0       0
  5142 ;;      Temps:          1       0       0       0
  5143 ;;      Totals:         1       3       0       0
  5144 ;;Total ram usage:        4 bytes
  5145 ;; Hardware stack levels used:    1
  5146 ;; Hardware stack levels required when called:    3
  5147 ;; This function calls:
  5148 ;;		_read_byte
  5149 ;;		_s_ack
  5150 ;;		_start
  5151 ;;		_stop
  5152 ;;		_wait_r_ack
  5153 ;;		_write_byte
  5154 ;; This function is called by:
  5155 ;;		_cw_update_config_info
  5156 ;;		_cw_init
  5157 ;;		_cw_get_capacity
  5158 ;; This function uses a non-reentrant model
  5159 ;;
  5160                           
  5161                           
  5162                           ;psect for function _cw_read
  5163  02A1                     _cw_read:	
  5164                           
  5165                           ;incstack = 0
  5166                           ; Regs used in _cw_read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5167                           ;cw_read@point_reg stored from wreg
  5168  02A1  0140               	movlb	0	; select bank0
  5169  02A2  00A6               	movwf	cw_read@point_reg
  5170                           
  5171                           ;iic.c: 168: start();
  5172  02A3  204B               	fcall	_start
  5173                           
  5174                           ;iic.c: 169: write_byte(0xc4);
  5175  02A4  30C4               	movlw	196
  5176  02A5  2169               	fcall	_write_byte
  5177                           
  5178                           ;iic.c: 170: if(wait_r_ack())
  5179  02A6  223D               	fcall	_wait_r_ack
  5180  02A7  087B               	movf	?_wait_r_ack,w
  5181  02A8  047C               	iorwf	?_wait_r_ack+1,w
  5182  02A9  1903               	btfsc	3,2
  5183  02AA  2AB1               	goto	l1866
  5184                           
  5185                           ;iic.c: 171: {
  5186                           ;iic.c: 172: return 1;
  5187  02AB  3001               	movlw	1
  5188  02AC  0140               	movlb	0	; select bank0
  5189  02AD  00A4               	movwf	?_cw_read
  5190  02AE  3000               	movlw	0
  5191  02AF  00A5               	movwf	?_cw_read+1
  5192  02B0  0008               	return
  5193  02B1                     l1866:	
  5194                           
  5195                           ;iic.c: 173: }
  5196                           ;iic.c: 174: write_byte(point_reg);
  5197  02B1  0140               	movlb	0	; select bank0
  5198  02B2  0826               	movf	cw_read@point_reg,w
  5199  02B3  2169               	fcall	_write_byte
  5200                           
  5201                           ;iic.c: 175: if(wait_r_ack())
  5202  02B4  223D               	fcall	_wait_r_ack
  5203  02B5  087B               	movf	?_wait_r_ack,w
  5204  02B6  047C               	iorwf	?_wait_r_ack+1,w
  5205  02B7  1903               	btfsc	3,2
  5206  02B8  2ABF               	goto	l1872
  5207                           
  5208                           ;iic.c: 176: {
  5209                           ;iic.c: 177: return 1;
  5210  02B9  3001               	movlw	1
  5211  02BA  0140               	movlb	0	; select bank0
  5212  02BB  00A4               	movwf	?_cw_read
  5213  02BC  3000               	movlw	0
  5214  02BD  00A5               	movwf	?_cw_read+1
  5215  02BE  0008               	return
  5216  02BF                     l1872:	
  5217                           
  5218                           ;iic.c: 178: }
  5219                           ;iic.c: 179: start();
  5220  02BF  204B               	fcall	_start
  5221                           
  5222                           ;iic.c: 180: write_byte(0xc5);
  5223  02C0  30C5               	movlw	197
  5224  02C1  2169               	fcall	_write_byte
  5225                           
  5226                           ;iic.c: 181: if(wait_r_ack())
  5227  02C2  223D               	fcall	_wait_r_ack
  5228  02C3  087B               	movf	?_wait_r_ack,w
  5229  02C4  047C               	iorwf	?_wait_r_ack+1,w
  5230  02C5  1903               	btfsc	3,2
  5231  02C6  2ACD               	goto	l1878
  5232                           
  5233                           ;iic.c: 182: {
  5234                           ;iic.c: 183: return 1;
  5235  02C7  3001               	movlw	1
  5236  02C8  0140               	movlb	0	; select bank0
  5237  02C9  00A4               	movwf	?_cw_read
  5238  02CA  3000               	movlw	0
  5239  02CB  00A5               	movwf	?_cw_read+1
  5240  02CC  0008               	return
  5241  02CD                     l1878:	
  5242                           
  5243                           ;iic.c: 184: }
  5244                           ;iic.c: 185: *r_pdata = read_byte();
  5245  02CD  218E               	fcall	_read_byte
  5246  02CE  00FD               	movwf	??_cw_read
  5247  02CF  0140               	movlb	0	; select bank0
  5248  02D0  0824               	movf	cw_read@r_pdata,w
  5249  02D1  0086               	movwf	6
  5250  02D2  0187               	clrf	7
  5251  02D3  087D               	movf	??_cw_read,w
  5252  02D4  0081               	movwf	1
  5253                           
  5254                           ;iic.c: 186: s_ack();
  5255  02D5  2058               	fcall	_s_ack
  5256                           
  5257                           ;iic.c: 187: stop();
  5258  02D6  2075               	fcall	_stop
  5259                           
  5260                           ;iic.c: 188: return 0;
  5261  02D7  0140               	movlb	0	; select bank0
  5262  02D8  01A4               	clrf	?_cw_read
  5263  02D9  01A5               	clrf	?_cw_read+1
  5264  02DA  0008               	return
  5265  02DB                     __end_of_cw_read:	
  5266                           
  5267                           	psect	text18
  5268  0169                     __ptext18:	
  5269 ;; *************** function _write_byte *****************
  5270 ;; Defined at:
  5271 ;;		line 128 in file "iic.c"
  5272 ;; Parameters:    Size  Location     Type
  5273 ;;  w_data          1    wreg     unsigned char 
  5274 ;; Auto vars:     Size  Location     Type
  5275 ;;  w_data          1    6[COMMON] unsigned char 
  5276 ;;  i               1    7[COMMON] unsigned char 
  5277 ;; Return value:  Size  Location     Type
  5278 ;;                  1    wreg      void 
  5279 ;; Registers used:
  5280 ;;		wreg, status,2, status,0, pclath, cstack
  5281 ;; Tracked objects:
  5282 ;;		On entry : 0/0
  5283 ;;		On exit  : 0/0
  5284 ;;		Unchanged: 0/0
  5285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5286 ;;      Params:         0       0       0       0
  5287 ;;      Locals:         2       0       0       0
  5288 ;;      Temps:          1       0       0       0
  5289 ;;      Totals:         3       0       0       0
  5290 ;;Total ram usage:        3 bytes
  5291 ;; Hardware stack levels used:    1
  5292 ;; Hardware stack levels required when called:    1
  5293 ;; This function calls:
  5294 ;;		_I2C_Delay10us
  5295 ;; This function is called by:
  5296 ;;		_cw_read
  5297 ;;		_cw_read_word
  5298 ;;		_cw_write
  5299 ;; This function uses a non-reentrant model
  5300 ;;
  5301                           
  5302                           
  5303                           ;psect for function _write_byte
  5304  0169                     _write_byte:	
  5305                           
  5306                           ;incstack = 0
  5307                           ; Regs used in _write_byte: [wreg+status,2+status,0+pclath+cstack]
  5308                           ;write_byte@w_data stored from wreg
  5309  0169  00F6               	movwf	write_byte@w_data
  5310                           
  5311                           ;iic.c: 130: unsigned char i;
  5312                           ;iic.c: 131: do { TRISCbits.TRISC1 = 0; } while(0);
  5313  016A  0140               	movlb	0	; select bank0
  5314  016B  1094               	bcf	20,1	;volatile
  5315                           
  5316                           ;iic.c: 132: for(i = 0; i < 8; i++)
  5317  016C  01F7               	clrf	write_byte@i
  5318  016D                     L7:	
  5319  016D  3008               	movlw	8
  5320  016E  0277               	subwf	write_byte@i,w
  5321  016F  1803               	btfsc	3,0
  5322  0170  0008               	return
  5323                           
  5324                           ;iic.c: 133: {
  5325                           ;iic.c: 134: LATCbits.LATC1 = w_data & 0x80;
  5326  0171  0876               	movf	write_byte@w_data,w
  5327  0172  3980               	andlw	128
  5328  0173  00F5               	movwf	??_write_byte
  5329  0174  0DF5               	rlf	??_write_byte,f
  5330  0175  0140               	movlb	0	; select bank0
  5331  0176  081A               	movf	26,w	;volatile
  5332  0177  0675               	xorwf	??_write_byte,w
  5333  0178  39FD               	andlw	-3
  5334  0179  0675               	xorwf	??_write_byte,w
  5335  017A  009A               	movwf	26	;volatile
  5336                           
  5337                           ;iic.c: 135: I2C_Delay10us(1);
  5338  017B  3001               	movlw	1
  5339  017C  2127               	fcall	_I2C_Delay10us
  5340                           
  5341                           ;iic.c: 136: do { LATCbits.LATC0 = 1; } while(0);
  5342  017D  0140               	movlb	0	; select bank0
  5343  017E  141A               	bsf	26,0	;volatile
  5344                           
  5345                           ;iic.c: 137: I2C_Delay10us(1);
  5346  017F  3001               	movlw	1
  5347  0180  2127               	fcall	_I2C_Delay10us
  5348                           
  5349                           ;iic.c: 138: do { LATCbits.LATC0 = 0; } while(0);
  5350  0181  0140               	movlb	0	; select bank0
  5351  0182  101A               	bcf	26,0	;volatile
  5352                           
  5353                           ;iic.c: 139: I2C_Delay10us(1);
  5354  0183  3001               	movlw	1
  5355  0184  2127               	fcall	_I2C_Delay10us
  5356                           
  5357                           ;iic.c: 140: w_data = w_data << 1;
  5358  0185  3576               	lslf	write_byte@w_data,w
  5359  0186  00F5               	movwf	??_write_byte
  5360  0187  0875               	movf	??_write_byte,w
  5361  0188  00F6               	movwf	write_byte@w_data
  5362  0189  3001               	movlw	1
  5363  018A  00F5               	movwf	??_write_byte
  5364  018B  0875               	movf	??_write_byte,w
  5365  018C  07F7               	addwf	write_byte@i,f
  5366  018D  296D               	goto	L7
  5367  018E                     __end_of_write_byte:	
  5368                           
  5369                           	psect	text19
  5370  023D                     __ptext19:	
  5371 ;; *************** function _wait_r_ack *****************
  5372 ;; Defined at:
  5373 ;;		line 82 in file "iic.c"
  5374 ;; Parameters:    Size  Location     Type
  5375 ;;		None
  5376 ;; Auto vars:     Size  Location     Type
  5377 ;;  i               2    2[BANK0 ] unsigned int 
  5378 ;;  ack             2    0[BANK0 ] int 
  5379 ;; Return value:  Size  Location     Type
  5380 ;;                  2   11[COMMON] int 
  5381 ;; Registers used:
  5382 ;;		wreg, status,2, status,0, pclath, cstack
  5383 ;; Tracked objects:
  5384 ;;		On entry : 0/0
  5385 ;;		On exit  : 0/0
  5386 ;;		Unchanged: 0/0
  5387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5388 ;;      Params:         2       0       0       0
  5389 ;;      Locals:         0       4       0       0
  5390 ;;      Temps:          0       0       0       0
  5391 ;;      Totals:         2       4       0       0
  5392 ;;Total ram usage:        6 bytes
  5393 ;; Hardware stack levels used:    1
  5394 ;; Hardware stack levels required when called:    2
  5395 ;; This function calls:
  5396 ;;		_r_ack
  5397 ;;		_stop
  5398 ;; This function is called by:
  5399 ;;		_cw_read
  5400 ;;		_cw_read_word
  5401 ;;		_cw_write
  5402 ;; This function uses a non-reentrant model
  5403 ;;
  5404                           
  5405                           
  5406                           ;psect for function _wait_r_ack
  5407  023D                     _wait_r_ack:	
  5408                           
  5409                           ;iic.c: 84: int ack;
  5410                           ;iic.c: 85: unsigned int i;
  5411                           ;iic.c: 86: ack = 1;
  5412                           
  5413                           ;incstack = 0
  5414                           ; Regs used in _wait_r_ack: [wreg+status,2+status,0+pclath+cstack]
  5415  023D  3001               	movlw	1
  5416  023E  0140               	movlb	0	; select bank0
  5417  023F  00A0               	movwf	wait_r_ack@ack
  5418  0240  3000               	movlw	0
  5419  0241  00A1               	movwf	wait_r_ack@ack+1
  5420                           
  5421                           ;iic.c: 87: for(i = 0; i < 100; i++)
  5422  0242  01A2               	clrf	wait_r_ack@i
  5423  0243  01A3               	clrf	wait_r_ack@i+1
  5424  0244  3000               	movlw	0
  5425  0245  0223               	subwf	wait_r_ack@i+1,w
  5426  0246  3064               	movlw	100
  5427  0247  1903               	skipnz
  5428  0248  0222               	subwf	wait_r_ack@i,w
  5429  0249  1803               	btfsc	3,0
  5430  024A  2A6C               	goto	l1778
  5431  024B                     l1762:	
  5432                           
  5433                           ;iic.c: 88: {
  5434                           ;iic.c: 89: ack = r_ack();
  5435  024B  20B1               	fcall	_r_ack
  5436  024C  0876               	movf	?_r_ack+1,w
  5437  024D  0140               	movlb	0	; select bank0
  5438  024E  00A1               	movwf	wait_r_ack@ack+1
  5439  024F  0875               	movf	?_r_ack,w
  5440  0250  00A0               	movwf	wait_r_ack@ack
  5441                           
  5442                           ;iic.c: 90: if(!ack)
  5443  0251  0820               	movf	wait_r_ack@ack,w
  5444  0252  0421               	iorwf	wait_r_ack@ack+1,w
  5445  0253  1903               	btfsc	3,2
  5446  0254  2A6C               	goto	l1778
  5447                           
  5448                           ;iic.c: 93: }
  5449                           ;iic.c: 94: if(i == 99)
  5450                           
  5451                           ;iic.c: 91: {
  5452                           ;iic.c: 92: break;
  5453  0255  3063               	movlw	99
  5454  0256  0622               	xorwf	wait_r_ack@i,w
  5455  0257  0423               	iorwf	wait_r_ack@i+1,w
  5456  0258  1D03               	btfss	3,2
  5457  0259  2A60               	goto	l1776
  5458                           
  5459                           ;iic.c: 95: {
  5460                           ;iic.c: 96: stop();
  5461  025A  2075               	fcall	_stop
  5462                           
  5463                           ;iic.c: 97: return 1;
  5464  025B  3001               	movlw	1
  5465  025C  00FB               	movwf	?_wait_r_ack
  5466  025D  3000               	movlw	0
  5467  025E  00FC               	movwf	?_wait_r_ack+1
  5468  025F  0008               	return
  5469  0260                     l1776:	
  5470  0260  3001               	movlw	1
  5471  0261  0140               	movlb	0	; select bank0
  5472  0262  07A2               	addwf	wait_r_ack@i,f
  5473  0263  3000               	movlw	0
  5474  0264  3DA3               	addwfc	wait_r_ack@i+1,f
  5475  0265  3000               	movlw	0
  5476  0266  0223               	subwf	wait_r_ack@i+1,w
  5477  0267  3064               	movlw	100
  5478  0268  1903               	skipnz
  5479  0269  0222               	subwf	wait_r_ack@i,w
  5480  026A  1C03               	skipc
  5481  026B  2A4B               	goto	l1762
  5482  026C                     l1778:	
  5483                           
  5484                           ;iic.c: 98: }
  5485                           ;iic.c: 99: }
  5486                           ;iic.c: 100: return 0;
  5487  026C  01FB               	clrf	?_wait_r_ack
  5488  026D  01FC               	clrf	?_wait_r_ack+1
  5489  026E  0008               	return
  5490  026F                     __end_of_wait_r_ack:	
  5491                           
  5492                           	psect	text20
  5493  0075                     __ptext20:	
  5494 ;; *************** function _stop *****************
  5495 ;; Defined at:
  5496 ;;		line 56 in file "iic.c"
  5497 ;; Parameters:    Size  Location     Type
  5498 ;;		None
  5499 ;; Auto vars:     Size  Location     Type
  5500 ;;		None
  5501 ;; Return value:  Size  Location     Type
  5502 ;;                  1    wreg      void 
  5503 ;; Registers used:
  5504 ;;		wreg, status,2, status,0, pclath, cstack
  5505 ;; Tracked objects:
  5506 ;;		On entry : 0/0
  5507 ;;		On exit  : 0/0
  5508 ;;		Unchanged: 0/0
  5509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5510 ;;      Params:         0       0       0       0
  5511 ;;      Locals:         0       0       0       0
  5512 ;;      Temps:          0       0       0       0
  5513 ;;      Totals:         0       0       0       0
  5514 ;;Total ram usage:        0 bytes
  5515 ;; Hardware stack levels used:    1
  5516 ;; Hardware stack levels required when called:    1
  5517 ;; This function calls:
  5518 ;;		_I2C_Delay10us
  5519 ;; This function is called by:
  5520 ;;		_wait_r_ack
  5521 ;;		_cw_read
  5522 ;;		_cw_read_word
  5523 ;;		_cw_write
  5524 ;; This function uses a non-reentrant model
  5525 ;;
  5526                           
  5527                           
  5528                           ;psect for function _stop
  5529  0075                     _stop:	
  5530                           
  5531                           ;incstack = 0
  5532                           ; Regs used in _stop: [wreg+status,2+status,0+pclath+cstack]
  5533                           ;iic.c: 58: do { TRISCbits.TRISC1 = 0; } while(0);
  5534  0075  0140               	movlb	0	; select bank0
  5535  0076  1094               	bcf	20,1	;volatile
  5536                           
  5537                           ;iic.c: 59: do { LATCbits.LATC1 = 0; } while(0);
  5538  0077  109A               	bcf	26,1	;volatile
  5539                           
  5540                           ;iic.c: 60: I2C_Delay10us(1);
  5541  0078  3001               	movlw	1
  5542  0079  2127               	fcall	_I2C_Delay10us
  5543                           
  5544                           ;iic.c: 61: do { LATCbits.LATC0 = 1; } while(0);
  5545  007A  0140               	movlb	0	; select bank0
  5546  007B  141A               	bsf	26,0	;volatile
  5547                           
  5548                           ;iic.c: 62: I2C_Delay10us(1);
  5549  007C  3001               	movlw	1
  5550  007D  2127               	fcall	_I2C_Delay10us
  5551                           
  5552                           ;iic.c: 63: do { LATCbits.LATC1 = 1; } while(0);
  5553  007E  0140               	movlb	0	; select bank0
  5554  007F  149A               	bsf	26,1	;volatile
  5555                           
  5556                           ;iic.c: 64: I2C_Delay10us(1);
  5557  0080  3001               	movlw	1
  5558  0081  2127               	fcall	_I2C_Delay10us
  5559                           
  5560                           ;iic.c: 66: I2C_Delay10us(1);
  5561  0082  3001               	movlw	1
  5562  0083  2127               	fcall	_I2C_Delay10us
  5563  0084  0008               	return
  5564  0085                     __end_of_stop:	
  5565                           
  5566                           	psect	text21
  5567  00B1                     __ptext21:	
  5568 ;; *************** function _r_ack *****************
  5569 ;; Defined at:
  5570 ;;		line 69 in file "iic.c"
  5571 ;; Parameters:    Size  Location     Type
  5572 ;;		None
  5573 ;; Auto vars:     Size  Location     Type
  5574 ;;  ack             2    9[COMMON] int 
  5575 ;; Return value:  Size  Location     Type
  5576 ;;                  2    5[COMMON] int 
  5577 ;; Registers used:
  5578 ;;		wreg, status,2, status,0, pclath, cstack
  5579 ;; Tracked objects:
  5580 ;;		On entry : 0/0
  5581 ;;		On exit  : 0/0
  5582 ;;		Unchanged: 0/0
  5583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5584 ;;      Params:         2       0       0       0
  5585 ;;      Locals:         2       0       0       0
  5586 ;;      Temps:          2       0       0       0
  5587 ;;      Totals:         6       0       0       0
  5588 ;;Total ram usage:        6 bytes
  5589 ;; Hardware stack levels used:    1
  5590 ;; Hardware stack levels required when called:    1
  5591 ;; This function calls:
  5592 ;;		_I2C_Delay10us
  5593 ;; This function is called by:
  5594 ;;		_wait_r_ack
  5595 ;; This function uses a non-reentrant model
  5596 ;;
  5597                           
  5598                           
  5599                           ;psect for function _r_ack
  5600  00B1                     _r_ack:	
  5601                           
  5602                           ;incstack = 0
  5603                           ; Regs used in _r_ack: [wreg+status,2+status,0+pclath+cstack]
  5604                           ;iic.c: 71: int ack;
  5605                           ;iic.c: 72: do { TRISCbits.TRISC1 = 1; } while(0);
  5606  00B1  0140               	movlb	0	; select bank0
  5607  00B2  1494               	bsf	20,1	;volatile
  5608                           
  5609                           ;iic.c: 73: do { LATCbits.LATC0 = 1; } while(0);
  5610  00B3  141A               	bsf	26,0	;volatile
  5611                           
  5612                           ;iic.c: 74: I2C_Delay10us(1);
  5613  00B4  3001               	movlw	1
  5614  00B5  2127               	fcall	_I2C_Delay10us
  5615                           
  5616                           ;iic.c: 75: ack = PORTCbits.RC1;
  5617  00B6  0140               	movlb	0	; select bank0
  5618  00B7  0C0E               	rrf	14,w	;volatile
  5619  00B8  3901               	andlw	1
  5620  00B9  00F7               	movwf	??_r_ack
  5621  00BA  01F8               	clrf	??_r_ack+1
  5622  00BB  0877               	movf	??_r_ack,w
  5623  00BC  00F9               	movwf	r_ack@ack
  5624  00BD  0878               	movf	??_r_ack+1,w
  5625  00BE  00FA               	movwf	r_ack@ack+1
  5626                           
  5627                           ;iic.c: 76: I2C_Delay10us(1);
  5628  00BF  3001               	movlw	1
  5629  00C0  2127               	fcall	_I2C_Delay10us
  5630                           
  5631                           ;iic.c: 77: do { LATCbits.LATC0 = 0; } while(0);
  5632  00C1  0140               	movlb	0	; select bank0
  5633  00C2  101A               	bcf	26,0	;volatile
  5634                           
  5635                           ;iic.c: 78: I2C_Delay10us(1);
  5636  00C3  3001               	movlw	1
  5637  00C4  2127               	fcall	_I2C_Delay10us
  5638                           
  5639                           ;iic.c: 79: return ack;
  5640  00C5  087A               	movf	r_ack@ack+1,w
  5641  00C6  00F6               	movwf	?_r_ack+1
  5642  00C7  0879               	movf	r_ack@ack,w
  5643  00C8  00F5               	movwf	?_r_ack
  5644  00C9  0008               	return
  5645  00CA                     __end_of_r_ack:	
  5646                           
  5647                           	psect	text22
  5648  004B                     __ptext22:	
  5649 ;; *************** function _start *****************
  5650 ;; Defined at:
  5651 ;;		line 45 in file "iic.c"
  5652 ;; Parameters:    Size  Location     Type
  5653 ;;		None
  5654 ;; Auto vars:     Size  Location     Type
  5655 ;;		None
  5656 ;; Return value:  Size  Location     Type
  5657 ;;                  1    wreg      void 
  5658 ;; Registers used:
  5659 ;;		wreg, status,2, status,0, pclath, cstack
  5660 ;; Tracked objects:
  5661 ;;		On entry : 0/0
  5662 ;;		On exit  : 0/0
  5663 ;;		Unchanged: 0/0
  5664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5665 ;;      Params:         0       0       0       0
  5666 ;;      Locals:         0       0       0       0
  5667 ;;      Temps:          0       0       0       0
  5668 ;;      Totals:         0       0       0       0
  5669 ;;Total ram usage:        0 bytes
  5670 ;; Hardware stack levels used:    1
  5671 ;; Hardware stack levels required when called:    1
  5672 ;; This function calls:
  5673 ;;		_I2C_Delay10us
  5674 ;; This function is called by:
  5675 ;;		_cw_read
  5676 ;;		_cw_read_word
  5677 ;;		_cw_write
  5678 ;; This function uses a non-reentrant model
  5679 ;;
  5680                           
  5681                           
  5682                           ;psect for function _start
  5683  004B                     _start:	
  5684                           
  5685                           ;incstack = 0
  5686                           ; Regs used in _start: [wreg+status,2+status,0+pclath+cstack]
  5687                           ;iic.c: 47: do { TRISCbits.TRISC1 = 0; } while(0);
  5688  004B  0140               	movlb	0	; select bank0
  5689  004C  1094               	bcf	20,1	;volatile
  5690                           
  5691                           ;iic.c: 48: do { LATCbits.LATC1 = 1; } while(0);
  5692  004D  149A               	bsf	26,1	;volatile
  5693                           
  5694                           ;iic.c: 49: do { LATCbits.LATC0 = 1; } while(0);
  5695  004E  141A               	bsf	26,0	;volatile
  5696                           
  5697                           ;iic.c: 50: I2C_Delay10us(1);
  5698  004F  3001               	movlw	1
  5699  0050  2127               	fcall	_I2C_Delay10us
  5700                           
  5701                           ;iic.c: 51: do { LATCbits.LATC1 = 0; } while(0);
  5702  0051  0140               	movlb	0	; select bank0
  5703  0052  109A               	bcf	26,1	;volatile
  5704                           
  5705                           ;iic.c: 52: I2C_Delay10us(1);
  5706  0053  3001               	movlw	1
  5707  0054  2127               	fcall	_I2C_Delay10us
  5708                           
  5709                           ;iic.c: 53: do { LATCbits.LATC0 = 0; } while(0);
  5710  0055  0140               	movlb	0	; select bank0
  5711  0056  101A               	bcf	26,0	;volatile
  5712  0057  0008               	return
  5713  0058                     __end_of_start:	
  5714                           
  5715                           	psect	text23
  5716  0058                     __ptext23:	
  5717 ;; *************** function _s_ack *****************
  5718 ;; Defined at:
  5719 ;;		line 103 in file "iic.c"
  5720 ;; Parameters:    Size  Location     Type
  5721 ;;		None
  5722 ;; Auto vars:     Size  Location     Type
  5723 ;;		None
  5724 ;; Return value:  Size  Location     Type
  5725 ;;                  1    wreg      void 
  5726 ;; Registers used:
  5727 ;;		wreg, status,2, status,0, pclath, cstack
  5728 ;; Tracked objects:
  5729 ;;		On entry : 0/0
  5730 ;;		On exit  : 0/0
  5731 ;;		Unchanged: 0/0
  5732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5733 ;;      Params:         0       0       0       0
  5734 ;;      Locals:         0       0       0       0
  5735 ;;      Temps:          0       0       0       0
  5736 ;;      Totals:         0       0       0       0
  5737 ;;Total ram usage:        0 bytes
  5738 ;; Hardware stack levels used:    1
  5739 ;; Hardware stack levels required when called:    1
  5740 ;; This function calls:
  5741 ;;		_I2C_Delay10us
  5742 ;; This function is called by:
  5743 ;;		_cw_read
  5744 ;;		_cw_read_word
  5745 ;; This function uses a non-reentrant model
  5746 ;;
  5747                           
  5748                           
  5749                           ;psect for function _s_ack
  5750  0058                     _s_ack:	
  5751                           
  5752                           ;incstack = 0
  5753                           ; Regs used in _s_ack: [wreg+status,2+status,0+pclath+cstack]
  5754                           ;iic.c: 105: do { TRISCbits.TRISC1 = 0; } while(0);
  5755  0058  0140               	movlb	0	; select bank0
  5756  0059  1094               	bcf	20,1	;volatile
  5757                           
  5758                           ;iic.c: 106: do { LATCbits.LATC1 = 1; } while(0);
  5759  005A  149A               	bsf	26,1	;volatile
  5760                           
  5761                           ;iic.c: 107: I2C_Delay10us(1);
  5762  005B  3001               	movlw	1
  5763  005C  2127               	fcall	_I2C_Delay10us
  5764                           
  5765                           ;iic.c: 108: do { LATCbits.LATC0 = 1; } while(0);
  5766  005D  0140               	movlb	0	; select bank0
  5767  005E  141A               	bsf	26,0	;volatile
  5768                           
  5769                           ;iic.c: 109: I2C_Delay10us(1);
  5770  005F  3001               	movlw	1
  5771  0060  2127               	fcall	_I2C_Delay10us
  5772                           
  5773                           ;iic.c: 110: do { LATCbits.LATC0 = 0; } while(0);
  5774  0061  0140               	movlb	0	; select bank0
  5775  0062  101A               	bcf	26,0	;volatile
  5776                           
  5777                           ;iic.c: 111: I2C_Delay10us(1);
  5778  0063  3001               	movlw	1
  5779  0064  2127               	fcall	_I2C_Delay10us
  5780  0065  0008               	return
  5781  0066                     __end_of_s_ack:	
  5782                           
  5783                           	psect	text24
  5784  018E                     __ptext24:	
  5785 ;; *************** function _read_byte *****************
  5786 ;; Defined at:
  5787 ;;		line 144 in file "iic.c"
  5788 ;; Parameters:    Size  Location     Type
  5789 ;;		None
  5790 ;; Auto vars:     Size  Location     Type
  5791 ;;  r_data          1    7[COMMON] unsigned char 
  5792 ;;  i               1    6[COMMON] unsigned char 
  5793 ;; Return value:  Size  Location     Type
  5794 ;;                  1    wreg      unsigned char 
  5795 ;; Registers used:
  5796 ;;		wreg, status,2, status,0, pclath, cstack
  5797 ;; Tracked objects:
  5798 ;;		On entry : 0/0
  5799 ;;		On exit  : 0/0
  5800 ;;		Unchanged: 0/0
  5801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5802 ;;      Params:         0       0       0       0
  5803 ;;      Locals:         2       0       0       0
  5804 ;;      Temps:          1       0       0       0
  5805 ;;      Totals:         3       0       0       0
  5806 ;;Total ram usage:        3 bytes
  5807 ;; Hardware stack levels used:    1
  5808 ;; Hardware stack levels required when called:    1
  5809 ;; This function calls:
  5810 ;;		_I2C_Delay10us
  5811 ;; This function is called by:
  5812 ;;		_cw_read
  5813 ;;		_cw_read_word
  5814 ;; This function uses a non-reentrant model
  5815 ;;
  5816                           
  5817                           
  5818                           ;psect for function _read_byte
  5819  018E                     _read_byte:	
  5820                           
  5821                           ;incstack = 0
  5822                           ; Regs used in _read_byte: [wreg+status,2+status,0+pclath+cstack]
  5823                           ;iic.c: 146: unsigned char i;
  5824                           ;iic.c: 147: unsigned char r_data;
  5825                           ;iic.c: 148: do { TRISCbits.TRISC1 = 1; } while(0);
  5826  018E  0140               	movlb	0	; select bank0
  5827  018F  1494               	bsf	20,1	;volatile
  5828                           
  5829                           ;iic.c: 149: for(i = 0; i < 8; i++)
  5830  0190  01F6               	clrf	read_byte@i
  5831  0191  3008               	movlw	8
  5832  0192  0276               	subwf	read_byte@i,w
  5833  0193  1803               	btfsc	3,0
  5834  0194  29B2               	goto	l1836
  5835  0195                     l399:	
  5836                           ;iic.c: 150: {
  5837                           ;iic.c: 151: do { LATCbits.LATC0 = 1; } while(0);
  5838                           
  5839  0195  0140               	movlb	0	; select bank0
  5840  0196  141A               	bsf	26,0	;volatile
  5841                           
  5842                           ;iic.c: 152: I2C_Delay10us(1);
  5843  0197  3001               	movlw	1
  5844  0198  2127               	fcall	_I2C_Delay10us
  5845                           
  5846                           ;iic.c: 153: r_data = r_data << 1;
  5847  0199  3577               	lslf	read_byte@r_data,w
  5848  019A  00F5               	movwf	??_read_byte
  5849  019B  0875               	movf	??_read_byte,w
  5850  019C  00F7               	movwf	read_byte@r_data
  5851                           
  5852                           ;iic.c: 154: I2C_Delay10us(1);
  5853  019D  3001               	movlw	1
  5854  019E  2127               	fcall	_I2C_Delay10us
  5855                           
  5856                           ;iic.c: 155: if(PORTCbits.RC1)
  5857  019F  0140               	movlb	0	; select bank0
  5858  01A0  1C8E               	btfss	14,1	;volatile
  5859  01A1  29A7               	goto	l1828
  5860                           
  5861                           ;iic.c: 156: {
  5862                           ;iic.c: 157: r_data = r_data | 0x1;
  5863  01A2  0877               	movf	read_byte@r_data,w
  5864  01A3  3801               	iorlw	1
  5865  01A4  00F5               	movwf	??_read_byte
  5866  01A5  0875               	movf	??_read_byte,w
  5867  01A6  00F7               	movwf	read_byte@r_data
  5868  01A7                     l1828:	
  5869                           ;iic.c: 158: }
  5870                           ;iic.c: 159: do { LATCbits.LATC0 = 0; } while(0);
  5871                           
  5872  01A7  101A               	bcf	26,0	;volatile
  5873                           
  5874                           ;iic.c: 160: I2C_Delay10us(1);
  5875  01A8  3001               	movlw	1
  5876  01A9  2127               	fcall	_I2C_Delay10us
  5877  01AA  3001               	movlw	1
  5878  01AB  00F5               	movwf	??_read_byte
  5879  01AC  0875               	movf	??_read_byte,w
  5880  01AD  07F6               	addwf	read_byte@i,f
  5881  01AE  3008               	movlw	8
  5882  01AF  0276               	subwf	read_byte@i,w
  5883  01B0  1C03               	skipc
  5884  01B1  2995               	goto	l399
  5885  01B2                     l1836:	
  5886                           
  5887                           ;iic.c: 161: }
  5888                           ;iic.c: 162: return r_data;
  5889  01B2  0877               	movf	read_byte@r_data,w
  5890  01B3  0008               	return
  5891  01B4                     __end_of_read_byte:	
  5892                           
  5893                           	psect	text25
  5894  0127                     __ptext25:	
  5895 ;; *************** function _I2C_Delay10us *****************
  5896 ;; Defined at:
  5897 ;;		line 24 in file "iic.c"
  5898 ;; Parameters:    Size  Location     Type
  5899 ;;  us              1    wreg     unsigned char 
  5900 ;; Auto vars:     Size  Location     Type
  5901 ;;  us              1    1[COMMON] unsigned char 
  5902 ;;  b               1    4[COMMON] unsigned char 
  5903 ;;  a               1    3[COMMON] unsigned char 
  5904 ;;  i               1    2[COMMON] unsigned char 
  5905 ;; Return value:  Size  Location     Type
  5906 ;;                  1    wreg      void 
  5907 ;; Registers used:
  5908 ;;		wreg, status,2, status,0
  5909 ;; Tracked objects:
  5910 ;;		On entry : 0/0
  5911 ;;		On exit  : 0/0
  5912 ;;		Unchanged: 0/0
  5913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5914 ;;      Params:         0       0       0       0
  5915 ;;      Locals:         4       0       0       0
  5916 ;;      Temps:          1       0       0       0
  5917 ;;      Totals:         5       0       0       0
  5918 ;;Total ram usage:        5 bytes
  5919 ;; Hardware stack levels used:    1
  5920 ;; This function calls:
  5921 ;;		Nothing
  5922 ;; This function is called by:
  5923 ;;		_start
  5924 ;;		_stop
  5925 ;;		_r_ack
  5926 ;;		_s_ack
  5927 ;;		_sn_ack
  5928 ;;		_write_byte
  5929 ;;		_read_byte
  5930 ;; This function uses a non-reentrant model
  5931 ;;
  5932                           
  5933                           
  5934                           ;psect for function _I2C_Delay10us
  5935  0127                     _I2C_Delay10us:	
  5936                           
  5937                           ;incstack = 0
  5938                           ; Regs used in _I2C_Delay10us: [wreg+status,2+status,0]
  5939                           ;I2C_Delay10us@us stored from wreg
  5940  0127  00F1               	movwf	I2C_Delay10us@us
  5941                           
  5942                           ;iic.c: 26: unsigned char a, b;
  5943                           ;iic.c: 27: unsigned char i;
  5944                           ;iic.c: 28: for(i = 0; i < us; i++)
  5945  0128  01F2               	clrf	I2C_Delay10us@i
  5946  0129                     l1726:	
  5947  0129  0871               	movf	I2C_Delay10us@us,w
  5948  012A  0272               	subwf	I2C_Delay10us@i,w
  5949  012B  1803               	btfsc	3,0
  5950  012C  0008               	return
  5951                           
  5952                           ;iic.c: 29: {
  5953                           ;iic.c: 30: for(b = 1;b > 0;b --)
  5954  012D  01F4               	clrf	I2C_Delay10us@b
  5955  012E  0AF4               	incf	I2C_Delay10us@b,f
  5956  012F  0874               	movf	I2C_Delay10us@b,w
  5957  0130  1903               	btfsc	3,2
  5958  0131  2943               	goto	l1724
  5959  0132                     l1714:	
  5960                           
  5961                           ;iic.c: 31: {
  5962                           ;iic.c: 32: for(a = 7;a > 0;a --) ;
  5963  0132  3007               	movlw	7
  5964  0133  00F0               	movwf	??_I2C_Delay10us
  5965  0134  0870               	movf	??_I2C_Delay10us,w
  5966  0135  00F3               	movwf	I2C_Delay10us@a
  5967  0136  0873               	movf	I2C_Delay10us@a,w
  5968  0137  1903               	btfsc	3,2
  5969  0138  293E               	goto	l1722
  5970  0139                     l1720:	
  5971  0139  3001               	movlw	1
  5972  013A  02F3               	subwf	I2C_Delay10us@a,f
  5973  013B  0873               	movf	I2C_Delay10us@a,w
  5974  013C  1D03               	btfss	3,2
  5975  013D  2939               	goto	l1720
  5976  013E                     l1722:	
  5977  013E  3001               	movlw	1
  5978  013F  02F4               	subwf	I2C_Delay10us@b,f
  5979  0140  0874               	movf	I2C_Delay10us@b,w
  5980  0141  1D03               	btfss	3,2
  5981  0142  2932               	goto	l1714
  5982  0143                     l1724:	
  5983  0143  3001               	movlw	1
  5984  0144  00F0               	movwf	??_I2C_Delay10us
  5985  0145  0870               	movf	??_I2C_Delay10us,w
  5986  0146  07F2               	addwf	I2C_Delay10us@i,f
  5987  0147  2929               	goto	l1726
  5988  0148                     __end_of_I2C_Delay10us:	
  5989                           
  5990                           	psect	text26
  5991  0106                     __ptext26:	
  5992 ;; *************** function _CW_Delay10us *****************
  5993 ;; Defined at:
  5994 ;;		line 38 in file "CW201x.c"
  5995 ;; Parameters:    Size  Location     Type
  5996 ;;  us              1    wreg     unsigned char 
  5997 ;; Auto vars:     Size  Location     Type
  5998 ;;  us              1    1[COMMON] unsigned char 
  5999 ;;  b               1    4[COMMON] unsigned char 
  6000 ;;  a               1    3[COMMON] unsigned char 
  6001 ;;  i               1    2[COMMON] unsigned char 
  6002 ;; Return value:  Size  Location     Type
  6003 ;;                  1    wreg      void 
  6004 ;; Registers used:
  6005 ;;		wreg, status,2, status,0
  6006 ;; Tracked objects:
  6007 ;;		On entry : 0/0
  6008 ;;		On exit  : 0/0
  6009 ;;		Unchanged: 0/0
  6010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6011 ;;      Params:         0       0       0       0
  6012 ;;      Locals:         4       0       0       0
  6013 ;;      Temps:          1       0       0       0
  6014 ;;      Totals:         5       0       0       0
  6015 ;;Total ram usage:        5 bytes
  6016 ;; Hardware stack levels used:    1
  6017 ;; This function calls:
  6018 ;;		Nothing
  6019 ;; This function is called by:
  6020 ;;		_cw_update_config_info
  6021 ;;		_cw_por
  6022 ;; This function uses a non-reentrant model
  6023 ;;
  6024                           
  6025                           
  6026                           ;psect for function _CW_Delay10us
  6027  0106                     _CW_Delay10us:	
  6028                           
  6029                           ;incstack = 0
  6030                           ; Regs used in _CW_Delay10us: [wreg+status,2+status,0]
  6031                           ;CW_Delay10us@us stored from wreg
  6032  0106  00F1               	movwf	CW_Delay10us@us
  6033                           
  6034                           ;CW201x.c: 40: unsigned char a, b;
  6035                           ;CW201x.c: 41: unsigned char i;
  6036                           ;CW201x.c: 42: for(i = 0; i < us; i++)
  6037  0107  01F2               	clrf	CW_Delay10us@i
  6038  0108                     l1858:	
  6039  0108  0871               	movf	CW_Delay10us@us,w
  6040  0109  0272               	subwf	CW_Delay10us@i,w
  6041  010A  1803               	btfsc	3,0
  6042  010B  0008               	return
  6043                           
  6044                           ;CW201x.c: 43: {
  6045                           ;CW201x.c: 44: for(b = 1;b > 0;b --)
  6046  010C  01F4               	clrf	CW_Delay10us@b
  6047  010D  0AF4               	incf	CW_Delay10us@b,f
  6048  010E  0874               	movf	CW_Delay10us@b,w
  6049  010F  1903               	btfsc	3,2
  6050  0110  2922               	goto	l1856
  6051  0111                     l1846:	
  6052                           
  6053                           ;CW201x.c: 45: {
  6054                           ;CW201x.c: 46: for(a = 7;a > 0;a --);
  6055  0111  3007               	movlw	7
  6056  0112  00F0               	movwf	??_CW_Delay10us
  6057  0113  0870               	movf	??_CW_Delay10us,w
  6058  0114  00F3               	movwf	CW_Delay10us@a
  6059  0115  0873               	movf	CW_Delay10us@a,w
  6060  0116  1903               	btfsc	3,2
  6061  0117  291D               	goto	l1854
  6062  0118                     l1852:	
  6063  0118  3001               	movlw	1
  6064  0119  02F3               	subwf	CW_Delay10us@a,f
  6065  011A  0873               	movf	CW_Delay10us@a,w
  6066  011B  1D03               	btfss	3,2
  6067  011C  2918               	goto	l1852
  6068  011D                     l1854:	
  6069  011D  3001               	movlw	1
  6070  011E  02F4               	subwf	CW_Delay10us@b,f
  6071  011F  0874               	movf	CW_Delay10us@b,w
  6072  0120  1D03               	btfss	3,2
  6073  0121  2911               	goto	l1846
  6074  0122                     l1856:	
  6075  0122  3001               	movlw	1
  6076  0123  00F0               	movwf	??_CW_Delay10us
  6077  0124  0870               	movf	??_CW_Delay10us,w
  6078  0125  07F2               	addwf	CW_Delay10us@i,f
  6079  0126  2908               	goto	l1858
  6080  0127                     __end_of_CW_Delay10us:	
  6081                           
  6082                           	psect	text27
  6083  00E5                     __ptext27:	
  6084 ;; *************** function _CW_Delay10ms *****************
  6085 ;; Defined at:
  6086 ;;		line 26 in file "CW201x.c"
  6087 ;; Parameters:    Size  Location     Type
  6088 ;;  c               2    0[COMMON] unsigned int 
  6089 ;; Auto vars:     Size  Location     Type
  6090 ;;  b               1    4[COMMON] unsigned char 
  6091 ;;  a               1    3[COMMON] unsigned char 
  6092 ;;  d               1    0        unsigned char 
  6093 ;; Return value:  Size  Location     Type
  6094 ;;                  1    wreg      void 
  6095 ;; Registers used:
  6096 ;;		wreg, status,2, status,0
  6097 ;; Tracked objects:
  6098 ;;		On entry : 0/0
  6099 ;;		On exit  : 0/0
  6100 ;;		Unchanged: 0/0
  6101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6102 ;;      Params:         2       0       0       0
  6103 ;;      Locals:         2       0       0       0
  6104 ;;      Temps:          1       0       0       0
  6105 ;;      Totals:         5       0       0       0
  6106 ;;Total ram usage:        5 bytes
  6107 ;; Hardware stack levels used:    1
  6108 ;; This function calls:
  6109 ;;		Nothing
  6110 ;; This function is called by:
  6111 ;;		_cw_init
  6112 ;; This function uses a non-reentrant model
  6113 ;;
  6114                           
  6115                           
  6116                           ;psect for function _CW_Delay10ms
  6117  00E5                     _CW_Delay10ms:	
  6118                           
  6119                           ;CW201x.c: 28: unsigned char a, b, d;
  6120                           ;CW201x.c: 29: for (;c>0;c--)
  6121                           
  6122                           ;incstack = 0
  6123                           ; Regs used in _CW_Delay10ms: [wreg+status,2+status,0]
  6124  00E5  0870               	movf	CW_Delay10ms@c,w
  6125  00E6  0471               	iorwf	CW_Delay10ms@c+1,w
  6126  00E7  1903               	btfsc	3,2
  6127  00E8  0008               	return
  6128                           
  6129                           ;CW201x.c: 30: {
  6130                           ;CW201x.c: 31: for(b=95;b>0;b--)
  6131  00E9  305F               	movlw	95
  6132  00EA  00F2               	movwf	??_CW_Delay10ms
  6133  00EB  0872               	movf	??_CW_Delay10ms,w
  6134  00EC  00F4               	movwf	CW_Delay10ms@b
  6135  00ED  0874               	movf	CW_Delay10ms@b,w
  6136  00EE  1903               	btfsc	3,2
  6137  00EF  2901               	goto	l1934
  6138  00F0                     l1924:	
  6139                           
  6140                           ;CW201x.c: 32: {
  6141                           ;CW201x.c: 33: for(a=209;a>0;a--) ;
  6142  00F0  30D1               	movlw	209
  6143  00F1  00F2               	movwf	??_CW_Delay10ms
  6144  00F2  0872               	movf	??_CW_Delay10ms,w
  6145  00F3  00F3               	movwf	CW_Delay10ms@a
  6146  00F4  0873               	movf	CW_Delay10ms@a,w
  6147  00F5  1903               	btfsc	3,2
  6148  00F6  28FC               	goto	l1932
  6149  00F7                     l1930:	
  6150  00F7  3001               	movlw	1
  6151  00F8  02F3               	subwf	CW_Delay10ms@a,f
  6152  00F9  0873               	movf	CW_Delay10ms@a,w
  6153  00FA  1D03               	btfss	3,2
  6154  00FB  28F7               	goto	l1930
  6155  00FC                     l1932:	
  6156  00FC  3001               	movlw	1
  6157  00FD  02F4               	subwf	CW_Delay10ms@b,f
  6158  00FE  0874               	movf	CW_Delay10ms@b,w
  6159  00FF  1D03               	btfss	3,2
  6160  0100  28F0               	goto	l1924
  6161  0101                     l1934:	
  6162  0101  3001               	movlw	1
  6163  0102  02F0               	subwf	CW_Delay10ms@c,f
  6164  0103  3000               	movlw	0
  6165  0104  3BF1               	subwfb	CW_Delay10ms@c+1,f
  6166  0105  28E5               	goto	_CW_Delay10ms
  6167  0106                     __end_of_CW_Delay10ms:	
  6168                           
  6169                           	psect	text28
  6170  000D                     __ptext28:	
  6171 ;; *************** function _SYSTEM_Initialize *****************
  6172 ;; Defined at:
  6173 ;;		line 86 in file "mcc_generated_files/mcc.c"
  6174 ;; Parameters:    Size  Location     Type
  6175 ;;		None
  6176 ;; Auto vars:     Size  Location     Type
  6177 ;;		None
  6178 ;; Return value:  Size  Location     Type
  6179 ;;                  1    wreg      void 
  6180 ;; Registers used:
  6181 ;;		wreg, status,2, status,0, pclath, cstack
  6182 ;; Tracked objects:
  6183 ;;		On entry : 0/0
  6184 ;;		On exit  : 0/0
  6185 ;;		Unchanged: 0/0
  6186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6187 ;;      Params:         0       0       0       0
  6188 ;;      Locals:         0       0       0       0
  6189 ;;      Temps:          0       0       0       0
  6190 ;;      Totals:         0       0       0       0
  6191 ;;Total ram usage:        0 bytes
  6192 ;; Hardware stack levels used:    1
  6193 ;; Hardware stack levels required when called:    1
  6194 ;; This function calls:
  6195 ;;		_EUSART1_Initialize
  6196 ;;		_OSCILLATOR_Initialize
  6197 ;;		_PIN_MANAGER_Initialize
  6198 ;; This function is called by:
  6199 ;;		_main
  6200 ;; This function uses a non-reentrant model
  6201 ;;
  6202                           
  6203                           
  6204                           ;psect for function _SYSTEM_Initialize
  6205  000D                     _SYSTEM_Initialize:	
  6206                           
  6207                           ;mcc.c: 89: PIN_MANAGER_Initialize();
  6208                           
  6209                           ;incstack = 0
  6210                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6211  000D  21E0               	fcall	_PIN_MANAGER_Initialize
  6212                           
  6213                           ;mcc.c: 90: OSCILLATOR_Initialize();
  6214  000E  203F               	fcall	_OSCILLATOR_Initialize
  6215                           
  6216                           ;mcc.c: 91: EUSART1_Initialize();
  6217  000F  2033               	fcall	_EUSART1_Initialize
  6218  0010  0008               	return
  6219  0011                     __end_of_SYSTEM_Initialize:	
  6220                           
  6221                           	psect	text29
  6222  01E0                     __ptext29:	
  6223 ;; *************** function _PIN_MANAGER_Initialize *****************
  6224 ;; Defined at:
  6225 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  6226 ;; Parameters:    Size  Location     Type
  6227 ;;		None
  6228 ;; Auto vars:     Size  Location     Type
  6229 ;;  state           1    0[COMMON] unsigned char 
  6230 ;; Return value:  Size  Location     Type
  6231 ;;                  1    wreg      void 
  6232 ;; Registers used:
  6233 ;;		wreg, status,2, status,0
  6234 ;; Tracked objects:
  6235 ;;		On entry : 0/0
  6236 ;;		On exit  : 0/0
  6237 ;;		Unchanged: 0/0
  6238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6239 ;;      Params:         0       0       0       0
  6240 ;;      Locals:         1       0       0       0
  6241 ;;      Temps:          0       0       0       0
  6242 ;;      Totals:         1       0       0       0
  6243 ;;Total ram usage:        1 bytes
  6244 ;; Hardware stack levels used:    1
  6245 ;; This function calls:
  6246 ;;		Nothing
  6247 ;; This function is called by:
  6248 ;;		_SYSTEM_Initialize
  6249 ;; This function uses a non-reentrant model
  6250 ;;
  6251                           
  6252                           
  6253                           ;psect for function _PIN_MANAGER_Initialize
  6254  01E0                     _PIN_MANAGER_Initialize:	
  6255                           
  6256                           ;pin_manager.c: 56: LATA = 0x00;
  6257                           
  6258                           ;incstack = 0
  6259                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  6260  01E0  0140               	movlb	0	; select bank0
  6261  01E1  0198               	clrf	24	;volatile
  6262                           
  6263                           ;pin_manager.c: 57: LATC = 0x00;
  6264  01E2  019A               	clrf	26	;volatile
  6265                           
  6266                           ;pin_manager.c: 62: TRISA = 0x03;
  6267  01E3  3003               	movlw	3
  6268  01E4  0092               	movwf	18	;volatile
  6269                           
  6270                           ;pin_manager.c: 63: TRISC = 0x22;
  6271  01E5  3022               	movlw	34
  6272  01E6  0094               	movwf	20	;volatile
  6273                           
  6274                           ;pin_manager.c: 68: ANSELC = 0x1D;
  6275  01E7  301D               	movlw	29
  6276  01E8  017E               	movlb	62	; select bank62
  6277  01E9  00CE               	movwf	78	;volatile
  6278                           
  6279                           ;pin_manager.c: 69: ANSELA = 0x37;
  6280  01EA  3037               	movlw	55
  6281  01EB  00B8               	movwf	56	;volatile
  6282                           
  6283                           ;pin_manager.c: 74: WPUA = 0x00;
  6284  01EC  01B9               	clrf	57	;volatile
  6285                           
  6286                           ;pin_manager.c: 75: WPUC = 0x00;
  6287  01ED  01CF               	clrf	79	;volatile
  6288                           
  6289                           ;pin_manager.c: 80: ODCONA = 0x00;
  6290  01EE  01BA               	clrf	58	;volatile
  6291                           
  6292                           ;pin_manager.c: 81: ODCONC = 0x00;
  6293  01EF  01D0               	clrf	80	;volatile
  6294                           
  6295                           ;pin_manager.c: 88: bool state = GIE;
  6296  01F0  3000               	movlw	0
  6297  01F1  1B8B               	btfsc	11,7	;volatile
  6298  01F2  3001               	movlw	1
  6299  01F3  00F0               	movwf	PIN_MANAGER_Initialize@state
  6300                           
  6301                           ;pin_manager.c: 89: GIE = 0;
  6302  01F4  138B               	bcf	11,7	;volatile
  6303                           
  6304                           ;pin_manager.c: 90: PPSLOCK = 0x55;
  6305  01F5  3055               	movlw	85
  6306  01F6  017D               	movlb	61	; select bank61
  6307  01F7  008F               	movwf	15	;volatile
  6308                           
  6309                           ;pin_manager.c: 91: PPSLOCK = 0xAA;
  6310  01F8  30AA               	movlw	170
  6311  01F9  008F               	movwf	15	;volatile
  6312                           
  6313                           ;pin_manager.c: 92: PPSLOCKbits.PPSLOCKED = 0x00;
  6314  01FA  100F               	bcf	15,0	;volatile
  6315                           
  6316                           ;pin_manager.c: 94: RX1DTPPSbits.RX1DTPPS = 0x15;
  6317  01FB  084B               	movf	75,w	;volatile
  6318  01FC  39C0               	andlw	-64
  6319  01FD  3815               	iorlw	21
  6320  01FE  00CB               	movwf	75	;volatile
  6321                           
  6322                           ;pin_manager.c: 95: RC4PPS = 0x0F;
  6323  01FF  300F               	movlw	15
  6324  0200  017E               	movlb	62	; select bank62
  6325  0201  00A4               	movwf	36	;volatile
  6326                           
  6327                           ;pin_manager.c: 97: PPSLOCK = 0x55;
  6328  0202  3055               	movlw	85
  6329  0203  017D               	movlb	61	; select bank61
  6330  0204  008F               	movwf	15	;volatile
  6331                           
  6332                           ;pin_manager.c: 98: PPSLOCK = 0xAA;
  6333  0205  30AA               	movlw	170
  6334  0206  008F               	movwf	15	;volatile
  6335                           
  6336                           ;pin_manager.c: 99: PPSLOCKbits.PPSLOCKED = 0x01;
  6337  0207  140F               	bsf	15,0	;volatile
  6338                           
  6339                           ;pin_manager.c: 101: GIE = state;
  6340  0208  1C70               	btfss	PIN_MANAGER_Initialize@state,0
  6341  0209  2A0C               	goto	u2630
  6342  020A  178B               	bsf	11,7	;volatile
  6343  020B  0008               	return
  6344  020C                     u2630:	
  6345  020C  138B               	bcf	11,7	;volatile
  6346  020D  0008               	return
  6347  020E                     __end_of_PIN_MANAGER_Initialize:	
  6348                           
  6349                           	psect	text30
  6350  003F                     __ptext30:	
  6351 ;; *************** function _OSCILLATOR_Initialize *****************
  6352 ;; Defined at:
  6353 ;;		line 94 in file "mcc_generated_files/mcc.c"
  6354 ;; Parameters:    Size  Location     Type
  6355 ;;		None
  6356 ;; Auto vars:     Size  Location     Type
  6357 ;;		None
  6358 ;; Return value:  Size  Location     Type
  6359 ;;                  1    wreg      void 
  6360 ;; Registers used:
  6361 ;;		wreg, status,2
  6362 ;; Tracked objects:
  6363 ;;		On entry : 0/0
  6364 ;;		On exit  : 0/0
  6365 ;;		Unchanged: 0/0
  6366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6367 ;;      Params:         0       0       0       0
  6368 ;;      Locals:         0       0       0       0
  6369 ;;      Temps:          0       0       0       0
  6370 ;;      Totals:         0       0       0       0
  6371 ;;Total ram usage:        0 bytes
  6372 ;; Hardware stack levels used:    1
  6373 ;; This function calls:
  6374 ;;		Nothing
  6375 ;; This function is called by:
  6376 ;;		_SYSTEM_Initialize
  6377 ;; This function uses a non-reentrant model
  6378 ;;
  6379                           
  6380                           
  6381                           ;psect for function _OSCILLATOR_Initialize
  6382  003F                     _OSCILLATOR_Initialize:	
  6383                           
  6384                           ;mcc.c: 97: OSCCON1 = 0x10;
  6385                           
  6386                           ;incstack = 0
  6387                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6388  003F  3010               	movlw	16
  6389  0040  0151               	movlb	17	; select bank17
  6390  0041  008D               	movwf	13	;volatile
  6391                           
  6392                           ;mcc.c: 99: OSCCON3 = 0x00;
  6393  0042  018F               	clrf	15	;volatile
  6394                           
  6395                           ;mcc.c: 101: OSCEN = 0x00;
  6396  0043  0191               	clrf	17	;volatile
  6397                           
  6398                           ;mcc.c: 103: OSCFRQ = 0x05;
  6399  0044  3005               	movlw	5
  6400  0045  0093               	movwf	19	;volatile
  6401                           
  6402                           ;mcc.c: 105: OSCSTAT = 0x00;
  6403  0046  0190               	clrf	16	;volatile
  6404                           
  6405                           ;mcc.c: 107: OSCTUNE = 0x00;
  6406  0047  0192               	clrf	18	;volatile
  6407  0048                     l60:	
  6408                           ;mcc.c: 110: {
  6409                           
  6410                           ;mcc.c: 109: while(PLLR == 0)
  6411                           
  6412  0048  1810               	btfsc	16,0	;volatile
  6413  0049  0008               	return
  6414  004A  2848               	goto	l60
  6415  004B                     __end_of_OSCILLATOR_Initialize:	
  6416                           
  6417                           	psect	text31
  6418  0033                     __ptext31:	
  6419 ;; *************** function _EUSART1_Initialize *****************
  6420 ;; Defined at:
  6421 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  6422 ;; Parameters:    Size  Location     Type
  6423 ;;		None
  6424 ;; Auto vars:     Size  Location     Type
  6425 ;;		None
  6426 ;; Return value:  Size  Location     Type
  6427 ;;                  1    wreg      void 
  6428 ;; Registers used:
  6429 ;;		wreg
  6430 ;; Tracked objects:
  6431 ;;		On entry : 0/0
  6432 ;;		On exit  : 0/0
  6433 ;;		Unchanged: 0/0
  6434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6435 ;;      Params:         0       0       0       0
  6436 ;;      Locals:         0       0       0       0
  6437 ;;      Temps:          0       0       0       0
  6438 ;;      Totals:         0       0       0       0
  6439 ;;Total ram usage:        0 bytes
  6440 ;; Hardware stack levels used:    1
  6441 ;; This function calls:
  6442 ;;		Nothing
  6443 ;; This function is called by:
  6444 ;;		_SYSTEM_Initialize
  6445 ;; This function uses a non-reentrant model
  6446 ;;
  6447                           
  6448                           
  6449                           ;psect for function _EUSART1_Initialize
  6450  0033                     _EUSART1_Initialize:	
  6451                           
  6452                           ;eusart1.c: 60: BAUD1CON = 0x08;
  6453                           
  6454                           ;incstack = 0
  6455                           ; Regs used in _EUSART1_Initialize: [wreg]
  6456  0033  3008               	movlw	8
  6457  0034  0142               	movlb	2	; select bank2
  6458  0035  009F               	movwf	31	;volatile
  6459                           
  6460                           ;eusart1.c: 63: RC1STA = 0x90;
  6461  0036  3090               	movlw	144
  6462  0037  009D               	movwf	29	;volatile
  6463                           
  6464                           ;eusart1.c: 66: TX1STA = 0x24;
  6465  0038  3024               	movlw	36
  6466  0039  009E               	movwf	30	;volatile
  6467                           
  6468                           ;eusart1.c: 69: SP1BRGL = 0x40;
  6469  003A  3040               	movlw	64
  6470  003B  009B               	movwf	27	;volatile
  6471                           
  6472                           ;eusart1.c: 72: SP1BRGH = 0x03;
  6473  003C  3003               	movlw	3
  6474  003D  009C               	movwf	28	;volatile
  6475  003E  0008               	return
  6476  003F                     __end_of_EUSART1_Initialize:	
  6477                           
  6478                           	psect	text32
  6479  0021                     __ptext32:	
  6480 ;; *************** function _EUSART1_Write *****************
  6481 ;; Defined at:
  6482 ;;		line 96 in file "mcc_generated_files/eusart1.c"
  6483 ;; Parameters:    Size  Location     Type
  6484 ;;  txData          1    wreg     unsigned char 
  6485 ;; Auto vars:     Size  Location     Type
  6486 ;;  txData          1    0[COMMON] unsigned char 
  6487 ;; Return value:  Size  Location     Type
  6488 ;;                  1    wreg      void 
  6489 ;; Registers used:
  6490 ;;		wreg
  6491 ;; Tracked objects:
  6492 ;;		On entry : 0/0
  6493 ;;		On exit  : 0/0
  6494 ;;		Unchanged: 0/0
  6495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6496 ;;      Params:         0       0       0       0
  6497 ;;      Locals:         1       0       0       0
  6498 ;;      Temps:          0       0       0       0
  6499 ;;      Totals:         1       0       0       0
  6500 ;;Total ram usage:        1 bytes
  6501 ;; Hardware stack levels used:    1
  6502 ;; This function calls:
  6503 ;;		Nothing
  6504 ;; This function is called by:
  6505 ;;		_main
  6506 ;; This function uses a non-reentrant model
  6507 ;;
  6508                           
  6509                           
  6510                           ;psect for function _EUSART1_Write
  6511  0021                     _EUSART1_Write:	
  6512                           
  6513                           ;incstack = 0
  6514                           ; Regs used in _EUSART1_Write: [wreg]
  6515                           ;EUSART1_Write@txData stored from wreg
  6516  0021  00F0               	movwf	EUSART1_Write@txData
  6517  0022                     l31:	
  6518                           ;eusart1.c: 99: {
  6519                           
  6520                           ;eusart1.c: 98: while(0 == PIR3bits.TX1IF)
  6521                           
  6522  0022  014E               	movlb	14	; select bank14
  6523  0023  1E0F               	btfss	15,4	;volatile
  6524  0024  2822               	goto	l31
  6525                           
  6526                           ;eusart1.c: 100: }
  6527                           ;eusart1.c: 102: TX1REG = txData;
  6528  0025  0870               	movf	EUSART1_Write@txData,w
  6529  0026  0142               	movlb	2	; select bank2
  6530  0027  009A               	movwf	26	;volatile
  6531  0028  0008               	return
  6532  0029                     __end_of_EUSART1_Write:	
  6533  007E                     btemp	set	126	;btemp
  6534  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        128
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     44      62
    BANK1            80      0      64
    BANK2            80      0      64

Pointer List with Targets:

    cw_write@w_pdata	PTR unsigned char  size(1) Largest target is 1
		 -> cw_por@reset_val(BANK0[1]), cw_init@reg_val(BANK0[1]), cw_update_config_info@reset_val(BANK0[1]), cw_update_config_info@reg_val(BANK0[1]), 

    cw_read_word@r_pdata	PTR unsigned char  size(1) Largest target is 2
		 -> cw_get_vol@reg_val(BANK0[2]), 

    cw_read@r_pdata	PTR unsigned char  size(1) Largest target is 1
		 -> cw_get_capacity@reg_val(BANK0[1]), cw_init@reg_val(BANK0[1]), cw_update_config_info@reg_val(BANK0[1]), 


Critical Paths under _main in COMMON

    _cw_get_vol->___lldiv
    _cw_read_word->_wait_r_ack
    _sn_ack->_I2C_Delay10us
    ___lldiv->___lmul
    _cw_get_capacity->_cw_read
    _cw_por->_cw_write
    _cw_init->_cw_read
    _cw_init->_cw_write
    _cw_update_config_info->_cw_read
    _cw_update_config_info->_cw_write
    _cw_write->_wait_r_ack
    _cw_read->_wait_r_ack
    _write_byte->_I2C_Delay10us
    _wait_r_ack->_r_ack
    _stop->_I2C_Delay10us
    _r_ack->_I2C_Delay10us
    _start->_I2C_Delay10us
    _s_ack->_I2C_Delay10us
    _read_byte->_I2C_Delay10us
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize

Critical Paths under _main in BANK0

    _cw_bat_work->_update_capacity
    _update_vol->_cw_get_vol
    _cw_get_vol->___lldiv
    _cw_read_word->_wait_r_ack
    _update_capacity->_cw_get_capacity
    _cw_get_capacity->_cw_por
    _cw_por->_cw_init
    _cw_bat_init->_cw_init
    _cw_init->_cw_update_config_info
    _cw_update_config_info->_cw_read
    _cw_update_config_info->_cw_write
    _cw_write->_wait_r_ack
    _cw_read->_wait_r_ack

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   23861
                                             42 BANK0      2     2      0
                      _EUSART1_Write
                  _SYSTEM_Initialize
                        _cw_bat_init
                        _cw_bat_work
                              _delay
 ---------------------------------------------------------------------------------
 (1) _delay                                                6     6      0     138
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _cw_bat_work                                          0     0      0   15302
                    _update_capacity
                  _update_usb_online
                         _update_vol
 ---------------------------------------------------------------------------------
 (2) _update_vol                                           2     2      0    2726
                                             35 BANK0      2     2      0
                         _cw_get_vol
 ---------------------------------------------------------------------------------
 (3) _cw_get_vol                                          22    20      2    2659
                                             13 BANK0     22    20      2
                            ___lldiv
                             ___lmul
                       _cw_read_word
 ---------------------------------------------------------------------------------
 (4) _cw_read_word                                         7     4      3    1687
                                              4 BANK0      7     4      3
                          _read_byte
                              _s_ack
                             _sn_ack
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (5) _sn_ack                                               0     0      0     138
                      _I2C_Delay10us
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     220
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     290
                                             12 COMMON     1     1      0
                                              0 BANK0     13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _update_usb_online                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _update_capacity                                      3     3      0   12576
                                             39 BANK0      3     3      0
                    _cw_get_capacity
 ---------------------------------------------------------------------------------
 (3) _cw_get_capacity                                     13    11      2   12487
                                             26 BANK0     13    11      2
                             _cw_por
                            _cw_read
 ---------------------------------------------------------------------------------
 (4) _cw_por                                               7     5      2   10055
                                             19 BANK0      7     5      2
                       _CW_Delay10us
                            _cw_init
                           _cw_write
 ---------------------------------------------------------------------------------
 (1) _cw_bat_init                                          3     3      0    8330
                                             19 BANK0      3     3      0
                            _cw_init
 ---------------------------------------------------------------------------------
 (5) _cw_init                                              6     6      0    8261
                                             13 BANK0      6     6      0
                       _CW_Delay10ms
                            _cw_read
              _cw_update_config_info
                           _cw_write
 ---------------------------------------------------------------------------------
 (6) _cw_update_config_info                                6     6      0    4045
                                              7 BANK0      6     6      0
                       _CW_Delay10us
                            _cw_read
                           _cw_write
 ---------------------------------------------------------------------------------
 (5) _cw_write                                             4     1      3    1516
                                             13 COMMON     1     1      0
                                              4 BANK0      3     0      3
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (4) _cw_read                                              4     2      2    1842
                                             13 COMMON     1     1      0
                                              4 BANK0      3     1      2
                          _read_byte
                              _s_ack
                              _start
                               _stop
                         _wait_r_ack
                         _write_byte
 ---------------------------------------------------------------------------------
 (5) _write_byte                                           3     3      0     229
                                              5 COMMON     3     3      0
                      _I2C_Delay10us
 ---------------------------------------------------------------------------------
 (5) _wait_r_ack                                           6     4      2     391
                                             11 COMMON     2     0      2
                                              0 BANK0      4     4      0
                              _r_ack
                               _stop
 ---------------------------------------------------------------------------------
 (6) _stop                                                 0     0      0     138
                      _I2C_Delay10us
 ---------------------------------------------------------------------------------
 (6) _r_ack                                                6     4      2     161
                                              5 COMMON     6     4      2
                      _I2C_Delay10us
 ---------------------------------------------------------------------------------
 (5) _start                                                0     0      0     138
                      _I2C_Delay10us
 ---------------------------------------------------------------------------------
 (5) _s_ack                                                0     0      0     138
                      _I2C_Delay10us
 ---------------------------------------------------------------------------------
 (5) _read_byte                                            3     3      0     252
                                              5 COMMON     3     3      0
                      _I2C_Delay10us
 ---------------------------------------------------------------------------------
 (6) _I2C_Delay10us                                        5     5      0     138
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (7) _CW_Delay10us                                         5     5      0     138
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (6) _CW_Delay10ms                                         6     4      2     201
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      23
                 _EUSART1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Write                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART1_Write
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _cw_bat_init
     _cw_init
       _CW_Delay10ms
       _cw_read
         _read_byte
           _I2C_Delay10us
         _s_ack
           _I2C_Delay10us
         _start
           _I2C_Delay10us
         _stop
           _I2C_Delay10us
         _wait_r_ack
           _r_ack
             _I2C_Delay10us
           _stop
             _I2C_Delay10us
         _write_byte
           _I2C_Delay10us
       _cw_update_config_info
         _CW_Delay10us
         _cw_read
           _read_byte
             _I2C_Delay10us
           _s_ack
             _I2C_Delay10us
           _start
             _I2C_Delay10us
           _stop
             _I2C_Delay10us
           _wait_r_ack
             _r_ack
               _I2C_Delay10us
             _stop
               _I2C_Delay10us
           _write_byte
             _I2C_Delay10us
         _cw_write
           _start
             _I2C_Delay10us
           _stop
             _I2C_Delay10us
           _wait_r_ack
             _r_ack
               _I2C_Delay10us
             _stop
               _I2C_Delay10us
           _write_byte
             _I2C_Delay10us
       _cw_write
         _start
           _I2C_Delay10us
         _stop
           _I2C_Delay10us
         _wait_r_ack
           _r_ack
             _I2C_Delay10us
           _stop
             _I2C_Delay10us
         _write_byte
           _I2C_Delay10us
   _cw_bat_work
     _update_capacity
       _cw_get_capacity
         _cw_por
           _CW_Delay10us
           _cw_init
             _CW_Delay10ms
             _cw_read
               _read_byte
                 _I2C_Delay10us
               _s_ack
                 _I2C_Delay10us
               _start
                 _I2C_Delay10us
               _stop
                 _I2C_Delay10us
               _wait_r_ack
                 _r_ack
                   _I2C_Delay10us
                 _stop
                   _I2C_Delay10us
               _write_byte
                 _I2C_Delay10us
             _cw_update_config_info
               _CW_Delay10us
               _cw_read
                 _read_byte
                   _I2C_Delay10us
                 _s_ack
                   _I2C_Delay10us
                 _start
                   _I2C_Delay10us
                 _stop
                   _I2C_Delay10us
                 _wait_r_ack
                   _r_ack
                     _I2C_Delay10us
                   _stop
                     _I2C_Delay10us
                 _write_byte
                   _I2C_Delay10us
               _cw_write
                 _start
                   _I2C_Delay10us
                 _stop
                   _I2C_Delay10us
                 _wait_r_ack
                   _r_ack
                     _I2C_Delay10us
                   _stop
                     _I2C_Delay10us
                 _write_byte
                   _I2C_Delay10us
             _cw_write
               _start
                 _I2C_Delay10us
               _stop
                 _I2C_Delay10us
               _wait_r_ack
                 _r_ack
                   _I2C_Delay10us
                 _stop
                   _I2C_Delay10us
               _write_byte
                 _I2C_Delay10us
           _cw_write
             _start
               _I2C_Delay10us
             _stop
               _I2C_Delay10us
             _wait_r_ack
               _r_ack
                 _I2C_Delay10us
               _stop
                 _I2C_Delay10us
             _write_byte
               _I2C_Delay10us
         _cw_read
           _read_byte
             _I2C_Delay10us
           _s_ack
             _I2C_Delay10us
           _start
             _I2C_Delay10us
           _stop
             _I2C_Delay10us
           _wait_r_ack
             _r_ack
               _I2C_Delay10us
             _stop
               _I2C_Delay10us
           _write_byte
             _I2C_Delay10us
     _update_usb_online
     _update_vol
       _cw_get_vol
         ___lldiv
           ___lmul (ARG)
         ___lmul
         _cw_read_word
           _read_byte
             _I2C_Delay10us
           _s_ack
             _I2C_Delay10us
           _sn_ack
             _I2C_Delay10us
           _start
             _I2C_Delay10us
           _stop
             _I2C_Delay10us
           _wait_r_ack
             _r_ack
               _I2C_Delay10us
             _stop
               _I2C_Delay10us
           _write_byte
             _I2C_Delay10us
   _delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2C      3E       5       77.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      40       7       80.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      40       9       80.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
ABS                  0      0      CC      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      CC      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Mon Aug 28 14:28:15 2017

                    __CFG_CP$OFF 0000                               l31 0022                               l60 0048  
                _update_capacity 0148                      __CFG_LVP$ON 0000                              l262 07D0  
                            l256 0799                              l249 0777                              l273 0566  
                            l274 0572                              l275 057E                              l188 04D7  
                            l199 0628                              l399 0195                              _GIE 005F  
                   __CFG_BORV$LO 0000                              wreg 0009                    __CFG_BBEN$OFF 0000  
                   __CFG_ZCD$OFF 0000                    ?_cw_read_word 0024                    CW_Delay10ms@a 0073  
                  CW_Delay10ms@b 0074                             l2102 064F                             l2110 065F  
                  CW_Delay10ms@c 0070                             l2016 04ED                             l2120 0671  
                           l2202 03A2                             l2028 0503                             l2060 05FE  
                           l2052 05ED                             l2212 0408                             l2038 0517  
                           l2126 0676                             l2072 0617                             l2320 06FB  
                           l2224 0424                             l2138 068D                             l2146 0699  
                           l2306 06E6                             l2314 06EC                             l2250 0220  
                           l2234 044D                             l2218 0416                             l2156 06AE  
                           l2180 0377                             l2412 07DC                             l2332 071C  
                           l2324 0709                             l2308 06E7                             l2236 0426  
                           l2094 063D                             l2406 07D5                             l2334 0720  
                           l2246 0216                             l2238 0453                             l1720 0139  
                           l2088 0638                             l2192 038F                             l2328 0713  
                           l2264 03B6                             l1722 013E                             l1714 0132  
                           l2274 03E4                             l2266 03C4                             l2434 054C  
                           l2426 0534                             l1724 0143                             l1900 028B  
                           l2380 0792                             l2348 074A                             l2356 075A  
                           l2292 06C7                             l1726 0129                             l2382 079B  
                           l2518 0031                             l2278 03EF                             l2446 058D  
                           l2542 01D1                             l2552 00CC                             l2376 078C  
                           l2544 01D6                             l2536 01CA                             l1930 00F7  
                           l1762 024B                             l2386 07AB                             l2546 01DB  
                           l1932 00FC                             l1924 00F0                             l1852 0118  
                           l1828 01A7                             l1836 01B2                             l1908 029C  
                           l2388 07AD                             l1934 0101                             l1854 011D  
                           l1846 0111                             l2558 00DB                             l1856 0122  
                           l1776 0260                             l1872 02BF                             l1960 047B  
                           l1858 0108                             l1778 026C                             l1866 02B1  
                           l1970 0495                             l1954 0476                             l1980 04A2  
                           l1948 046D                             l1878 02CD                             l1894 027E  
                           l1974 049D                             l1994 04BE                             l1988 04B4  
                           l1998 04C6                    CW_Delay10us@a 0073                    CW_Delay10us@b 0074  
                  CW_Delay10us@i 0072                             u2105 0446                             u2115 042F  
                           u2205 03D9                             _LATA 0018                             u2215 03E5  
                           u2135 0221                             _LATC 001A                             u2145 0228  
                           u2175 03B9                             u2425 0766                             u2195 03C5  
                           u2605 056C                             u2630 020C                             u2375 0730  
                           u2615 0578                             u2705 00AA                             u2495 07A4  
                           u2735 01C1                             u2675 0159                             u2685 0162  
                           _PLLR 4480                             _WPUA 1F39                             _WPUC 1F4F  
                  _EUSART1_Write 0021                             _main 0085                             fsr0h 0005  
                           fsr1h 0007                             indf0 0000                             fsr0l 0004  
                           indf1 0001                             fsr1l 0006                             btemp 007E  
                           _stop 0075           __size_of_I2C_Delay10us 0021                    __CFG_BOREN$ON 0000  
                           start 0002                    __CFG_CSWEN$ON 0000                 ?_cw_get_capacity 003A  
     update_capacity@cw_capacity 0048   __size_of_OSCILLATOR_Initialize 000C    __end_of_OSCILLATOR_Initialize 004B  
          _cw_update_config_info 0459                            ?_main 0070                    __CFG_WDTE$OFF 0000  
                 CW_Delay10us@us 0071                  __end_of___lldiv 03F8                            ?_stop 0070  
                          _OSCEN 0891                            _TRISA 0012                            _TRISC 0014  
            ___lmul@multiplicand 0074                   __CFG_FCMEN$OFF 0000                    __CFG_WRTB$OFF 0000  
                  __CFG_WRTC$OFF 0000                  __end_of_cw_init 06B0                  __end_of_cw_read 02DB  
                 ??_cw_read_word 0027                            _delay 01B4                            _r_ack 00B1  
                          _s_ack 0058                            _start 004B                   ?_EUSART1_Write 0070  
                          status 0003                            wtemp0 007E                   __CFG_MCLRE$OFF 0000  
        __end_of_update_capacity 0169                  __initialization 07E4       __end_of_EUSART1_Initialize 003F  
                   __end_of_main 009A                     __end_of_stop 0085                   __CFG_SAFEN$OFF 0000  
                 cw_bat_init@ret 0035                           ??_main 004A                    _I2C_Delay10us 0127  
                         ??_stop 0075                   I2C_Delay10us@a 0073                   I2C_Delay10us@b 0074  
                 I2C_Delay10us@i 0072                           ?_delay 0070                           ?_r_ack 0075  
                         ?_s_ack 0070                 cw_read@point_reg 0026                           _CHARGE 005A  
                         _ANSELA 1F38                           _ANSELC 1F4E                           ?_start 0070  
                         _RC1REG 0119                           _RC1STA 011D                           _RC4PPS 1F24  
                         _ODCONA 1F3A                           _ODCONC 1F50                   __CFG_WDTCCS$SC 0000  
                         _OSCFRQ 0893                           _TX1REG 011A                           _TX1STA 011E  
                cw_write@w_pdata 0024                   __CFG_PWRTE$OFF 0000              _cw_get_capacity$262 003E  
            _cw_get_capacity$263 0040                    cw_get_vol@F83 0052             __size_of_cw_bat_init 001B  
           __size_of_cw_bat_work 0004                           ___lmul 020E                    cw_get_vol@ret 0034  
                 __CFG_STVREN$ON 0000                        ??___lldiv 007C                 __end_of_cw_write 02A1  
                         _cw_bat 004C                           _cw_por 035B           ?_cw_update_config_info 0070  
                         delay@a 0073                           delay@b 0074                           delay@c 0071  
                         _sn_ack 0066                   ?_I2C_Delay10us 0070                        ??_cw_init 002D  
                      ??_cw_read 007D                    ?_CW_Delay10ms 0070                    ?_CW_Delay10us 0070  
                ??_EUSART1_Write 0070                _SYSTEM_Initialize 000D          __end_of__initialization 07FE  
             ?_SYSTEM_Initialize 0070             _no_charger_full_jump 0058                _update_usb_online 0029  
               ?_update_capacity 0070                cw_get_vol@ad_buff 0041                   __pcstackCOMMON 0070  
                   __pidataBANK1 031B                     __pidataBANK2 02DB               ?_update_usb_online 0070  
            ??_SYSTEM_Initialize 0071                    __end_of_delay 01E0             __end_of_cw_read_word 0459  
                  __end_of_r_ack 00CA                    __end_of_s_ack 0066                    __end_of_start 0058  
                 ??_CW_Delay10ms 0072              ??_update_usb_online 0070                   ??_CW_Delay10us 0070  
              cw_get_vol@reg_val 0036                          ??_delay 0070                  cw_bat_init@loop 0034  
                        ??_r_ack 0077                          ??_s_ack 0075        __end_of_SYSTEM_Initialize 0011  
                        ??_start 0075                       __pbssBANK0 004C                  I2C_Delay10us@us 0071  
      __end_of_update_usb_online 0033               __size_of_read_byte 0026                       __pmaintext 0085  
                        ?___lmul 0070                  __CFG_PPS1WAY$ON 0000                  ??_I2C_Delay10us 0070  
                        ?_cw_por 0033                   ___lmul@product 0078                          ?_sn_ack 0070  
                        _SP1BRGH 011C                          _SP1BRGL 011B                          _OSCCON1 088D  
                        _OSCCON3 088F                          _OSCSTAT 0890                          _OSCTUNE 0892  
                        _PPSLOCK 1E8F                       _cw_get_vol 0519                        ?_cw_write 0024  
           update_vol@cw_voltage 0043                  __size_of___lmul 002F                          ___lldiv 03A5  
                __size_of_cw_por 004A                  __size_of_sn_ack 000F                          __ptext1 01B4  
                        __ptext2 0011                          __ptext3 009A                          __ptext4 0519  
                        __ptext5 03F8                          __ptext6 0066                          __ptext7 020E  
                        __ptext8 03A5                          __ptext9 0029                          _cw_init 05DA  
                        _cw_read 02A1                  __CFG_WRTAPP$OFF 0000            _OSCILLATOR_Initialize 003F  
              __end_of_read_byte 01B4               _EUSART1_Initialize 0033         __size_of_cw_get_capacity 0134  
       ??_PIN_MANAGER_Initialize 0070                  __CFG_WRTSAF$OFF 0000       __size_of_SYSTEM_Initialize 0004  
                        clrloop0 0016                          main@ret 004B             end_of_initialization 07FE  
               write_byte@w_data 0076              ?_EUSART1_Initialize 0070                       ??_cw_write 007D  
                        init_ram 001B                          initloop 001C       __size_of_update_usb_online 000A  
           __end_of_CW_Delay10ms 0106             __end_of_CW_Delay10us 0127            __size_of_cw_read_word 0061  
                ___lldiv@divisor 0020                  cw_por@reset_val 0037                  ___lldiv@counter 002C  
                     _reset_loop 005C     cw_update_config_info@reg_val 002C          ??_cw_update_config_info 0027  
                    wait_r_ack@i 0022                       _wait_r_ack 023D             ??_EUSART1_Initialize 0070  
          __CFG_WDTCPS$WDTCPS_31 0000                        _PORTCbits 000E         cw_update_config_info@ret 0029  
                      _TRISCbits 0014                       _update_vol 009A                      ?_cw_get_vol 002D  
            EUSART1_Write@txData 0070                 __CFG_FEXTOSC$OFF 0000                     _cw_read_word 03F8  
                 cw_init@reg_val 0032                    ??_cw_bat_init 0033                    ??_cw_bat_work 007E  
                     cw_init@ret 0030                   cw_read@r_pdata 0024               cw_get_vol@ad_value 003C  
                 __end_of___lmul 023D                       _write_byte 0169                   __end_of_cw_por 03A5  
         ?_OSCILLATOR_Initialize 0070    cw_get_capacity@allow_capacity 0045                   __end_of_sn_ack 0075  
            start_initialization 07E4  __size_of_PIN_MANAGER_Initialize 002E            __end_of_EUSART1_Write 0029  
     cw_get_capacity@cw_capacity 0046                ??_cw_get_capacity 003C                 __CFG_LPBOREN$OFF 0000  
                       ??___lmul 0078              __end_of_cw_bat_init 00E5              __size_of_cw_get_vol 00C1  
                    ?_wait_r_ack 007B              __end_of_cw_bat_work 0015                      __pdataBANK1 00A0  
                    __pdataBANK2 0120                         ??_cw_por 0035                         ??_sn_ack 0075  
                     read_byte@i 0076         __size_of_update_capacity 0021           cw_update_config_info@i 002B  
         cw_get_capacity@reg_val 0042                        ___latbits 0000                    __pcstackBANK0 0020  
                    ?_update_vol 0070            __size_of_CW_Delay10ms 0021            __size_of_CW_Delay10us 0021  
      _allow_charger_always_zero 0054                __size_of_cw_write 0032           cw_get_vol@ad_value_max 003A  
         cw_get_vol@ad_value_min 0038              cw_read_word@r_pdata 0024           _PIN_MANAGER_Initialize 01E0  
                       ?___lldiv 0020                      ?_write_byte 0070            cw_read_word@point_reg 0029  
          __end_of_I2C_Delay10us 0148                         ?_cw_init 0070                         ?_cw_read 0024  
                       _BAUD1CON 011F                     _CW_Delay10ms 00E5                     _CW_Delay10us 0106  
                 __size_of_delay 002C             __CFG_RSTOSC$HFINTPLL 0000                   __size_of_r_ack 0019  
                 __size_of_s_ack 000E                        _read_byte 018E                   __size_of_start 000D  
            __size_of_wait_r_ack 0032                         _LATCbits 001A                        clear_ram0 0015  
                    _cw_bat_init 00CA                      _cw_bat_work 0011                         _PIR3bits 070F  
              __CFG_BBSIZE$BB512 0000              __size_of_update_vol 0017   __size_of_cw_update_config_info 00C0  
  __end_of_cw_update_config_info 0519                     _RX1DTPPSbits 1ECB                      write_byte@i 0077  
                   ??_cw_get_vol 002F                ??_update_capacity 0047                        cw_por@ret 0038  
              ___lmul@multiplier 0070                       ?_read_byte 0070                cw_write@point_reg 007D  
            __size_of_write_byte 0025                  read_byte@r_data 0077          ??_OSCILLATOR_Initialize 0070  
             __end_of_cw_get_vol 05DA                 __size_of___lldiv 0053      __size_of_EUSART1_Initialize 000C  
                _cw_get_capacity 06B0                 __size_of_cw_init 00D6                 __size_of_cw_read 003A  
             _cw_bat_config_info 0120               cw_read_word@length 0025                         __ptext10 0148  
                       __ptext11 06B0                         __ptext20 0075                         __ptext12 035B  
                       __ptext21 00B1                         __ptext13 00CA                         __ptext30 003F  
                       __ptext22 004B                         __ptext14 05DA                         __ptext31 0033  
                       __ptext23 0058                         __ptext15 0459                         __ptext32 0021  
                       __ptext24 018E                         __ptext16 026F                         __ptext25 0127  
                       __ptext17 02A1                         __ptext26 0106                         __ptext18 0169  
                       __ptext27 00E5                         __ptext19 023D                         __ptext28 000D  
                       __ptext29 01E0                         _cw_write 026F            _allow_no_charger_full 0056  
             cw_get_capacity@ret 0043                    __size_of_main 0015                    __size_of_stop 0010  
           __CFG_WDTCWS$WDTCWS_7 0000                       _RC1STAbits 011D                     ??_wait_r_ack 007D  
                       cw_init@i 002F   cw_update_config_info@reset_val 0028      PIN_MANAGER_Initialize@state 0070  
                       r_ack@ack 0079                    wait_r_ack@ack 0020                     ??_update_vol 007D  
                    ??_read_byte 0075                cw_read_word@count 002A               __end_of_wait_r_ack 026F  
               ___lldiv@dividend 0024          ?_PIN_MANAGER_Initialize 0070                __CFG_CLKOUTEN$OFF 0000  
                    _PPSLOCKbits 1E8F         CW201x@cw_bat_config_info 00A0                    _if_quickstart 005D  
        __end_of_cw_get_capacity 07E4               __end_of_update_vol 00B1           cw_get_vol@get_ad_times 0040  
                   ??_write_byte 0075           __size_of_EUSART1_Write 0008                 ___lldiv@quotient 0028  
 __end_of_PIN_MANAGER_Initialize 020E               __end_of_write_byte 018E                     ?_cw_bat_init 0070  
                   ?_cw_bat_work 0070  
